window.__require = function e(t, n, r) {
  function s(o, u) {
    if (!n[o]) {
      if (!t[o]) {
        var b = o.split("/");
        b = b[b.length - 1];
        if (!t[b]) {
          var a = "function" == typeof __require && __require;
          if (!u && a) return a(b, !0);
          if (i) return i(b, !0);
          throw new Error("Cannot find module '" + o + "'");
        }
        o = b;
      }
      var f = n[o] = {
        exports: {}
      };
      t[o][0].call(f.exports, function(e) {
        var n = t[o][1][e];
        return s(n || e);
      }, f, f.exports, e, t, n, r);
    }
    return n[o].exports;
  }
  var i = "function" == typeof __require && __require;
  for (var o = 0; o < r.length; o++) s(r[o]);
  return s;
}({
  Alert: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "913a2P24IlMlLnSmVrkC3Pk", "Alert");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AlertParam = exports.AlertModalType = exports.AlertButton = void 0;
    var LocalStorageUtil_1 = require("../../util/LocalStorageUtil");
    var LayerManager_1 = require("../../manager/LayerManager");
    var BaseComponent_1 = require("../base/BaseComponent");
    var UIDefine_1 = require("../../common/init/UIDefine");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AlertButton;
    (function(AlertButton) {
      AlertButton[AlertButton["OK"] = 1] = "OK";
      AlertButton[AlertButton["CANCEL"] = 2] = "CANCEL";
      AlertButton[AlertButton["OK_CANCEL"] = 3] = "OK_CANCEL";
      AlertButton[AlertButton["YES"] = 4] = "YES";
      AlertButton[AlertButton["NO"] = 8] = "NO";
      AlertButton[AlertButton["YES_NO"] = 12] = "YES_NO";
      AlertButton[AlertButton["CHECK"] = 16] = "CHECK";
    })(AlertButton = exports.AlertButton || (exports.AlertButton = {}));
    var Alert = function(_super) {
      __extends(Alert, _super);
      function Alert() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.richtextContent = null;
        _this.textTitle = null;
        _this.nodeLayout = null;
        _this.nodeCheck = null;
        _this.toggleCheck = null;
        _this.textCheck = null;
        _this.nodeBtns = null;
        _this.btnOk = null;
        _this.textOk = null;
        _this.btnCancel = null;
        _this.textCancel = null;
        _this.btnYes = null;
        _this.textYes = null;
        _this.btnNo = null;
        _this.textNo = null;
        _this._buttonFlags = AlertButton.OK;
        return _this;
      }
      Alert_1 = Alert;
      Alert.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.stringOk && (this.textOk.string = this.stringOk);
        this.stringCancel && (this.textCancel.string = this.stringCancel);
        this.stringNo && (this.textNo.string = this.stringNo);
        this.stringYes && (this.textYes.string = this.stringYes);
        this.stringCheck && (this.textCheck.string = this.stringCheck);
      };
      Alert.prototype.addUIListener = function() {
        this.btnNo.node.on("click", this.onClickBtnNo, this);
        this.btnYes.node.on("click", this.onClickBtnYes, this);
        this.btnCancel.node.on("click", this.onClickBtnCancel, this);
        this.btnOk.node.on("click", this.onClickBtnOk, this);
        this.toggleCheck.node.on("toggle", this.onToggleCheckChanged, this);
        this.nodeLayout.on(cc.Node.EventType.SIZE_CHANGED, this.onLayoutSizeChanged, this);
        this.textCheck.node.on(cc.Node.EventType.TOUCH_END, this.onClickCheckText, this);
      };
      Alert.prototype.removeUIListener = function() {
        this.btnNo.node.off("click", this.onClickBtnNo, this);
        this.btnYes.node.off("click", this.onClickBtnYes, this);
        this.btnCancel.node.off("click", this.onClickBtnCancel, this);
        this.btnOk.node.off("click", this.onClickBtnOk, this);
        this.toggleCheck.node.off("toggle", this.onToggleCheckChanged, this);
      };
      Alert.prototype.onModalClick = function() {
        this.modalClickable && (this.btnCancel.node.active ? this.onClickBtnCancel() : this.btnNo.node.active ? this.onClickBtnNo() : this.btnOk.node.active ? this.onClickBtnOk() : this.btnYes.node.active && this.onClickBtnYes());
      };
      Alert.prototype.onClickCheckText = function() {
        this.checked = !this.checked;
      };
      Alert.prototype.onLayoutSizeChanged = function() {
        this.node.height = this.nodeLayout.height + 200;
      };
      Alert.prototype.onClickBtnNo = function() {
        this.invokeCloseHandler(AlertButton.NO | this.checkFlag);
      };
      Alert.prototype.onClickBtnYes = function() {
        this.invokeCloseHandler(AlertButton.YES | this.checkFlag);
      };
      Alert.prototype.onClickBtnCancel = function() {
        this.invokeCloseHandler(AlertButton.CANCEL | this.checkFlag);
      };
      Alert.prototype.onClickBtnOk = function() {
        this.invokeCloseHandler(AlertButton.OK | this.checkFlag);
      };
      Alert.prototype.onToggleCheckChanged = function(toggle) {
        this._checked = toggle.isChecked;
      };
      Object.defineProperty(Alert.prototype, "stringOk", {
        get: function() {
          return this._stringOk;
        },
        set: function(v) {
          this._stringOk = v;
          this.textOk && (this.textOk.string = v);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Alert.prototype, "stringCancel", {
        get: function() {
          return this._stringCancel;
        },
        set: function(v) {
          this._stringCancel = v;
          this.textCancel && (this.textCancel.string = v);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Alert.prototype, "stringYes", {
        get: function() {
          return this._stringYes;
        },
        set: function(v) {
          this._stringYes = v;
          this.textYes && (this.textYes.string = v);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Alert.prototype, "stringNo", {
        get: function() {
          return this._stringNo;
        },
        set: function(v) {
          this._stringNo = v;
          this.textNo && (this.textNo.string = v);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Alert.prototype, "stringTitle", {
        get: function() {
          return this._stringTitle;
        },
        set: function(v) {
          this._stringTitle = v;
          this.textTitle && (this.textTitle.string = v);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Alert.prototype, "stringContent", {
        get: function() {
          return this._stringContent;
        },
        set: function(v) {
          this._stringContent = v;
          this.richtextContent && (this.richtextContent.string = v);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Alert.prototype, "stringCheck", {
        get: function() {
          return this._stringCheck;
        },
        set: function(v) {
          this._stringCheck = v;
          this.textCheck && (this.textCheck.string = v);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Alert.prototype, "checked", {
        get: function() {
          return this._checked;
        },
        set: function(v) {
          this._checked = v;
          this.toggleCheck && (this.toggleCheck.isChecked = v);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Alert.prototype, "defaultChecked", {
        get: function() {
          return this._defaultChecked;
        },
        set: function(v) {
          this._defaultChecked = v;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Alert.prototype, "modalClickable", {
        get: function() {
          return this._modalClickable;
        },
        set: function(v) {
          this._modalClickable = v;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Alert.prototype, "buttonFlags", {
        get: function() {
          return this._buttonFlags;
        },
        set: function(v) {
          this._buttonFlags = v;
          this.updateButtonFlags();
        },
        enumerable: false,
        configurable: true
      });
      Alert.prototype.updateButtonFlags = function() {
        var ok = (this.buttonFlags & AlertButton.OK) == AlertButton.OK;
        var cancel = (this.buttonFlags & AlertButton.CANCEL) == AlertButton.CANCEL;
        var yes = (this.buttonFlags & AlertButton.YES) == AlertButton.YES;
        var no = (this.buttonFlags & AlertButton.NO) == AlertButton.NO;
        var check = (this.buttonFlags & AlertButton.CHECK) == AlertButton.CHECK;
        this.btnOk.node.active = ok;
        this.btnCancel.node.active = cancel;
        this.btnYes.node.active = yes;
        this.btnNo.node.active = no;
        this.checked = true === this.defaultChecked;
        this.nodeCheck.active = check;
      };
      Object.defineProperty(Alert.prototype, "checkFlag", {
        get: function() {
          var flag = 0;
          (this.buttonFlags & AlertButton.CHECK) == AlertButton.CHECK && (flag = this.checked ? AlertButton.CHECK : 0);
          return flag;
        },
        enumerable: false,
        configurable: true
      });
      Alert.prototype.invokeCloseHandler = function(button) {
        var handler = this.closeHandler;
        var checked = (button & AlertButton.CHECK) == AlertButton.CHECK;
        this.closeHandler = null;
        checked && this.storegeChecked && LocalStorageUtil_1.LocalStorageUtil.setBool(this.storegeChecked.key, true, this.storegeChecked.type);
        this.close();
        null != handler && handler(button);
      };
      Alert.prototype.close = function() {
        var uiName = this.node.name;
        void 0 !== UIDefine_1.UIDefine[uiName] ? LayerManager_1.LayerManager.Instance.removeChildWithPrefabNode(UIDefine_1.UIDefine[uiName], this.node) : LayerManager_1.LayerManager.Instance.removeChildWithPrefabNode(UIDefine_1.UIDefine.Alert, this.node);
      };
      Alert.prototype.updateParam = function(value) {
        this.modalClickable = value.modalType == AlertModalType.modalClickable;
        this.defaultChecked = value.defaultChecked;
        this.stringContent = value.tip;
        this.buttonFlags = value.buttons;
        this.storegeChecked = value.storageChecked;
        this.closeHandler = value.closeHandler;
        (value.title || "" == value.title) && (this.stringTitle = value.title);
        value.stringCancel && (this.stringCancel = value.stringCancel);
        value.stringCheck && (this.stringCheck = value.stringCheck);
        value.stringOk && (this.stringOk = value.stringOk);
        value.stringYes && (this.stringYes = value.stringYes);
        value.stringNo && (this.stringNo = value.stringNo);
      };
      Alert.open = function() {
        var param;
        if (1 == arguments.length) param = arguments[0] instanceof AlertParam ? arguments[0] : "string" == typeof arguments[0] ? new AlertParam(arguments[0]) : arguments[0]; else if (2 == arguments.length) {
          param = new AlertParam(arguments[0]);
          param.title = arguments[1];
        } else if (3 == arguments.length) param = new AlertParam(arguments[0], arguments[1], arguments[2]); else if (4 == arguments.length) {
          param = new AlertParam(arguments[0], arguments[2], arguments[3]);
          param.title = arguments[1];
        }
        Alert_1.openWithParam(param);
      };
      Alert.openWithParam = function(param) {
        if (!Alert_1.checkAlertEnable(param.buttons, param.storageChecked, param.closeHandler)) return;
        var uiDefine = UIDefine_1.UIDefine.Alert;
        var option = new LayerManager_1.UIOptionMultiInstance(uiDefine, null, LayerManager_1.UICacheType.never, LayerManager_1.PanelEffectType.scaleUp, LayerManager_1.PanelEffectType.none);
        option.param = param;
        param.modalType == AlertModalType.nonmodal ? LayerManager_1.LayerManager.Instance.addChildWithPrefab(option, null, LayerManager_1.LayerType.layer_window) : LayerManager_1.LayerManager.Instance.addChildWithPrefab(option, null, LayerManager_1.LayerType.layer_modal);
      };
      Alert.checkAlertEnable = function(buttons, storegeChecked, closeHandler) {
        if ((buttons & AlertButton.CHECK) != AlertButton.CHECK) return true;
        if (null == storegeChecked) return true;
        if (LocalStorageUtil_1.LocalStorageUtil.getBool(storegeChecked.key, false, storegeChecked.type)) {
          if (null != closeHandler) {
            var flag = 0;
            (buttons & AlertButton.OK) == AlertButton.OK ? flag = AlertButton.OK : (buttons & AlertButton.YES) == AlertButton.YES && (flag = AlertButton.YES);
            closeHandler.call(null, flag + AlertButton.CHECK);
          }
          return false;
        }
        return true;
      };
      var Alert_1;
      __decorate([ property(cc.RichText) ], Alert.prototype, "richtextContent", void 0);
      __decorate([ property(cc.Label) ], Alert.prototype, "textTitle", void 0);
      __decorate([ property(cc.Node) ], Alert.prototype, "nodeLayout", void 0);
      __decorate([ property(cc.Node) ], Alert.prototype, "nodeCheck", void 0);
      __decorate([ property(cc.Toggle) ], Alert.prototype, "toggleCheck", void 0);
      __decorate([ property(cc.Label) ], Alert.prototype, "textCheck", void 0);
      __decorate([ property(cc.Node) ], Alert.prototype, "nodeBtns", void 0);
      __decorate([ property(cc.Button) ], Alert.prototype, "btnOk", void 0);
      __decorate([ property(cc.Label) ], Alert.prototype, "textOk", void 0);
      __decorate([ property(cc.Button) ], Alert.prototype, "btnCancel", void 0);
      __decorate([ property(cc.Label) ], Alert.prototype, "textCancel", void 0);
      __decorate([ property(cc.Button) ], Alert.prototype, "btnYes", void 0);
      __decorate([ property(cc.Label) ], Alert.prototype, "textYes", void 0);
      __decorate([ property(cc.Button) ], Alert.prototype, "btnNo", void 0);
      __decorate([ property(cc.Label) ], Alert.prototype, "textNo", void 0);
      Alert = Alert_1 = __decorate([ ccclass ], Alert);
      return Alert;
    }(BaseComponent_1.default);
    exports.default = Alert;
    var AlertModalType;
    (function(AlertModalType) {
      AlertModalType[AlertModalType["modal"] = 0] = "modal";
      AlertModalType[AlertModalType["modalClickable"] = 1] = "modalClickable";
      AlertModalType[AlertModalType["nonmodal"] = 2] = "nonmodal";
    })(AlertModalType = exports.AlertModalType || (exports.AlertModalType = {}));
    var AlertParam = function() {
      function AlertParam(tip, closeHandler, buttonFlags) {
        this.tip = tip;
        this.closeHandler = closeHandler;
        this.buttons = void 0 === buttonFlags ? 1 : 0 | buttonFlags;
      }
      return AlertParam;
    }();
    exports.AlertParam = AlertParam;
    cc._RF.pop();
  }, {
    "../../common/init/UIDefine": "UIDefine",
    "../../manager/LayerManager": "LayerManager",
    "../../util/LocalStorageUtil": "LocalStorageUtil",
    "../base/BaseComponent": "BaseComponent"
  } ],
  AnimalHitPolygonConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8e5221LtJRF1JSeJmPdWANG", "AnimalHitPolygonConfig");
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AnimalHitPolygonConfig = void 0;
    var proto_1 = require("../../proto/proto");
    var AnimalHitPolygonConfig = function() {
      function AnimalHitPolygonConfig() {}
      AnimalHitPolygonConfig.getPolygon = function(animalType) {
        var config = this.polygonData[animalType];
        if (!config) return null;
        return config.map(function(point) {
          return cc.v2(point[0], point[1]);
        });
      };
      AnimalHitPolygonConfig.setPolygon = function(animalType, vertices) {
        this.polygonData[animalType] = vertices;
      };
      AnimalHitPolygonConfig.getConfiguredAnimals = function() {
        return Object.keys(this.polygonData).map(function(key) {
          return parseInt(key);
        });
      };
      AnimalHitPolygonConfig.hasPolygon = function(animalType) {
        return void 0 !== this.polygonData[animalType];
      };
      AnimalHitPolygonConfig.getAnimalName = function(animalType) {
        var _a;
        var names = (_a = {}, _a[proto_1.e_animal.balance] = "\u91d1\u8c46", _a[proto_1.e_animal.turtle] = "\u4e4c\u9f9f", 
        _a[proto_1.e_animal.cock] = "\u516c\u9e21", _a[proto_1.e_animal.dog] = "\u6597\u725b\u72ac", 
        _a[proto_1.e_animal.monkey] = "\u91d1\u4e1d\u7334", _a[proto_1.e_animal.horse] = "\u77ee\u9a6c", 
        _a[proto_1.e_animal.ox] = "\u5976\u725b", _a[proto_1.e_animal.panda] = "\u718a\u732b", 
        _a[proto_1.e_animal.hippo] = "\u6cb3\u9a6c", _a[proto_1.e_animal.lion] = "\u72ee\u5b50", 
        _a[proto_1.e_animal.elephant] = "\u5927\u8c61", _a[proto_1.e_animal.pikachu] = "\u76ae\u5361\u4e18", 
        _a[proto_1.e_animal.bomber] = "\u70b8\u5f39\u4eba", _a[proto_1.e_animal.tiger] = "\u8001\u864e", 
        _a[proto_1.e_animal.sheep] = "\u7f8a\u9a7c", _a[proto_1.e_animal.bear] = "\u718a", 
        _a[proto_1.e_animal.tuzi] = "\u5154\u5b50", _a[proto_1.e_animal.lv] = "\u9a74", 
        _a[proto_1.e_animal.baozi] = "\u8c79\u5b50", _a[proto_1.e_animal.zhu] = "\u732a", 
        _a[proto_1.e_animal.hema] = "\u6cb3\u9a6c", _a);
        return names[animalType] || "\u672a\u77e5\u52a8\u7269";
      };
      AnimalHitPolygonConfig.polygonData = (_a = {}, _a[proto_1.e_animal.turtle] = [ [ -25, 20 ], [ -10, 30 ], [ 10, 30 ], [ 25, 20 ], [ 35, 0 ], [ 30, -20 ], [ 10, -30 ], [ -10, -30 ], [ -20, -15 ], [ -35, 0 ] ], 
      _a[proto_1.e_animal.cock] = [ [ -30, 35 ], [ -25, 45 ], [ 25, 52 ], [ 30, 20 ], [ 50, 0 ], [ 50, -25 ], [ 30, -52 ], [ -30, -52 ], [ -60, -25 ], [ -60, 0 ] ], 
      _a[proto_1.e_animal.dog] = [ [ -20, 45 ], [ 25, 50 ], [ 25, 35 ], [ 25, 0 ], [ 20, -35 ], [ 20, -40 ], [ -20, -40 ], [ -20, -35 ], [ -20, 0 ], [ -35, 35 ] ], 
      _a[proto_1.e_animal.monkey] = [ [ -45, 35 ], [ -30, 40 ], [ 30, 40 ], [ 45, 35 ], [ 51, 20 ], [ 51, -20 ], [ 45, -40 ], [ -40, -30 ], [ -45, -20 ], [ -45, 20 ] ], 
      _a[proto_1.e_animal.horse] = [ [ -70, 60 ], [ -60, 60 ], [ 35, 35 ], [ 40, 35 ], [ 65, 20 ], [ 65, -20 ], [ 60, -55 ], [ -50, -45 ], [ -82, -20 ] ], 
      _a[proto_1.e_animal.ox] = [ [ -60, 50 ], [ -40, 60 ], [ 30, 60 ], [ 40, 45 ], [ 50, 30 ], [ 50, -30 ], [ 50, -65 ], [ -35, -65 ], [ -70, -30 ], [ -60, 30 ] ], 
      _a[proto_1.e_animal.panda] = [ [ -100, 60 ], [ -80, 60 ], [ 50, 60 ], [ 70, 50 ], [ 80, 30 ], [ 90, -30 ], [ 70, -70 ], [ -60, -70 ], [ -100, -30 ] ], 
      _a[proto_1.e_animal.hippo] = [ [ -80, 50 ], [ 75, 50 ], [ 80, 35 ], [ 108, 0 ], [ 80, -40 ], [ 75, -79 ], [ -80, -79 ], [ -100, -40 ], [ -108, 0 ], [ -100, 40 ] ], 
      _a[proto_1.e_animal.lion] = [ [ -80, 65 ], [ 80, 65 ], [ 100, 35 ], [ 109, 0 ], [ 100, -35 ], [ 80, -71 ], [ -80, -71 ], [ -109, 0 ], [ -100, 35 ] ], 
      _a[proto_1.e_animal.elephant] = [ [ -116, 150 ], [ -80, 150 ], [ -20, 120 ], [ 0, 80 ], [ 20, 40 ], [ 30, 0 ], [ 80, -150 ], [ 0, -150 ], [ -20, -120 ], [ -80, -150 ], [ -116, -100 ] ], 
      _a[proto_1.e_animal.pikachu] = [ [ -70, 80 ], [ -40, 100 ], [ 40, 100 ], [ 60, 70 ], [ 95, 40 ], [ 85, -40 ], [ 60, -100 ], [ -40, -100 ], [ -70, -80 ], [ -95, 40 ] ], 
      _a[proto_1.e_animal.bomber] = [ [ -60, 80 ], [ -30, 114 ], [ 30, 114 ], [ 60, 100 ], [ 90, 60 ], [ 80, -60 ], [ 60, -100 ], [ -30, -50 ], [ -30, -60 ], [ -60, 60 ] ], 
      _a[proto_1.e_animal.tiger] = [ [ -38, 35 ], [ 38, 35 ], [ 45, 10 ], [ 40, -25 ], [ 20, -40 ], [ -20, -40 ], [ -40, -25 ], [ -45, 10 ] ], 
      _a[proto_1.e_animal.sheep] = [ [ -25, 45 ], [ 25, 45 ], [ 30, 20 ], [ 35, -10 ], [ 25, -40 ], [ -25, -40 ], [ -35, -10 ], [ -30, 20 ] ], 
      _a[proto_1.e_animal.bear] = [ [ -40, 38 ], [ 40, 38 ], [ 50, 5 ], [ 45, -30 ], [ 25, -45 ], [ -25, -45 ], [ -45, -30 ], [ -50, 5 ] ], 
      _a[proto_1.e_animal.tuzi] = [ [ -30, 70 ], [ 0, 90 ], [ 40, 90 ], [ 60, 70 ], [ 76, 30 ], [ 70, -30 ], [ 50, -90 ], [ -30, -90 ], [ -30, -30 ], [ -30, 30 ] ], 
      _a[proto_1.e_animal.lv] = [ [ -86, 79 ], [ -60, 79 ], [ 40, 59 ], [ 40, 40 ], [ 56, 30 ], [ 80, -30 ], [ 60, -79 ], [ -30, -80 ], [ -86, -30 ] ], 
      _a[proto_1.e_animal.baozi] = [ [ -60, 60 ], [ -30, 76 ], [ 30, 76 ], [ 60, 70 ], [ 85, 40 ], [ 80, -40 ], [ 60, -70 ], [ -30, -70 ], [ -70, -30 ], [ -85, 40 ] ], 
      _a[proto_1.e_animal.zhu] = [ [ -80, 70 ], [ -50, 92 ], [ 50, 92 ], [ 80, 80 ], [ 106, 40 ], [ 80, -40 ], [ 20, -92 ], [ -60, -80 ], [ -106, -40 ], [ -106, 40 ] ], 
      _a[proto_1.e_animal.hema] = [ [ -80, 60 ], [ 80, 60 ], [ 100, 40 ], [ 106, 0 ], [ 100, -40 ], [ 80, -75 ], [ -50, -75 ], [ -80, -40 ], [ -106, 0 ], [ -100, 40 ] ], 
      _a);
      return AnimalHitPolygonConfig;
    }();
    exports.AnimalHitPolygonConfig = AnimalHitPolygonConfig;
    cc._RF.pop();
  }, {
    "../../proto/proto": "proto"
  } ],
  AnimalManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a1358mUeOpNHrK5XCSY2JbO", "AnimalManager");
    "use strict";
    var __spreadArrays = this && this.__spreadArrays || function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, 
      k++) r[k] = a[j];
      return r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimalManager = function() {
      function AnimalManager() {
        this.animals = [];
      }
      AnimalManager.getInstance = function() {
        this._instance || (this._instance = new AnimalManager());
        return this._instance;
      };
      AnimalManager.prototype.register = function(animal) {
        if (!animal) {
          console.warn("AnimalManager: Cannot register null animal");
          return;
        }
        this.animals.includes(animal) || this.animals.push(animal);
      };
      AnimalManager.prototype.unregister = function(animal) {
        if (!animal) {
          console.warn("AnimalManager: Cannot unregister null animal");
          return;
        }
        var idx = this.animals.indexOf(animal);
        -1 !== idx && this.animals.splice(idx, 1);
      };
      AnimalManager.prototype.update = function(dt) {
        for (var _i = 0, _a = this.animals; _i < _a.length; _i++) {
          var animal = _a[_i];
          if (animal && animal.node && animal.node.isValid) try {
            animal.updateMove(dt);
          } catch (error) {
            console.warn("AnimalManager: Error updating animal:", error);
            this.unregister(animal);
          } else this.unregister(animal);
        }
      };
      AnimalManager.prototype.clear = function() {
        this.animals.length = 0;
      };
      AnimalManager.prototype.getAnimalCount = function() {
        return this.animals.length;
      };
      AnimalManager.prototype.getAnimals = function() {
        return __spreadArrays(this.animals);
      };
      AnimalManager._instance = null;
      return AnimalManager;
    }();
    exports.default = AnimalManager;
    cc._RF.pop();
  }, {} ],
  AnimalModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d5b84eIpLVF+6JpHmH/81Vv", "AnimalModel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PathPoint = exports.AutoHitType = exports.AnimalModel = void 0;
    var ModelBase_1 = require("../common/core/ModelBase");
    var TimerManager_1 = require("../common/core/TimerManager");
    var ModelMessageType_1 = require("../common/init/ModelMessageType");
    var GameCommonRes_1 = require("../GameCommonRes");
    var proto_1 = require("../proto/proto");
    var Config_1 = require("../view/base/Config");
    var UIZooCriStart_1 = require("../view/skill/UIZooCriStart");
    var LoginModel_1 = require("./LoginModel");
    var AnimalModel = function(_super) {
      __extends(AnimalModel, _super);
      function AnimalModel() {
        var _this = _super.call(this) || this;
        _this.animal_names = [];
        _this.animal_move_duration = 1;
        _this.animalDirty = false;
        _this.newold = 0;
        _this.lockxfk = 0;
        _this.lock = 0;
        _this.xfk = 0;
        _this.iceSKillUseTime = 0;
        _this.iceSkillTotalTime = 0;
        _this.latestLeaveAnimal = 0;
        _this.selfRecordGetAmount = 200;
        _this.selfRecordLatestId = 0;
        _this._recentRewards = [];
        _this.hitAnimals = [ proto_1.e_animal.hippo, proto_1.e_animal.lion, proto_1.e_animal.elephant ];
        _this.hitBuffDuration = 5e3;
        _this.hitBuffCD = 6e4;
        _this.hitProgressReduceDuration = 1e3;
        _this.hitProgressMin = 5;
        _this.hitProgressMax = 50;
        _this.hitCount = 0;
        _this.hitGetTime = 0;
        _this.hitBuffGetTime = 0;
        _this.hitLatestCDGetTime = 0;
        _this.buffTimerId = 0;
        _this.hitReduceTimerId = 0;
        _this.latestAutoHitAnimalIndex = 0;
        _this.autoHitAnimals = [ proto_1.e_animal.turtle, proto_1.e_animal.cock, proto_1.e_animal.dog, proto_1.e_animal.monkey, proto_1.e_animal.ox, proto_1.e_animal.panda, proto_1.e_animal.pikachu, proto_1.e_animal.hippo, proto_1.e_animal.lion, proto_1.e_animal.elephant, proto_1.e_animal.bomber ];
        _this.lockIscd = false;
        _this.criUseTime = 0;
        _this.criTIme = 0;
        _this.criTotalTime = 0;
        return _this;
      }
      Object.defineProperty(AnimalModel, "Instance", {
        get: function() {
          null == AnimalModel.instance && (AnimalModel.instance = new AnimalModel());
          return AnimalModel.instance;
        },
        enumerable: false,
        configurable: true
      });
      AnimalModel.prototype.readAnimalPath = function() {
        var _a;
        this.allPaths || (this.allPaths = null === (_a = cc.resources.get("animal_path", cc.JsonAsset)) || void 0 === _a ? void 0 : _a.json);
      };
      AnimalModel.prototype.getPath = function(index) {
        this.readAnimalPath();
        return this.allPaths[index];
      };
      AnimalModel.prototype.randomPath = function() {
        var path;
        var index;
        this.readAnimalPath();
        index = Math.floor(Math.random() * this.allPaths.length);
        return this.allPaths[index];
      };
      Object.defineProperty(AnimalModel.prototype, "enter_toc", {
        get: function() {
          return this._enter_toc;
        },
        set: function(value) {
          this._enter_toc = value;
          this._iceSkillPlaying = false;
          this._buffSkillPlaying = false;
          this.animal_names = [ "\u5c0f\u9e1f", "\u9752\u86d9", "\u5c0f\u9e21", "\u5de8\u5634\u9e1f", "\u7329\u7329", "\u9a86\u9a7c", "\u72ee\u5b50", "\u4ed9\u9e64", "\u7280\u725b", "\u6050\u9f99", "\u96f7\u7cbe\u7075", "\u5168\u5c4f\u70b8\u5f39", "\u8001\u864e", "\u7f8a\u9a7c", "\u718a", "\u5154\u5b50", "\u9a6c", "\u8c79\u5b50", "\u5b54\u96c0", "\u6cb3\u9a6c" ];
          this.animalDirty = false;
          if (null == value) return;
          value.time > 0 && (this.iceSKillUseTime = cc.sys.now());
          this.criList = [];
          this.criStopList = [];
          this.updateSkill(value.skill);
          this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_ENTER_ROOM);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AnimalModel.prototype, "res", {
        get: function() {
          return GameCommonRes_1.default.Instance;
        },
        enumerable: false,
        configurable: true
      });
      AnimalModel.prototype.getSkillIcon = function(type, num, gray) {
        void 0 === gray && (gray = false);
        switch (type) {
         case proto_1.e_animal_skill_type.ice:
          return gray ? this.res.skillGrayIcons[0] : this.res.skillIcons[0];

         case proto_1.e_animal_skill_type.locking:
          return gray ? this.res.skillGrayIcons[1] : this.res.skillIcons[1];

         case proto_1.e_animal_skill_type.improve_odds:
          return gray ? this.res.skillGrayIcons[2] : this.res.skillIcons[2];
        }
      };
      Object.defineProperty(AnimalModel.prototype, "iceSkillRemainsProgress", {
        get: function() {
          if (null == this._enter_toc || 0 == this._enter_toc.time) return 0;
          var duration = (cc.sys.now() - this.iceSKillUseTime) / 1e3;
          if (duration >= this._enter_toc.time) return 0;
          var totalTime = this.iceSkillTotalTime > 0 ? this.iceSkillTotalTime : this.getSkillInfo(proto_1.e_animal_skill_type.ice).time;
          return (this._enter_toc.time - duration) / totalTime;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AnimalModel.prototype, "Skill_list", {
        get: function() {
          return this._Skill_list;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AnimalModel.prototype, "iceSkillPlayer", {
        get: function() {
          if (this.iceSkillPlayerId > 0) return this.getPlayerById(this.iceSkillPlayerId);
          return null;
        },
        enumerable: false,
        configurable: true
      });
      AnimalModel.prototype.useIceSkill = function(role_id, ids, skillRemainTime) {
        var animals = this._enter_toc.animals;
        this.iceSkillPlayerId = role_id;
        this.iceSKillUseTime = cc.sys.now();
        this.iceSkillTotalTime = 0;
        this._enter_toc.time = skillRemainTime || this.getSkillInfo(proto_1.e_animal_skill_type.ice).time;
        for (var i = 0; i < ids.length; i++) {
          var animal = this.getAnimalById(ids[i]);
          animal && (animal.status = proto_1.e_animal_state.ice);
        }
      };
      AnimalModel.prototype.clearIceSkillAnimalState = function() {
        var animals = this._enter_toc.animals;
        for (var i = 0; i < animals.length; i++) {
          var animal = animals[i];
          animal.status == proto_1.e_animal_state.ice && (animal.status = proto_1.e_animal_state.normal);
        }
        this._enter_toc && (this._enter_toc.time = 0);
        this.iceSKillUseTime = 0;
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_ICE_SKILL_FROZEN_UPDATE);
      };
      AnimalModel.prototype.updateSkill = function(skill) {
        var count;
        count = this._Skill_list && this._Skill_list.length > 0 ? this.getSkillInfo(proto_1.e_animal_skill_type.ice).count : 0;
        this._Skill_list = skill;
        this.hitBuffDuration = this.getSkillInfo(proto_1.e_animal_skill_type.improve_odds).time;
        this._iceSkillPlaying || this.getSkillInfo(proto_1.e_animal_skill_type.ice).count == count || this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_ICE_SKILL_PROGRESS_UPDATE);
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_SKILL_LIST_UPDATE);
      };
      AnimalModel.prototype.UseupdateSkill = function(skill) {
        for (var i = 0; i < this._Skill_list.length; i++) this._Skill_list[i].type == skill.type && (this._Skill_list[i] = skill);
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_SKILL_LIST_UPDATE);
      };
      AnimalModel.prototype.getSkillInfo = function(type) {
        for (var i = 0; i < this._Skill_list.length; i++) if (this._Skill_list[i].type == type) return this._Skill_list[i];
        return null;
      };
      Object.defineProperty(AnimalModel.prototype, "iceSkillPlaying", {
        get: function() {
          return this._iceSkillPlaying;
        },
        enumerable: false,
        configurable: true
      });
      AnimalModel.prototype.iceSkillEffectStart = function() {
        this._iceSkillPlaying = true;
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_ICE_SKILL_EFFECT_START);
      };
      AnimalModel.prototype.iceSkillEffectDelay = function() {
        var _this = this;
        TimerManager_1.TimerManager.Instance.addCountdown(200, this, function() {
          _this.iceSkillEffectComplete();
        });
      };
      AnimalModel.prototype.iceSkillEffectComplete = function() {
        if (!this._iceSkillPlaying) return;
        this._iceSkillPlaying = false;
        if (this._enter_toc) {
          var duration = (cc.sys.now() - this.iceSKillUseTime) / 1e3;
          duration < this._enter_toc.time && (this.iceSkillTotalTime = this._enter_toc.time - duration);
        }
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_ICE_SKILL_EFFECT_COMPLETE);
      };
      Object.defineProperty(AnimalModel.prototype, "zoo_cj", {
        get: function() {
          if (this._enter_toc) return this._enter_toc.cj;
          return;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AnimalModel.prototype, "redbag", {
        get: function() {
          if (this._enter_toc) return this._enter_toc.red_state;
          return false;
        },
        enumerable: false,
        configurable: true
      });
      AnimalModel.prototype.getAnimalName = function(animal) {
        return this.animal_names[animal - 1];
      };
      AnimalModel.prototype.getAnimalOdds = function(animal) {
        if (null == this._enter_toc) return null;
        var odds = this._enter_toc.odds;
        var length = odds.length;
        for (var i = 0; i < length; i++) if (odds[i].bet == animal) return odds[i];
        return null;
      };
      AnimalModel.prototype.playerEnter = function(value) {
        if (null == this._enter_toc) return;
        var player = this.getPlayerById(value.role_id);
        if (player) {
          var index = this._enter_toc.players.indexOf(player);
          this._enter_toc.players.splice(index, 1);
          console.warn("\u73a9\u5bb6\u91cd\u590d\u8fdb\u5165,role_id:" + player.role_id);
        }
        this._enter_toc.players.push(value);
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_PLAYER_UPDATE);
      };
      AnimalModel.prototype.playerLeave = function(role_id) {
        if (null == this._enter_toc) return;
        var player = this.getPlayerById(role_id);
        if (player) {
          this.clearCri(role_id);
          var index = this._enter_toc.players.indexOf(player);
          this._enter_toc.players.splice(index, 1);
        }
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_PLAYER_UPDATE);
      };
      AnimalModel.prototype.getPlayerById = function(value) {
        if (null == this._enter_toc) return null;
        var players = this._enter_toc.players;
        var count = players.length;
        for (var i = 0; i < count; i++) if (players[i].role_id == value) return players[i];
        return null;
      };
      AnimalModel.prototype.getLatestHitAnimal = function() {
        return this._latest_hit_animal;
      };
      AnimalModel.prototype.playerHitAnimal = function(hit) {
        if (hit.role_id == LoginModel_1.LoginModel.Instance.role_id) return;
        this._latest_hit_animal = hit;
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_PLAYER_BET_UPDATE);
      };
      Object.defineProperty(AnimalModel.prototype, "latestEnterAnimals", {
        get: function() {
          return this._latestEnterAnimals;
        },
        enumerable: false,
        configurable: true
      });
      AnimalModel.prototype.animalEnter = function(value) {
        if (null == this._enter_toc) return;
        var animals = this._enter_toc.animals;
        for (var i = 0; i < value.length; i++) {
          var animal = this.getAnimalById(value[i].id);
          if (animal) {
            var index = animals.indexOf(animal);
            animals.splice(index, 1);
            console.warn("\u52a8\u7269\u91cd\u590d\u8fdb\u5165,id:" + animal.id);
          }
          animals.push(value[i]);
        }
        this._latestEnterAnimals = value;
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_ANIMAL_ENTER);
      };
      AnimalModel.prototype.animalLeave = function(animal_id) {
        if (null == this._enter_toc) return;
        var animal = this.getAnimalById(animal_id);
        if (animal) {
          var index = this._enter_toc.animals.indexOf(animal);
          this._enter_toc.animals.splice(index, 1);
        }
        this.latestLeaveAnimal = animal_id;
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_ANIMAL_LEAVE);
      };
      AnimalModel.prototype.getLatestDeadAnimal = function() {
        return this._latest_dead_animal;
      };
      AnimalModel.prototype.animalDead = function(dead_animal) {
        if (null == this._enter_toc) return;
        var count = dead_animal.ids.length;
        for (var i = 0; i < count; i++) {
          var animal_id = dead_animal.ids[i].id;
          var animal = this.getAnimalById(animal_id);
          if (animal) {
            var index = this._enter_toc.animals.indexOf(animal);
            this._enter_toc.animals.splice(index, 1);
          }
        }
        this._latest_dead_animal = dead_animal;
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_ANIMAL_DEAD);
      };
      AnimalModel.prototype.elephantComing = function() {
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_ELEPHANT_COME);
      };
      AnimalModel.prototype.bombComing = function() {
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_BOMB_COME);
      };
      AnimalModel.prototype.getAnimalById = function(value) {
        if (null == this._enter_toc) return null;
        var animals = this._enter_toc.animals;
        var count = animals.length;
        for (var i = 0; i < count; i++) if (animals[i].id == value) return animals[i];
        return null;
      };
      Object.defineProperty(AnimalModel.prototype, "selfRecord", {
        get: function() {
          return this._selfRecord;
        },
        enumerable: false,
        configurable: true
      });
      AnimalModel.prototype.pushSelfRecord = function(id, value) {
        this.selfRecordLatestId = id;
        null == this._selfRecord || 0 == id ? this._selfRecord = value : null != value && (this._selfRecord = this._selfRecord.concat(value));
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_SELF_RECORD);
      };
      Object.defineProperty(AnimalModel.prototype, "recentRewards", {
        get: function() {
          return this._recentRewards;
        },
        enumerable: false,
        configurable: true
      });
      AnimalModel.prototype.pushRecentRewards = function(value) {
        if (value && value.length > 1) {
          value = value.sort(this.sortRecentRewardFunc);
          var count = value.length;
          var max = value[0];
          for (var i = 1; i < count; i++) value[i].win > max.win && (max = value[i]);
          if (max != value[0]) {
            value.splice(value.indexOf(max), 1);
            value.unshift(max);
          }
        }
        this._recentRewards = value;
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_RECENT_RECORD);
      };
      AnimalModel.prototype.sortRecentRewardFunc = function(a, b) {
        if (a.time > b.time) return -1;
        if (a.time < b.time) return 1;
        return 0;
      };
      AnimalModel.prototype.getBuffVisible = function() {
        return this.hitCount >= this.hitProgressMin;
      };
      AnimalModel.prototype.getBuffProgress = function() {
        var gettime;
        if (this.hitBuffGetTime > 0) {
          gettime = cc.sys.now();
          return Math.max(0, (this.hitBuffDuration - gettime + this.hitBuffGetTime) / this.hitBuffDuration);
        }
        return 0;
      };
      AnimalModel.prototype.getHitProgress = function() {
        if (this.hitCount >= this.hitProgressMin && this.hitCount <= this.hitProgressMax) return Math.min(1, this.hitCount / this.hitProgressMax);
        return 0;
      };
      AnimalModel.prototype.updateHitCount = function(aniaml) {
        var gettime = cc.sys.now();
        if (this.hitBuffGetTime > 0) {
          if (gettime - this.hitBuffGetTime < this.hitBuffDuration) return;
          this.hitBuffGetTime = 0;
          this.hitCount = 0;
        }
        if (this.hitLatestCDGetTime > 0) {
          if (gettime - this.hitLatestCDGetTime < this.hitBuffCD) return;
          this.hitLatestCDGetTime = 0;
          this.hitCount = 0;
        }
        if (-1 == this.hitAnimals.indexOf(aniaml)) {
          if (this.hitCount >= this.hitProgressMin) {
            this.removeHitReduceTimer();
            this.hitCount = 0;
            this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_BUFF_HIT_PROGRESS_CANCEL);
          } else this.hitCount > 0 && (this.hitCount = 0);
          return;
        }
        this.hitGetTime = gettime;
        this.hitCount = Math.min(this.hitProgressMax, this.hitCount + 1);
        if (this.hitCount == this.hitProgressMin) {
          this.addHitReduceTimer();
          this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_BUFF_HIT_PROGRESS_START);
        } else if (this.hitCount >= this.hitProgressMax) {
          this.hitBuffGetTime = gettime;
          this.hitLatestCDGetTime = gettime + this.hitBuffDuration;
          this.addBuffDelayTimer();
          this.removeHitReduceTimer();
          this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_BUFF_PROGRESS_START);
        } else {
          this.addHitReduceTimer();
          this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_BUFF_HIT_PROGRESS_UPDATE);
        }
      };
      Object.defineProperty(AnimalModel.prototype, "buffSkillPlaying", {
        get: function() {
          return this._buffSkillPlaying;
        },
        enumerable: false,
        configurable: true
      });
      AnimalModel.prototype.SratBuff = function() {
        var gettime = cc.sys.now();
        this.hitBuffGetTime = gettime;
        this._buffSkillPlaying = true;
        this.addBuffDelayTimer();
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_BUFF_START);
      };
      AnimalModel.prototype.addBuffDelayTimer = function() {
        this.buffTimerId > 0 && this.removeBuffDelayTimer();
        this.buffTimerId = TimerManager_1.TimerManager.Instance.addCountdown(this.hitBuffDuration, this, this.buffTimerComplete, this.buffTimerUpdate, 100);
      };
      AnimalModel.prototype.buffTimerUpdate = function() {
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_BUFF_PROGRESS_START);
      };
      AnimalModel.prototype.buffTimerComplete = function() {
        this.buffTimerId = 0;
        this.hitBuffGetTime = 0;
        this.hitCount = 0;
        this._buffSkillPlaying = false;
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_BUFF_HIT_PROGRESS_CANCEL);
      };
      AnimalModel.prototype.removeBuffDelayTimer = function() {
        if (this.buffTimerId > 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.buffTimerId);
          this.buffTimerId = 0;
        }
      };
      AnimalModel.prototype.addHitReduceTimer = function() {
        0 == this.hitReduceTimerId && (this.hitReduceTimerId = TimerManager_1.TimerManager.Instance.addCountdown(Number.MAX_VALUE, this, null, this.hitReduceTimerUpdate, this.hitProgressReduceDuration));
      };
      AnimalModel.prototype.hitReduceTimerUpdate = function() {
        var gettime = cc.sys.now();
        if (gettime - this.hitGetTime >= this.hitProgressReduceDuration) {
          this.hitGetTime = gettime;
          this.hitCount > this.hitProgressMin ? this.hitCount-- : this.hitCount = 0;
          if (this.hitCount < this.hitProgressMin) {
            this.removeHitReduceTimer();
            this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_BUFF_HIT_PROGRESS_CANCEL);
          } else this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_BUFF_HIT_PROGRESS_UPDATE);
        }
      };
      AnimalModel.prototype.removeHitReduceTimer = function() {
        if (this.hitReduceTimerId > 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.hitReduceTimerId);
          this.hitReduceTimerId = 0;
        }
      };
      Object.defineProperty(AnimalModel.prototype, "zoo_room", {
        get: function() {
          return this._zoo_room;
        },
        set: function(v) {
          this._zoo_room = v;
          this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_ROOM_INFO);
        },
        enumerable: false,
        configurable: true
      });
      AnimalModel.prototype.getAutoHitAnimalId = function(sourceAnimals) {
        if (null == this._enter_toc) return 0;
        var animals = this._enter_toc.animals;
        var count = animals.length;
        if (0 == count || sourceAnimals && 0 == sourceAnimals.length) return 0;
        while (count > 0) {
          this.latestAutoHitAnimalIndex++;
          this.latestAutoHitAnimalIndex >= animals.length && (this.latestAutoHitAnimalIndex = 0);
          var id = animals[this.latestAutoHitAnimalIndex].id;
          if (null == sourceAnimals || sourceAnimals.indexOf(id) > -1) return id;
          count--;
        }
        return 0;
      };
      AnimalModel.prototype.getAutoLockAnimalId = function(sourceAnimals) {
        if (null == this._enter_toc) return 0;
        var animals = this._enter_toc.animals;
        var length = animals.length;
        if (0 == length || sourceAnimals && 0 == sourceAnimals.length) return 0;
        var lockAnimal;
        var lockIndex = -1;
        var max = this.autoHitAnimals[this.autoHitAnimals.length - 1];
        for (var i = 0; i < length; i++) {
          var animal = animals[i];
          var index = this.autoHitAnimals.indexOf(animal.bet, lockIndex + 1);
          if (index > lockIndex) {
            if (sourceAnimals && -1 == sourceAnimals.indexOf(animal.id)) continue;
            if (animal.bet == max) return animal.id;
            lockIndex = index;
            lockAnimal = animal;
          }
        }
        if (lockAnimal) return lockAnimal.id;
        return 0;
      };
      Object.defineProperty(AnimalModel.prototype, "lockSkillPlaying", {
        get: function() {
          return this._lockSkillPlaying;
        },
        enumerable: false,
        configurable: true
      });
      AnimalModel.prototype.lockSkillEffectStart = function() {
        this._lockSkillPlaying = true;
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_LOCK_START);
      };
      AnimalModel.prototype.lockTimerComplete = function() {
        this._lockSkillPlaying = false;
        this.lockIscd = false;
      };
      Object.defineProperty(AnimalModel.prototype, "toolPrice", {
        get: function() {
          return this._toolPrice;
        },
        set: function(v) {
          this._toolPrice = v;
          this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_TOOL_PRICE);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AnimalModel.prototype, "cj_records", {
        get: function() {
          return this._cj_records;
        },
        set: function(v) {
          this._cj_records = v;
          this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_SELF_RECORD);
        },
        enumerable: false,
        configurable: true
      });
      AnimalModel.prototype.pushCri = function(role_id, time, val) {
        var item = this.getCriItem(role_id);
        if (null != item && item.Playing) return;
        this.criTIme = time;
        this.criTotalTime = 0;
        this.criUseTime = cc.sys.now();
        var cri = new cri_type();
        cri.RoleId = role_id;
        cri.Playing = true;
        this.criList.push(cri);
        this.criBetVal = val;
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_CRI_START_1);
        UIZooCriStart_1.default.open();
      };
      AnimalModel.prototype.clearCri = function(role_id) {
        var item = this.getCriItem(role_id);
        if (null == item) return;
        this.criUseTime = 0;
        this.criStopList.push(item);
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_CRI_STOP);
      };
      AnimalModel.prototype.resetCri = function(item) {
        this.criList.indexOf(item) > -1 && this.criList.splice(this.criList.indexOf(item), 1);
        this.criStopList.indexOf(item) > -1 && this.criStopList.splice(this.criStopList.indexOf(item), 1);
      };
      AnimalModel.prototype.getCriItem = function(role_id) {
        if (0 == this.criList.length) return null;
        for (var i = 0; i < this.criList.length; i++) if (this.criList[i].RoleId == role_id) return this.criList[i];
        return null;
      };
      Object.defineProperty(AnimalModel.prototype, "criRemainsProgress", {
        get: function() {
          if (null == this._enter_toc || 0 == this.criTIme) return 0;
          var duration = (cc.sys.now() - this.criUseTime) / 1e3;
          if (duration >= this.criTIme) return 0;
          var totalTime = this.criTotalTime > 0 ? this.criTotalTime : this.criTIme;
          return (this.criTIme - duration) / totalTime;
        },
        enumerable: false,
        configurable: true
      });
      AnimalModel.prototype.criEffectComplete = function() {
        if (this._enter_toc) {
          var duration = (cc.sys.now() - this.criUseTime) / 1e3;
          duration < this.criTIme && (this.criTotalTime = this.criTIme - duration);
        }
        this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_CRI_EFFECT_COMPLETE);
      };
      AnimalModel.prototype.dividedMultiple = function(num) {
        return num / Config_1.default.Instance.multiple;
      };
      AnimalModel.prototype.byMultiple = function(num) {
        return num * Config_1.default.Instance.multiple;
      };
      return AnimalModel;
    }(ModelBase_1.ModelBase);
    exports.AnimalModel = AnimalModel;
    var AutoHitType;
    (function(AutoHitType) {
      AutoHitType[AutoHitType["none"] = 0] = "none";
      AutoHitType[AutoHitType["all"] = 1] = "all";
      AutoHitType[AutoHitType["lock"] = 2] = "lock";
    })(AutoHitType = exports.AutoHitType || (exports.AutoHitType = {}));
    var cri_type = function() {
      function cri_type() {}
      return cri_type;
    }();
    var PathPoint = function() {
      function PathPoint(x, y) {
        this.x = x;
        this.y = y;
      }
      return PathPoint;
    }();
    exports.PathPoint = PathPoint;
    cc._RF.pop();
  }, {
    "../GameCommonRes": "GameCommonRes",
    "../common/core/ModelBase": "ModelBase",
    "../common/core/TimerManager": "TimerManager",
    "../common/init/ModelMessageType": "ModelMessageType",
    "../proto/proto": "proto",
    "../view/base/Config": "Config",
    "../view/skill/UIZooCriStart": "UIZooCriStart",
    "./LoginModel": "LoginModel"
  } ],
  AnimalModuleCommand: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e2d136MUw1KHry3gLUK1H4E", "AnimalModuleCommand");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AnimalModuleCommand = void 0;
    var AnimalModuleCommand = function() {
      function AnimalModuleCommand() {}
      AnimalModuleCommand.ENTER_ROOM = 1801;
      AnimalModuleCommand.LEAVE_ROOM = 1802;
      AnimalModuleCommand.GO_BET = 1803;
      AnimalModuleCommand.GET_ANIMAL_RECORD = 1804;
      AnimalModuleCommand.GET_ANIMAL_REWARD = 1805;
      AnimalModuleCommand.USE_ANIMAL_SKILL = 1806;
      AnimalModuleCommand.GET_ZOO_TYPE_INFO = 1807;
      AnimalModuleCommand.BUY_TOOLS = 1808;
      AnimalModuleCommand.GET_TOOLS_PRICE = 1809;
      AnimalModuleCommand.PUSH_CJ = 1810;
      AnimalModuleCommand.PUSH_CJ_REWARD = 1811;
      AnimalModuleCommand.GET_CJ_LOG = 1812;
      AnimalModuleCommand.PUSH_ONE_BLOW = 1813;
      AnimalModuleCommand.CLEAR_ONE_BLOW = 1814;
      AnimalModuleCommand.PUSH_HIT_ANIMAL = 1899;
      AnimalModuleCommand.PUSH_LEAVE_ANIMAL = 1888;
      AnimalModuleCommand.PUSH_ANIMAL_ENTER = 1887;
      AnimalModuleCommand.PUSH_ROLE_ENTER = 1886;
      AnimalModuleCommand.PUSH_ROLE_LEAVE = 1885;
      AnimalModuleCommand.PUSH_ANIMAL_DIE = 1884;
      AnimalModuleCommand.PUSH_ANIMAL_COMING = 1883;
      AnimalModuleCommand.PUSH_ROLE_USE_SKILL = 1882;
      AnimalModuleCommand.ENTER_ACTIVITY = 1871;
      AnimalModuleCommand.HIT_ACTIVITY_ANIMAL = 1872;
      AnimalModuleCommand.GET_ACTIVITY_RANK = 1873;
      AnimalModuleCommand.PUSH_ACTIVITY_ANIMAL = 1874;
      AnimalModuleCommand.PUSH_ACTIVITY_OUT = 1875;
      AnimalModuleCommand.PUSH_ACTIVITY_ANIMAL_ENTER = 1876;
      AnimalModuleCommand.PUSH_ACTIVITY_ANIMAL_DIE = 1877;
      AnimalModuleCommand.PUSH_ACTIVITY_STATE = 1878;
      AnimalModuleCommand.LOOK_ACTIVITY = 1879;
      AnimalModuleCommand.PUSH_ACTIVITY_RANK = 1880;
      AnimalModuleCommand.PUSH_ACTIVITY_HIT = 1881;
      AnimalModuleCommand.PUSH_ACTIVITY_BROADCAST = 1889;
      return AnimalModuleCommand;
    }();
    exports.AnimalModuleCommand = AnimalModuleCommand;
    cc._RF.pop();
  }, {} ],
  AnimalModuleController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8efdciiuTBET5GheBmROG0c", "AnimalModuleController");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AnimalModuleController = void 0;
    var proto_1 = require("../proto/proto");
    var AnimalModuleCommand_1 = require("../common/command/AnimalModuleCommand");
    var ModuleBase_1 = require("../common/core/ModuleBase");
    var NotificationManager_1 = require("../common/core/NotificationManager");
    var ErrorCodeUtil_1 = require("../util/ErrorCodeUtil");
    var AnimalModel_1 = require("../model/AnimalModel");
    var LoginModel_1 = require("../model/LoginModel");
    var UIZooPanel_1 = require("../view/zoo/UIZooPanel");
    var ModelMessageType_1 = require("../common/init/ModelMessageType");
    var ErrorCodeType_1 = require("../common/init/ErrorCodeType");
    var UICaptureRecord_1 = require("../view/zoo/UICaptureRecord");
    var UIRecentReward_1 = require("../view/zoo/UIRecentReward");
    var UIZooIceSkill_1 = require("../view/skill/UIZooIceSkill");
    var ZooCjWin_1 = require("../view/zoo_component/ZooCjWin");
    var MissionModel_1 = require("../model/MissionModel");
    var UIStartLoading_1 = require("../view/common/UIStartLoading");
    var AnimalModuleController = function(_super) {
      __extends(AnimalModuleController, _super);
      function AnimalModuleController() {
        return _super.call(this) || this;
      }
      Object.defineProperty(AnimalModuleController, "Instance", {
        get: function() {
          null == AnimalModuleController.instance && (AnimalModuleController.instance = new AnimalModuleController());
          return AnimalModuleController.instance;
        },
        enumerable: false,
        configurable: true
      });
      AnimalModuleController.prototype.init = function() {
        var n = NotificationManager_1.common.NotificationManager.getInstance();
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.ENTER_ROOM, this.enterRoomHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.LEAVE_ROOM, this.leaveRoomHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.GO_BET, this.goBetHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.GET_ANIMAL_RECORD, this.getAnimalRecordHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.GET_ANIMAL_REWARD, this.getAnimalRewardHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.USE_ANIMAL_SKILL, this.useAnimalSkillHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.GET_ZOO_TYPE_INFO, this.getZooTypeInfoHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.BUY_TOOLS, this.buyToolsHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.GET_TOOLS_PRICE, this.getToolsPriceHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_CJ, this.pushCjHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_CJ_REWARD, this.pushCjRewardHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.GET_CJ_LOG, this.getCjLogHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ONE_BLOW, this.pushOneBlowHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.CLEAR_ONE_BLOW, this.clearOneBlowHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_HIT_ANIMAL, this.pushHitAnimalHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_LEAVE_ANIMAL, this.pushLeaveAnimalHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ANIMAL_ENTER, this.pushAnimalEnterHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ROLE_ENTER, this.pushRoleEnterHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ROLE_LEAVE, this.pushRoleLeaveHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ANIMAL_DIE, this.pushAnimalDieHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ANIMAL_COMING, this.pushAnimalComingHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ROLE_USE_SKILL, this.pushRoleUseSkillHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.ENTER_ACTIVITY, this.enterActivityHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.HIT_ACTIVITY_ANIMAL, this.hitActivityAnimalHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.GET_ACTIVITY_RANK, this.getActivityRankHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ACTIVITY_ANIMAL, this.pushActivityAnimalHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ACTIVITY_OUT, this.pushActivityOutHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ACTIVITY_ANIMAL_ENTER, this.pushActivityAnimalEnterHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ACTIVITY_ANIMAL_DIE, this.pushActivityAnimalDieHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ACTIVITY_STATE, this.pushActivityStateHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.LOOK_ACTIVITY, this.lookActivityHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ACTIVITY_RANK, this.pushActivityRankHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ACTIVITY_HIT, this.pushActivityHitHandler, this);
        n.registNotification(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ACTIVITY_BROADCAST, this.pushActivityBroadcastHandler, this);
      };
      AnimalModuleController.prototype.requestEnterRoom = function(type) {
        var tos = new proto_1.m_1801_tos();
        tos.type = type;
        tos.type || (tos.type = AnimalModel_1.AnimalModel.Instance.zooType);
        tos.type || (tos.type = proto_1.e_zoo_type.diamond);
        this.send(AnimalModuleCommand_1.AnimalModuleCommand.ENTER_ROOM, tos, tos);
      };
      AnimalModuleController.prototype.enterRoomHandler = function(note) {
        if (0 == note.errorCode) {
          var tos = note.tos;
          var toc = note.toc;
          AnimalModel_1.AnimalModel.Instance.zooType = tos.type;
          AnimalModel_1.AnimalModel.Instance.enter_toc = toc;
          LoginModel_1.LoginModel.Instance.freebalance = toc.free_gold;
          LoginModel_1.LoginModel.Instance.freegold = toc.free_gold;
          UIStartLoading_1.default.close();
          UIZooPanel_1.default.open();
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.ENTER_ROOM, note.errorCode);
      };
      AnimalModuleController.prototype.requestLeaveRoom = function() {
        this.send(AnimalModuleCommand_1.AnimalModuleCommand.LEAVE_ROOM);
      };
      AnimalModuleController.prototype.leaveRoomHandler = function(note) {
        0 == note.errorCode ? location.replace("about:blank") : ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.LEAVE_ROOM, note.errorCode);
      };
      AnimalModuleController.prototype.requestGoBet = function(id, bet_val, multiple, animal) {
        if (!LoginModel_1.LoginModel.Instance.checkGoldEnough(bet_val * multiple)) {
          AnimalModel_1.AnimalModel.Instance.updateModel(ModelMessageType_1.ModelMessageType.ZOO_STOP_AUTO_HIT);
          return;
        }
        var tos = new proto_1.m_1803_tos();
        tos.id = id;
        tos.bet_val = AnimalModel_1.AnimalModel.Instance.byMultiple(bet_val);
        tos.multiple = multiple;
        this.send(AnimalModuleCommand_1.AnimalModuleCommand.GO_BET, tos, animal);
      };
      AnimalModuleController.prototype.goBetHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          LoginModel_1.LoginModel.Instance.gold = toc.balance;
          LoginModel_1.LoginModel.Instance.freegold = toc.free_gold;
          toc.skill && toc.skill.length > 0 && AnimalModel_1.AnimalModel.Instance.updateSkill(toc.skill);
        } else {
          if (note.errorCode == ErrorCodeType_1.ErrorCodeType.ERMSG_ANIMAL_OUT_47) return;
          ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.GO_BET, note.errorCode);
        }
      };
      AnimalModuleController.prototype.requestGetAnimalRecord = function(id, amount) {
        var tos = new proto_1.m_1804_tos();
        tos.id = id;
        tos.amount = amount;
        this.send(AnimalModuleCommand_1.AnimalModuleCommand.GET_ANIMAL_RECORD, tos, tos);
      };
      AnimalModuleController.prototype.getAnimalRecordHandler = function(note) {
        if (0 == note.errorCode) {
          var tos = note.tos;
          var toc = note.toc;
          AnimalModel_1.AnimalModel.Instance.pushSelfRecord(tos.id, toc ? toc.info : []);
          UICaptureRecord_1.default.open();
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.GET_ANIMAL_RECORD, note.errorCode);
      };
      AnimalModuleController.prototype.requestGetAnimalReward = function() {
        this.send(AnimalModuleCommand_1.AnimalModuleCommand.GET_ANIMAL_REWARD);
      };
      AnimalModuleController.prototype.getAnimalRewardHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          AnimalModel_1.AnimalModel.Instance.pushRecentRewards(toc ? toc.info : []);
          UIRecentReward_1.default.open();
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.GET_ANIMAL_REWARD, note.errorCode);
      };
      AnimalModuleController.prototype.requestUseAnimalSkill = function(type) {
        var tos = new proto_1.m_1806_tos();
        tos.type = type;
        this.send(AnimalModuleCommand_1.AnimalModuleCommand.USE_ANIMAL_SKILL, tos, tos);
      };
      AnimalModuleController.prototype.useAnimalSkillHandler = function(note) {
        if (0 == note.errorCode) {
          var tos = note.tos;
          var toc = note.toc;
          AnimalModel_1.AnimalModel.Instance.UseupdateSkill(toc.skill);
          if (tos.type == proto_1.e_animal_skill_type.ice) ; else if (tos.type == proto_1.e_animal_skill_type.improve_odds) {
            AnimalModel_1.AnimalModel.Instance.hitBuffDuration = 1e3 * toc.skill.time;
            AnimalModel_1.AnimalModel.Instance.SratBuff();
          } else tos.type == proto_1.e_animal_skill_type.locking && AnimalModel_1.AnimalModel.Instance.lockSkillEffectStart();
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.USE_ANIMAL_SKILL, note.errorCode);
      };
      AnimalModuleController.prototype.requestGetZooTypeInfo = function() {
        this.send(AnimalModuleCommand_1.AnimalModuleCommand.GET_ZOO_TYPE_INFO);
      };
      AnimalModuleController.prototype.getZooTypeInfoHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          null != toc && (AnimalModel_1.AnimalModel.Instance.zoo_room = toc.info);
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.GET_ZOO_TYPE_INFO, note.errorCode);
      };
      AnimalModuleController.prototype.requestBuyTools = function(type) {
        var tos = new proto_1.m_1808_tos();
        tos.type = type;
        this.send(AnimalModuleCommand_1.AnimalModuleCommand.BUY_TOOLS, tos, tos);
      };
      AnimalModuleController.prototype.buyToolsHandler = function(note) {
        if (0 == note.errorCode) {
          var tos = note.tos;
          AnimalModel_1.AnimalModel.Instance.skillType = tos.type;
          this.requestUseAnimalSkill(tos.type);
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.BUY_TOOLS, note.errorCode);
      };
      AnimalModuleController.prototype.requestGetToolsPrice = function() {
        this.send(AnimalModuleCommand_1.AnimalModuleCommand.GET_TOOLS_PRICE);
      };
      AnimalModuleController.prototype.getToolsPriceHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          AnimalModel_1.AnimalModel.Instance.toolPrice = toc.val;
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.GET_TOOLS_PRICE, note.errorCode);
      };
      AnimalModuleController.prototype.pushCjHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          AnimalModel_1.AnimalModel.Instance.cur_roll_cj = toc.bonus;
          AnimalModel_1.AnimalModel.Instance.updateModel(ModelMessageType_1.ModelMessageType.ZOO_CJ_UPDATE);
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_CJ, note.errorCode);
      };
      AnimalModuleController.prototype.pushCjRewardHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          MissionModel_1.MissionModel.Instance.cjWinVal = AnimalModel_1.AnimalModel.Instance.dividedMultiple(parseInt(toc.bonus));
          ZooCjWin_1.default.open();
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_CJ_REWARD, note.errorCode);
      };
      AnimalModuleController.prototype.requestGetCjLog = function() {
        this.send(AnimalModuleCommand_1.AnimalModuleCommand.GET_CJ_LOG);
      };
      AnimalModuleController.prototype.getCjLogHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          AnimalModel_1.AnimalModel.Instance.cj_records = toc ? toc.list : null;
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.GET_CJ_LOG, note.errorCode);
      };
      AnimalModuleController.prototype.pushOneBlowHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          AnimalModel_1.AnimalModel.Instance.pushCri(toc.role_id, toc.time, toc.bet_val);
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ONE_BLOW, note.errorCode);
      };
      AnimalModuleController.prototype.clearOneBlowHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          AnimalModel_1.AnimalModel.Instance.clearCri(toc.role_id);
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.CLEAR_ONE_BLOW, note.errorCode);
      };
      AnimalModuleController.prototype.pushHitAnimalHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          AnimalModel_1.AnimalModel.Instance.playerHitAnimal(toc);
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_HIT_ANIMAL, note.errorCode);
      };
      AnimalModuleController.prototype.pushLeaveAnimalHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          AnimalModel_1.AnimalModel.Instance.animalLeave(toc.id);
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_LEAVE_ANIMAL, note.errorCode);
      };
      AnimalModuleController.prototype.pushAnimalEnterHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          AnimalModel_1.AnimalModel.Instance.animalEnter(toc.animal);
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ANIMAL_ENTER, note.errorCode);
      };
      AnimalModuleController.prototype.pushRoleEnterHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          AnimalModel_1.AnimalModel.Instance.playerEnter(toc.player);
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ROLE_ENTER, note.errorCode);
      };
      AnimalModuleController.prototype.pushRoleLeaveHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          AnimalModel_1.AnimalModel.Instance.playerLeave(toc.role_id);
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ROLE_LEAVE, note.errorCode);
      };
      AnimalModuleController.prototype.pushAnimalDieHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          AnimalModel_1.AnimalModel.Instance.animalDead(toc);
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ANIMAL_DIE, note.errorCode);
      };
      AnimalModuleController.prototype.pushAnimalComingHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          toc.animal == proto_1.e_animal.elephant ? AnimalModel_1.AnimalModel.Instance.elephantComing() : toc.animal == proto_1.e_animal.bomber && AnimalModel_1.AnimalModel.Instance.bombComing();
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ANIMAL_COMING, note.errorCode);
      };
      AnimalModuleController.prototype.pushRoleUseSkillHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          if (toc.type == proto_1.e_animal_skill_type.ice) {
            AnimalModel_1.AnimalModel.Instance.useIceSkill(toc.role_id, toc.ids, toc.time);
            AnimalModel_1.AnimalModel.Instance.iceSkillEffectStart();
            UIZooIceSkill_1.default.open();
          }
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ROLE_USE_SKILL, note.errorCode);
      };
      AnimalModuleController.prototype.requestEnterActivity = function(agent_id) {
        var tos = new proto_1.m_1871_tos();
        tos.agent_id = agent_id;
        this.send(AnimalModuleCommand_1.AnimalModuleCommand.ENTER_ACTIVITY, tos);
      };
      AnimalModuleController.prototype.enterActivityHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.ENTER_ACTIVITY, note.errorCode);
      };
      AnimalModuleController.prototype.requestHitActivityAnimal = function(id, bet_val) {
        var tos = new proto_1.m_1872_tos();
        tos.id = id;
        tos.bet_val = bet_val;
        this.send(AnimalModuleCommand_1.AnimalModuleCommand.HIT_ACTIVITY_ANIMAL, tos);
      };
      AnimalModuleController.prototype.hitActivityAnimalHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.HIT_ACTIVITY_ANIMAL, note.errorCode);
      };
      AnimalModuleController.prototype.requestGetActivityRank = function(id, num) {
        var tos = new proto_1.m_1873_tos();
        tos.id = id;
        tos.num = num;
        this.send(AnimalModuleCommand_1.AnimalModuleCommand.GET_ACTIVITY_RANK, tos);
      };
      AnimalModuleController.prototype.getActivityRankHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.GET_ACTIVITY_RANK, note.errorCode);
      };
      AnimalModuleController.prototype.pushActivityAnimalHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ACTIVITY_ANIMAL, note.errorCode);
      };
      AnimalModuleController.prototype.pushActivityOutHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ACTIVITY_OUT, note.errorCode);
      };
      AnimalModuleController.prototype.pushActivityAnimalEnterHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ACTIVITY_ANIMAL_ENTER, note.errorCode);
      };
      AnimalModuleController.prototype.pushActivityAnimalDieHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ACTIVITY_ANIMAL_DIE, note.errorCode);
      };
      AnimalModuleController.prototype.pushActivityStateHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ACTIVITY_STATE, note.errorCode);
      };
      AnimalModuleController.prototype.requestLookActivity = function(agent_id) {
        var tos = new proto_1.m_1879_tos();
        tos.agent_id = agent_id;
        this.send(AnimalModuleCommand_1.AnimalModuleCommand.LOOK_ACTIVITY, tos);
      };
      AnimalModuleController.prototype.lookActivityHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.LOOK_ACTIVITY, note.errorCode);
      };
      AnimalModuleController.prototype.pushActivityRankHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ACTIVITY_RANK, note.errorCode);
      };
      AnimalModuleController.prototype.pushActivityHitHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ACTIVITY_HIT, note.errorCode);
      };
      AnimalModuleController.prototype.pushActivityBroadcastHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(AnimalModuleCommand_1.AnimalModuleCommand.PUSH_ACTIVITY_BROADCAST, note.errorCode);
      };
      return AnimalModuleController;
    }(ModuleBase_1.ModuleBase);
    exports.AnimalModuleController = AnimalModuleController;
    cc._RF.pop();
  }, {
    "../common/command/AnimalModuleCommand": "AnimalModuleCommand",
    "../common/core/ModuleBase": "ModuleBase",
    "../common/core/NotificationManager": "NotificationManager",
    "../common/init/ErrorCodeType": "ErrorCodeType",
    "../common/init/ModelMessageType": "ModelMessageType",
    "../model/AnimalModel": "AnimalModel",
    "../model/LoginModel": "LoginModel",
    "../model/MissionModel": "MissionModel",
    "../proto/proto": "proto",
    "../util/ErrorCodeUtil": "ErrorCodeUtil",
    "../view/common/UIStartLoading": "UIStartLoading",
    "../view/skill/UIZooIceSkill": "UIZooIceSkill",
    "../view/zoo/UICaptureRecord": "UICaptureRecord",
    "../view/zoo/UIRecentReward": "UIRecentReward",
    "../view/zoo/UIZooPanel": "UIZooPanel",
    "../view/zoo_component/ZooCjWin": "ZooCjWin"
  } ],
  ApiService: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "23eadAzBtxDvZdKkWoZqfA2", "ApiService");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ApiService = void 0;
    var ApiService = function() {
      function ApiService() {}
      ApiService.request = function(method, path, data, success, error, needLogin) {
        void 0 === needLogin && (needLogin = true);
        var url = this.baseUrl + "/" + path;
        var xhr = new XMLHttpRequest();
        xhr.timeout = 1e4;
        xhr.onreadystatechange = function() {
          if (4 === xhr.readyState) if (xhr.status >= 200 && xhr.status < 300) try {
            var res = JSON.parse(xhr.responseText);
            "pub/index" === path ? success(res) : 0 === res.code ? success(res) : null === error || void 0 === error ? void 0 : error(res.message || "\u8bf7\u6c42\u8fd4\u56de\u9519\u8bef");
          } catch (err) {
            null === error || void 0 === error ? void 0 : error("\u89e3\u6790\u9519\u8bef: " + err);
          } else null === error || void 0 === error ? void 0 : error("\u8bf7\u6c42\u5931\u8d25: " + xhr.status);
        };
        xhr.onerror = function() {
          null === error || void 0 === error ? void 0 : error("\u7f51\u7edc\u8bf7\u6c42\u9519\u8bef");
        };
        if (1 === method) {
          var query = data ? this.encodeQuery(data) : "";
          xhr.open("GET", query ? url + "?" + query : url, true);
          xhr.send();
        } else if (2 === method) {
          xhr.open("POST", url, true);
          xhr.setRequestHeader("Content-Type", "application/json");
          xhr.send(JSON.stringify(data || {}));
        } else null === error || void 0 === error ? void 0 : error("\u4e0d\u652f\u6301\u7684\u8bf7\u6c42\u65b9\u6cd5");
      };
      ApiService.encodeQuery = function(data) {
        return Object.keys(data).map(function(key) {
          return encodeURIComponent(key) + "=" + encodeURIComponent(data[key]);
        }).join("&");
      };
      ApiService.baseUrl = "http://114.55.36.11:38080";
      return ApiService;
    }();
    exports.ApiService = ApiService;
    cc._RF.pop();
  }, {} ],
  AsyncState: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d9bcfx7UGBAMpP0Hrxk2epy", "AsyncState");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AsyncState = void 0;
    var errorCodeRequestTimeout = -1;
    var errorCodeSendFail = -2;
    var errorCodeSendCD = -3;
    var AsyncState = function() {
      function AsyncState(code) {
        this._errorCode = code;
      }
      Object.defineProperty(AsyncState.prototype, "errorCode", {
        get: function() {
          return this._errorCode;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AsyncState.prototype, "isSucc", {
        get: function() {
          return 0 == this.errorCode;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AsyncState.prototype, "isTimeout", {
        get: function() {
          return this.errorCode == errorCodeRequestTimeout;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AsyncState.prototype, "isFail", {
        get: function() {
          return this.errorCode == errorCodeSendFail;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AsyncState.prototype, "isCDing", {
        get: function() {
          return this.errorCode == errorCodeSendCD;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AsyncState.prototype, "isError", {
        get: function() {
          return this.errorCode > 0;
        },
        enumerable: false,
        configurable: true
      });
      AsyncState.timeout = new AsyncState(errorCodeRequestTimeout);
      AsyncState.fail = new AsyncState(errorCodeSendFail);
      AsyncState.fail_cd = new AsyncState(errorCodeSendCD);
      AsyncState.succ = new AsyncState(0);
      return AsyncState;
    }();
    exports.AsyncState = AsyncState;
    cc._RF.pop();
  }, {} ],
  AudioManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4401dXJTtlAcbjQIs5hEagx", "AudioManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SoundPauseType = exports.AudioManager = void 0;
    var TimerManager_1 = require("./../common/core/TimerManager");
    var ResourceUtil_1 = require("../util/ResourceUtil");
    var AudioManager = function() {
      function AudioManager() {
        this.currentbackgroudname = null;
        this.currentBackgroundAudioId = 0;
        this._volumnMusic = 1;
        this._volumnEffect = 1;
        this._paused = false;
        this.pauseTypes = [];
        this.position = 0;
        this.volumnTimerId = 0;
        this.volumnFadeUpDuration = 1e3;
        this.volumnFadeDownDuration = 500;
        this.frameduration = 35;
        this.playingEffectDict = {};
      }
      Object.defineProperty(AudioManager, "Instance", {
        get: function() {
          return AudioManager.instance;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AudioManager.prototype, "currentBackgroundName", {
        get: function() {
          return this.currentbackgroudname;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AudioManager.prototype, "volumnMusic", {
        get: function() {
          return this._volumnMusic;
        },
        set: function(value) {
          if (this._volumnMusic == value) return;
          value < 0 ? value = 0 : value > 1 && (value = 1);
          this._volumnMusic = value;
          0 != this.currentBackgroundAudioId ? value > 0 ? cc.audioEngine.setMusicVolume(value) : this.stopBackgroundMusic(true) : value > 0 && null != this.currentbackgroudname && !this._paused && this.loadSoundToPlay(this._volumnMusic);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AudioManager.prototype, "volumnEffect", {
        get: function() {
          return this._volumnEffect;
        },
        set: function(value) {
          if (this._volumnEffect == value) return;
          value < 0 ? value = 0 : value > 1 && (value = 1);
          this._volumnEffect = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AudioManager.prototype, "soundEnable", {
        get: function() {
          return this._soundEnable;
        },
        set: function(v) {
          this._soundEnable = v;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AudioManager.prototype, "bgmEnable", {
        get: function() {
          return this._bgmEnable;
        },
        set: function(v) {
          if (this._bgmEnable == v) return;
          this._bgmEnable = v;
          if (v) this.currentBackgroundName && this.loadSoundToPlay(); else {
            if (0 == this.currentBackgroundAudioId) return;
            this.volumnFadeDown();
          }
        },
        enumerable: false,
        configurable: true
      });
      AudioManager.prototype.pause = function(type, fadedown) {
        void 0 === type && (type = SoundPauseType.default);
        void 0 === fadedown && (fadedown = true);
        if (this.pauseTypes.indexOf(type) > -1) return;
        this.pauseTypes.push(type);
        if (this._paused) return;
        this._paused = true;
        if (0 == this.currentBackgroundAudioId) return;
        if (fadedown) this.volumnFadeDown(); else {
          this.stopBackgroundMusic(true);
          this.removeTimer();
        }
      };
      AudioManager.prototype.resume = function(type) {
        void 0 === type && (type = SoundPauseType.default);
        var index = this.pauseTypes.indexOf(type);
        if (!(index > -1)) return;
        this.pauseTypes.splice(index, 1);
        if (this.pauseTypes.length > 0 || !this._paused) return;
        this._paused = false;
        null != this.currentbackgroudname && this.volumnMusic > 0 && this.loadSoundToPlay();
      };
      AudioManager.prototype.playBackground = function(name) {
        if (this.currentbackgroudname == name) return;
        this.currentbackgroudname = name;
        this.position = 0;
        if (this._paused || this._volumnMusic <= 0 || !this.bgmEnable) return;
        this.loadSoundToPlay();
      };
      AudioManager.prototype.stopBackground = function() {
        if (null == this.currentbackgroudname) return;
        this.currentbackgroudname = null;
        0 != this.currentBackgroundAudioId && this.volumnFadeDown();
      };
      AudioManager.prototype.loadSoundToPlay = function(volumn) {
        void 0 === volumn && (volumn = 0);
        0 != this.currentBackgroundAudioId && this.volumnFadeDown();
        var name = this.currentbackgroudname;
        var clip = ResourceUtil_1.ResourceUtil.getAudioClipByAudioName(name);
        null == clip ? ResourceUtil_1.ResourceUtil.getAssetAsync(name, cc.AudioClip, this.musicLoadComplete.bind(this)) : 0 == this.currentBackgroundAudioId && 0 == this.volumnTimerId && this.playBgm(name, volumn);
      };
      AudioManager.prototype.playBgm = function(name, volumn) {
        void 0 === volumn && (volumn = 0);
        var clip = ResourceUtil_1.ResourceUtil.getAudioClipByAudioName(name);
        if (null == clip || !this.bgmEnable) return;
        this.position > 0 && this.position > clip.duration - 1 && (this.position = 0);
        var audioId = cc.audioEngine.playMusic(clip, true);
        this.position > 0 && cc.audioEngine.setCurrentTime(audioId, this.position);
        this.currentBackgroundAudioId = audioId;
        if (volumn > 0) cc.audioEngine.getMusicVolume() != volumn && cc.audioEngine.setMusicVolume(volumn); else {
          0 != cc.audioEngine.getMusicVolume() && cc.audioEngine.setMusicVolume(0);
          this.volumnFadeUp();
        }
      };
      AudioManager.prototype.backgroundComplete = function() {};
      AudioManager.prototype.volumnFadeUp = function() {
        this.volumnTimerId > 0 && TimerManager_1.TimerManager.Instance.removeTimer(this.volumnTimerId);
        this.volumnTimerId = TimerManager_1.TimerManager.Instance.addCountdown(2e3, this, this.volumnFadeUpComplete, this.volumnFadeUpUpdate, this.frameduration);
      };
      AudioManager.prototype.volumnFadeUpUpdate = function() {
        if (0 != this.currentBackgroundAudioId) {
          var currentMusicVolumn = cc.audioEngine.getMusicVolume();
          var newMusicVolumn = Math.min(this.volumnMusic, currentMusicVolumn + this.volumnMusic / (this.volumnFadeUpDuration / this.frameduration));
          cc.audioEngine.setMusicVolume(newMusicVolumn);
        }
        if (0 == this.currentBackgroundAudioId || cc.audioEngine.getMusicVolume() >= this.volumnMusic) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.volumnTimerId);
          this.volumnFadeUpComplete();
        }
      };
      AudioManager.prototype.volumnFadeUpComplete = function() {
        this.volumnTimerId = 0;
      };
      AudioManager.prototype.volumnFadeDown = function() {
        this.volumnTimerId > 0 && TimerManager_1.TimerManager.Instance.removeTimer(this.volumnTimerId);
        this.volumnTimerId = TimerManager_1.TimerManager.Instance.addCountdown(2e3, this, this.volumnFadeDownComplete, this.volumnFadeDownUpdate, this.frameduration);
      };
      AudioManager.prototype.volumnFadeDownUpdate = function() {
        if (0 != this.currentBackgroundAudioId) {
          var currentMusicVolumn = cc.audioEngine.getMusicVolume();
          var newMusicVolumn = Math.max(0, currentMusicVolumn - this.volumnMusic / (this.volumnFadeDownDuration / this.frameduration));
          cc.audioEngine.setMusicVolume(newMusicVolumn);
        }
        if (0 == this.currentBackgroundAudioId || cc.audioEngine.getMusicVolume() <= 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.volumnTimerId);
          this.volumnFadeDownComplete();
        }
      };
      AudioManager.prototype.volumnFadeDownComplete = function() {
        this.volumnTimerId = 0;
        this.stopBackgroundMusic(true);
        !this._paused && this._volumnMusic > 0 && (this.volumnTimerId = TimerManager_1.TimerManager.Instance.addCountdown(200, this, this.delayToPlaybackground));
      };
      AudioManager.prototype.delayToPlaybackground = function() {
        this.volumnTimerId = 0;
        if (null != this.currentbackgroudname) {
          this.position = 0;
          this.playBgm(this.currentbackgroudname, 0);
        }
      };
      AudioManager.prototype.musicLoadComplete = function(clip, name) {
        if (null == clip) return;
        if (this.currentbackgroudname == name) {
          if (this.volumnTimerId > 0) return;
          !this._paused && this._volumnMusic > 0 && this.playBgm(name, 0);
        }
      };
      AudioManager.prototype.touchToPlayBgm = function() {
        this.currentbackgroudname && 0 == this.currentBackgroundAudioId && !this._paused && this._volumnMusic > 0 && this.playBgm(this.currentbackgroudname, 0);
      };
      AudioManager.prototype.stopBackgroundMusic = function(cachePosition) {
        if (this.currentBackgroundAudioId && 0 != this.currentBackgroundAudioId) {
          cachePosition && (this.position = cc.audioEngine.getCurrentTime(this.currentBackgroundAudioId));
          cc.audioEngine.stopMusic();
          this.currentBackgroundAudioId = 0;
        }
      };
      AudioManager.prototype.removeTimer = function() {
        if (this.volumnTimerId > 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.volumnTimerId);
          this.volumnTimerId = 0;
        }
      };
      AudioManager.prototype.playEffect = function(audioName, playWhenSysnLoaded, stopEnable, stopLastSame) {
        var _this = this;
        if (this._volumnEffect <= 0) return;
        if (!this.soundEnable) return;
        var clip = ResourceUtil_1.ResourceUtil.getAudioClipByAudioName(audioName);
        null == clip ? playWhenSysnLoaded ? ResourceUtil_1.ResourceUtil.getAssetAsync(audioName, cc.AudioClip, function(asset, resName) {
          asset && _this.playeEffectClip(asset, audioName, stopEnable, stopLastSame);
        }) : ResourceUtil_1.ResourceUtil.getAssetAsync(audioName, cc.AudioClip) : this.playeEffectClip(clip, audioName, stopEnable, stopLastSame);
      };
      AudioManager.prototype.stopEffect = function(audioName) {
        var audioId = this.playingEffectDict[audioName];
        if (audioId && 0 != audioId) {
          cc.audioEngine.stopEffect(audioId);
          this.playingEffectDict[audioName] = 0;
        }
      };
      AudioManager.prototype.stopAllEffect = function() {
        cc.audioEngine.stopAllEffects();
      };
      AudioManager.prototype.playeEffectClip = function(clip, audioName, stopEnable, stopLastSame) {
        var _this = this;
        var audioId;
        if (stopLastSame) {
          audioId = this.playingEffectDict[audioName];
          if (audioId && 0 != audioId) {
            cc.audioEngine.stopEffect(audioId);
            this.playingEffectDict[audioName] = 0;
          }
        }
        audioId = cc.audioEngine.playEffect(clip, false);
        cc.audioEngine.getEffectsVolume() != this._volumnEffect && cc.audioEngine.setEffectsVolume(this._volumnEffect);
        if (stopLastSame || stopEnable) {
          this.playingEffectDict[audioName] = audioId;
          cc.audioEngine.setFinishCallback(audioId, function() {
            _this.playingEffectDict[audioName] = 0;
          });
        }
      };
      AudioManager.instance = new AudioManager();
      return AudioManager;
    }();
    exports.AudioManager = AudioManager;
    var SoundPauseType;
    (function(SoundPauseType) {
      SoundPauseType[SoundPauseType["default"] = 0] = "default";
    })(SoundPauseType = exports.SoundPauseType || (exports.SoundPauseType = {}));
    cc._RF.pop();
  }, {
    "../util/ResourceUtil": "ResourceUtil",
    "./../common/core/TimerManager": "TimerManager"
  } ],
  AudioName: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ed922atGaZGk4lPfIKQDl/1", "AudioName");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AudioName = void 0;
    var AudioName = function() {
      function AudioName() {}
      AudioName.RESOURCES_AUDIO_ZOO_BASE = "resources/audio/zoo_base";
      AudioName.RESOURCES_AUDIO_ZOO_BG = "resources/audio/zoo_bg";
      AudioName.RESOURCES_AUDIO_ZOO_BOMB_WIN = "resources/audio/zoo_bomb_win";
      AudioName.RESOURCES_AUDIO_ZOO_BOMB = "resources/audio/zoo_bomb";
      AudioName.RESOURCES_AUDIO_ZOO_COIN = "resources/audio/zoo_coin";
      AudioName.RESOURCES_AUDIO_ZOO_EL_WIN = "resources/audio/zoo_el_win";
      AudioName.RESOURCES_AUDIO_ZOO_ELEPHANT = "resources/audio/zoo_elephant";
      AudioName.RESOURCES_AUDIO_ZOO_HIPPO = "resources/audio/zoo_hippo";
      AudioName.RESOURCES_AUDIO_ZOO_HIT = "resources/audio/zoo_hit";
      AudioName.RESOURCES_AUDIO_ZOO_LION = "resources/audio/zoo_lion";
      AudioName.RESOURCES_AUDIO_ZOO_PIKAQIU = "resources/audio/zoo_pikaqiu";
      return AudioName;
    }();
    exports.AudioName = AudioName;
    cc._RF.pop();
  }, {} ],
  BaseComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dceba1iAnFEXa51Zvrv7Rvc", "BaseComponent");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var StringUtil_1 = require("../../util/StringUtil");
    var ToggleSwitch_1 = require("../component/ToggleSwitch");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BaseComponent = function(_super) {
      __extends(BaseComponent, _super);
      function BaseComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.COM = "com";
        _this.AUDIO = "audio";
        _this.SPRITE_FRAME = "spriteframe";
        return _this;
      }
      BaseComponent_1 = BaseComponent;
      BaseComponent.prototype.onLoad = function() {
        this.addUIListener();
      };
      BaseComponent.prototype.addUIListener = function() {};
      BaseComponent.prototype.removeUIListener = function() {};
      BaseComponent.prototype.getTypeMap = function() {
        var types = [ cc.Label, cc.Button, cc.Sprite, cc.ScrollView, cc.Toggle, cc.ToggleContainer, cc.Slider, cc.EditBox, cc.RichText, cc.ProgressBar, cc.Widget, cc.Layout, cc.PageView, cc.Animation ];
        var aliasTypes = new Map();
        for (var i = 0; i < types.length; i++) {
          var name = cc.js.getClassName(types[i]);
          var dotIndex = name.lastIndexOf(".");
          dotIndex > -1 && (name = name.slice(dotIndex + 1));
          aliasTypes[name.toLowerCase()] = types[i];
        }
        aliasTypes["btn"] = cc.Button;
        aliasTypes["tog"] = cc.Toggle;
        aliasTypes["togcon"] = aliasTypes["tc"] = cc.ToggleContainer;
        aliasTypes["sp"] = aliasTypes["image"] = aliasTypes["img"] = cc.Sprite;
        aliasTypes["text"] = aliasTypes["txt"] = aliasTypes["lab"] = cc.Label;
        aliasTypes["input"] = cc.EditBox;
        aliasTypes["rt"] = cc.RichText;
        aliasTypes["pb"] = aliasTypes["progress"] = cc.ProgressBar;
        aliasTypes["wid"] = cc.Widget;
        aliasTypes["page"] = aliasTypes["pv"] = cc.PageView;
        aliasTypes["ani"] = cc.Animation;
        aliasTypes["scroll"] = cc.ScrollView;
        aliasTypes["particle"] = cc.ParticleSystem;
        aliasTypes[this.COM] = cc.Component;
        aliasTypes[this.AUDIO] = cc.AudioClip;
        aliasTypes[this.SPRITE_FRAME] = cc.SpriteFrame;
        return aliasTypes;
      };
      BaseComponent.prototype.resetInEditor = function() {
        this.doReset(false);
      };
      BaseComponent.prototype.doReset = function(onlyBindProperty) {
        var _this = this;
        var aliasTypes = this.getTypeMap();
        var nodeList = [];
        var nodeVarTypes = [];
        var importComponent = true;
        this.listNodeChildren(this.node, nodeList);
        for (var i = 0; i < nodeList.length; i++) nodeVarTypes[i] = this.parseNodeVarType(nodeList[i], aliasTypes);
        var scriptUuid = this["__scriptUuid"];
        Editor.log(scriptUuid);
        Editor.assetdb.queryInfoByUuid(scriptUuid, function(err, info) {
          if (null == info) {
            Editor.log("\u8bfb\u53d6\u811a\u672c\u51fa\u9519\uff1a" + err);
            return;
          }
          Editor.log(info.url);
          var fs = Editor.require("fs");
          var path = Editor.require("path");
          var data = fs.readFileSync(info.path);
          var classReg = new RegExp("export\\s+(default\\s+)*class\\s\\w+\\s+extends\\s+[.,\\w\\s<>]+\\s*{");
          var match = classReg.exec(data);
          var scriptContentStartIndex = 0;
          if (null == match) {
            Editor.log("export default class not match");
            return;
          }
          scriptContentStartIndex = match.index + match[0].length;
          var varScripts = "";
          var propertyStr = "\t@property({0})\n";
          var propertyListStr = "\t@property([{0}])\n";
          var varStr = "\t{0}:{1} = null;\n";
          var varlistStr = "\t{0}: {1}[] = [];\n";
          var addImportStr = "";
          var listenerNodes = [];
          var listenerTypes = [ cc.Button, cc.Toggle, cc.Slider, cc.PageView, ToggleSwitch_1.default ];
          for (var i = 0; i < nodeList.length; i++) {
            var varDefinedStr = null;
            var propertyDefinedStr = null;
            if (onlyBindProperty) break;
            if (nodeVarTypes[i].varName in _this) continue;
            if (nodeVarTypes[i].var_ == Var.varlist_) {
              var varReg = new RegExp(nodeVarTypes[i].varName + "\\s*:\\s*(cc.)*\\w+\\s*\\[\\s*\\]");
              if (varReg.test(data)) continue;
              propertyDefinedStr = propertyListStr;
              varDefinedStr = varlistStr;
            } else {
              var varReg = new RegExp(nodeVarTypes[i].varName + "\\s*:\\s*(cc.)*\\w+");
              if (varReg.test(data)) continue;
              propertyDefinedStr = propertyStr;
              varDefinedStr = varStr;
              listenerTypes.includes(nodeVarTypes[i].varType) && listenerNodes.push(nodeVarTypes[i]);
            }
            var typeName = cc.js.getClassName(nodeVarTypes[i].varType);
            varScripts += "\n";
            varScripts += StringUtil_1.default.replaceString(propertyDefinedStr, typeName);
            varScripts += StringUtil_1.default.replaceString(varDefinedStr, nodeVarTypes[i].varName, typeName);
            if (importComponent && !typeName.startsWith("cc.")) {
              var component = nodeVarTypes[i].node.getComponent(nodeVarTypes[i].varType);
              nodeVarTypes[i].var_ == Var.varlist_ && null == component && (component = nodeVarTypes[i].node.getComponentInChildren(nodeVarTypes[i].varType));
              if (component) {
                var componentScriptUuid = component["__scriptUuid"];
                var componentScriptInfo = Editor.remote.assetdb.assetInfoByUuid(componentScriptUuid);
                var relativePath = path.relative(info.url, componentScriptInfo.url).replace(/\\/g, "/");
                relativePath.startsWith("../") && (relativePath = relativePath.slice(1));
                var importName = path.basename(componentScriptInfo.url, ".ts");
                var importStr = "import " + importName + ' from "' + relativePath.slice(0, relativePath.length - 3) + '";\n';
                var importReg = new RegExp("import\\s*" + importName + "\\s*from\\s+");
                if (!importReg.test(data) && !importReg.test(addImportStr)) {
                  addImportStr += importStr;
                  Editor.log(importStr);
                }
              }
            }
          }
          if (varScripts.length > 0) {
            var newScript = addImportStr + match.input.slice(0, scriptContentStartIndex) + "\n" + varScripts + match.input.slice(scriptContentStartIndex);
            if (listenerNodes.length > 0) {
              var addUIListenerScript = _this.addUIListenerFunction(newScript, listenerNodes);
              addUIListenerScript && (newScript = addUIListenerScript);
            }
            Editor.assetdb.saveExists(info.url, newScript, function(err, meta) {});
          } else {
            var _loop_1 = function(i) {
              var nodeVarType = nodeVarTypes[i];
              if (!_this.hasOwnProperty(nodeVarTypes[i].varName)) return "continue";
              if (nodeVarType.var_ == Var.varlist_) {
                var childList_1 = [];
                _this[nodeVarType.varName] = childList_1;
                if (nodeVarType.varType == cc.AudioClip) {
                  var audioSource = nodeVarType.node.getComponentInChildren(cc.AudioSource);
                  null == audioSource && (audioSource = nodeVarType.node.getComponent(cc.AudioSource));
                  if (audioSource && audioSource.clip) {
                    var audioUuid = path.basename(audioSource.clip.nativeUrl, ".mp3");
                    Editor.assetdb.queryInfoByUuid(audioUuid, function(e, audioInfo) {
                      if (e) return;
                      var assetType = Editor.assettype2name[cc.js.getClassName(cc.AudioClip)];
                      var pattern = path.dirname(audioInfo.url) + "/*";
                      Editor.assetdb.queryAssets(pattern, assetType, function(err, results) {
                        if (err) return;
                        results.forEach(function(result) {
                          cc.assetManager.loadAny({
                            uuid: result.uuid,
                            type: cc.AudioClip
                          }, function(error, asset) {
                            error ? Editor.log(error) : childList_1.push(asset);
                          });
                        });
                      });
                    });
                  } else Editor.log(StringUtil_1.default.replaceString("\u8bf7\u5148\u5c06\u9700\u6302\u8f7d\u7684\u4efb\u610f\u4e00\u4e2a mp3 \u6587\u4ef6\u62d6\u5230{0}\u8282\u70b9\u4e0b\uff0c\u7ec4\u4ef6\u5c06\u4f1a\u628a\u540c\u76ee\u5f55\u4e0b\u7684\u6240\u6709 AudioClip \u6302\u8f7d\u5230\u811a\u672c\u4e2d", nodeVarType.node.name));
                } else if (nodeVarType.varType == cc.SpriteFrame) {
                  var sprite = nodeVarType.node.getComponentInChildren(cc.Sprite);
                  null == sprite && (sprite = nodeVarType.node.getComponent(cc.Sprite));
                  if (sprite && sprite.spriteFrame) {
                    var spriteTextureNativeUrl = path.basename(sprite.spriteFrame["_texture"].toString());
                    var spriteTextureUuid = spriteTextureNativeUrl.slice(0, spriteTextureNativeUrl.lastIndexOf("."));
                    Editor.assetdb.queryInfoByUuid(spriteTextureUuid, function(e, spriteframeInfo) {
                      if (e) return;
                      var assetType = Editor.assettype2name[cc.js.getClassName(cc.Texture2D)];
                      var pattern = path.dirname(spriteframeInfo.url) + "/*";
                      Editor.assetdb.queryAssets(pattern, assetType, function(err, results) {
                        results.forEach(function(result) {
                          var fileName = path.basename(result.url);
                          var spriteframeName = fileName.slice(0, fileName.lastIndexOf("."));
                          var spriteframeUrl = result.url + "/" + spriteframeName;
                          Editor.assetdb.queryUuidByUrl(spriteframeUrl, function(err, uuid) {
                            err ? Editor.log(err) : uuid ? cc.assetManager.loadAny({
                              uuid: uuid,
                              type: cc.SpriteFrame
                            }, function(error, asset) {
                              error ? Editor.log(error) : childList_1.push(asset);
                              childList_1.sort(function(a, b) {
                                if (a.name < b.name) return -1;
                                if (a.name > b.name) return 1;
                                return 0;
                              });
                            }) : Editor.log("\u56fe\u7247\u4e0d\u5b58\u5728\uff1a" + spriteframeUrl);
                          });
                        });
                      });
                    });
                  } else Editor.log(StringUtil_1.default.replaceString("\u8bf7\u5148\u5c06\u9700\u6302\u8f7d\u7684\u4efb\u610f\u4e00\u4e2a\u7cbe\u7075\u56fe\u7247\u62d6\u5230{0}\u8282\u70b9\u4e0b\uff0c\u7ec4\u4ef6\u5c06\u4f1a\u628a\u540c\u76ee\u5f55\u4e0b\u7684\u6240\u6709 SpriteFrame \u6302\u8f7d\u5230\u811a\u672c\u4e2d", nodeVarType.node.name));
                } else for (var c = 0; c < nodeVarType.node.childrenCount; c++) {
                  var childNode = nodeVarType.node.children[c];
                  var childNodeComponent = null;
                  childNodeComponent = null == nodeVarType.varType || nodeVarType.varType == cc.Node ? childNode : childNode.getComponent(nodeVarType.varType);
                  childNodeComponent && childList_1.push(childNodeComponent);
                }
              } else null == nodeVarType.varType || nodeVarType.varType == cc.Node ? _this[nodeVarType.varName] = nodeVarType.node : _this[nodeVarType.varName] = nodeVarTypes[i].node.getComponent(nodeVarType.varType);
            };
            for (var i = 0; i < nodeList.length; i++) _loop_1(i);
          }
        });
      };
      BaseComponent.prototype.logObject = function(obj) {
        for (var key in obj) {
          var element = obj[key];
          Editor.log(key + "==");
          Editor.log(element);
        }
      };
      BaseComponent.prototype.addUIListenerFunction = function(scriptText, listenerNodes) {
        var addFunctionRegex = new RegExp("protected\\s+addUIListener\\s*\\(\\s*\\)\\s*");
        var removeRunctionRegex = new RegExp("protected\\s+removeUIListener\\s*\\(\\s*\\)\\s*");
        var addFunctionStr = "protected addUIListener()\n\t{\n\t\t\n\t}";
        var removeFunctionStr = "protected removeUIListener()\n\t{\n\t\t\n\t}";
        var insertFunctionIndex = -1;
        var changed = false;
        var newScriptText = scriptText;
        if (scriptText) {
          if (!addFunctionRegex.test(newScriptText)) {
            insertFunctionIndex = this.searchClassInsertFunctionIndex(newScriptText);
            if (insertFunctionIndex > -1) {
              changed = true;
              newScriptText = newScriptText.substr(0, insertFunctionIndex) + "\n\t//\u65b9\u6cd5\u7531\u811a\u672c\u81ea\u52a8\u751f\u6210\n\t" + addFunctionStr + "\n\n" + newScriptText.substr(insertFunctionIndex);
            } else Editor.log("export default class not match,cancel add function defination");
          }
          if (!removeRunctionRegex.test(newScriptText)) {
            insertFunctionIndex = this.searchClassInsertFunctionIndex(newScriptText);
            if (insertFunctionIndex > -1) {
              changed = true;
              newScriptText = newScriptText.substr(0, insertFunctionIndex) + "\n\t//\u65b9\u6cd5\u7531\u811a\u672c\u81ea\u52a8\u751f\u6210\n\t" + removeFunctionStr + "\n\n" + newScriptText.substr(insertFunctionIndex);
            }
          }
        } else {
          newScriptText = "";
          newScriptText += "\n\t//\u65b9\u6cd5\u7531\u811a\u672c\u81ea\u52a8\u751f\u6210\n\t" + addFunctionStr + "\n\n";
          newScriptText += "\n\t//\u65b9\u6cd5\u7531\u811a\u672c\u81ea\u52a8\u751f\u6210\n\t" + removeFunctionStr + "\n\n";
        }
        var addFunctionMatch = addFunctionRegex.exec(newScriptText);
        if (addFunctionMatch) {
          var startIndex = addFunctionMatch.index + addFunctionMatch[0].length;
          for (var i = 0; i < listenerNodes.length; i++) {
            var node = listenerNodes[i];
            var searchResult = this.searchBlockRangeIndex(newScriptText, startIndex);
            if (-1 == searchResult.blockStartIndex || -1 == searchResult.blockEndIndex) continue;
            var contentStr = newScriptText.substr(startIndex, searchResult.blockEndIndex - searchResult.blockStartIndex);
            var upperName = this.upperCaseFirstChar(node.varName);
            var listenerStatement = void 0;
            var listenerReg = void 0;
            if (node.varType == cc.Button) {
              listenerStatement = StringUtil_1.default.replaceString('this.{0}.node.on("click",this.onClick{1},this);', node.varName, upperName);
              listenerReg = new RegExp(StringUtil_1.default.replaceString('this\\.{0}\\.node\\.on\\s*\\(\\s*"click"\\s*,\\s*this.onClick{1}\\s*,\\s*this\\s*\\);', node.varName, upperName));
            } else if (node.varType == cc.Toggle) {
              listenerStatement = StringUtil_1.default.replaceString('this.{0}.node.on("toggle",this.on{1}Changed,this);', node.varName, upperName);
              listenerReg = new RegExp(StringUtil_1.default.replaceString('this\\.{0}\\.node\\.on\\s*\\(\\s*"toggle"\\s*,\\s*this.on{1}Changed\\s*,\\s*this\\s*\\);', node.varName, upperName));
            } else if (node.varType == cc.Slider) {
              listenerStatement = StringUtil_1.default.replaceString('this.{0}.node.on("slide",this.on{1}Changed,this);', node.varName, upperName);
              listenerReg = new RegExp(StringUtil_1.default.replaceString('this\\.{0}\\.node\\.on\\s*\\(\\s*"slide"\\s*,\\s*this.on{1}Changed\\s*,\\s*this\\s*\\);', node.varName, upperName));
            } else if (node.varType == cc.PageView) {
              listenerStatement = StringUtil_1.default.replaceString('this.{0}.node.on("page-turning",this.on{1}Changed,this);', node.varName, upperName);
              listenerReg = new RegExp(StringUtil_1.default.replaceString('this\\.{0}\\.node\\.on\\s*\\(\\s*"page-turning"\\s*,\\s*this.on{1}Changed\\s*,\\s*this\\s*\\);', node.varName, upperName));
            } else if (node.varType == ToggleSwitch_1.default) {
              listenerStatement = StringUtil_1.default.replaceString("this.{0}.node.on(ToggleSwitch.CHANGED,this.on{1}Changed,this);", node.varName, upperName);
              listenerReg = new RegExp(StringUtil_1.default.replaceString("this\\.{0}\\.node\\.on\\s*\\(\\s*ToggleSwitch.CHANGED\\s*,\\s*this.on{1}Changed\\s*,\\s*this\\s*\\);", node.varName, upperName));
            }
            if (listenerReg && !listenerReg.test(contentStr)) {
              changed = true;
              newScriptText = newScriptText.substr(0, searchResult.blockStartIndex + 1) + "\n\t\t" + listenerStatement + newScriptText.substr(searchResult.blockStartIndex + 1);
            }
          }
        }
        var removeFunctionMatch = removeRunctionRegex.exec(newScriptText);
        if (removeFunctionMatch) {
          var startIndex = removeFunctionMatch.index + removeFunctionMatch[0].length;
          for (var i = 0; i < listenerNodes.length; i++) {
            var node = listenerNodes[i];
            var searchResult = this.searchBlockRangeIndex(newScriptText, startIndex);
            if (-1 == searchResult.blockStartIndex || -1 == searchResult.blockEndIndex) continue;
            var contentStr = newScriptText.substr(startIndex, searchResult.blockEndIndex - searchResult.blockStartIndex);
            var upperName = this.upperCaseFirstChar(node.varName);
            var listenerStatement = void 0;
            var listenerReg = void 0;
            if (node.varType == cc.Button) {
              listenerStatement = StringUtil_1.default.replaceString('this.{0}.node.off("click",this.onClick{1},this);', node.varName, upperName);
              listenerReg = new RegExp(StringUtil_1.default.replaceString('this\\.{0}\\.node\\.off\\s*\\(\\s*"click"\\s*,\\s*this.onClick{1}\\s*,\\s*this\\s*\\);', node.varName, upperName));
            } else if (node.varType == cc.Toggle) {
              listenerStatement = StringUtil_1.default.replaceString('this.{0}.node.off("toggle",this.on{1}Changed,this);', node.varName, upperName);
              listenerReg = new RegExp(StringUtil_1.default.replaceString('this\\.{0}\\.node\\.off\\s*\\(\\s*"toggle"\\s*,\\s*this.on{1}Changed\\s*,\\s*this\\s*\\);', node.varName, upperName));
            } else if (node.varType == cc.Slider) {
              listenerStatement = StringUtil_1.default.replaceString('this.{0}.node.off("slide",this.on{1}Changed,this);', node.varName, upperName);
              listenerReg = new RegExp(StringUtil_1.default.replaceString('this\\.{0}\\.node\\.off\\s*\\(\\s*"slide"\\s*,\\s*this.on{1}Changed\\s*,\\s*this\\s*\\);', node.varName, upperName));
            } else if (node.varType == cc.PageView) {
              listenerStatement = StringUtil_1.default.replaceString('this.{0}.node.off("page-turning",this.on{1}Changed,this);', node.varName, upperName);
              listenerReg = new RegExp(StringUtil_1.default.replaceString('this\\.{0}\\.node\\.off\\s*\\(\\s*"page-turning"\\s*,\\s*this.on{1}Changed\\s*,\\s*this\\s*\\);', node.varName, upperName));
            } else if (node.varType == ToggleSwitch_1.default) {
              listenerStatement = StringUtil_1.default.replaceString("this.{0}.node.off(ToggleSwitch.CHANGED,this.on{1}Changed,this);", node.varName, upperName);
              listenerReg = new RegExp(StringUtil_1.default.replaceString("this\\.{0}\\.node\\.off\\s*\\(\\s*ToggleSwitch.CHANGED\\s*,\\s*this.on{1}Changed\\s*,\\s*this\\s*\\);", node.varName, upperName));
            }
            if (listenerReg && !listenerReg.test(contentStr)) {
              changed = true;
              newScriptText = newScriptText.substr(0, searchResult.blockStartIndex + 1) + "\n\t\t" + listenerStatement + newScriptText.substr(searchResult.blockStartIndex + 1);
            }
          }
        }
        var callbackInsertIndex = -1;
        var insertFunctionMatch = removeFunctionMatch || addFunctionMatch;
        if (insertFunctionMatch) {
          var startIndex = insertFunctionMatch.index + insertFunctionMatch[0].length;
          var searchBlock = this.searchBlockRangeIndex(newScriptText, startIndex);
          callbackInsertIndex = searchBlock.succ ? searchBlock.blockEndIndex + 1 : this.searchClassInsertFunctionIndex(newScriptText);
        }
        if (callbackInsertIndex > -1) {
          var comment = "//\u65b9\u6cd5\u7531\u811a\u672c\u81ea\u52a8\u751f\u6210\uff0c\u4e0d\u8981\u91cd\u547d\u540d\uff0c\u5426\u5219\u518d\u6b21\u751f\u6210\u65f6\u4f1a\u4ea7\u751f\u591a\u4f59\u7684\u4ee3\u7801";
          var listenerCallbackStr = void 0;
          var listenerCallbackRegexPattern = void 0;
          var listenerCallbackRegex = void 0;
          for (var i = 0; i < listenerNodes.length; i++) {
            var node = listenerNodes[i];
            if (node.varType == cc.Button) {
              listenerCallbackStr = "private onClick{0}()\n\t{\n\t\t//TODO\n\t}";
              listenerCallbackRegexPattern = "(protected|private|public)\\s+onClick{0}\\s*\\(\\s*\\)\\s*";
              listenerCallbackRegex = new RegExp(StringUtil_1.default.replaceString(listenerCallbackRegexPattern, this.upperCaseFirstChar(node.varName)));
            } else if (node.varType == cc.Toggle) {
              listenerCallbackStr = "private on{0}Changed(toggle:cc.Toggle)\n\t{\n\t\t//TODO\n\t}";
              listenerCallbackRegexPattern = "(protected|private|public)\\s+on{0}Changed\\s*\\((\\s*toggle\\s*:\\s*cc\\.Toggle\\s*)*\\)\\s*";
              listenerCallbackRegex = new RegExp(StringUtil_1.default.replaceString(listenerCallbackRegexPattern, this.upperCaseFirstChar(node.varName)));
            } else if (node.varType == cc.Slider) {
              listenerCallbackStr = "private on{0}Changed(slider:cc.Slider)\n\t{\n\t\t//TODO\n\t}";
              listenerCallbackRegexPattern = "(protected|private|public)\\s+on{0}Changed\\s*\\((\\s*slider\\s*:\\s*cc\\.Slider\\s*)*\\)\\s*";
              listenerCallbackRegex = new RegExp(StringUtil_1.default.replaceString(listenerCallbackRegexPattern, this.upperCaseFirstChar(node.varName)));
            } else if (node.varType == cc.PageView) {
              listenerCallbackStr = "private on{0}Changed(pageView:cc.PageView)\n\t{\n\t\t//TODO\n\t}";
              listenerCallbackRegexPattern = "(protected|private|public)\\s+on{0}Changed\\s*\\((\\s*pageView\\s*:\\s*cc\\.PageView\\s*)*\\)\\s*";
              listenerCallbackRegex = new RegExp(StringUtil_1.default.replaceString(listenerCallbackRegexPattern, this.upperCaseFirstChar(node.varName)));
            } else if (node.varType == ToggleSwitch_1.default) {
              listenerCallbackStr = "private on{0}Changed(toggleSwitch:ToggleSwitch)\n\t{\n\t\t//TODO\n\t}";
              listenerCallbackRegexPattern = "(protected|private|public)\\s+on{0}Changed\\s*\\((\\s*toggleSwitch\\s*:\\s*ToggleSwitch\\s*)*\\)\\s*";
              listenerCallbackRegex = new RegExp(StringUtil_1.default.replaceString(listenerCallbackRegexPattern, this.upperCaseFirstChar(node.varName)));
            }
            if (null == listenerCallbackRegex || listenerCallbackRegex.test(newScriptText)) continue;
            changed = true;
            newScriptText = newScriptText.substr(0, callbackInsertIndex) + "\n\t\n\t" + comment + "\n\t" + listenerCallbackStr.replace("{0}", this.upperCaseFirstChar(node.varName)) + "\n" + newScriptText.substr(callbackInsertIndex);
          }
        }
        if (changed) return newScriptText;
        return null;
      };
      BaseComponent.prototype.upperCaseFirstChar = function(str) {
        if (str) {
          if (1 == str.length) return str.toUpperCase();
          return str.slice(0, 1).toUpperCase() + str.slice(1);
        }
        return str;
      };
      BaseComponent.prototype.searchClassInsertFunctionIndex = function(scriptText) {
        var classReg = new RegExp("export\\s+(default\\s+)*class\\s\\w+\\s+extends\\s+[.\\w]+\\s*");
        var match = classReg.exec(scriptText);
        if (!match) return -1;
        var scriptContentStartIndex = match.index + match[0].length;
        var result = this.searchBlockRangeIndex(match.input, scriptContentStartIndex);
        return result.blockEndIndex;
      };
      BaseComponent.prototype.searchBlockRangeIndex = function(scriptText, startIndex) {
        var result = {
          blockStartIndex: -1,
          blockEndIndex: -1,
          succ: false
        };
        var scriptContentStartIndex = startIndex;
        var blockLeftCount = 0;
        var blockRightCount = 0;
        var blockReg = new RegExp("({|})", "gm");
        blockReg.lastIndex = scriptContentStartIndex;
        var blockMatch = blockReg.exec(scriptText);
        var testTimes = 0;
        while (blockMatch) {
          var blockStr = blockMatch[0];
          "{" == blockStr ? blockLeftCount++ : "}" == blockStr && blockRightCount++;
          -1 == result.blockStartIndex && 1 == blockLeftCount && (result.blockStartIndex = blockMatch.index);
          if (blockLeftCount > 0 && blockLeftCount == blockRightCount) {
            result.blockEndIndex = blockMatch.index;
            break;
          }
          testTimes++;
          if (testTimes > 100) {
            Editor.log("blockReg.exec error");
            break;
          }
          blockMatch = blockReg.exec(scriptText);
        }
        result.succ = result.blockEndIndex > -1 && result.blockStartIndex > -1;
        return result;
      };
      BaseComponent.prototype.listNodeChildren = function(node, list) {
        for (var i = 0; i < node.childrenCount; i++) {
          var child = node.children[i];
          var name = child.name.trim();
          if (name.startsWith("var")) {
            var varname = this.camelCase2Underline(name);
            (varname.startsWith("var_") || varname.startsWith("varlist_")) && list.push(child);
          }
          if (child.childrenCount > 0) {
            var customComponent = child.getComponent(BaseComponent_1);
            if (customComponent) continue;
            if (this.tryGetCustomComponent(child)) continue;
            this.listNodeChildren(child, list);
          }
        }
      };
      BaseComponent.prototype.parseNodeVarType = function(node, aliasTypes) {
        var value = new NodeVarType();
        value.node = node;
        var varname = this.camelCase2Underline(node.name.trim());
        var nameSplits = varname.split("_");
        if (1 == nameSplits.length) return value;
        var varStr = nameSplits[0].toLowerCase();
        "varlist" == varStr && (value.var_ = Var.varlist_);
        nameSplits.shift();
        var typeAlias = nameSplits[0].toLowerCase();
        value.varType = aliasTypes[typeAlias];
        if (typeAlias == this.COM) if (value.var_ == Var.varlist_) {
          if (node.childrenCount > 0) for (var i = 0; i < node.childrenCount; i++) {
            var customComponentType = this.tryGetCustomComponent(node.children[0]);
            if (customComponentType) {
              value.varType = customComponentType;
              nameSplits.length > 1 && nameSplits.shift();
              break;
            }
          }
        } else {
          var customComponentType = this.tryGetCustomComponent(node);
          if (customComponentType) {
            value.varType = customComponentType;
            nameSplits.length > 1 && nameSplits.shift();
          }
        } else typeAlias != this.AUDIO && typeAlias != this.SPRITE_FRAME || (value.var_ = Var.varlist_);
        null == value.varType && (value.varType = cc.Node);
        value.varName = nameSplits[0];
        for (var i = 1; i < nameSplits.length; i++) nameSplits[i].length <= 1 ? value.varName += nameSplits[i].toUpperCase() : value.varName += nameSplits[i].slice(0, 1).toUpperCase() + nameSplits[i].slice(1);
        return value;
      };
      BaseComponent.prototype.camelCase2Underline = function(str) {
        var list = [];
        var lastIndex = 0;
        var length = str.length;
        var i = 1;
        for (;i < length; i++) {
          var s = str.substr(i, 1);
          if ("_" == s) {
            lastIndex < i && list.push(str.substr(lastIndex, i - lastIndex));
            lastIndex = i + 1;
            continue;
          }
          if (s.toUpperCase() == s) {
            lastIndex < i && list.push(str.substr(lastIndex, i - lastIndex));
            lastIndex = i;
            continue;
          }
        }
        lastIndex < i && list.push(str.substr(lastIndex, i - lastIndex));
        return list.join("_");
      };
      BaseComponent.prototype.tryGetCustomComponent = function(node) {
        var components = node.getComponents(cc.Component);
        var type = null;
        for (var i = 0; i < components.length; i++) {
          var typeName = cc.js.getClassName(components[i]);
          if (typeName.startsWith("cc.")) continue;
          if (components[i]["asCCComponent"]) continue;
          return cc.js.getClassByName(typeName);
        }
        return type;
      };
      var BaseComponent_1;
      BaseComponent = BaseComponent_1 = __decorate([ ccclass ], BaseComponent);
      return BaseComponent;
    }(cc.Component);
    exports.default = BaseComponent;
    var NodeVarType = function() {
      function NodeVarType() {
        this.var_ = Var.var_;
      }
      return NodeVarType;
    }();
    var Var;
    (function(Var) {
      Var[Var["var_"] = 0] = "var_";
      Var[Var["varlist_"] = 1] = "varlist_";
    })(Var || (Var = {}));
    cc._RF.pop();
  }, {
    "../../util/StringUtil": "StringUtil",
    "../component/ToggleSwitch": "ToggleSwitch"
  } ],
  CaptureRecordItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8c601ARsNdCob4wGbkfZ7Fv", "CaptureRecordItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimalModel_1 = require("../../model/AnimalModel");
    var StringUtil_1 = require("../../util/StringUtil");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CaptureRecordItem = function(_super) {
      __extends(CaptureRecordItem, _super);
      function CaptureRecordItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.spriteAnimal = null;
        _this.spriteGot = null;
        _this.labelName = null;
        _this.labelTime = null;
        _this.labelWin = null;
        _this.labelBet = null;
        return _this;
      }
      CaptureRecordItem.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      CaptureRecordItem.prototype.start = function() {};
      CaptureRecordItem.prototype.updateView = function(data) {
        var _a;
        if (!data) {
          console.warn("CaptureRecordItem: No data provided");
          return;
        }
        var info = data;
        var animal = info.animal;
        var animalModel = AnimalModel_1.AnimalModel.Instance;
        var odds = animalModel.getAnimalOdds(animal);
        var hasWin = (info.win || 0) > 0;
        this.spriteGot.node.active = hasWin;
        this.spriteAnimal.node.opacity = hasWin ? 204 : 255;
        this.labelName.string = animalModel.getAnimalName(animal) || "\u672a\u77e5\u52a8\u7269";
        this.labelTime.string = info.time ? StringUtil_1.default.timestampToString(info.time, "MM-DD | hh:mm:ss") : "--";
        var betVal = animalModel.dividedMultiple(info.bet_val || 0);
        this.labelBet.string = StringUtil_1.default.replaceString("\u6d88\u8017{0}\u91d1\u8c46", betVal);
        var win = animalModel.dividedMultiple(info.win || 0);
        this.labelWin.string = win > 0 ? StringUtil_1.default.replaceString("\u83b7\u5f97{0}\u91d1\u8c46", win) : "\u672a\u6355\u83b7";
        var animalIcons = null === (_a = animalModel.res) || void 0 === _a ? void 0 : _a.animalIcons;
        animalIcons && animal >= 1 && animal <= animalIcons.length ? this.spriteAnimal.spriteFrame = animalIcons[animal - 1] : console.warn("CaptureRecordItem: Invalid animal " + animal + " or missing icons");
        var textColor = hasWin ? cc.Color.RED : cc.Color.WHITE;
        this.labelWin.node.color.toString() !== textColor.toString() && (this.labelWin.node.color = textColor);
      };
      __decorate([ property(cc.Sprite) ], CaptureRecordItem.prototype, "spriteAnimal", void 0);
      __decorate([ property(cc.Sprite) ], CaptureRecordItem.prototype, "spriteGot", void 0);
      __decorate([ property(cc.Label) ], CaptureRecordItem.prototype, "labelName", void 0);
      __decorate([ property(cc.Label) ], CaptureRecordItem.prototype, "labelTime", void 0);
      __decorate([ property(cc.Label) ], CaptureRecordItem.prototype, "labelWin", void 0);
      __decorate([ property(cc.Label) ], CaptureRecordItem.prototype, "labelBet", void 0);
      CaptureRecordItem = __decorate([ ccclass ], CaptureRecordItem);
      return CaptureRecordItem;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = CaptureRecordItem;
    cc._RF.pop();
  }, {
    "../../model/AnimalModel": "AnimalModel",
    "../../util/StringUtil": "StringUtil",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  ChatModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "207753ESuxNSZcztrdnNFHi", "ChatModel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ChatModel = void 0;
    var ModelBase_1 = require("../common/core/ModelBase");
    var ModelMessageType_1 = require("../common/init/ModelMessageType");
    var ChatModel = function(_super) {
      __extends(ChatModel, _super);
      function ChatModel() {
        return _super.call(this) || this;
      }
      Object.defineProperty(ChatModel, "Instance", {
        get: function() {
          null == ChatModel.instance && (ChatModel.instance = new ChatModel());
          return ChatModel.instance;
        },
        enumerable: false,
        configurable: true
      });
      ChatModel.prototype.getBrocadcast = function() {
        return this._broadcast;
      };
      ChatModel.prototype.setBroadcast = function(value) {
        this._broadcast = value;
        this.updateModel(ModelMessageType_1.ModelMessageType.CHAT_BORADCAST_UPDATE);
      };
      return ChatModel;
    }(ModelBase_1.ModelBase);
    exports.ChatModel = ChatModel;
    cc._RF.pop();
  }, {
    "../common/core/ModelBase": "ModelBase",
    "../common/init/ModelMessageType": "ModelMessageType"
  } ],
  ChatModuleCommand: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8c006ATeoBLoZtJwkAwFIfA", "ChatModuleCommand");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ChatModuleCommand = void 0;
    var ChatModuleCommand = function() {
      function ChatModuleCommand() {}
      ChatModuleCommand.GET_SIGN = 6001;
      ChatModuleCommand.SEND_EMOTICON = 6002;
      ChatModuleCommand.GET_EMOTICON = 6003;
      ChatModuleCommand.BROADCAST_WORDS = 6080;
      ChatModuleCommand.CYCLE_BROADCAST = 6081;
      ChatModuleCommand.CYCLE_DELETE_BROADCAST = 6082;
      ChatModuleCommand.PUSH_GAME_AD = 6098;
      ChatModuleCommand.SEND_ROLE_BROADCAST = 6099;
      return ChatModuleCommand;
    }();
    exports.ChatModuleCommand = ChatModuleCommand;
    cc._RF.pop();
  }, {} ],
  ChatModuleController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6304fqabRVG+KeMcxzXoJSp", "ChatModuleController");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ChatModuleController = void 0;
    var proto_1 = require("../proto/proto");
    var ChatModuleCommand_1 = require("../common/command/ChatModuleCommand");
    var ModuleBase_1 = require("../common/core/ModuleBase");
    var NotificationManager_1 = require("../common/core/NotificationManager");
    var ErrorCodeUtil_1 = require("../util/ErrorCodeUtil");
    var ChatModel_1 = require("../model/ChatModel");
    var ChatModuleController = function(_super) {
      __extends(ChatModuleController, _super);
      function ChatModuleController() {
        return _super.call(this) || this;
      }
      Object.defineProperty(ChatModuleController, "Instance", {
        get: function() {
          null == ChatModuleController.instance && (ChatModuleController.instance = new ChatModuleController());
          return ChatModuleController.instance;
        },
        enumerable: false,
        configurable: true
      });
      ChatModuleController.prototype.init = function() {
        var n = NotificationManager_1.common.NotificationManager.getInstance();
        n.registNotification(ChatModuleCommand_1.ChatModuleCommand.GET_SIGN, this.getSignHandler, this);
        n.registNotification(ChatModuleCommand_1.ChatModuleCommand.SEND_EMOTICON, this.sendEmoticonHandler, this);
        n.registNotification(ChatModuleCommand_1.ChatModuleCommand.GET_EMOTICON, this.getEmoticonHandler, this);
        n.registNotification(ChatModuleCommand_1.ChatModuleCommand.BROADCAST_WORDS, this.broadcastWordsHandler, this);
        n.registNotification(ChatModuleCommand_1.ChatModuleCommand.CYCLE_BROADCAST, this.cycleBroadcastHandler, this);
        n.registNotification(ChatModuleCommand_1.ChatModuleCommand.CYCLE_DELETE_BROADCAST, this.cycleDeleteBroadcastHandler, this);
        n.registNotification(ChatModuleCommand_1.ChatModuleCommand.PUSH_GAME_AD, this.pushGameAdHandler, this);
        n.registNotification(ChatModuleCommand_1.ChatModuleCommand.SEND_ROLE_BROADCAST, this.sendRoleBroadcastHandler, this);
      };
      ChatModuleController.prototype.requestGetSign = function(url) {
        var tos = new proto_1.m_6001_tos();
        tos.url = url;
        this.send(ChatModuleCommand_1.ChatModuleCommand.GET_SIGN, tos);
      };
      ChatModuleController.prototype.getSignHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(ChatModuleCommand_1.ChatModuleCommand.GET_SIGN, note.errorCode);
      };
      ChatModuleController.prototype.requestSendEmoticon = function(role_id, id) {
        var tos = new proto_1.m_6002_tos();
        tos.role_id = role_id;
        tos.id = id;
        this.send(ChatModuleCommand_1.ChatModuleCommand.SEND_EMOTICON, tos);
      };
      ChatModuleController.prototype.sendEmoticonHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(ChatModuleCommand_1.ChatModuleCommand.SEND_EMOTICON, note.errorCode);
      };
      ChatModuleController.prototype.getEmoticonHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(ChatModuleCommand_1.ChatModuleCommand.GET_EMOTICON, note.errorCode);
      };
      ChatModuleController.prototype.broadcastWordsHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(ChatModuleCommand_1.ChatModuleCommand.BROADCAST_WORDS, note.errorCode);
      };
      ChatModuleController.prototype.requestCycleBroadcast = function() {
        this.send(ChatModuleCommand_1.ChatModuleCommand.CYCLE_BROADCAST);
      };
      ChatModuleController.prototype.cycleBroadcastHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(ChatModuleCommand_1.ChatModuleCommand.CYCLE_BROADCAST, note.errorCode);
      };
      ChatModuleController.prototype.cycleDeleteBroadcastHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(ChatModuleCommand_1.ChatModuleCommand.CYCLE_DELETE_BROADCAST, note.errorCode);
      };
      ChatModuleController.prototype.requestPushGameAd = function() {
        this.send(ChatModuleCommand_1.ChatModuleCommand.PUSH_GAME_AD);
      };
      ChatModuleController.prototype.pushGameAdHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          ChatModel_1.ChatModel.Instance.setBroadcast(toc);
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(ChatModuleCommand_1.ChatModuleCommand.PUSH_GAME_AD, note.errorCode);
      };
      ChatModuleController.prototype.sendRoleBroadcastHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(ChatModuleCommand_1.ChatModuleCommand.SEND_ROLE_BROADCAST, note.errorCode);
      };
      return ChatModuleController;
    }(ModuleBase_1.ModuleBase);
    exports.ChatModuleController = ChatModuleController;
    cc._RF.pop();
  }, {
    "../common/command/ChatModuleCommand": "ChatModuleCommand",
    "../common/core/ModuleBase": "ModuleBase",
    "../common/core/NotificationManager": "NotificationManager",
    "../model/ChatModel": "ChatModel",
    "../proto/proto": "proto",
    "../util/ErrorCodeUtil": "ErrorCodeUtil"
  } ],
  CjRecordItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5f95a6PjX5Pt4nHvjKSbPjm", "CjRecordItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimalModel_1 = require("../../model/AnimalModel");
    var LoginModel_1 = require("../../model/LoginModel");
    var StringUtil_1 = require("../../util/StringUtil");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CjRecordItem = function(_super) {
      __extends(CjRecordItem, _super);
      function CjRecordItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.spriteIcon = null;
        _this.labelName = null;
        _this.labelTime = null;
        _this.labelWin = null;
        return _this;
      }
      CjRecordItem.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      CjRecordItem.prototype.start = function() {};
      CjRecordItem.prototype.updateView = function(data) {
        var _a, _b, _c;
        if (!data) {
          console.warn("CjRecordItem: No data provided");
          return;
        }
        var info = data;
        var animalModel = AnimalModel_1.AnimalModel.Instance;
        this.labelName.string = info.name || "\u672a\u77e5\u73a9\u5bb6";
        this.labelTime.string = info.time ? StringUtil_1.default.timestampToString(info.time, "MM-DD | hh:mm:ss") : "--";
        var bonusValue = 0;
        if (info.bonus) if ("string" === typeof info.bonus) {
          var parsed = parseInt(info.bonus, 10);
          bonusValue = isNaN(parsed) ? 0 : parsed;
        } else "number" === typeof info.bonus && (bonusValue = info.bonus);
        var dividedBonus = animalModel.dividedMultiple(bonusValue);
        this.labelWin.string = StringUtil_1.default.replaceString("\u83b7\u5f97{0}\u5f69\u91d1", dividedBonus);
        var spriteFrame;
        true;
        spriteFrame = null === (_a = animalModel.res) || void 0 === _a ? void 0 : _a.DEFAULT_HEAD;
        spriteFrame && this.spriteIcon && (this.spriteIcon.spriteFrame = spriteFrame);
      };
      __decorate([ property(cc.Sprite) ], CjRecordItem.prototype, "spriteIcon", void 0);
      __decorate([ property(cc.Label) ], CjRecordItem.prototype, "labelName", void 0);
      __decorate([ property(cc.Label) ], CjRecordItem.prototype, "labelTime", void 0);
      __decorate([ property(cc.Label) ], CjRecordItem.prototype, "labelWin", void 0);
      CjRecordItem = __decorate([ ccclass ], CjRecordItem);
      return CjRecordItem;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = CjRecordItem;
    cc._RF.pop();
  }, {
    "../../model/AnimalModel": "AnimalModel",
    "../../model/LoginModel": "LoginModel",
    "../../util/StringUtil": "StringUtil",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  Completer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b6f72ILb/pLOY1LlWMes9P+", "Completer");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Completer = void 0;
    var Completer = function() {
      function Completer() {
        this.timeoutId = 0;
      }
      Completer.prototype.promise = function(timeoutMs) {
        var _this = this;
        if (this._promise) return this._promise;
        this._promise = new Promise(function(resolve, reject) {
          _this._resolve = resolve;
          _this._reject = reject;
          void 0 !== timeoutMs && timeoutMs > 0 && (_this.timeoutId = setTimeout(function() {
            _this.timeoutId = 0;
            _this.reject("timeout");
          }, timeoutMs));
        });
        return this._promise;
      };
      Completer.prototype.resolve = function(value) {
        var callback = this._resolve;
        this.clear();
        callback && callback(value);
      };
      Completer.prototype.reject = function(reason) {
        var callback = this._reject;
        this.clear();
        callback && callback(reason);
      };
      Completer.prototype.clear = function() {
        if (this.timeoutId > 0) {
          clearTimeout(this.timeoutId);
          this.timeoutId = 0;
        }
        this._promise = null;
        this._resolve = null;
        this._reject = null;
      };
      return Completer;
    }();
    exports.Completer = Completer;
    cc._RF.pop();
  }, {} ],
  Config: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dc82dfcorRNh5q46+t5r99U", "Config");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Config = function() {
      function Config() {
        this.multiple = 100;
      }
      Object.defineProperty(Config, "Instance", {
        get: function() {
          null == Config.instance && (Config.instance = new Config());
          return Config.instance;
        },
        enumerable: false,
        configurable: true
      });
      Config.isSelfServer = function() {
        return void 0 == Config.instance.key || "" == Config.instance.key || "fengkuangyouleba" == Config.instance.key;
      };
      Config.isPHPLogin = function() {
        return Config.instance.redirect_uri.indexOf("/ajc/") > -1;
      };
      return Config;
    }();
    exports.default = Config;
    cc._RF.pop();
  }, {} ],
  CriIcon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b04ea1j5gRHVLshYW4dbIuo", "CriIcon");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TimerManager_1 = require("../../common/core/TimerManager");
    var AnimalModel_1 = require("../../model/AnimalModel");
    var ModelMessageType_1 = require("./../../common/init/ModelMessageType");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CriIcon = function(_super) {
      __extends(CriIcon, _super);
      function CriIcon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nodeMask = null;
        _this.animationLight = null;
        _this.spriteGray = null;
        _this.spriteSkill = null;
        _this.progressTimerId = 0;
        return _this;
      }
      CriIcon.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      CriIcon.prototype.play = function() {
        this.nodeMask.height = 0;
        this.animationLight.node.active || (this.animationLight.node.active = true);
        this.animationLight && this.animationLight.play("animation_crilight");
        this.updateView();
      };
      CriIcon.prototype.stop = function(item) {
        this.animationLight && this.animationLight.stop();
        this.animationLight.node.active && (this.animationLight.node.active = false);
        AnimalModel_1.AnimalModel.Instance.resetCri(item);
        this.removeProgressTimer();
      };
      CriIcon.prototype.updateView = function() {
        var progress = AnimalModel_1.AnimalModel.Instance.criRemainsProgress;
        progress > 0 ? this.addProgressTimer() : this.removeProgressTimer();
      };
      CriIcon.prototype.addProgressTimer = function() {
        if (0 == this.progressTimerId) {
          this.progressTimerId = TimerManager_1.TimerManager.Instance.addCountdown(6e5, this, this.onProgressTimerComplete.bind(this), this.progressTimerUpdate, 50);
          this.progressTimerUpdate();
        }
      };
      CriIcon.prototype.onProgressTimerComplete = function() {
        this.progressTimerId = 0;
      };
      CriIcon.prototype.progressTimerUpdate = function() {
        var modelInstance = AnimalModel_1.AnimalModel.Instance;
        if (!modelInstance.enter_toc) {
          this.removeProgressTimer();
          return;
        }
        var progress = modelInstance.criRemainsProgress;
        progress <= 0 ? this.removeProgressTimer() : this.updateProgress(progress);
      };
      CriIcon.prototype.removeProgressTimer = function() {
        if (0 !== this.progressTimerId) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.progressTimerId);
          this.progressTimerId = 0;
        }
      };
      CriIcon.prototype.updateProgress = function(progress) {
        var maxHeight = this.spriteSkill.node.height;
        this.nodeMask.height = (1 - progress) * maxHeight;
      };
      CriIcon.prototype.onDestroy = function() {
        this.removeProgressTimer();
      };
      __decorate([ property(cc.Node) ], CriIcon.prototype, "nodeMask", void 0);
      __decorate([ property(cc.Animation) ], CriIcon.prototype, "animationLight", void 0);
      __decorate([ property(cc.Sprite) ], CriIcon.prototype, "spriteGray", void 0);
      __decorate([ property(cc.Sprite) ], CriIcon.prototype, "spriteSkill", void 0);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_CRI_EFFECT_COMPLETE) ], CriIcon.prototype, "updateView", null);
      CriIcon = __decorate([ ccclass ], CriIcon);
      return CriIcon;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = CriIcon;
    cc._RF.pop();
  }, {
    "../../common/core/TimerManager": "TimerManager",
    "../../model/AnimalModel": "AnimalModel",
    "./../../common/init/ModelMessageType": "ModelMessageType",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  Decorator: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "80852jGNFNAe45smZ20lMHA", "Decorator");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.cd = exports.cdOptionWithAsyncState = exports.cdOptionWithAsyncData = void 0;
    var AsyncState_1 = require("./AsyncState");
    exports.cdOptionWithAsyncData = {
      returnPromiseWhenCDing: true,
      returnValueWhenCDing: {
        state: AsyncState_1.AsyncState.fail_cd
      }
    };
    exports.cdOptionWithAsyncState = {
      returnPromiseWhenCDing: true,
      returnValueWhenCDing: AsyncState_1.AsyncState.fail_cd
    };
    function cd(time, options) {
      void 0 === time && (time = 500);
      return function(target, propertyKey, descriptor) {
        var oldValue = descriptor.value;
        if ("function" !== typeof oldValue) throw new Error("@cd \u53ea\u80fd\u7528\u4e8e\u51fd\u6570");
        descriptor.value = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
          var key = "_last_call_time_" + propertyKey;
          var now = cc.sys.now();
          if (this[key] > 0 && this[key] + time > now) {
            if (options) {
              var returnPromise = options.returnPromiseWhenCDing || "AsyncFunction" === oldValue.constructor.name;
              if (returnPromise) {
                if (void 0 !== options.returnValueWhenCDing) return true === options.returnPromiseAlwaysReject ? Promise.reject(options.returnValueWhenCDing) : Promise.resolve(options.returnValueWhenCDing);
                return true === options.returnPromiseAlwaysResolve ? Promise.resolve(AsyncState_1.AsyncState.fail_cd) : Promise.reject(AsyncState_1.AsyncState.fail_cd);
              }
              if (void 0 !== options.returnValueWhenCDing) return options.returnValueWhenCDing;
            }
            return;
          }
          this[key] = now;
          return oldValue.apply(this, args);
        };
      };
    }
    exports.cd = cd;
    cc._RF.pop();
  }, {
    "./AsyncState": "AsyncState"
  } ],
  Delegate: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2098d1wST5FSq/Y5IH1MdpV", "Delegate");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Delegate = void 0;
    var Delegate = function() {
      function Delegate() {
        this.list = [];
        this.oncelist = [];
      }
      Delegate.prototype.findCallbackIndexOf = function(list, callback, thisObj) {
        for (var i = 0; i < list.length; i++) if (list[i].callback == callback && list[i].thisObj == thisObj) return i;
        return -1;
      };
      Delegate.prototype.existsCallback = function(list, callback, thisObj) {
        return this.findCallbackIndexOf(list, callback, thisObj) > -1;
      };
      Delegate.prototype.on = function(callback, thisObj) {
        if (this.existsCallback(this.list, callback, thisObj)) return;
        this.list.push(new DelegateCallback(callback, thisObj));
      };
      Delegate.prototype.once = function(callback, thisObj) {
        if (this.existsCallback(this.oncelist, callback, thisObj)) return;
        this.oncelist.push(new DelegateCallback(callback, thisObj));
      };
      Delegate.prototype.off = function(callback, thisObj) {
        var index = this.findCallbackIndexOf(this.list, callback, thisObj);
        index > -1 && this.list.splice(index, 1);
        if (this.oncelist.length > 0) {
          index = this.findCallbackIndexOf(this.oncelist, callback, thisObj);
          index > -1 && this.oncelist.splice(index, 1);
        }
      };
      Delegate.prototype.clear = function() {
        this.list.length = 0;
        this.oncelist.length = 0;
      };
      Delegate.prototype.invoke = function(value) {
        if (this.list.length > 0) {
          var cloneList = this.list.slice();
          for (var i = 0; i < cloneList.length; i++) {
            var callback = cloneList[i];
            if (!this.list.includes(callback)) continue;
            callback.callback.call(callback.thisObj, value);
          }
        }
        if (this.oncelist.length > 0) {
          var cloneList = this.oncelist.slice();
          for (var i = 0; i < cloneList.length; i++) {
            var callback = cloneList[i];
            var index = this.oncelist.indexOf(callback);
            if (-1 == index) continue;
            this.oncelist.splice(index, 1);
            callback.callback.call(callback.thisObj, value);
          }
        }
      };
      Object.defineProperty(Delegate.prototype, "length", {
        get: function() {
          return this.list.length;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Delegate.prototype, "onceLength", {
        get: function() {
          return this.oncelist.length;
        },
        enumerable: false,
        configurable: true
      });
      return Delegate;
    }();
    exports.Delegate = Delegate;
    var DelegateCallback = function() {
      function DelegateCallback(callback, thisObj) {
        this.callback = callback;
        this.thisObj = thisObj;
      }
      return DelegateCallback;
    }();
    cc._RF.pop();
  }, {} ],
  DragTarget: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dc2d59z/wBEBI2bEEkswwSZ", "DragTarget");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var DragTarget = function(_super) {
      __extends(DragTarget, _super);
      function DragTarget() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.areaNode = null;
        _this.p = new cc.Vec3();
        _this.dragging = false;
        _this.dragArea = new cc.Size(0);
        return _this;
      }
      DragTarget.prototype.onLoad = function() {
        this.node.on(cc.Node.EventType.TOUCH_START, this.nodeTouchStartHandler, this, true);
      };
      DragTarget.prototype.start = function() {
        null == this.areaNode && (this.areaNode = this.node.parent);
      };
      DragTarget.prototype.nodeTouchStartHandler = function(e) {
        this.dragging = false;
        this.dragArea.width = (this.areaNode.width - this.node.width) / 2;
        this.dragArea.height = (this.areaNode.height - this.node.height) / 2;
        this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEndHandler, this, true);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchEndHandler, this, true);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMoveHandler, this, true);
      };
      DragTarget.prototype.onTouchEndHandler = function(e) {
        this.node.off(cc.Node.EventType.TOUCH_END, this.onTouchEndHandler, this, true);
        this.node.off(cc.Node.EventType.TOUCH_CANCEL, this.onTouchEndHandler, this);
        this.node.off(cc.Node.EventType.TOUCH_MOVE, this.onTouchMoveHandler, this, true);
        this.dragging && e.stopPropagation();
      };
      DragTarget.prototype.onTouchMoveHandler = function(e) {
        this.p = this.node.position;
        this.p.x += e.getDeltaX();
        this.p.y += e.getDeltaY();
        this.p.x < -this.dragArea.width ? this.p.x = -this.dragArea.width : this.p.x > this.dragArea.width && (this.p.x = this.dragArea.width);
        this.p.y < -this.dragArea.height ? this.p.y = -this.dragArea.height : this.p.y > this.dragArea.height && (this.p.y = this.dragArea.height);
        this.dragging || e.getStartLocation().subtract(e.getLocation()).len() > 20 && (this.dragging = true);
        this.node.position = this.p;
      };
      __decorate([ property(cc.Node) ], DragTarget.prototype, "areaNode", void 0);
      DragTarget = __decorate([ ccclass ], DragTarget);
      return DragTarget;
    }(cc.Component);
    exports.default = DragTarget;
    cc._RF.pop();
  }, {} ],
  EffectImage: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7d9da6XmAhI37wBNWhwRjTh", "EffectImage");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseComponent_1 = require("../base/BaseComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var EffectImage = function(_super) {
      __extends(EffectImage, _super);
      function EffectImage() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.curType = 0;
        _this._animator = null;
        _this._clipMap = new Map();
        return _this;
      }
      EffectImage_1 = EffectImage;
      Object.defineProperty(EffectImage.prototype, "animator", {
        get: function() {
          return this._animator;
        },
        enumerable: false,
        configurable: true
      });
      EffectImage.prototype.onLoad = function() {};
      EffectImage.prototype.init = function(type) {
        void 0 === type && (type = 0);
        this.curType = type;
        if (!this._animator) {
          this._animator = this.node.getComponent(cc.Animation) || this.node.addComponent(cc.Animation);
          this._animator.off("finished", this.onAnimationFinished, this);
          this._animator.on("finished", this.onAnimationFinished, this);
        }
        this.reset();
      };
      EffectImage.prototype.reset = function() {
        var _this = this;
        this.node.opacity = 255;
        this.node.scale = 1;
        this.node.setPosition(0, 0);
        this.node.setAnchorPoint(.5, .5);
        this.node.setContentSize(this.getEffectSize());
        this.node.active = true;
        if (this._animator) {
          this._animator.stop();
          this._clipMap.forEach(function(clip) {
            _this._animator.removeClip(clip);
          });
          this._clipMap.clear();
        }
      };
      EffectImage.prototype.getEffectSize = function() {
        switch (this.curType) {
         case 0:
          return EffectImage_1.normalSize;

         case 1:
          return EffectImage_1.ballSize;

         case 2:
          return EffectImage_1.lightSize;

         default:
          return EffectImage_1.normalSize;
        }
      };
      EffectImage.prototype.play = function(animationClip, _loop) {
        void 0 === _loop && (_loop = false);
        if (!animationClip) {
          cc.error("Animation clip is null");
          return;
        }
        if (!this._animator) {
          cc.error("Animation component not initialized");
          return;
        }
        var clipName = animationClip.name;
        if (!this._clipMap.has(clipName)) {
          this._animator.addClip(animationClip);
          this._clipMap.set(clipName, animationClip);
        }
        this._animator.play(clipName);
      };
      EffectImage.prototype.playByName = function(clipName, loop) {
        void 0 === loop && (loop = false);
        if (!this._animator) {
          cc.error("Animation component not initialized");
          return;
        }
        var state = this._animator.play(clipName);
        state ? state.wrapMode = loop ? cc.WrapMode.Loop : cc.WrapMode.Normal : cc.error('Animation clip "' + clipName + '" not found');
      };
      EffectImage.prototype.stop = function() {
        var _a;
        null === (_a = this._animator) || void 0 === _a ? void 0 : _a.stop();
      };
      EffectImage.prototype.pause = function() {
        var _a;
        null === (_a = this._animator) || void 0 === _a ? void 0 : _a.pause();
      };
      EffectImage.prototype.resume = function() {
        var _a;
        null === (_a = this._animator) || void 0 === _a ? void 0 : _a.resume();
      };
      EffectImage.prototype.setSpeed = function(speed) {
        if (this._animator) {
          var currentState = this._animator.currentClip;
          if (currentState) {
            var state = this._animator.getAnimationState(currentState.name);
            state && (state.speed = speed);
          }
        }
      };
      EffectImage.prototype.onAnimationFinished = function() {
        this.node.emit(EffectImage_1.LOOP_COMPLETE, this);
      };
      EffectImage.prototype.onDestroy = function() {
        var _this = this;
        var _a, _b;
        if (this._animator) {
          null === (_a = this._animator) || void 0 === _a ? void 0 : _a.off("finished", this.onAnimationFinished, this);
          null === (_b = this._animator) || void 0 === _b ? void 0 : _b.stop();
          this._clipMap.forEach(function(clip) {
            _this._animator.removeClip(clip);
          });
        }
        this._clipMap.clear();
      };
      EffectImage.createEffectImage = function(width, height) {
        void 0 === width && (width = 134);
        void 0 === height && (height = 132);
        var node = new cc.Node("EffectImage");
        node.setContentSize(width, height);
        node.addComponent(cc.Sprite);
        var effect = node.addComponent(EffectImage_1);
        return effect;
      };
      var EffectImage_1;
      EffectImage.LOOP_COMPLETE = "LOOP_COMPLETE";
      EffectImage.displayName = "EffectImage";
      EffectImage.normalSize = cc.size(134, 132);
      EffectImage.ballSize = cc.size(235, 235);
      EffectImage.lightSize = cc.size(608, 315);
      EffectImage = EffectImage_1 = __decorate([ ccclass ], EffectImage);
      return EffectImage;
    }(BaseComponent_1.default);
    exports.default = EffectImage;
    cc._RF.pop();
  }, {
    "../base/BaseComponent": "BaseComponent"
  } ],
  ErrorCodeType: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2a90aE7iS1GC7I4pN5MTGgl", "ErrorCodeType");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ErrorCodeType = void 0;
    var ErrorCodeType = function() {
      function ErrorCodeType() {}
      ErrorCodeType.init = function() {
        var errorDesc = {};
        errorDesc[ErrorCodeType.ERMSG_SYS_01] = "\u64cd\u4f5c\u5f02\u5e38";
        errorDesc[ErrorCodeType.ERMSG_WRONG_PASSWORD_02] = "\u5bc6\u7801\u4e0d\u6b63\u786e";
        errorDesc[ErrorCodeType.ERMSG_ACCOUNT_EXIST_03] = "\u8d26\u53f7\u5df2\u5b58\u5728";
        errorDesc[ErrorCodeType.ERMSG_ROLE_NAME_EXIST_04] = "\u89d2\u8272\u540d\u5b57\u5b58\u5728";
        errorDesc[ErrorCodeType.ERMSG_ACCOUNT_NOT_EXIST_05] = "\u8d26\u53f7\u4e0d\u5b58\u5728";
        errorDesc[ErrorCodeType.ERMSG_ROLE_NAME_NOT_EXIST_06] = "\u89d2\u8272\u540d\u5b57\u4e0d\u5b58\u5728";
        errorDesc[ErrorCodeType.ERMSG_CHARGE_07] = "\u652f\u4ed8\u5931\u8d25";
        errorDesc[ErrorCodeType.ERMSG_NOT_ENOUGH_BALANCE_08] = "\u91d1\u8c46\u4e0d\u8db3";
        errorDesc[ErrorCodeType.ERMSG_CLIENT_DATA_IS_ERROR_09] = "\u5ba2\u6237\u7aef\u6570\u636e\u9519\u8bef";
        errorDesc[ErrorCodeType.ERMSG_CAN_NOT_FIND_OPENID_10] = "\u627e\u4e0d\u5230OPENID";
        errorDesc[ErrorCodeType.ERMSG_CAN_NOT_FIND_REWARD_11] = "\u627e\u4e0d\u5230\u6307\u5b9a\u5956\u52b1";
        errorDesc[ErrorCodeType.ERMSG_REWARD_HAVE_RECEIVE_12] = "\u5956\u52b1\u5df2\u7ecf\u9886\u53d6";
        errorDesc[ErrorCodeType.ERMSG_REWARD_AUTO_RECEIVE_13] = "\u5956\u52b1\u81ea\u52a8\u53d1\u653e";
        errorDesc[ErrorCodeType.ERMSG_REWARD_IS_NOT_YOURS_14] = "\u5956\u52b1\u975e\u672c\u4eba\u6240\u6709";
        errorDesc[ErrorCodeType.ERMSG_DOLL_IS_NOT_SETTING_15] = "\u5a03\u5a03\u914d\u7f6e\u4fe1\u606f\u4e3a\u7a7a";
        errorDesc[ErrorCodeType.ERMSG_DOLL_PAGE_IS_MAX_16] = "\u5df2\u7ecf\u662f\u6700\u5927\u9875\u6570\u4e86";
        errorDesc[ErrorCodeType.ERMSG_ROLE_IS_MAX_17] = "\u670d\u52a1\u5668\u5df2\u7ecf\u7206\u6ee1\u4e86\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5";
        errorDesc[ErrorCodeType.ERMSG_AGENT_IS_NO_EXIST_18] = "\u4ee3\u7406\u4eba\u4e0d\u5b58\u5728";
        errorDesc[ErrorCodeType.ERMSG_CHANNEL_NOT_EXIT_19] = "\u6e20\u9053\u4e0d\u5b58\u5728";
        errorDesc[ErrorCodeType.ERMSG_NOT_BET_20] = "\u60a8\u8fd8\u672a\u6295\u5165";
        errorDesc[ErrorCodeType.ERMSG_ERROR_BET_STATE_21] = "\u7ade\u731c\u9898\u76ee\u5df2\u7ecf\u5f00\u5956\u6216\u5173\u95ed\uff01";
        errorDesc[ErrorCodeType.ERMSG_GUESS_ED_22] = "\u5df2\u7ecf\u7ade\u731c\u4e86";
        errorDesc[ErrorCodeType.ERMSG_ERASE_PROFIT_ERROR_23] = "\u4e0d\u80fd\u4f7f\u7528\u6a61\u76ae\u64e6";
        errorDesc[ErrorCodeType.ERMSG_DAILY_GUESS_INFO_24] = "\u6bcf\u65e5\u4e00\u731c\u4eca\u5929\u6682\u505c\u3002";
        errorDesc[ErrorCodeType.ERMSG_ERASE_PROFIT_LIMIT_25] = "\u6a61\u76ae\u64e6\u4f7f\u7528\u8fbe\u5230\u4e0a\u9650";
        errorDesc[ErrorCodeType.ERMSG_FREE_TIMES_LIMIT_26] = "\u514d\u8d39\u6b21\u6570\u7528\u5c3d";
        errorDesc[ErrorCodeType.ERMSG_MALL_PRIZE_ERROR_27] = "\u5e93\u5b58\u7a7a\u5566\uff01";
        errorDesc[ErrorCodeType.ERMSG_WRITE_DEFAULT_ADDRESS_28] = "\u60a8\u8fd8\u672a\u586b\u5199\u5730\u5740";
        errorDesc[ErrorCodeType.ERMSG_PHONE_ALREADY_BIND_29] = "\u624b\u673a\u5df2\u7ecf\u88ab\u7ed1\u5b9a\u4e86";
        errorDesc[ErrorCodeType.ERMSG_PHONE_NOT_EXIST_30] = "\u624b\u673a\u53f7\u7801\u4e0d\u5b58\u5728";
        errorDesc[ErrorCodeType.ERMSG_CANNOT_GET_CODE_AGAIN_31] = "\u8bf71\u5206\u949f\u540e\u518d\u8bd5\u3002";
        errorDesc[ErrorCodeType.ERMSG_GO_ON_BET_ALREADY_32] = "\u60a8\u5df2\u7eed\u6295\u8fc7\u4e86\u3002";
        errorDesc[ErrorCodeType.ERMSG_NOT_GO_ON_BET_33] = "\u60a8\u8fd8\u6ca1\u6709\u7eed\u6295\u8bb0\u5f55";
        errorDesc[ErrorCodeType.ERMSG_GUESS_STATE_ERROR_34] = "\u8be5\u9898\u76ee\u5df2\u5f00\u5956\u6216\u5173\u95ed\uff01";
        errorDesc[ErrorCodeType.ERMSG_CANNOT_DELETE_GUESS_35] = "\u7ade\u731c\u6b63\u5728\u8fdb\u884c\uff0c\u8bf7\u52ff\u5220\u9664\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9\u5173\u95ed\u7ade\u731c\uff01";
        errorDesc[ErrorCodeType.ERMSG_AUTH_TEXT_CODE_36] = "\u9a8c\u8bc1\u7801\u9519\u8bef";
        errorDesc[ErrorCodeType.ERMSG_ACCOUNT_BIND_BY_ANOTHER_37] = "\u5f53\u524d\u5e10\u53f7\u5df2\u88ab\u7ed1\u5b9a\u8fc7\u624b\u673a";
        errorDesc[ErrorCodeType.ERMSG_CANNOT_ALTER_GUESS_38] = "\u7ade\u731c\u5df2\u7ecf\u5f00\u59cb\u6216\u5df2\u7ecf\u7ed3\u675f";
        errorDesc[ErrorCodeType.ERMSG_XITONG_BUSY_39] = "\u7cfb\u7edf\u7e41\u5fd9\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\uff01";
        errorDesc[ErrorCodeType.ERMSG_GUESS_BET_TIME_UP_40] = "\u5df2\u622a\u6b62\uff01";
        errorDesc[ErrorCodeType.ERMSG_DOLL_INFO_41] = "\u5a03\u5a03\u5956\u54c1\u5df2\u66f4\u6539";
        errorDesc[ErrorCodeType.ERMSG_PROFIT_RANK_PRIZE_ED_42] = "\u76c8\u5229\u699c\u5df2\u53d1\u8fc7\u5956\uff01";
        errorDesc[ErrorCodeType.ERMSG_PROFIT_RANK_STATE_ERROR_43] = "\u5df2\u7ecf\u53d1\u5956\uff0c\u4e0d\u80fd\u6539\u72b6\u6001";
        errorDesc[ErrorCodeType.ERMSG_ROLE_NOT_BING_PHONE_44] = "\u60a8\u8fd8\u672a\u7ed1\u5b9a\u624b\u673a\uff01";
        errorDesc[ErrorCodeType.ERMSG_CANT_BET_45] = "\u505c\u6b62\u4e0b\u6ce8";
        errorDesc[ErrorCodeType.ERMSG_WITHDRAW_FAIL_46] = "\u63d0\u73b0\u5931\u8d25";
        errorDesc[ErrorCodeType.ERMSG_ANIMAL_OUT_47] = "\u52a8\u7269\u88ab\u6293\u8d70\u5566\uff01";
        errorDesc[ErrorCodeType.ERMSG_SERVER_ING_48] = "\u670d\u52a1\u5668\u6b63\u5728\u7ef4\u62a4";
        errorDesc[ErrorCodeType.ERMSG_LIMIT_EXCHANGE_49] = "\u5151\u6362\u6b21\u6570\u8fbe\u5230\u4e0a\u9650";
        errorDesc[ErrorCodeType.ERMSG_NOT_ENOUGH_CHIP_50] = "\u788e\u7247\u4e0d\u8db3";
        errorDesc[ErrorCodeType.ERMSG_STOP_FEEDBACK_51] = "\u4f60\u88ab\u7981\u8a00";
        errorDesc[ErrorCodeType.ERMSG_BET_LIMIT_52] = "\u8fbe\u5230\u4e0a\u9650";
        errorDesc[ErrorCodeType.ERMSG_KICK_53] = "\u60a8\u88ab\u5c01\u53f7\u4e86\uff01";
        errorDesc[ErrorCodeType.ERMSG_CHARM_54] = "\u9b45\u529b\u503c\u4e0d\u8db3";
        errorDesc[ErrorCodeType.ERMSG_CANNOT_GET_GIFT_55] = "\u5f53\u524d\u5956\u52b1\u4e0d\u53ef\u9886";
        errorDesc[ErrorCodeType.ERMSG_WX_CODE_ERROR_56] = "\u5956\u52b1\u7801\u9519\u8bef";
        errorDesc[ErrorCodeType.ERMSG_NOT_SUBSCRIBE_57] = "\u8d76\u7d27\u5173\u6ce8\u516c\u4f17\u53f7\uff0c\u6709\u5927\u5956\u3002";
        errorDesc[ErrorCodeType.ERMSG_CODE_UNDEFINED_58] = "\u8bf7\u91cd\u65b0\u83b7\u53d6\u9a8c\u8bc1\u7801";
        errorDesc[ErrorCodeType.ERMSG_OPENID_IS_BINGED_59] = "\u5fae\u4fe1\u5df2\u88ab\u7ed1\u5b9a";
        errorDesc[ErrorCodeType.ERMSG_CONTACT_SERVICE_60] = "\u5956\u54c1\u5f02\u5e38\u8bf7\u8054\u7cfb\u6211\u4eec\uff01";
        errorDesc[ErrorCodeType.ERMSG_DAILY_RECHARGE_61] = "\u4eca\u65e5\u5145\u503c\u8fbe\u5230\u4e0a\u9650";
        errorDesc[ErrorCodeType.ERMSG_DAILY_RED_BAG_62] = "\u4eca\u65e5\u5151\u6362\u8fbe\u5230\u4e0a\u9650";
        errorDesc[ErrorCodeType.ERMSG_WX_SYSTEM_63] = "\u5fae\u4fe1\u7cfb\u7edf\u7e41\u5fd9\uff0c\u7b49\u4e0b\u518d\u8bd5\u54e6^_^";
        errorDesc[ErrorCodeType.ERMSG_ERROR_SID_64] = "SID\u7ed1\u5b9a\u5931\u8d25";
        errorDesc[ErrorCodeType.ERMSG_CANNOT_DO_AGAIN_65] = "\u5206\u4eab\u592a\u9891\u7e41\uff0c\u7b49\u4e0b\u518d\u8bd5\u54e6^_^";
        errorDesc[ErrorCodeType.ERMSG_DO_SHARE_LIMIT_66] = "\u4eca\u5929\u5206\u4eab\u8fbe\u5230\u4e0a\u9650\uff0c\u660e\u5929\u518d\u6765\u5427^_^";
        errorDesc[ErrorCodeType.ERMSG_CODE_LIMIT_67] = "\u4eb2\uff0c\u6bcf\u5929\u6700\u591a\u83b7\u53d610\u6b21\u9a8c\u8bc1\u7801";
        errorDesc[ErrorCodeType.ERMSG_USE_SKILL_UP_68] = "\u73b0\u5728\u8fd8\u4e0d\u80fd\u7528\u6280\u80fd\u54e6^_^";
        errorDesc[ErrorCodeType.ERMSG_WX_WHITELIST_69] = "\u8bf7\u5230\u5fae\u4fe1\u516c\u4f17\u5e73\u53f0\u8bbe\u7f6eIP\u767d\u540d\u5355";
        errorDesc[ErrorCodeType.ERMSG_TOURIST_NOT_OPEN_70] = "\u6e38\u5ba2\u5165\u53e3\u6ca1\u6709\u5f00\u653e";
        errorDesc[ErrorCodeType.ERMSG_SYSTEM_RISK_71] = "\u7cfb\u7edf\u68c0\u6d4b\u5230\u8d26\u53f7\u6709\u98ce\u9669";
        errorDesc[ErrorCodeType.ERMSG_ERROR_ROOM_STATUS_72] = "\u5f53\u524d\u72b6\u6001\u65e0\u6cd5\u731c\u62f3\uff01";
        errorDesc[ErrorCodeType.ERMSG_ERROR_ROOM_PEOPLE_73] = "\u4eba\u6570\u4e0d\u8db3\u65e0\u6cd5\u5f00\u59cb\u6e38\u620f\uff01";
        errorDesc[ErrorCodeType.ERMSG_BET_LIM_74] = "\u8fbe\u5230\u4e0a\u9650";
        errorDesc[ErrorCodeType.ERMSG_CANCEL_BET_LIM_75] = "\u53d6\u6d88\u4e0a\u9650";
        errorDesc[ErrorCodeType.ERMSG_OTC_LIMIT_76] = "\u6700\u4f4e100\u8d77\u5145\u503c";
        errorDesc[ErrorCodeType.ERMSG_LLSMS_FAIL_78] = "\u9a8c\u8bc1\u7801\u5931\u6548\uff0c\u5df2\u91cd\u65b0\u53d1\u9001";
        errorDesc[ErrorCodeType.ERMSG_AREA_NOT_SUPPORT_79] = "\u5f53\u524d\u5730\u57df\u4e0d\u652f\u6301\u53d1\u8d77\u652f\u4ed8";
        errorDesc[ErrorCodeType.ERMSG_ROOM_IS_NOT_EXIST_2001] = "\u623f\u95f4\u4e0d\u5b58\u5728";
        errorDesc[ErrorCodeType.ERMSG_OPEN_STATE_2002] = "\u5f00\u5956\u4e2d";
        errorDesc[ErrorCodeType.ERMSG_ROLE_IS_NOT_ROOM_2003] = "\u73a9\u5bb6\u4e0d\u5728\u5f53\u524d\u623f\u95f4";
        errorDesc[ErrorCodeType.ERMSG_SECURITY_IS_NOT_EFFECTIVE_7001] = "\u9a8c\u8bc1\u7801\u5df2\u5931\u6548\uff01";
        errorDesc[ErrorCodeType.ERMSG_SECURITY_IS_NOT_MATCH_7002] = "\u9a8c\u8bc1\u7801\u4e0d\u5339\u914d\uff01";
        errorDesc[ErrorCodeType.ERMSG_CANNOT_RECEIVE_4001] = "\u4efb\u52a1\u5c1a\u672a\u5b8c\u6210";
        errorDesc[ErrorCodeType.ERMSG_SHARE_TIMES_UP_LIMIT_4002] = "\u60a8\u7684\u5206\u4eab\u6b21\u6570\u8fbe\u5230\u4e0a\u9650\u5566\uff01";
        errorDesc[ErrorCodeType.ERMSG_SHARE_TIME_LIMIT_4003] = "\u4e0d\u8981\u9891\u7e41\u5206\u4eab\u54e6\uff0c\u8fd9\u6837\u4f1a\u6253\u6270\u5230\u670b\u53cb\u7684\uff01";
        errorDesc[ErrorCodeType.ERMSG_LITTLE_BOX_UP_LIMIT_4004] = "\u4eca\u5929\u5b9d\u7bb1\u91d1\u5e01\u5df2\u7ecf\u8fbe\u5230\u4e0a\u9650";
        return errorDesc;
      };
      ErrorCodeType.ERMSG_SYS_01 = 1;
      ErrorCodeType.ERMSG_WRONG_PASSWORD_02 = 2;
      ErrorCodeType.ERMSG_ACCOUNT_EXIST_03 = 3;
      ErrorCodeType.ERMSG_ROLE_NAME_EXIST_04 = 4;
      ErrorCodeType.ERMSG_ACCOUNT_NOT_EXIST_05 = 5;
      ErrorCodeType.ERMSG_ROLE_NAME_NOT_EXIST_06 = 6;
      ErrorCodeType.ERMSG_CHARGE_07 = 7;
      ErrorCodeType.ERMSG_NOT_ENOUGH_BALANCE_08 = 8;
      ErrorCodeType.ERMSG_CLIENT_DATA_IS_ERROR_09 = 9;
      ErrorCodeType.ERMSG_CAN_NOT_FIND_OPENID_10 = 10;
      ErrorCodeType.ERMSG_CAN_NOT_FIND_REWARD_11 = 11;
      ErrorCodeType.ERMSG_REWARD_HAVE_RECEIVE_12 = 12;
      ErrorCodeType.ERMSG_REWARD_AUTO_RECEIVE_13 = 13;
      ErrorCodeType.ERMSG_REWARD_IS_NOT_YOURS_14 = 14;
      ErrorCodeType.ERMSG_DOLL_IS_NOT_SETTING_15 = 15;
      ErrorCodeType.ERMSG_DOLL_PAGE_IS_MAX_16 = 16;
      ErrorCodeType.ERMSG_ROLE_IS_MAX_17 = 17;
      ErrorCodeType.ERMSG_AGENT_IS_NO_EXIST_18 = 18;
      ErrorCodeType.ERMSG_CHANNEL_NOT_EXIT_19 = 19;
      ErrorCodeType.ERMSG_NOT_BET_20 = 20;
      ErrorCodeType.ERMSG_ERROR_BET_STATE_21 = 21;
      ErrorCodeType.ERMSG_GUESS_ED_22 = 22;
      ErrorCodeType.ERMSG_ERASE_PROFIT_ERROR_23 = 23;
      ErrorCodeType.ERMSG_DAILY_GUESS_INFO_24 = 24;
      ErrorCodeType.ERMSG_ERASE_PROFIT_LIMIT_25 = 25;
      ErrorCodeType.ERMSG_FREE_TIMES_LIMIT_26 = 26;
      ErrorCodeType.ERMSG_MALL_PRIZE_ERROR_27 = 27;
      ErrorCodeType.ERMSG_WRITE_DEFAULT_ADDRESS_28 = 28;
      ErrorCodeType.ERMSG_PHONE_ALREADY_BIND_29 = 29;
      ErrorCodeType.ERMSG_PHONE_NOT_EXIST_30 = 30;
      ErrorCodeType.ERMSG_CANNOT_GET_CODE_AGAIN_31 = 31;
      ErrorCodeType.ERMSG_GO_ON_BET_ALREADY_32 = 32;
      ErrorCodeType.ERMSG_NOT_GO_ON_BET_33 = 33;
      ErrorCodeType.ERMSG_GUESS_STATE_ERROR_34 = 34;
      ErrorCodeType.ERMSG_CANNOT_DELETE_GUESS_35 = 35;
      ErrorCodeType.ERMSG_AUTH_TEXT_CODE_36 = 36;
      ErrorCodeType.ERMSG_ACCOUNT_BIND_BY_ANOTHER_37 = 37;
      ErrorCodeType.ERMSG_CANNOT_ALTER_GUESS_38 = 38;
      ErrorCodeType.ERMSG_XITONG_BUSY_39 = 39;
      ErrorCodeType.ERMSG_GUESS_BET_TIME_UP_40 = 40;
      ErrorCodeType.ERMSG_DOLL_INFO_41 = 41;
      ErrorCodeType.ERMSG_PROFIT_RANK_PRIZE_ED_42 = 42;
      ErrorCodeType.ERMSG_PROFIT_RANK_STATE_ERROR_43 = 43;
      ErrorCodeType.ERMSG_ROLE_NOT_BING_PHONE_44 = 44;
      ErrorCodeType.ERMSG_CANT_BET_45 = 45;
      ErrorCodeType.ERMSG_WITHDRAW_FAIL_46 = 46;
      ErrorCodeType.ERMSG_ANIMAL_OUT_47 = 47;
      ErrorCodeType.ERMSG_SERVER_ING_48 = 48;
      ErrorCodeType.ERMSG_LIMIT_EXCHANGE_49 = 49;
      ErrorCodeType.ERMSG_NOT_ENOUGH_CHIP_50 = 50;
      ErrorCodeType.ERMSG_STOP_FEEDBACK_51 = 51;
      ErrorCodeType.ERMSG_BET_LIMIT_52 = 52;
      ErrorCodeType.ERMSG_KICK_53 = 53;
      ErrorCodeType.ERMSG_CHARM_54 = 54;
      ErrorCodeType.ERMSG_CANNOT_GET_GIFT_55 = 55;
      ErrorCodeType.ERMSG_WX_CODE_ERROR_56 = 56;
      ErrorCodeType.ERMSG_NOT_SUBSCRIBE_57 = 57;
      ErrorCodeType.ERMSG_CODE_UNDEFINED_58 = 58;
      ErrorCodeType.ERMSG_OPENID_IS_BINGED_59 = 59;
      ErrorCodeType.ERMSG_CONTACT_SERVICE_60 = 60;
      ErrorCodeType.ERMSG_DAILY_RECHARGE_61 = 61;
      ErrorCodeType.ERMSG_DAILY_RED_BAG_62 = 62;
      ErrorCodeType.ERMSG_WX_SYSTEM_63 = 63;
      ErrorCodeType.ERMSG_ERROR_SID_64 = 64;
      ErrorCodeType.ERMSG_CANNOT_DO_AGAIN_65 = 65;
      ErrorCodeType.ERMSG_DO_SHARE_LIMIT_66 = 66;
      ErrorCodeType.ERMSG_CODE_LIMIT_67 = 67;
      ErrorCodeType.ERMSG_USE_SKILL_UP_68 = 68;
      ErrorCodeType.ERMSG_WX_WHITELIST_69 = 69;
      ErrorCodeType.ERMSG_TOURIST_NOT_OPEN_70 = 70;
      ErrorCodeType.ERMSG_SYSTEM_RISK_71 = 71;
      ErrorCodeType.ERMSG_ERROR_ROOM_STATUS_72 = 72;
      ErrorCodeType.ERMSG_ERROR_ROOM_PEOPLE_73 = 73;
      ErrorCodeType.ERMSG_BET_LIM_74 = 74;
      ErrorCodeType.ERMSG_CANCEL_BET_LIM_75 = 75;
      ErrorCodeType.ERMSG_OTC_LIMIT_76 = 76;
      ErrorCodeType.ERMSG_LLSMS_FAIL_78 = 78;
      ErrorCodeType.ERMSG_AREA_NOT_SUPPORT_79 = 79;
      ErrorCodeType.ERMSG_ROOM_IS_NOT_EXIST_2001 = 2001;
      ErrorCodeType.ERMSG_OPEN_STATE_2002 = 2002;
      ErrorCodeType.ERMSG_ROLE_IS_NOT_ROOM_2003 = 2003;
      ErrorCodeType.ERMSG_SECURITY_IS_NOT_EFFECTIVE_7001 = 7001;
      ErrorCodeType.ERMSG_SECURITY_IS_NOT_MATCH_7002 = 7002;
      ErrorCodeType.ERMSG_CANNOT_RECEIVE_4001 = 4001;
      ErrorCodeType.ERMSG_SHARE_TIMES_UP_LIMIT_4002 = 4002;
      ErrorCodeType.ERMSG_SHARE_TIME_LIMIT_4003 = 4003;
      ErrorCodeType.ERMSG_LITTLE_BOX_UP_LIMIT_4004 = 4004;
      return ErrorCodeType;
    }();
    exports.ErrorCodeType = ErrorCodeType;
    cc._RF.pop();
  }, {} ],
  ErrorCodeUtil: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "55add6ZRwpP9YP+8hELz9Rc", "ErrorCodeUtil");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ErrorCodeUtil = void 0;
    var ErrorCodeType_1 = require("../common/init/ErrorCodeType");
    var TipView_1 = require("../view/component/TipView");
    var ErrorCodeUtil = function() {
      function ErrorCodeUtil() {}
      ErrorCodeUtil.init = function() {
        ErrorCodeUtil.errorDesc = ErrorCodeType_1.ErrorCodeType.init();
      };
      ErrorCodeUtil.errorCall = function(cmd, errorCode) {
        var errorMsg = ErrorCodeUtil.getErrorDesc(errorCode);
        "" == errorMsg && (errorMsg = "Error: errorCode:" + errorCode + ",cmd:" + cmd.toString());
        TipView_1.default.open(errorMsg);
      };
      ErrorCodeUtil.getErrorDesc = function(errorCode) {
        if (null != ErrorCodeUtil.errorDesc) {
          var desc = ErrorCodeUtil.errorDesc[errorCode];
          if (void 0 != desc) return desc;
        }
        return "";
      };
      return ErrorCodeUtil;
    }();
    exports.ErrorCodeUtil = ErrorCodeUtil;
    cc._RF.pop();
  }, {
    "../common/init/ErrorCodeType": "ErrorCodeType",
    "../view/component/TipView": "TipView"
  } ],
  Extends: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e0990yG+OJLtZ2o/9oWhHin", "Extends");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.extendsScrollView = exports.extendsSprite = exports.extendsButton = void 0;
    var AudioManager_1 = require("../manager/AudioManager");
    var ResourceUtil_1 = require("../util/ResourceUtil");
    function extendsButton() {
      if (!cc.Button.prototype["touchBeganClone"]) {
        cc.Button.prototype["touchBeganClone"] = cc.Button.prototype["_onTouchBegan"];
        cc.Button.prototype["_onTouchBegan"] = function(event) {
          var btn = this;
          btn.interactable && btn.enabledInHierarchy && (this.touchBeganPosition = event.touch.getLocation());
          this.touchBeganClone(event);
        };
      }
      if (!cc.Button.prototype["touchEndedClone"]) {
        cc.Button.prototype["touchEndedClone"] = cc.Button.prototype["_onTouchEnded"];
        cc.Button.prototype["_onTouchEnded"] = function(event) {
          var btn = this;
          if (btn.interactable && btn.enabledInHierarchy) {
            var touchEndedPosition = event.touch.getLocation();
            var distance = cc.Vec2.distance(this.touchBeganPosition, touchEndedPosition);
            if (distance > 10) return;
            if (btn.clickSoundDisable) return;
            btn.clickSoundName && AudioManager_1.AudioManager.Instance.playEffect(btn.clickSoundName);
          }
          this.touchEndedClone(event);
        };
      }
    }
    exports.extendsButton = extendsButton;
    function extendsSprite() {
      Reflect.defineProperty(cc.Sprite.prototype, "src", {
        get: function() {
          return this._src;
        },
        set: function(value) {
          if (this._src == value) return;
          this._src = value;
          var self = this;
          if (value) {
            self.defaultCache && self.defaultSpriteFrame && (self.spriteFrame = self.defaultSpriteFrame);
            ResourceUtil_1.ResourceUtil.loadRemoteImage(value, function(asset) {
              asset && (self.spriteFrame = asset);
              self.onLoaded && self.onLoaded(self, asset);
            });
          } else self.spriteFrame = null;
        }
      });
      Reflect.defineProperty(cc.Sprite.prototype, "defaultCache", {
        get: function() {
          return this._defaultCache;
        },
        set: function(value) {
          if (this._defaultCache == value) return;
          this._defaultCache = value;
          var self = this;
          self.defaultSpriteFrame = value ? self.spriteFrame : null;
        }
      });
    }
    exports.extendsSprite = extendsSprite;
    function extendsScrollView() {
      Reflect.defineProperty(cc.ScrollView.prototype, "scrollExtends", {
        get: function() {
          return this._scrollExtends;
        },
        set: function(value) {
          if (this._scrollExtends == value) return;
          this._scrollExtends = value;
          value && console.warn("\u5f53\u5d4c\u5957 ScrollView \u5141\u8bb8 scrollExtends \u65f6\uff0c\u5b50\u7ea7 ScrollView \u7684 elastic \u5e94\u5f53\u8bbe\u7f6e\u4e3a false");
        }
      });
      if (!cc.ScrollView.prototype["hasNestedViewGroupClone"]) {
        cc.ScrollView.prototype["hasNestedViewGroupClone"] = cc.ScrollView.prototype["hasNestedViewGroup"];
        cc.ScrollView.prototype["hasNestedViewGroup"] = function(event, captureListeners) {
          if (event.eventPhase !== cc.Event.CAPTURING_PHASE) return false;
          var has = false;
          var child;
          if (captureListeners) for (var i = 0; i < captureListeners.length; ++i) {
            var item = captureListeners[i];
            if (this.node === item) {
              if (event.target.getComponent(cc.ViewGroup)) {
                has = true;
                child = event.target.getComponent(cc.ScrollView);
                break;
              }
              break;
            }
            if (item.getComponent(cc.ViewGroup)) {
              has = true;
              child = item.getComponent(cc.ScrollView);
              break;
            }
          }
          if (!this.scrollExtends) return has;
          if (has) {
            if (event.type == cc.Node.EventType.TOUCH_START || event.type == cc.Node.EventType.TOUCH_END) return false;
            var maxOffset = child.getMaxScrollOffset();
            if (child.vertical) {
              if (0 == maxOffset.y) return false;
            } else if (child.horizontal && 0 == maxOffset.x) return false;
            if (event.type == cc.Node.EventType.TOUCH_MOVE) {
              var offset = child.getScrollOffset();
              if (child.vertical) {
                var deltaY = event.getDeltaY();
                if (0 == offset.y && deltaY <= 0) return false;
                if (offset.y == maxOffset.y && deltaY >= 0) return false;
              } else if (child.horizontal) {
                var deltaX = event.getDeltaX();
                if (0 == offset.x && deltaX >= 0) return false;
                if (offset.x == maxOffset.x && deltaX <= 0) return false;
              }
            }
          }
          return has;
        };
      }
    }
    exports.extendsScrollView = extendsScrollView;
    cc._RF.pop();
  }, {
    "../manager/AudioManager": "AudioManager",
    "../util/ResourceUtil": "ResourceUtil"
  } ],
  GameCommonRes: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c37a4Ezb8VJC6GeC97TW8dY", "GameCommonRes");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var BaseComponent_1 = require("./view/base/BaseComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GameCommonRes = function(_super) {
      __extends(GameCommonRes, _super);
      function GameCommonRes() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.audioEffectList = [];
        _this.DEFAULT_HEAD = null;
        _this.pikaqiuLastSpriteFrame = null;
        _this.imgVips = [];
        _this.animalIcons = [];
        _this.headBgs = [];
        _this.skillIcons = [];
        _this.skillGrayIcons = [];
        _this.taskItemIcons = [];
        _this.animalFirstSpriteFrames = [];
        _this.pikaqiuAnimationClips = [];
        return _this;
      }
      GameCommonRes_1 = GameCommonRes;
      GameCommonRes.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        console.log("\u516c\u5171\u8d44\u6e90\u5df2\u6302\u8f7d");
        GameCommonRes_1.Instance = this;
      };
      GameCommonRes.prototype.start = function() {};
      GameCommonRes.prototype.onDestroy = function() {
        GameCommonRes_1.Instance == this && (GameCommonRes_1.Instance = null);
      };
      var GameCommonRes_1;
      __decorate([ property([ cc.AudioClip ]) ], GameCommonRes.prototype, "audioEffectList", void 0);
      __decorate([ property(cc.SpriteFrame) ], GameCommonRes.prototype, "DEFAULT_HEAD", void 0);
      __decorate([ property(cc.SpriteFrame) ], GameCommonRes.prototype, "pikaqiuLastSpriteFrame", void 0);
      __decorate([ property([ cc.SpriteFrame ]) ], GameCommonRes.prototype, "imgVips", void 0);
      __decorate([ property([ cc.SpriteFrame ]) ], GameCommonRes.prototype, "animalIcons", void 0);
      __decorate([ property([ cc.SpriteFrame ]) ], GameCommonRes.prototype, "headBgs", void 0);
      __decorate([ property([ cc.SpriteFrame ]) ], GameCommonRes.prototype, "skillIcons", void 0);
      __decorate([ property([ cc.SpriteFrame ]) ], GameCommonRes.prototype, "skillGrayIcons", void 0);
      __decorate([ property([ cc.SpriteFrame ]) ], GameCommonRes.prototype, "taskItemIcons", void 0);
      __decorate([ property([ cc.SpriteFrame ]) ], GameCommonRes.prototype, "animalFirstSpriteFrames", void 0);
      __decorate([ property([ cc.AnimationClip ]) ], GameCommonRes.prototype, "pikaqiuAnimationClips", void 0);
      GameCommonRes = GameCommonRes_1 = __decorate([ ccclass ], GameCommonRes);
      return GameCommonRes;
    }(BaseComponent_1.default);
    exports.default = GameCommonRes;
    cc._RF.pop();
  }, {
    "./view/base/BaseComponent": "BaseComponent"
  } ],
  GameEntry: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "80b78Cq1WNK8JHz9kmXQdNN", "GameEntry");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GameEntry = void 0;
    var LocalStorageUtil_1 = require("./util/LocalStorageUtil");
    var ErrorCodeUtil_1 = require("./util/ErrorCodeUtil");
    var TimerManager_1 = require("./common/core/TimerManager");
    var ModelMessageType_1 = require("./common/init/ModelMessageType");
    var ModuleInitor_1 = require("./common/init/ModuleInitor");
    var UIDefine_1 = require("./common/init/UIDefine");
    var SocketConnection_1 = require("./common/net/SocketConnection");
    var SocketLoadingImpl_1 = require("./common/net/SocketLoadingImpl");
    var LayerManager_1 = require("./manager/LayerManager");
    var ResLoadManager_1 = require("./manager/ResLoadManager");
    var LoginModel_1 = require("./model/LoginModel");
    var LoginModuleController_1 = require("./modulecontroller/LoginModuleController");
    var ProtoTransfer_1 = require("./proto/ProtoTransfer");
    var StringUtil_1 = require("./util/StringUtil");
    var ModelMessageCarer_1 = require("./view/base/ModelMessageCarer");
    var SocketLoadingView_1 = require("./view/component/SocketLoadingView");
    var AudioManager_1 = require("./manager/AudioManager");
    var Extends_1 = require("./extend/Extends");
    var UIStartLoading_1 = require("./view/common/UIStartLoading");
    var UIInvalidToken_1 = require("./view/common/UIInvalidToken");
    var AnimalModel_1 = require("./model/AnimalModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var GameEntry = function(_super) {
      __extends(GameEntry, _super);
      function GameEntry() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.pDat = new Uint8Array(0);
        _this.inited = false;
        _this.reconnectTimes = 0;
        _this.reconnectTimeId = 0;
        return _this;
      }
      GameEntry.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        Extends_1.extendsButton();
        Extends_1.extendsSprite();
        Extends_1.extendsScrollView();
        LayerManager_1.LayerManager.Instance.init();
        LayerManager_1.LayerManager.Instance.switchPortrait();
        this.init();
        this.registUIMap();
      };
      GameEntry.prototype.registUIMap = function() {
        var manager = LayerManager_1.LayerManager.Instance;
        var isApp = false;
        var isWeb = false;
        isApp || isWeb;
      };
      GameEntry.prototype.preloadRes = function() {
        var resGroup = new ResLoadManager_1.ResGroup();
        resGroup.addPrefab(UIDefine_1.UIDefine.UIStartLoading);
        ResLoadManager_1.ResLoadManager.Instance.loadGroup("launch_preload", [ resGroup ], null, function() {
          cc.resources.load("animal_path", cc.JsonAsset, function(err, asset) {
            if (err) {
              console.error("\u52a0\u8f7d animal_path \u5931\u8d25", err);
              return;
            }
            AnimalModel_1.AnimalModel.Instance.allPaths = asset.json;
            UIStartLoading_1.default.open();
          });
        });
      };
      GameEntry.prototype.init = function() {
        ModuleInitor_1.ModuleInitor.init();
        ErrorCodeUtil_1.ErrorCodeUtil.init();
        SocketLoadingImpl_1.SocketLoadingImpl.Instance.init(new SocketLoadingView_1.SocketLoadingProxy());
        SocketConnection_1.SocketConnection.Instance.transfer = new ProtoTransfer_1.ProtoTransfer();
        SocketConnection_1.SocketConnection.Instance.onOpen = this.onSocketConnected.bind(this);
        SocketConnection_1.SocketConnection.Instance.onError = this.onSocketError.bind(this);
        SocketConnection_1.SocketConnection.Instance.onClose = this.onSocketClose.bind(this);
        AudioManager_1.AudioManager.Instance.bgmEnable = LocalStorageUtil_1.LocalStorageUtil.getBool(LocalStorageUtil_1.LocalStorageKey.key_game_bgm, true);
        AudioManager_1.AudioManager.Instance.soundEnable = LocalStorageUtil_1.LocalStorageUtil.getBool(LocalStorageUtil_1.LocalStorageKey.key_game_sound, true);
        var url = "wss://zoo.cyydm.shop/wss";
        url && SocketConnection_1.SocketConnection.Instance.connect(url);
      };
      GameEntry.prototype.login = function() {
        var loginModel = LoginModel_1.LoginModel.Instance;
        var login_info = loginModel.userInfo;
        if (login_info) {
          LoginModuleController_1.LoginModuleController.Instance.requestLoginSecurity(loginModel.new_sec, login_info.role_id);
          return;
        }
        if (LoginModel_1.LoginModel.Instance.FirstEnter) {
          var url = new URL(window.location.href);
          var searchParams = new URLSearchParams(url.search);
          var token = searchParams.get("token");
          var type = searchParams.get("type");
          LoginModel_1.LoginModel.Instance.FirstEnter = false;
          if (null != token && null != type) {
            var tokenInfo = new LoginModel_1.tokenObject();
            tokenInfo.token = token;
            tokenInfo.type = type;
            LoginModel_1.LoginModel.Instance.tokenInfo = tokenInfo;
            this.preloadRes();
          } else UIInvalidToken_1.default.open();
        }
      };
      GameEntry.prototype.update = function(dt) {
        TimerManager_1.TimerManager.Instance.update(1e3 * dt);
      };
      Object.defineProperty(GameEntry.prototype, "careMessages", {
        get: function() {
          return [ ModelMessageType_1.ModelMessageType.USER_RECONNECTE, ModelMessageType_1.ModelMessageType.FORCE_LOGOUT ];
        },
        enumerable: false,
        configurable: true
      });
      GameEntry.prototype.updateData = function(type) {
        switch (type) {
         case ModelMessageType_1.ModelMessageType.USER_RECONNECTE:
          if (LoginModel_1.LoginModel.Instance.forceLogout) {
            LoginModuleController_1.LoginModuleController.Instance.showKickoutAlert();
            return;
          }
          0 == this.reconnectTimeId && this.autoReconnect();
          break;

         case ModelMessageType_1.ModelMessageType.FORCE_LOGOUT:
          LoginModel_1.LoginModel.Instance.forceLogout || 0 == this.reconnectTimeId && this.autoReconnect();
        }
      };
      GameEntry.prototype.onSocketConnected = function() {
        this.reconnectTimes = 0;
        false == this.inited && (this.inited = true);
        this.login();
      };
      GameEntry.prototype.onSocketError = function() {
        this.reconnect();
      };
      GameEntry.prototype.onSocketClose = function() {
        this.reconnect();
      };
      GameEntry.prototype.reconnect = function() {
        LoginModuleController_1.LoginModuleController.Instance.stopHeartbeat();
        if (LoginModel_1.LoginModel.Instance.forceLogout) {
          console.log("\u5df2\u5f3a\u5236\u4e0b\u7ebf\uff0c\u653e\u5f03\u91cd\u8fde");
          return;
        }
        if (0 == this.reconnectTimeId) {
          LoginModel_1.LoginModel.Instance.updateModel(ModelMessageType_1.ModelMessageType.SOCKET_DISCONNECTE);
          this.reconnectTimeId = TimerManager_1.TimerManager.Instance.addCountdown(3e3 * this.reconnectTimes + 2e3, this, this.autoReconnect);
          console.log("\u5f00\u542f\u91cd\u8fde\u5b9a\u65f6\u5668");
        }
      };
      GameEntry.prototype.autoReconnect = function() {
        this.reconnectTimeId = 0;
        if (!SocketConnection_1.SocketConnection.Instance.connected) {
          this.reconnectTimes++;
          console.log(StringUtil_1.default.replaceString("try to reconnect:{0} times...", this.reconnectTimes.toString()));
          SocketConnection_1.SocketConnection.Instance.close();
          SocketConnection_1.SocketConnection.Instance.reconnect();
        }
      };
      GameEntry = __decorate([ ccclass ], GameEntry);
      return GameEntry;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.GameEntry = GameEntry;
    cc._RF.pop();
  }, {
    "./common/core/TimerManager": "TimerManager",
    "./common/init/ModelMessageType": "ModelMessageType",
    "./common/init/ModuleInitor": "ModuleInitor",
    "./common/init/UIDefine": "UIDefine",
    "./common/net/SocketConnection": "SocketConnection",
    "./common/net/SocketLoadingImpl": "SocketLoadingImpl",
    "./extend/Extends": "Extends",
    "./manager/AudioManager": "AudioManager",
    "./manager/LayerManager": "LayerManager",
    "./manager/ResLoadManager": "ResLoadManager",
    "./model/AnimalModel": "AnimalModel",
    "./model/LoginModel": "LoginModel",
    "./modulecontroller/LoginModuleController": "LoginModuleController",
    "./proto/ProtoTransfer": "ProtoTransfer",
    "./util/ErrorCodeUtil": "ErrorCodeUtil",
    "./util/LocalStorageUtil": "LocalStorageUtil",
    "./util/StringUtil": "StringUtil",
    "./view/base/ModelMessageCarer": "ModelMessageCarer",
    "./view/common/UIInvalidToken": "UIInvalidToken",
    "./view/common/UIStartLoading": "UIStartLoading",
    "./view/component/SocketLoadingView": "SocketLoadingView"
  } ],
  GameLoadingProxy: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "75a99x/xgFIAL1hyuYvzZkh", "GameLoadingProxy");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var UILoading_1 = require("./view/common/UILoading");
    var GameLoadingProxy = function() {
      function GameLoadingProxy() {
        this.singleInstanceMultiUsed = true;
        this.loadingIdentifies = [];
        this.showDelay = 500;
        this.hideDelay = 1e3;
      }
      GameLoadingProxy.prototype.showLoading = function(loadingIdentify) {
        UILoading_1.default.open();
        this.singleInstanceMultiUsed && (this.loadingIdentifies.includes(loadingIdentify) || this.loadingIdentifies.push(loadingIdentify));
      };
      GameLoadingProxy.prototype.updateLoading = function(loadingIdentify, itemLoaded, itemTotal) {};
      GameLoadingProxy.prototype.hideLoading = function(loadingIdentify) {
        if (this.singleInstanceMultiUsed) {
          this.loadingIdentifies.includes(loadingIdentify) && this.loadingIdentifies.splice(this.loadingIdentifies.indexOf(loadingIdentify), 1);
          if (this.loadingIdentifies.length > 0) return;
        }
        UILoading_1.default.close();
      };
      GameLoadingProxy.prototype.isLoadingIncludes = function(loadingIdentify) {
        return this.singleInstanceMultiUsed && this.loadingIdentifies.includes(loadingIdentify);
      };
      GameLoadingProxy.getInstance = function() {
        null == GameLoadingProxy.instance && (GameLoadingProxy.instance = new GameLoadingProxy());
        return GameLoadingProxy.instance;
      };
      return GameLoadingProxy;
    }();
    exports.default = GameLoadingProxy;
    cc._RF.pop();
  }, {
    "./view/common/UILoading": "UILoading"
  } ],
  HelpItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4b19ebCKMFGUb/ULhNagtRz", "HelpItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimalModel_1 = require("../../model/AnimalModel");
    var StringUtil_1 = require("../../util/StringUtil");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var HelpItem = function(_super) {
      __extends(HelpItem, _super);
      function HelpItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.spriteAnimal = null;
        _this.labelName = null;
        _this.labelOdds = null;
        return _this;
      }
      HelpItem.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      HelpItem.prototype.start = function() {};
      HelpItem.prototype.updateView = function(value) {
        var _a;
        var animalModel = AnimalModel_1.AnimalModel.Instance;
        if (!animalModel) {
          console.warn("HelpItem: AnimalModel not available");
          return;
        }
        var animal_names = animalModel.animal_names;
        var animalIcons = null === (_a = animalModel.res) || void 0 === _a ? void 0 : _a.animalIcons;
        if (animal_names && value.bet >= 1 && value.bet <= animal_names.length) this.labelName.string = animal_names[value.bet - 1]; else {
          this.labelName.string = "\u672a\u77e5\u52a8\u7269";
          console.warn("HelpItem: Invalid bet " + value.bet + " or missing animal names");
        }
        animalIcons && value.bet >= 1 && value.bet <= animalIcons.length ? this.spriteAnimal.spriteFrame = animalIcons[value.bet - 1] : console.warn("HelpItem: Invalid bet " + value.bet + " or missing animal icons");
        var odds1 = value.odds[0] || 0;
        var odds2 = value.odds[1] || 0;
        this.labelOdds.string = odds1 && odds2 && odds1 !== odds2 ? StringUtil_1.default.replaceString("{0}~{1}{2}{3}", odds1 / 100, odds2 / 100, "\u500d", "\u91d1\u8c46") : odds1 ? StringUtil_1.default.replaceString("{0}{1}{2}", odds1 / 100, "\u500d", "\u91d1\u8c46") : odds2 ? StringUtil_1.default.replaceString("{0}{1}{2}", odds2 / 100, "\u500d", "\u91d1\u8c46") : "\u8d54\u7387\u672a\u77e5";
      };
      __decorate([ property(cc.Sprite) ], HelpItem.prototype, "spriteAnimal", void 0);
      __decorate([ property(cc.Label) ], HelpItem.prototype, "labelName", void 0);
      __decorate([ property(cc.Label) ], HelpItem.prototype, "labelOdds", void 0);
      HelpItem = __decorate([ ccclass ], HelpItem);
      return HelpItem;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = HelpItem;
    cc._RF.pop();
  }, {
    "../../model/AnimalModel": "AnimalModel",
    "../../util/StringUtil": "StringUtil",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  HomeHead: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c835bkDX5pG2Z+g/M/hzIZv", "HomeHead");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimalModel_1 = require("../../model/AnimalModel");
    var LoginModel_1 = require("../../model/LoginModel");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var HomeHead = function(_super) {
      __extends(HomeHead, _super);
      function HomeHead() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nodeBg = null;
        _this.spriteHead = null;
        _this.spriteVip = null;
        return _this;
      }
      HomeHead.prototype.onLoad = function() {};
      HomeHead.prototype.setHeadInfo = function(src, vip, showBg) {
        void 0 === showBg && (showBg = true);
        var res = AnimalModel_1.AnimalModel.Instance.res;
        var spriteFrame = res.DEFAULT_HEAD;
        this.spriteHead.spriteFrame = spriteFrame;
        this.spriteVip.node.active = vip > 0;
        vip > 0 && (this.spriteVip.spriteFrame = res.imgVips[vip - 1]);
        this.nodeBg.active = showBg;
      };
      __decorate([ property(cc.Node) ], HomeHead.prototype, "nodeBg", void 0);
      __decorate([ property(cc.Sprite) ], HomeHead.prototype, "spriteHead", void 0);
      __decorate([ property(cc.Sprite) ], HomeHead.prototype, "spriteVip", void 0);
      HomeHead = __decorate([ ccclass ], HomeHead);
      return HomeHead;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = HomeHead;
    cc._RF.pop();
  }, {
    "../../model/AnimalModel": "AnimalModel",
    "../../model/LoginModel": "LoginModel",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  IProtoTransfer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d0cb0ArFK1Lrbia94HkcSxf", "IProtoTransfer");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    cc._RF.pop();
  }, {} ],
  IceIcon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d1292U/EWBPcaqDkxE3q9z1", "IceIcon");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = this && this.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TimerManager_1 = require("../../common/core/TimerManager");
    var AnimalModel_1 = require("../../model/AnimalModel");
    var LoginModel_1 = require("../../model/LoginModel");
    var AnimalModuleController_1 = require("../../modulecontroller/AnimalModuleController");
    var proto_1 = require("../../proto/proto");
    var StringUtil_1 = require("../../util/StringUtil");
    var Alert_1 = require("../component/Alert");
    var VibratorManager_1 = require("../component/VibratorManager");
    var ModelMessageType_1 = require("./../../common/init/ModelMessageType");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var IceIcon = function(_super) {
      __extends(IceIcon, _super);
      function IceIcon() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nodeMask = null;
        _this.labelNum = null;
        _this.spriteSkill = null;
        _this.spriteGray = null;
        _this.type = null;
        _this.progressTimerId = 0;
        _this.cachedInfo = null;
        return _this;
      }
      IceIcon.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.node.on(cc.Node.EventType.TOUCH_END, this.clickHandler, this);
        this.initProgressMask();
      };
      IceIcon.prototype.start = function() {
        this.updateView();
      };
      IceIcon.prototype.onDestroy = function() {
        this.removeProgressTimer();
        this.cachedInfo = null;
        this.type = null;
      };
      IceIcon.prototype.initProgressMask = function() {};
      IceIcon.prototype.initIcon = function(info) {
        if (this.cachedInfo && info && this.cachedInfo.type === info.type && this.cachedInfo.val === info.val) return;
        if (!info || !info.type) {
          console.warn("IceIcon: Invalid skill info provided");
          return;
        }
        this.type = info.type;
        this.cachedInfo = __assign({}, info);
        info.type === proto_1.e_animal_skill_type.locking || info.type === proto_1.e_animal_skill_type.improve_odds ? this.labelNum.string = "" : this.labelNum.string = "X" + info.val;
        var animalModel = AnimalModel_1.AnimalModel.Instance;
        if (animalModel) {
          this.spriteSkill.spriteFrame = animalModel.getSkillIcon(info.type, info.val);
          this.spriteGray.spriteFrame = animalModel.getSkillIcon(info.type, info.val, true);
        }
        this.spriteGray.node.active = false;
      };
      IceIcon.prototype.clickHandler = function() {
        var animalModel = AnimalModel_1.AnimalModel.Instance;
        var iceSkillPlaying = animalModel.iceSkillPlaying;
        var buffSkillPlaying = animalModel.buffSkillPlaying;
        var price = animalModel.dividedMultiple(animalModel.toolPrice);
        var item = animalModel.getCriItem(LoginModel_1.LoginModel.Instance.userInfo.role_id);
        if (item) return;
        if (this.type === proto_1.e_animal_skill_type.ice) {
          if (iceSkillPlaying) return;
          var iceSkill = animalModel.getSkillInfo(this.type);
          var progress = animalModel.iceSkillRemainsProgress;
          if (0 === progress && iceSkill.val > 0) AnimalModuleController_1.AnimalModuleController.Instance.requestUseAnimalSkill(this.type); else {
            if (0 !== progress) return;
            Alert_1.default.open("\u52a8\u7269\u6293\u6355\u5931\u8d25\u65f6\u6280\u80fd\u72b6\u6001\u4f1a\u7d2f\u79ef\uff0c\u76f4\u523050\u6b21\u540e\u53ef\u4ee5\u91ca\u653e\u4e00\u6b21\u51b0\u5c01\u6280\u80fd", null, Alert_1.AlertButton.OK);
          }
        } else if (this.type === proto_1.e_animal_skill_type.improve_odds) {
          if (buffSkillPlaying) return;
          var buffSkill = animalModel.getSkillInfo(this.type);
          var progress = animalModel.getBuffProgress();
          if (0 === progress && buffSkill.val > 0) AnimalModuleController_1.AnimalModuleController.Instance.requestUseAnimalSkill(this.type); else {
            if (0 !== progress) return;
            var str = StringUtil_1.default.replaceString("\u786e\u5b9a\u7528{0}\u91d1\u8c46\u4f7f\u7528\u500d\u7387\u63d0\u5347\u9053\u5177\uff1f", price);
            Alert_1.default.open(str, null, this.oddsImproveHandler.bind(this), Alert_1.AlertButton.OK + Alert_1.AlertButton.CANCEL);
          }
        } else if (this.type === proto_1.e_animal_skill_type.locking) {
          if (animalModel.lockSkillPlaying) {
            AnimalModel_1.AnimalModel.Instance.updateModel(ModelMessageType_1.ModelMessageType.ZOO_LOCK_END);
            return;
          }
          AnimalModuleController_1.AnimalModuleController.Instance.requestUseAnimalSkill(this.type);
        }
      };
      IceIcon.prototype.oddsImproveHandler = function(flag) {
        flag === Alert_1.AlertButton.OK && AnimalModuleController_1.AnimalModuleController.Instance.requestBuyTools(this.type);
      };
      IceIcon.prototype.setIconVisible = function(full, updateShake) {
        void 0 === updateShake && (updateShake = true);
        if (this.spriteSkill.node.active == full) return;
        this.spriteGray.node.active = !full;
        updateShake && (full ? this.startShake() : this.stopShake());
      };
      IceIcon.prototype.updateView = function() {
        var _this = this;
        this.scheduleOnce(function() {
          var animalModel = AnimalModel_1.AnimalModel.Instance;
          var skill = animalModel.getSkillInfo(proto_1.e_animal_skill_type.ice);
          var progress = animalModel.iceSkillRemainsProgress;
          var playing = animalModel.iceSkillPlaying;
          if (_this.type === proto_1.e_animal_skill_type.ice) {
            _this.setIconVisible(playing || skill.val > 0 && 0 === progress);
            if (progress > 0 && !playing) _this.addProgressTimer(); else {
              var count = skill.count / 50;
              progress <= 0 && _this.progressTimerId > 0 && animalModel.clearIceSkillAnimalState();
              skill.val > 0 && (count = 1);
              _this.updateProgress(1 - count);
              _this.removeProgressTimer();
            }
          }
        }, 0);
      };
      IceIcon.prototype.addProgressTimer = function() {
        if (0 === this.progressTimerId) {
          this.progressTimerId = TimerManager_1.TimerManager.Instance.addCountdown(6e5, this, this.onProgressTimerComplete.bind(this), this.progressTimerUpdate, 50);
          this.progressTimerUpdate();
        }
      };
      IceIcon.prototype.onProgressTimerComplete = function() {
        this.progressTimerId = 0;
      };
      IceIcon.prototype.removeProgressTimer = function() {
        if (this.progressTimerId > 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.progressTimerId);
          this.progressTimerId = 0;
        }
      };
      IceIcon.prototype.progressTimerUpdate = function() {
        var animalModel = AnimalModel_1.AnimalModel.Instance;
        if (!animalModel.enter_toc) {
          this.removeProgressTimer();
          return;
        }
        var progress = animalModel.iceSkillRemainsProgress;
        if (progress <= 0) {
          animalModel.clearIceSkillAnimalState();
          this.removeProgressTimer();
          this.updateView();
        } else this.updateProgress(progress / 1);
      };
      IceIcon.prototype.updateProgress = function(progress) {
        progress < 0 && (progress = 0);
        progress > 1 && (progress = 1);
        this.nodeMask.height = (1 - progress) * this.spriteGray.node.height;
      };
      IceIcon.prototype.startShake = function() {
        VibratorManager_1.VibratorManager.getInstance().add(this.spriteSkill.node, {
          x: 0,
          y: 0
        }, 5, 500, 50, 0, 2e3);
      };
      IceIcon.prototype.stopShake = function() {
        VibratorManager_1.VibratorManager.getInstance().remove(this.spriteSkill.node);
      };
      __decorate([ property(cc.Node) ], IceIcon.prototype, "nodeMask", void 0);
      __decorate([ property(cc.Label) ], IceIcon.prototype, "labelNum", void 0);
      __decorate([ property(cc.Sprite) ], IceIcon.prototype, "spriteSkill", void 0);
      __decorate([ property(cc.Sprite) ], IceIcon.prototype, "spriteGray", void 0);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_ICE_SKILL_EFFECT_START, ModelMessageType_1.ModelMessageType.ZOO_ICE_SKILL_EFFECT_COMPLETE, ModelMessageType_1.ModelMessageType.ZOO_ICE_SKILL_PROGRESS_UPDATE) ], IceIcon.prototype, "updateView", null);
      IceIcon = __decorate([ ccclass ], IceIcon);
      return IceIcon;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = IceIcon;
    cc._RF.pop();
  }, {
    "../../common/core/TimerManager": "TimerManager",
    "../../model/AnimalModel": "AnimalModel",
    "../../model/LoginModel": "LoginModel",
    "../../modulecontroller/AnimalModuleController": "AnimalModuleController",
    "../../proto/proto": "proto",
    "../../util/StringUtil": "StringUtil",
    "../component/Alert": "Alert",
    "../component/VibratorManager": "VibratorManager",
    "./../../common/init/ModelMessageType": "ModelMessageType",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  ImageSheet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "38b25WqiwJAzLOEYogPPLRU", "ImageSheet");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NumberType = void 0;
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NumberType;
    (function(NumberType) {
      NumberType[NumberType["cj"] = 0] = "cj";
      NumberType[NumberType["buff"] = 1] = "buff";
      NumberType[NumberType["cjwin"] = 2] = "cjwin";
      NumberType[NumberType["zoowinyel"] = 3] = "zoowinyel";
      NumberType[NumberType["zoowinpur"] = 4] = "zoowinpur";
    })(NumberType = exports.NumberType || (exports.NumberType = {}));
    var ImageSheet = function(_super) {
      __extends(ImageSheet, _super);
      function ImageSheet() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.numberFrames = [];
        _this.imageType = NumberType.cj;
        _this.imageScale = 1;
        _this.spacing = 3;
        _this.currentNumber = -2;
        _this.digitNodes = [];
        _this.imageStr = "";
        _this.lastImageStr = "";
        _this.totalWidth = 0;
        _this.digitPool = new cc.NodePool();
        return _this;
      }
      ImageSheet.prototype.onLoad = function() {};
      ImageSheet.prototype.reset = function() {
        this.currentNumber = -2;
        this.lastImageStr = "";
        this.imageStr = "";
        this.totalWidth = 0;
        this.clearOldSprites();
      };
      ImageSheet.prototype.updateNumberImage = function(num, isAdd) {
        void 0 === isAdd && (isAdd = false);
        var numberStr = this.getFormattedNumber(num);
        var imageStr = this.getImageStr(numberStr);
        this.lastImageStr = imageStr;
        this.imageStr = imageStr;
        this.currentNumber = num;
        this.clearOldSprites();
        this.totalWidth = 0;
        var isCommaIndex = -1;
        var isDotIndex = -1;
        isAdd && (this.imageStr = "+" + this.imageStr);
        for (var i = 0; i < this.imageStr.length; i++) {
          var digit = this.parseDigit(this.imageStr[i]);
          11 == digit ? isCommaIndex = i : 10 == digit && (isDotIndex = i);
          var spriteNode = this.createSpriteNode(-1 == digit ? 10 : digit);
          this.node.addChild(spriteNode);
          this.digitNodes.push(spriteNode);
          this.totalWidth += spriteNode.width * this.imageScale;
          i < this.imageStr.length - 1 && (this.totalWidth += this.spacing);
        }
        this.layoutSprites(this.totalWidth, isCommaIndex, isDotIndex);
      };
      ImageSheet.prototype.getFormattedNumber = function(num) {
        if (void 0 === num || null === num || isNaN(num)) {
          console.warn("getFormattedNumber: \u53c2\u6570 num \u65e0\u6548:", num);
          return "0";
        }
        this.imageType;
        return num.toString();
      };
      ImageSheet.prototype.clearOldSprites = function() {
        var _this = this;
        this.digitNodes.forEach(function(node) {
          _this.digitPool.put(node);
        });
        this.digitNodes = [];
      };
      ImageSheet.prototype.createSpriteNode = function(digit) {
        var node = this.digitPool.size() > 0 ? this.digitPool.get() : new cc.Node();
        var sprite = node.getComponent(cc.Sprite) || node.addComponent(cc.Sprite);
        digit >= 0 && digit < this.numberFrames.length && (sprite.spriteFrame = this.numberFrames[digit]);
        node.scaleX = this.imageScale;
        node.scaleY = this.imageScale;
        return node;
      };
      ImageSheet.prototype._getPosY = function(index, isCommaIndex, isDotIndex) {
        var posY = 0;
        var spriteSizeY = this.digitNodes[index].height;
        isDotIndex == index ? posY = -(this.node.height - spriteSizeY) / 2 + 5 : isCommaIndex == index && (posY = -(this.node.height - spriteSizeY) / 2 + 5);
        return posY;
      };
      ImageSheet.prototype.layoutSprites = function(totalWidth, isCommaIndex, isDotIndex) {
        var startX = -totalWidth / 2;
        var currentX = startX;
        var posX = 0;
        for (var i = 0; i < this.digitNodes.length; i++) {
          var node = this.digitNodes[i];
          var nodeWidth = node.width * this.imageScale;
          node.setPosition(currentX + nodeWidth / 2, this._getPosY(i, isCommaIndex, isDotIndex));
          currentX += nodeWidth + this.spacing + posX;
        }
      };
      ImageSheet.prototype.getImageStr = function(numberStr) {
        return numberStr;
      };
      ImageSheet.prototype.parseDigit = function(char) {
        if ("\u221e" == char) return -1;
        if ("+" == char) return 11;
        if ("." == char) return 10;
        if ("x" == char) return 12;
        var parsed = parseInt(char);
        return isNaN(parsed) ? -1 : parsed;
      };
      __decorate([ property({
        type: [ cc.SpriteFrame ]
      }) ], ImageSheet.prototype, "numberFrames", void 0);
      __decorate([ property({
        type: cc.Enum(NumberType)
      }) ], ImageSheet.prototype, "imageType", void 0);
      __decorate([ property ], ImageSheet.prototype, "imageScale", void 0);
      __decorate([ property ], ImageSheet.prototype, "spacing", void 0);
      ImageSheet = __decorate([ ccclass ], ImageSheet);
      return ImageSheet;
    }(cc.Component);
    exports.default = ImageSheet;
    cc._RF.pop();
  }, {} ],
  LayerManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "443fdgZ0RpOQpD4sCPDUiUj", "LayerManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PanelEffectType = exports.UICacher = exports.UICacheType = exports.UIOptionMultiInstance = exports.UIOptionWithParam = exports.UIOption = exports.LayerManager = exports.Orientation = exports.LayerType = void 0;
    var NodeStateListener_1 = require("./../common/core/NodeStateListener");
    var ResLoadManager_1 = require("./ResLoadManager");
    var UIName_1 = require("./../common/init/UIName");
    var UIDefine_1 = require("./../common/init/UIDefine");
    var TimerManager_1 = require("../common/core/TimerManager");
    var StringUtil_1 = require("../util/StringUtil");
    var PanelEffectUtil_1 = require("./core/PanelEffectUtil");
    var GameLoadingProxy_1 = require("../GameLoadingProxy");
    var TipView_1 = require("../view/component/TipView");
    var NativeUtil_1 = require("../util/NativeUtil");
    var LayerType;
    (function(LayerType) {
      LayerType[LayerType["layer_base"] = 0] = "layer_base";
      LayerType[LayerType["layer_float"] = 1] = "layer_float";
      LayerType[LayerType["layer_window"] = 2] = "layer_window";
      LayerType[LayerType["layer_modal"] = 3] = "layer_modal";
      LayerType[LayerType["layer_tip"] = 4] = "layer_tip";
    })(LayerType = exports.LayerType || (exports.LayerType = {}));
    var Orientation;
    (function(Orientation) {
      Orientation[Orientation["vertical"] = 0] = "vertical";
      Orientation[Orientation["horizotal"] = 1] = "horizotal";
    })(Orientation = exports.Orientation || (exports.Orientation = {}));
    var LayerManager = function() {
      function LayerManager() {
        this.panelMap = new Map();
        this.panelMultiInstances = [];
        this.inited = false;
        this.animationEnable = true;
        this._orientation = Orientation.vertical;
        this.timerId = 0;
        this.exclusiveModalBgMap = new Map();
        this.modalLayerBackgroundColorValue = LayerManager.DEFAULT_MODAL_BACKGROUND_COLOR;
        this.modalLayerBackgroundAlphaValue = LayerManager.DEFAULT_MODAL_BACKGROUND_ALPHA;
        this.MODAL_BG_NODE_NAME = "MODAL_BACKGROUND";
        this.MODAL_BG_EXCLUSIVE_NODE_NAME = this.MODAL_BG_NODE_NAME + "_EXCLUSIVE";
        this.loadingShowDelayingMap = new Map();
        this.loadingShowingMap = new Map();
        this._interactable = true;
        this.latestLayerPopupCheckTime = 0;
        this.popupCheckLayers = [ LayerType.layer_window, LayerType.layer_modal ];
        this.uiMap = new Map();
        this.delayToCheckQueuePanelTimerId = 0;
        this.QUEUE_PANEL_SHOW_DELAY = 300;
        this.queueOptions = [];
      }
      Object.defineProperty(LayerManager, "Instance", {
        get: function() {
          return LayerManager.instance;
        },
        enumerable: false,
        configurable: true
      });
      LayerManager.prototype.init = function() {
        var _this = this;
        if (this.inited) return;
        var scene = cc.director.getScene();
        var canvas = scene.getComponentInChildren(cc.Canvas);
        this.designResolution = canvas.designResolution;
        this.layerMap = new Map();
        this.layerMap.size;
        for (var key in LayerType) if (key.startsWith("layer")) {
          var node = new cc.Node(key);
          node.setParent(canvas.node);
          node.position = new cc.Vec3();
          var widget = node.addComponent(cc.Widget);
          widget.alignMode = cc.Widget.AlignMode.ON_WINDOW_RESIZE;
          widget.isAlignLeft = widget.isAlignRight = widget.isAlignTop = widget.isAlignBottom = true;
          widget.updateAlignment();
          widget.top = widget.bottom = widget.left = widget.right = 0;
          this.layerMap.set(LayerType[key], node);
        }
        this.addGcTimer();
        this.onViewResize();
        window.onresize = function() {
          _this.onViewResize();
          true;
          if (window["resizeTimerId"] > 0) return;
          window["resizeTimerId"] = TimerManager_1.TimerManager.Instance.addCountdown(500, _this, function() {
            window["resizeTimerId"] = 0;
            _this.logLayerInfo();
          });
        };
      };
      LayerManager.prototype.onViewResize = function() {
        if (!this.canvasShowAll) return;
        var left = document.getElementById("bg_left");
        var right = document.getElementById("bg_right");
        if (left && right) {
          var canvasSize = cc.view.getCanvasSize();
          var viewSize = cc.view.getVisibleSizeInPixel();
          var radio = cc.view.getDevicePixelRatio();
          left.style.display = right.style.display = "block";
          if (cc.sys.isMobile) if (0 == window.orientation || 180 == window.orientation) if (viewSize.width < canvasSize.width) {
            left.style.width = right.style.width = (canvasSize.width - viewSize.width) / 2 / radio + "px";
            left.style.height = right.style.height = "100%";
            right.style.left = (canvasSize.width - (canvasSize.width - viewSize.width) / 2) / radio + "px";
            right.style.top = "0px";
          } else {
            left.style.width = right.style.width = (canvasSize.height - viewSize.height) / 2 / radio + "px";
            left.style.height = right.style.height = "100%";
            right.style.left = (canvasSize.height - (canvasSize.height - viewSize.height) / 2) / radio + "px";
            right.style.top = "0px";
          } else if (viewSize.width < canvasSize.width) {
            left.style.width = right.style.width = "100%";
            left.style.height = right.style.height = (canvasSize.width - viewSize.width) / 2 / radio + "px";
            right.style.top = (canvasSize.width - (canvasSize.width - viewSize.width) / 2) / radio + "px";
            right.style.left = "0px";
          } else {
            left.style.width = right.style.width = "100%";
            left.style.height = right.style.height = (canvasSize.height - viewSize.height) / 2 / radio + "px";
            right.style.top = (canvasSize.height - (canvasSize.height - viewSize.height) / 2) / radio + "px";
            right.style.left = "0px";
          } else if (viewSize.width < canvasSize.width) {
            left.style.width = right.style.width = (canvasSize.width - viewSize.width) / 2 / radio + "px";
            left.style.height = right.style.height = "100%";
            right.style.left = (canvasSize.width - (canvasSize.width - viewSize.width) / 2) / radio + "px";
            right.style.top = "0px";
          } else {
            left.style.width = right.style.width = "100%";
            left.style.height = right.style.height = (canvasSize.height - viewSize.height) / 2 / radio + "px";
            right.style.top = (canvasSize.height - (canvasSize.height - viewSize.height) / 2) / radio + "px";
            right.style.left = "0px";
          }
        }
      };
      Object.defineProperty(LayerManager.prototype, "canvasShowAll", {
        get: function() {
          if (!cc.sys.isMobile) return true;
          var canvasSize = cc.view.getCanvasSize();
          var long = Math.max(canvasSize.width, canvasSize.height);
          var short = Math.min(canvasSize.width, canvasSize.height);
          return short / long > 980 / 1920 + .1;
        },
        enumerable: false,
        configurable: true
      });
      LayerManager.prototype.updateCameraBackground = function(useTransparency) {
        cc.sys.isNative && (cc.Camera.main.backgroundColor = useTransparency ? cc.Color.TRANSPARENT : cc.Color.WHITE);
      };
      Object.defineProperty(LayerManager.prototype, "orientation", {
        get: function() {
          return this._orientation;
        },
        enumerable: false,
        configurable: true
      });
      LayerManager.prototype.switchPortrait = function() {
        var frameSize = cc.view.getFrameSize();
        var scene = cc.director.getScene();
        var canvas = scene.getComponentInChildren(cc.Canvas);
        var long = Math.max(this.designResolution.width, this.designResolution.height);
        var short = Math.min(this.designResolution.width, this.designResolution.height);
        cc.view.setOrientation(cc.macro.ORIENTATION_PORTRAIT);
        this.canvasShowAll ? cc.view.setFrameSize(short * cc.view.getScaleX(), long * cc.view.getScaleY()) : frameSize.height < frameSize.width ? cc.view.setFrameSize(frameSize.height, frameSize.width) : cc.view.setFrameSize(frameSize.width, frameSize.height);
        if (canvas) {
          canvas.fitWidth = true;
          canvas.fitHeight = this.canvasShowAll;
          cc.view.setDesignResolutionSize(short, long, this.canvasShowAll ? cc.ResolutionPolicy.SHOW_ALL : cc.ResolutionPolicy.FIXED_WIDTH);
        }
        this._orientation = Orientation.vertical;
        this.designResolution = new cc.Size(short, long);
        this.dispatchWindowResizeEvent();
        true;
        console.log("\u5207\u6362\u4e3a\u7ad6\u5c4f");
      };
      LayerManager.prototype.switchToLandscape = function() {
        var frameSize = cc.view.getFrameSize();
        var scene = cc.director.getScene();
        var canvas = scene.getComponentInChildren(cc.Canvas);
        var long = Math.max(this.designResolution.width, this.designResolution.height);
        var short = Math.min(this.designResolution.width, this.designResolution.height);
        cc.view.setOrientation(cc.macro.ORIENTATION_LANDSCAPE);
        this.canvasShowAll ? cc.view.setFrameSize(long * cc.view.getScaleX(), short * cc.view.getScaleY()) : frameSize.height > frameSize.width ? cc.view.setFrameSize(frameSize.height, frameSize.width) : cc.view.setFrameSize(frameSize.width, frameSize.height);
        if (canvas) {
          canvas.fitWidth = this.canvasShowAll;
          canvas.fitHeight = true;
          cc.view.setDesignResolutionSize(long, short, this.canvasShowAll ? cc.ResolutionPolicy.SHOW_ALL : cc.ResolutionPolicy.FIXED_HEIGHT);
        }
        this._orientation = Orientation.horizotal;
        this.designResolution = new cc.Size(long, short);
        this.dispatchWindowResizeEvent();
        true;
        console.log("\u5207\u6362\u4e3a\u6a2a\u5c4f");
      };
      LayerManager.prototype.dispatchWindowResizeEvent = function() {
        if (cc.sys.isBrowser) {
          var owner = window;
          var event = owner.document.createEvent("UIEvent");
          event.initUIEvent("resize", true, false, owner, 0);
          owner.dispatchEvent(event);
          event = owner.document.createEvent("UIEvents");
          event.initUIEvent("orientationchange", true, false, owner, 0);
          owner.dispatchEvent(event);
        } else cc.sys.isNative && (this.orientation == Orientation.horizotal ? NativeUtil_1.default.Instance.setLandscapeOrientation() : NativeUtil_1.default.Instance.setProtraitOrientation());
      };
      LayerManager.prototype.addGcTimer = function() {
        0 == this.timerId && (this.timerId = TimerManager_1.TimerManager.Instance.addCountdown(1 << 31, this, null, this.timerGcUpdateHandler, 5e3));
      };
      LayerManager.prototype.removeGcTimer = function() {
        if (this.timerId > 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.timerId);
          this.timerId = 0;
        }
      };
      LayerManager.prototype.timerGcUpdateHandler = function() {
        var _this = this;
        var time = cc.sys.now();
        this.panelMap.forEach(function(cacher, key, map) {
          if (null == cacher.node || null == cacher.option) return;
          if (cacher.cacheType == UICacheType.temp) {
            if (0 == cacher.closeTime || cacher.node.active) return;
            if (cacher.option.queueOption && _this.checkPanelIsInQueue(cacher.option.uiDefine)) return;
            if (time - cacher.closeTime >= 12e4) {
              true;
              console.log("auto destroy:" + cacher.node.name);
              cacher.node.destroy();
              cacher.isLoaded = false;
              cacher.node = null;
              cacher.closeTime = 0;
            }
          }
        });
      };
      LayerManager.prototype.createColor = function(color, alpha) {
        var r = (16711680 & color) >> 16;
        var g = (65280 & color) >> 8;
        var b = 255 & color;
        return new cc.Color(r, g, b, alpha);
      };
      LayerManager.prototype.createModalBackground = function(color, alpha, clickable) {
        void 0 === clickable && (clickable = true);
        var parent = this.layerMap.get(LayerType.layer_modal);
        var node = null;
        var sprite = null;
        node = new cc.Node(this.MODAL_BG_NODE_NAME);
        node.color = this.createColor(color);
        node.opacity = alpha;
        node.setParent(parent);
        node.position = new cc.Vec3();
        sprite = node.addComponent(cc.Sprite);
        sprite.spriteFrame = this.createSprite();
        sprite.sizeMode = cc.Sprite.SizeMode.CUSTOM;
        var widget = node.addComponent(cc.Widget);
        widget.isAlignLeft = widget.isAlignRight = widget.isAlignTop = widget.isAlignBottom = true;
        widget.top = widget.bottom = widget.left = widget.right = 0;
        if (clickable) {
          var btn = node.addComponent(cc.Button);
          btn.target = node;
          btn.transition = cc.Button.Transition.NONE;
          node.on("click", this.modalClickHandler, this);
        }
        node.addComponent(cc.BlockInputEvents);
        return node;
      };
      LayerManager.prototype.getColorSpriteFrame = function() {
        return this.createSprite();
      };
      LayerManager.prototype.createSprite = function() {
        if (this.colorSpriteFrame) return this.colorSpriteFrame;
        var texture = cc.assetManager.assets.get("0275e94c-56a7-410f-bd1a-fc7483f7d14a");
        var sf = new cc.SpriteFrame(texture);
        sf.setTexture(texture);
        texture ? texture.addRef() : console.warn("\u672a\u8bfb\u53d6\u5230\u5185\u7f6e\u7eaf\u8272 spriteframe \u56fe\uff0c\u8bf7\u68c0\u67e5 uuid:0275e94c-56a7-410f-bd1a-fc7483f7d14a");
        this.colorSpriteFrame = sf;
        return sf;
      };
      LayerManager.prototype.modalClickHandler = function() {
        var _a = this.tryGetModalPanel(), lastChild = _a.lastChild, modalPanel = _a.modalPanel;
        null == lastChild && this.removeModalBackground();
        modalPanel && modalPanel.onModalClick instanceof Function && modalPanel.onModalClick();
      };
      LayerManager.prototype.tryGetModalPanel = function() {
        var parent = this.layerMap.get(LayerType.layer_modal);
        var modalPanel = null;
        var lastChild = null;
        var childIndex = parent.childrenCount;
        while (childIndex > 0) {
          childIndex--;
          lastChild = parent.children[childIndex];
          if (lastChild == this.modalbackgroundNode || !lastChild.active || lastChild.name.startsWith(this.MODAL_BG_NODE_NAME)) {
            lastChild = null;
            continue;
          }
          modalPanel = this.getIModalPanel(lastChild);
          break;
        }
        return {
          lastChild: lastChild,
          modalPanel: modalPanel
        };
      };
      LayerManager.prototype.getIModalPanel = function(node) {
        var allComponents = node["_components"];
        for (var i = 0; i < allComponents.length; i++) {
          var c = allComponents[i];
          if (c.onModalClick instanceof Function) return c;
        }
        return null;
      };
      LayerManager.prototype.getIParamPanel = function(node) {
        var allComponents = node["_components"];
        for (var i = 0; i < allComponents.length; i++) {
          var c = allComponents[i];
          if (c.updateParam instanceof Function) return c;
        }
        return null;
      };
      LayerManager.prototype.getComponentByInterface = function(node, interfaceType) {
        var allComponents = node.getComponents(cc.Component);
        for (var i = 0; i < allComponents.length; i++) {
          var c = allComponents[i];
          if (c.interfaceType == interfaceType) return c;
        }
        return null;
      };
      Object.defineProperty(LayerManager.prototype, "modalBackgroundNodeAlpha", {
        get: function() {
          return this.modalbackgroundNode.opacity;
        },
        set: function(value) {
          this.modalbackgroundNode.opacity = value;
        },
        enumerable: false,
        configurable: true
      });
      LayerManager.prototype.fadeModalBackgroundAlpha = function(from, to, duration, removeModalBackageAfterFinish) {
        void 0 !== from ? this.modalBackgroundNodeAlpha = from : this.modalBackgroundNodeAlpha == to && (this.modalBackgroundNodeAlpha = 0);
        void 0 === duration && (duration = LayerManager.MODAL_BACKGROUND_FADE_DURATION);
        this.modalbackgroundFading = true;
        cc.Tween.stopAllByTarget(this.modalbackgroundNode);
        var tween = cc.tween(this.modalbackgroundNode).to(duration, {
          opacity: to
        });
        removeModalBackageAfterFinish && tween.call(this.modalBackgroundFadeComplete, this);
        tween.start();
      };
      LayerManager.prototype.modalBackgroundFadeComplete = function() {
        this.modalbackgroundFading = false;
        0 == this.modalbackgroundNode.opacity && this.disactiveModalBackground();
      };
      LayerManager.prototype.removeModalBackground = function() {
        if (this.animationEnable) this.modalbackgroundNode && this.modalbackgroundNode.active && this.fadeModalBackgroundAlpha(void 0, 0, void 0, true); else {
          this.modalBackgroundNodeAlpha = 0;
          this.disactiveModalBackground();
        }
      };
      LayerManager.prototype.disactiveModalBackground = function() {
        if (this.modalbackgroundFading) {
          this.modalbackgroundFading = false;
          cc.Tween.stopAllByTarget(this.modalbackgroundNode);
        }
        if (this.modalbackgroundNode && this.modalbackgroundNode.active) {
          this.modalbackgroundNode.active = false;
          this.invalidateAnyLayerPopup();
        }
      };
      LayerManager.prototype.updateModalBackground = function() {
        var parent = this.layerMap.get(LayerType.layer_modal);
        var _a = this.tryGetModalPanel(), lastChild = _a.lastChild, modalPanel = _a.modalPanel;
        if (null == lastChild) {
          this.removeModalBackground();
          return;
        }
        var modalBackgroundDirty;
        var modalAlpha;
        var modalColor;
        if (modalPanel) {
          modalAlpha = void 0 !== modalPanel.modalAlpha ? modalPanel.modalAlpha : LayerManager.DEFAULT_MODAL_BACKGROUND_ALPHA;
          modalColor = void 0 !== modalPanel.modalColor ? modalPanel.modalColor : LayerManager.DEFAULT_MODAL_BACKGROUND_COLOR;
        } else {
          modalAlpha = LayerManager.DEFAULT_MODAL_BACKGROUND_ALPHA;
          modalColor = LayerManager.DEFAULT_MODAL_BACKGROUND_COLOR;
        }
        if (modalPanel && modalPanel.modalBgExclusive) {
          var exclusiveModalBg = null;
          if (this.exclusiveModalBgMap.has(lastChild.uuid)) {
            exclusiveModalBg = this.exclusiveModalBgMap.get(lastChild.uuid);
            exclusiveModalBg.active || (exclusiveModalBg.active = true);
          } else {
            exclusiveModalBg = this.createModalBackground(modalColor, modalAlpha);
            exclusiveModalBg.name = this.MODAL_BG_EXCLUSIVE_NODE_NAME;
            this.exclusiveModalBgMap.set(lastChild.uuid, exclusiveModalBg);
          }
          exclusiveModalBg.opacity = 0;
          cc.tween(exclusiveModalBg).to(.35, {
            opacity: modalAlpha
          }).start();
          var nodeStateListener = lastChild.getComponent(NodeStateListener_1.NodeStateListener);
          null == nodeStateListener && (nodeStateListener = lastChild.addComponent(NodeStateListener_1.NodeStateListener));
          nodeStateListener.onDisableCallback.once(this.onExclusiveModalPanelDisable.bind(this));
          lastChild.getSiblingIndex() != parent.childrenCount - 1 && lastChild.setSiblingIndex(parent.childrenCount - 1);
          exclusiveModalBg.getSiblingIndex() != parent.childrenCount - 2 && exclusiveModalBg.setSiblingIndex(parent.childrenCount - 2);
          return;
        }
        modalBackgroundDirty = modalAlpha != this.modalLayerBackgroundAlphaValue || modalColor != this.modalLayerBackgroundColorValue;
        if (modalBackgroundDirty) {
          this.modalLayerBackgroundAlphaValue = modalAlpha;
          this.modalLayerBackgroundColorValue = modalColor;
        }
        var fadeAlpha = true;
        if (null == this.modalbackgroundNode) this.modalbackgroundNode = this.createModalBackground(modalColor, modalAlpha); else {
          if (this.modalbackgroundNode.active) this.modalbackgroundFading || (fadeAlpha = false); else {
            this.modalbackgroundNode.active = true;
            this.invalidateAnyLayerPopup();
          }
          if (modalBackgroundDirty) {
            this.modalbackgroundNode.color = this.createColor(this.modalLayerBackgroundColorValue);
            this.modalbackgroundNode.opacity = this.modalLayerBackgroundAlphaValue;
          }
        }
        var btn = this.modalbackgroundNode.getComponent(cc.Button);
        btn && (btn.interactable = null != modalPanel);
        this.animationEnable && fadeAlpha ? this.fadeModalBackgroundAlpha(void 0, modalAlpha, void 0, false) : this.modalbackgroundFading && (this.modalBackgroundNodeAlpha = modalAlpha);
        lastChild.getSiblingIndex() != parent.childrenCount - 1 && lastChild.setSiblingIndex(parent.childrenCount - 1);
        this.modalbackgroundNode.getSiblingIndex() != parent.childrenCount - 2 && this.modalbackgroundNode.setSiblingIndex(parent.childrenCount - 2);
      };
      LayerManager.prototype.onExclusiveModalPanelDisable = function(node) {
        var _this = this;
        var exclusiveModalBg = null;
        if (this.exclusiveModalBgMap.has(node.uuid)) {
          exclusiveModalBg = this.exclusiveModalBgMap.get(node.uuid);
          this.exclusiveModalBgMap.delete(node.uuid);
          if (this.animationEnable) {
            var tween = cc.tween(exclusiveModalBg).to(.35, {
              opacity: 0
            });
            tween.call(function() {
              exclusiveModalBg.destroy();
              _this.invalidateAnyLayerPopup();
            }, this);
            tween.start();
          } else exclusiveModalBg.destroy();
        }
      };
      LayerManager.prototype.addChildWithUIDefine = function(uiDefine, layer, openEffect, closeEffect) {
        void 0 === layer && (layer = LayerType.layer_window);
        void 0 === openEffect && (openEffect = PanelEffectType.none);
        void 0 === closeEffect && (closeEffect = PanelEffectType.none);
        var option = new UIOption(uiDefine, null, UICacheType.temp, openEffect, closeEffect);
        this.addChildWithPrefab(option, null, layer);
      };
      LayerManager.prototype.addChildWithPrefabReject = function(option, closeUIWhenAdded, layer) {
        void 0 === layer && (layer = LayerType.layer_window);
        var existUINodes = this.getChildrenByLayer(layer);
        var existUIDefines = [];
        if (existUINodes.length > 0) {
          var _loop_1 = function(i) {
            var uiDefine;
            var exist = false;
            this_1.panelMap.forEach(function(value, key, map) {
              if (value.node && value.node.active && value.node == existUINodes[i]) {
                exist = true;
                uiDefine = value.uiDefine;
              }
            });
            exist && existUIDefines.push(uiDefine);
          };
          var this_1 = this;
          for (var i = 0; i < existUINodes.length; i++) _loop_1(i);
        }
        if (closeUIWhenAdded && closeUIWhenAdded.length > 0) if (existUIDefines.length > 0) for (var i = 0; i < closeUIWhenAdded.length; i++) -1 == existUIDefines.indexOf(closeUIWhenAdded[i]) && existUIDefines.push(closeUIWhenAdded[i]); else existUIDefines = closeUIWhenAdded;
        PanelEffectUtil_1.PanelEffectUtil.Instance.removeOpenHandlerByLayer(layer);
        this.addChildWithPrefab(option, existUIDefines, layer);
      };
      LayerManager.prototype.addChildWithPrefab = function(option, closeUIWhenAdded, layer) {
        void 0 === layer && (layer = LayerType.layer_window);
        var isQueuePanel = null != option.queueOption;
        if (isQueuePanel) {
          null != this.currentQueuePanel && this.currentQueuePanel.uiDefine == option.uiDefine || this.pushQueuePanel(option, closeUIWhenAdded, layer);
          this.updateQueuePanel(0);
          return;
        }
        null == this.currentQueuePanel && this.queueOptions.length > 0 && this.delayToCheckQueuePanel(100);
        this.handleAddChildWithPrefab(option, closeUIWhenAdded, layer, isQueuePanel);
      };
      LayerManager.prototype.handleAddChildWithPrefab = function(option, closeUIWhenAdded, layer, isQueuePanel) {
        var cacher = null;
        var prefabName = this.getUIName(option.uiDefine);
        true;
        if (!prefabName) throw new Error("UIName not found:" + UIDefine_1.UIDefine[option.uiDefine]);
        var defaultSingleCache = true;
        if (option instanceof UIOptionMultiInstance) {
          var isUIPopup = this.isPopup(option.uiDefine, true);
          if (isUIPopup) {
            defaultSingleCache = false;
            option.cacheType = UICacheType.never;
            option.preloads = null;
            cacher = new UICacher(option);
            this.panelMultiInstances.push(cacher);
          }
        }
        if (defaultSingleCache) if (this.panelMap.has(prefabName)) {
          cacher = this.panelMap.get(prefabName);
          if (option != cacher.option) {
            cacher.isLoaded && null != option.preloads && (cacher.isLoaded = false);
            cacher.option = option;
          }
        } else {
          cacher = new UICacher(option);
          this.panelMap.set(prefabName, cacher);
        }
        cacher.closeUIWhenAdded = closeUIWhenAdded;
        cacher.layer = layer;
        cacher.closeTime = 0;
        cacher.cancelCreateAfterPreloaded && (cacher.cancelCreateAfterPreloaded = false);
        isQueuePanel && (this.currentQueuePanel = cacher);
        var preloadComplete = cacher.isLoaded;
        preloadComplete || (this.checkUIIsLoaded(option) ? preloadComplete = true : this.loadUIRes(cacher));
        preloadComplete && this.doOpenPanel(cacher);
      };
      LayerManager.prototype.checkUIIsLoaded = function(option) {
        var prefab = this.getUIPrefab(option.uiDefine);
        if (!prefab) return false;
        if (option.preloads) {
          var loaded = ResLoadManager_1.ResLoadManager.Instance.checkGroupIsLoaded(option.preloads);
          if (!loaded) return false;
        }
        return true;
      };
      LayerManager.prototype.loadUIRes = function(cacher) {
        var _this = this;
        var option = cacher.option;
        var groupName = this.getUIName(option.uiDefine);
        var loadingGroup = ResLoadManager_1.ResLoadManager.Instance.getGroupLoader(groupName);
        if (loadingGroup) {
          loadingGroup.onCompleted.on(this.onPreloadComplete.bind(this));
          return;
        }
        var prefab = this.getUIPrefab(option.uiDefine);
        var groups = [];
        null == prefab && groups.push(this.wrapUIPrefabResGroup(option.uiDefine));
        option.preloads && groups.push.apply(groups, option.preloads);
        cacher.gettime = cc.sys.now();
        ResLoadManager_1.ResLoadManager.Instance.loadGroup(groupName, groups, this.onPreloadProgress.bind(this), this.onPreloadComplete.bind(this));
        if (option.loadingProxy) if (0 === option.loadingProxy.showDelay) {
          option.loadingProxy.showLoading(groupName);
          this.loadingShowingMap.set(groupName, cacher);
        } else {
          var delay = LayerManager.DELAY_SHOW_RESOURCE_LOADING_TIME;
          void 0 !== option.loadingProxy.showDelay && (delay = option.loadingProxy.showDelay);
          this.loadingShowDelayingMap.set(groupName, cacher);
          TimerManager_1.TimerManager.Instance.addCountdown(delay, this, function() {
            _this.showLoading(groupName);
          });
        }
      };
      LayerManager.prototype.onPreloadProgress = function(groupName, finish, total) {
        var cacher = null;
        if (this.loadingShowingMap.has(groupName) && this.panelMap.has(groupName)) {
          cacher = this.panelMap.get(groupName);
          cacher.option.loadingProxy && cacher.option.loadingProxy.updateLoading(groupName, finish, total);
        }
      };
      LayerManager.prototype.onPreloadComplete = function(groupName) {
        var _this = this;
        var cacher = null;
        this.loadingShowDelayingMap.has(groupName) && this.loadingShowDelayingMap.delete(groupName);
        if (this.panelMap.has(groupName)) {
          cacher = this.panelMap.get(groupName);
          cacher.isLoaded = true;
          var ignoreOpen = cacher.cancelCreateAfterPreloaded || cacher.node && cacher.node.active;
          if (ignoreOpen && cacher.option instanceof UIOptionMultiInstance) {
            var multiCacher = this.getWaitingOpenInstanceByUIName(groupName);
            if (multiCacher) {
              multiCacher.isLoaded = true;
              this.doOpenPanel(multiCacher);
            }
            return;
          }
          if (cacher.option.loadingProxy) {
            var proxy = cacher.option.loadingProxy;
            var hideDelay = LayerManager.DELAY_CLOSE_RESOURCE_LOADING_TIME;
            0 === proxy.hideDelay || ignoreOpen ? hideDelay = 0 : proxy.hideDelay > 0 && (hideDelay = proxy.hideDelay);
            if (hideDelay > 0 && cc.sys.now() - cacher.gettime >= LayerManager.DELAY_SHOW_RESOURCE_LOADING_TIME) {
              this.loadingShowingMap.has(groupName) ? TimerManager_1.TimerManager.Instance.addCountdown(hideDelay, this, function() {
                _this.hideLoading(groupName, true);
              }) : this.doOpenPanel(cacher);
              return;
            }
            this.hideLoading(groupName);
          }
          if (ignoreOpen) return;
          this.doOpenPanel(cacher);
        }
      };
      LayerManager.prototype.getWaitingOpenInstanceByUIName = function(uiName) {
        for (var i = 0; i < this.panelMultiInstances.length; i++) {
          var cacher = this.panelMultiInstances[i];
          if (cacher.uiName == uiName) {
            if (cacher.cancelCreateAfterPreloaded) continue;
            if (cacher.node && cacher.node.active) continue;
            return cacher;
          }
        }
        return null;
      };
      LayerManager.prototype.removeLoadingMap = function(uiDefine) {
        var groupName = this.getUIName(uiDefine);
        this.loadingShowDelayingMap.has(groupName) && this.loadingShowDelayingMap.delete(groupName);
        this.loadingShowingMap.has(groupName) && this.loadingShowingMap.delete(groupName);
      };
      LayerManager.prototype.showLoading = function(groupName) {
        var cacher = this.loadingShowDelayingMap.get(groupName);
        if (null == cacher) return;
        this.loadingShowDelayingMap.delete(groupName);
        if (cacher.option.loadingProxy) {
          cacher.option.loadingProxy.showLoading(groupName);
          this.loadingShowingMap.set(groupName, cacher);
        }
      };
      LayerManager.prototype.hideLoading = function(groupName, openUI) {
        var cacher = this.loadingShowingMap.get(groupName);
        if (null == cacher) return;
        this.loadingShowingMap.delete(groupName);
        cacher.option.loadingProxy && cacher.option.loadingProxy.hideLoading(groupName);
        openUI && this.doOpenPanel(cacher);
      };
      LayerManager.prototype.doOpenPanel = function(cacher) {
        var ignoreOpen = cacher.cancelCreateAfterPreloaded || cacher.node && cacher.node.active;
        if (ignoreOpen) return;
        var prefab = this.getUIPrefab(cacher.option.uiDefine);
        if (null == prefab) {
          cacher.isLoaded = false;
          TipView_1.default.open("\u8d44\u6e90\u52a0\u8f7d\u5931\u8d25");
          return;
        }
        this.animationEnable && cacher.openEffect != PanelEffectType.none ? PanelEffectUtil_1.PanelEffectUtil.Instance.handlePanelOpenEffect(cacher, this.panelOpenExcute.bind(this)) : this.panelOpenExcute(cacher);
      };
      LayerManager.prototype.panelOpenExcute = function(cacher) {
        cacher.closeUIWhenAdded && this.removeChildrenWithPrefab(cacher.closeUIWhenAdded);
        cacher.node ? this.setPrefabActive(cacher) : this.createPrefab(cacher);
        if (cacher.node) {
          var panel = this.getIPanelComponent(cacher.node);
          panel && panel.onDisplay();
          this.currentQueuePanel == cacher && this.addQueuePanelDisableListener(cacher.node);
        }
        if (cacher.option instanceof UIOptionWithParam) {
          var optionWithParam = cacher.option;
          var parmPanel = this.getIParamPanel(cacher.node);
          if (!parmPanel) {
            true;
            throw new Error("Not implements IParamPanel:" + cacher.node.name);
          }
          parmPanel.updateParam(optionWithParam.param);
        }
        cacher.layer == LayerType.layer_modal && this.updateModalBackground();
        this.invalidateAnyLayerPopup();
      };
      LayerManager.prototype.panelCloseExcute = function(cacher) {
        if (null == cacher || null == cacher.node) return;
        if (cacher.cacheType == UICacheType.never || cacher.cacheType == UICacheType.destroy) {
          cacher.layer == LayerType.layer_modal && (cacher.node.active = false);
          cacher.node.destroy();
          cacher.closeTime = 0;
          cacher.node = null;
          if (cacher.cacheType == UICacheType.destroy) {
            var prefab = this.getUIPrefab(cacher.option.uiDefine);
            prefab && cc.assetManager.releaseAsset(prefab);
            cacher.isLoaded = false;
          }
        } else if (cacher.node.active) {
          cacher.closeTime = cc.sys.now();
          cacher.node.active = false;
        }
        cacher.layer == LayerType.layer_modal && this.updateModalBackground();
        this.invalidateAnyLayerPopup();
      };
      LayerManager.prototype.getIPanelComponent = function(node) {
        var allComponents = node["_components"];
        for (var i = 0; i < allComponents.length; i++) {
          var c = allComponents[i];
          if (c.onDisplay instanceof Function) return c;
        }
        return null;
      };
      LayerManager.prototype.removeChildWithNode = function(node, ignoreCloseEffect) {
        var className = node.name;
        var uiDefine = UIDefine_1.UIDefine[className];
        if (void 0 === uiDefine) return;
        this.removeChildWithPrefab(uiDefine, ignoreCloseEffect);
      };
      LayerManager.prototype.removeChildWithPrefab = function(uiDefine, ignoreCloseEffect) {
        var prefabName = this.getUIName(uiDefine);
        var option = this.panelMap.get(prefabName);
        if (null == option) return;
        this.removeLoadingMap(uiDefine);
        if (null == option.node) {
          option.cancelCreateAfterPreloaded = true;
          return;
        }
        if (PanelEffectUtil_1.PanelEffectUtil.Instance.isEffectPanelClosing(uiDefine)) return;
        this.animationEnable && option.closeEffect != PanelEffectType.none && !ignoreCloseEffect && option.node.active ? PanelEffectUtil_1.PanelEffectUtil.Instance.handlePanelCloseEffect(option, this.panelCloseExcute.bind(this)) : this.panelCloseExcute(option);
      };
      LayerManager.prototype.removeChildWithPrefabNode = function(uiDefine, node, ignoreCloseEffect) {
        var prefabName = this.getUIName(uiDefine);
        var option = this.panelMap.get(prefabName);
        if (null == option) return;
        option.option.queueOption && this.removeQueuePanel(uiDefine);
        if (option.node != node) {
          var multiInstance = null;
          for (var i = 0; i < this.panelMultiInstances.length; i++) if (this.panelMultiInstances[i].node == node) {
            multiInstance = this.panelMultiInstances[i];
            this.panelMultiInstances.splice(i, 1);
            break;
          }
          if (!multiInstance) return;
          option = multiInstance;
        }
        this.animationEnable && option.closeEffect != PanelEffectType.none && !ignoreCloseEffect ? PanelEffectUtil_1.PanelEffectUtil.Instance.handlePanelCloseEffect(option, this.panelCloseExcute.bind(this)) : this.panelCloseExcute(option);
      };
      LayerManager.prototype.removeChildrenWithPrefab = function(prefabs, ignoreCloseEffect) {
        var _this = this;
        prefabs.forEach(function(value, index, array) {
          _this.removeChildWithPrefab(value, ignoreCloseEffect);
        });
      };
      LayerManager.prototype.destroyChildWithPrefab = function(uiDefine, ignoreCloseEffect) {
        var prefabName = this.getUIName(uiDefine);
        var option = this.panelMap.get(prefabName);
        if (null == option) return;
        option.option.cacheType != UICacheType.temp && option.option.cacheType != UICacheType.forever || (option.option.cacheType = UICacheType.never);
        this.removeChildWithPrefab(uiDefine, ignoreCloseEffect);
      };
      LayerManager.prototype.addChild = function(node, layer) {
        var parent = this.layerMap.get(layer);
        node.parent != parent && node.setParent(parent);
        node.active || (node.active = true);
        layer == LayerType.layer_modal && this.updateModalBackground();
        this.invalidateAnyLayerPopup();
      };
      LayerManager.prototype.removeChild = function(node, destroy) {
        void 0 === destroy && (destroy = true);
        var isModalLayer = node.parent == this.layerMap.get(LayerType.layer_modal);
        if (destroy) {
          isModalLayer && (node.active = false);
          node.destroy();
        } else node.active && (node.active = false);
        isModalLayer && this.updateModalBackground();
        this.invalidateAnyLayerPopup();
      };
      LayerManager.prototype.getChildByUIDefine = function(uiDefine) {
        var prefabName = this.getUIName(uiDefine);
        var option = this.panelMap.get(prefabName);
        if (null == option) return null;
        return option.node;
      };
      LayerManager.prototype.setPrefabActive = function(option) {
        option.node.active || (option.node.active = true);
        var parent = this.layerMap.get(option.layer);
        var node = option.node;
        node.parent != parent && node.setParent(parent);
        node.getSiblingIndex() != node.parent.childrenCount - 1 && node.setSiblingIndex(node.parent.childrenCount - 1);
        var widget = option.node.getComponent(cc.Widget);
        if (widget && widget.enabled) {
          widget.updateAlignment();
          option.initPosition = node.position;
        }
      };
      LayerManager.prototype.createPrefab = function(option) {
        var prefab = this.getUIPrefab(option.option.uiDefine);
        if (null == prefab) {
          true;
          throw new Error("prefab asset not exist:" + UIDefine_1.UIDefine[option.option.uiDefine]);
        }
        var parent = this.layerMap.get(option.layer);
        option.node = cc.instantiate(prefab);
        option.node.setParent(parent);
        var widget = option.node.getComponent(cc.Widget);
        var horizontalConstraint;
        var verticalConstraint;
        if (widget && widget.enabled) {
          widget.updateAlignment();
          horizontalConstraint = widget.isAlignLeft || widget.isAlignRight || widget.isAlignHorizontalCenter;
          verticalConstraint = widget.isAlignTop || widget.isAlignBottom || widget.isAlignVerticalCenter;
        }
        var position = option.node.position;
        if (!horizontalConstraint) {
          position.x -= this.designResolution.width / 2;
          position.x += (parent.width - this.designResolution.width) / 2;
        }
        if (!verticalConstraint) {
          position.y -= this.designResolution.height / 2;
          position.y += (parent.height - this.designResolution.height) / 2;
        }
        option.initPosition = position;
        if (false !== option.option.autoBlockInputEvents) {
          var block = option.node.getComponent(cc.BlockInputEvents);
          null == block && (block = option.node.addComponent(cc.BlockInputEvents));
        }
      };
      LayerManager.prototype.isPopup = function(uiDefine, includeWaiting) {
        void 0 === includeWaiting && (includeWaiting = false);
        var prefabName = this.getUIName(uiDefine);
        true;
        if (!prefabName) throw new Error("UIName not found:" + UIDefine_1.UIDefine[uiDefine]);
        var option = this.panelMap.get(prefabName);
        if (!option) return false;
        if (option.node && option.node.active) return true;
        if (ResLoadManager_1.ResLoadManager.Instance.isGroupLoading(prefabName)) return true;
        if (includeWaiting) {
          var effectDoing = PanelEffectUtil_1.PanelEffectUtil.Instance.isEffectPanelProcessing(uiDefine, true);
          if (effectDoing) return true;
          if (this.checkPanelIsInQueue(uiDefine)) return true;
        }
        return false;
      };
      LayerManager.prototype.removeAll = function(excepts) {
        var _this = this;
        this.panelMap.forEach(function(value, key, map) {
          if (excepts && excepts.includes(value.option.uiDefine)) return;
          _this.removeChildWithPrefab(value.option.uiDefine, true);
        });
        this.interactable = true;
      };
      LayerManager.prototype.getChildComponentByPrefab = function(uiDefine, type) {
        var node = this.getChildByUIDefine(uiDefine);
        if (node) return node.getComponent(type);
        return null;
      };
      LayerManager.prototype.getChildrenByLayer = function(layer, includeDisactive) {
        var layerNode = this.layerMap.get(layer);
        var numchildren = layerNode.childrenCount;
        if (0 == numchildren) return [];
        var childs = [];
        for (var i = numchildren - 1; i >= 0; i--) {
          if (!includeDisactive && !layerNode.children[i].active) continue;
          childs.push(layerNode.children[i]);
        }
        if (layer == LayerType.layer_modal) {
          var index = childs.indexOf(this.modalbackgroundNode);
          index > -1 && childs.splice(index, 1);
        }
        return childs;
      };
      Object.defineProperty(LayerManager.prototype, "interactable", {
        get: function() {
          return this._interactable;
        },
        set: function(value) {
          if (this._interactable == value) return;
          this._interactable = value;
          var topLayer = this.layerMap.get(LayerType.layer_tip);
          var block = topLayer.getComponent(cc.BlockInputEvents);
          null == block && (block = topLayer.addComponent(cc.BlockInputEvents));
          block.enabled = !value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(LayerManager.prototype, "anyLayerPopup", {
        get: function() {
          if (cc.sys.now() - this.latestLayerPopupCheckTime < .5) return true;
          return this._anyLayerPopup;
        },
        enumerable: false,
        configurable: true
      });
      LayerManager.prototype.checkAnyLayerExistActivePanel = function() {
        for (var i = 0; i < this.popupCheckLayers.length; i++) {
          var exist = this.checkLayerExistActivePanel(this.popupCheckLayers[i]);
          if (exist) return true;
        }
        return false;
      };
      LayerManager.prototype.checkLayerExistActivePanel = function(layer) {
        var layerNode = this.layerMap.get(layer);
        if (0 == layerNode.childrenCount) return false;
        for (var i = 0; i < layerNode.childrenCount; i++) if (layerNode.children[i].active) return true;
        return false;
      };
      LayerManager.prototype.invalidateAnyLayerPopup = function() {
        TimerManager_1.TimerManager.Instance.addDelayCall(this.validateAnyLayerPopup, this);
      };
      LayerManager.prototype.validateAnyLayerPopup = function() {
        this._anyLayerPopup = this.checkAnyLayerExistActivePanel();
        this._anyLayerPopup && (this.latestLayerPopupCheckTime = cc.sys.now());
      };
      LayerManager.prototype.registUIMap = function(origin, target) {
        this.uiMap.set(origin, target);
      };
      LayerManager.prototype.getUIName = function(uiDefine) {
        var defineName = UIDefine_1.UIDefine[uiDefine];
        if (this.uiMap.has(uiDefine)) {
          var mapDefineName = this.uiMap.get(uiDefine);
          defineName = UIDefine_1.UIDefine[mapDefineName];
        }
        var name = UIName_1.UIName[defineName];
        return name;
      };
      LayerManager.prototype.getUIBundleName = function(uiDefine) {
        var name = this.getUIName(uiDefine);
        if (name) return name.slice(0, name.indexOf("/"));
        return "resources";
      };
      LayerManager.prototype.getUIUrl = function(uiDefine) {
        var name = this.getUIName(uiDefine);
        if (name) {
          var index = name.indexOf("/");
          var bundle = name.slice(0, index);
          var url = name.slice(index + 1);
          return {
            bundle: bundle,
            url: url
          };
        }
        console.error("UIName \u627e\u4e0d\u5230\u5bf9\u5e94\u7684\u754c\u9762\uff1a" + UIDefine_1.UIDefine[uiDefine]);
        return null;
      };
      LayerManager.prototype.getUIPrefab = function(uiDefine) {
        var uiUrl = this.getUIUrl(uiDefine);
        var bundle = cc.assetManager.getBundle(uiUrl.bundle);
        if (bundle) return bundle.get(uiUrl.url, cc.Prefab);
        return null;
      };
      LayerManager.prototype.wrapUIPrefabResGroup = function(uiDefine) {
        var uiUrl = this.getUIUrl(uiDefine);
        var prefabGroup = new ResLoadManager_1.ResGroup();
        prefabGroup.bundleName = uiUrl.bundle;
        prefabGroup.prefabs = [ uiUrl.url ];
        return prefabGroup;
      };
      LayerManager.prototype.delayToCheckQueuePanel = function(delay) {
        0 == this.delayToCheckQueuePanelTimerId && (this.delayToCheckQueuePanelTimerId = TimerManager_1.TimerManager.Instance.addCountdown(delay, this, this.delayToCheckQueuePanelComplete));
      };
      LayerManager.prototype.delayToCheckQueuePanelComplete = function() {
        this.delayToCheckQueuePanelTimerId = 0;
        this.updateQueuePanel();
      };
      LayerManager.prototype.updateQueuePanel = function(delay) {
        if (delay > 0) {
          this.delayToCheckQueuePanel(delay);
          return;
        }
        if (this.delayToCheckQueuePanelTimerId > 0) return;
        var count = this.queueOptions.length;
        if (0 == count) return;
        if (this.hasQueueRejectPanelDisplaying()) return;
        count > 1 && this.queueOptions.sort(this.sortQueueFunc);
        var tryOpenOption;
        for (var i = count - 1; i >= 0; i--) {
          var queuePanel = this.queueOptions[i];
          var queue = queuePanel.option.queueOption;
          if (void 0 === queue.openEnable || queue.openEnable()) {
            tryOpenOption = this.queueOptions[i];
            break;
          }
        }
        this.currentQueuePanel && tryOpenOption && (tryOpenOption.closeClassesWhenAdded && tryOpenOption.closeClassesWhenAdded.length > 0 ? -1 == tryOpenOption.closeClassesWhenAdded.indexOf(this.currentQueuePanel.uiDefine) && (tryOpenOption = null) : tryOpenOption = null);
        if (tryOpenOption) {
          var index = this.queueOptions.indexOf(tryOpenOption);
          this.queueOptions.splice(index, 1);
          this.handleAddChildWithPrefab(tryOpenOption.option, tryOpenOption.closeClassesWhenAdded, tryOpenOption.layer, true);
        }
      };
      LayerManager.prototype.hasQueueRejectPanelDisplaying = function() {
        return false;
      };
      LayerManager.prototype.pushQueuePanel = function(option, closeClassesWhenAdded, layer) {
        var count = this.queueOptions.length;
        if (count > 0) for (var i = 0; i < count; i++) if (this.queueOptions[i].option.uiDefine == option.uiDefine) {
          this.queueOptions[i].closeClassesWhenAdded = closeClassesWhenAdded;
          this.queueOptions[i].layer = layer;
          this.queueOptions[i].option = option;
          return;
        }
        var queueOption = new QueueOption();
        queueOption.option = option;
        queueOption.gettime = cc.sys.now();
        queueOption.layer = layer;
        queueOption.closeClassesWhenAdded = closeClassesWhenAdded;
        this.queueOptions.push(queueOption);
      };
      LayerManager.prototype.checkPanelIsInQueue = function(uiDefine) {
        if (this.currentQueuePanel && this.currentQueuePanel.uiDefine == uiDefine) return true;
        var count = this.queueOptions.length;
        for (var i = 0; i < count; i++) if (this.queueOptions[i].option.uiDefine == uiDefine) return true;
        return false;
      };
      LayerManager.prototype.removeQueuePanel = function(uiDefine) {
        if (this.currentQueuePanel && this.currentQueuePanel.option.uiDefine == uiDefine) {
          this.currentQueuePanel.node && this.removeQueuePanelDisableListener(this.currentQueuePanel.node);
          this.currentQueuePanel = null;
        } else {
          var count = this.queueOptions.length;
          for (var i = 0; i < count; i++) if (this.queueOptions[i].option.uiDefine == uiDefine) {
            this.queueOptions.splice(i, 1);
            break;
          }
        }
        null == this.currentQueuePanel && this.queueOptions.length > 0 && this.delayToCheckQueuePanel(this.QUEUE_PANEL_SHOW_DELAY);
      };
      LayerManager.prototype.addQueuePanelDisableListener = function(node) {
        var listener = node.getComponent(NodeStateListener_1.NodeStateListener);
        null == listener && (listener = node.addComponent(NodeStateListener_1.NodeStateListener));
        listener.onDisableCallback.once(this.onQueuePanelRemoved, this);
      };
      LayerManager.prototype.removeQueuePanelDisableListener = function(node) {
        var listener = node.getComponent(NodeStateListener_1.NodeStateListener);
        listener && listener.onDisableCallback.off(this.onQueuePanelRemoved, this);
      };
      LayerManager.prototype.onQueuePanelRemoved = function(node) {
        this.currentQueuePanel && this.currentQueuePanel.node == node && (this.currentQueuePanel = null);
        null == this.currentQueuePanel && this.queueOptions.length > 0 && this.delayToCheckQueuePanel(this.QUEUE_PANEL_SHOW_DELAY);
      };
      LayerManager.prototype.sortQueueFunc = function(a, b) {
        if (a.option.queueOption.queueIndex > b.option.queueOption.queueIndex) return 1;
        if (a.option.queueOption.queueIndex < b.option.queueOption.queueIndex) return -1;
        if (a.gettime > b.gettime) return -1;
        if (a.gettime < b.gettime) return 1;
        return 0;
      };
      LayerManager.prototype.removeAllQueuePanelByLayer = function(layer) {
        if (this.queueOptions.length > 0) for (var i = 0; i < this.queueOptions.length; i++) {
          var queueOption = this.queueOptions[i];
          if (queueOption.layer == layer) {
            this.queueOptions.splice(i, 1);
            i--;
          }
        }
      };
      LayerManager.prototype.toString = function() {
        var _this = this;
        var str = "";
        this.layerMap.forEach(function(value) {
          var numChildren = value.childrenCount;
          str += value.name + "\n";
          for (var i = 0; i < numChildren; i++) {
            var child = value.children[i];
            child == _this.modalbackgroundNode ? str += "\t" + child.name + StringUtil_1.default.replaceString("(active:{0},alpha:{1})", child.active, child.opacity) + "\n" : child.active ? str += "\t" + child.name + "\n" : str += "\t" + child.name + StringUtil_1.default.replaceString("(active:{0})", child.active) + "\n";
          }
        });
        return str;
      };
      LayerManager.prototype.logLayerInfo = function() {
        var _this = this;
        var css = "color:#999999;";
        this.layerMap.forEach(function(value) {
          var numChildren = value.childrenCount;
          console.log(value.name + value.getContentSize());
          for (var i = 0; i < numChildren; i++) {
            var child = value.children[i];
            if (child == _this.modalbackgroundNode) {
              var str = "\t" + child.name + StringUtil_1.default.replaceString("(alpha:{0})", child.opacity);
              child.active ? console.log(str) : console.log("%c" + str, css);
            } else child.active ? console.log("\t" + child.name) : console.log("%c\t" + child.name, css);
          }
        });
      };
      LayerManager.DEFAULT_MODAL_BACKGROUND_COLOR = 0;
      LayerManager.DEFAULT_MODAL_BACKGROUND_ALPHA = 160;
      LayerManager.MODAL_BACKGROUND_FADE_DURATION = .15;
      LayerManager.instance = new LayerManager();
      LayerManager.DELAY_SHOW_RESOURCE_LOADING_TIME = 300;
      LayerManager.DELAY_CLOSE_RESOURCE_LOADING_TIME = 500;
      return LayerManager;
    }();
    exports.LayerManager = LayerManager;
    var UIOption = function() {
      function UIOption(prefab, preloads, cacheType, openEffect, closeEffect) {
        void 0 === preloads && (preloads = null);
        void 0 === cacheType && (cacheType = UICacheType.temp);
        void 0 === openEffect && (openEffect = PanelEffectType.none);
        void 0 === closeEffect && (closeEffect = PanelEffectType.none);
        this.loadingProxy = GameLoadingProxy_1.default.getInstance();
        this.uiDefine = prefab;
        this.preloads = preloads;
        this.cacheType = cacheType;
        this.openEffect = openEffect;
        this.closeEffect = closeEffect;
      }
      return UIOption;
    }();
    exports.UIOption = UIOption;
    var QueueOption = function() {
      function QueueOption() {}
      return QueueOption;
    }();
    var UIOptionWithParam = function(_super) {
      __extends(UIOptionWithParam, _super);
      function UIOptionWithParam() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      return UIOptionWithParam;
    }(UIOption);
    exports.UIOptionWithParam = UIOptionWithParam;
    var UIOptionMultiInstance = function(_super) {
      __extends(UIOptionMultiInstance, _super);
      function UIOptionMultiInstance() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      return UIOptionMultiInstance;
    }(UIOptionWithParam);
    exports.UIOptionMultiInstance = UIOptionMultiInstance;
    var UICacheType;
    (function(UICacheType) {
      UICacheType[UICacheType["never"] = 0] = "never";
      UICacheType[UICacheType["destroy"] = 1] = "destroy";
      UICacheType[UICacheType["temp"] = 2] = "temp";
      UICacheType[UICacheType["forever"] = 3] = "forever";
    })(UICacheType = exports.UICacheType || (exports.UICacheType = {}));
    var UICacher = function() {
      function UICacher(option) {
        this.cancelCreateAfterPreloaded = false;
        this.closeTime = 0;
        this.option = option;
        this.uiName = UIName_1.UIName[UIDefine_1.UIDefine[option.uiDefine]];
      }
      Object.defineProperty(UICacher.prototype, "uiDefine", {
        get: function() {
          return this.option.uiDefine;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(UICacher.prototype, "cacheType", {
        get: function() {
          return this.option.cacheType;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(UICacher.prototype, "preloads", {
        get: function() {
          return this.option.preloads;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(UICacher.prototype, "openEffect", {
        get: function() {
          return this.option.openEffect;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(UICacher.prototype, "closeEffect", {
        get: function() {
          return this.option.closeEffect;
        },
        enumerable: false,
        configurable: true
      });
      return UICacher;
    }();
    exports.UICacher = UICacher;
    var PanelEffectType;
    (function(PanelEffectType) {
      PanelEffectType[PanelEffectType["none"] = 0] = "none";
      PanelEffectType[PanelEffectType["empty"] = 1] = "empty";
      PanelEffectType[PanelEffectType["alphaFadeOut"] = 2] = "alphaFadeOut";
      PanelEffectType[PanelEffectType["alphaFadeIn"] = 3] = "alphaFadeIn";
      PanelEffectType[PanelEffectType["scaleUp"] = 4] = "scaleUp";
      PanelEffectType[PanelEffectType["scaleDown"] = 5] = "scaleDown";
      PanelEffectType[PanelEffectType["blackFadeInOut"] = 6] = "blackFadeInOut";
      PanelEffectType[PanelEffectType["movebottom"] = 7] = "movebottom";
      PanelEffectType[PanelEffectType["movetop"] = 8] = "movetop";
      PanelEffectType[PanelEffectType["moveleft"] = 9] = "moveleft";
      PanelEffectType[PanelEffectType["moveright"] = 10] = "moveright";
      PanelEffectType[PanelEffectType["slidetop"] = 11] = "slidetop";
      PanelEffectType[PanelEffectType["slidebottom"] = 12] = "slidebottom";
      PanelEffectType[PanelEffectType["slideleft"] = 13] = "slideleft";
      PanelEffectType[PanelEffectType["slideright"] = 14] = "slideright";
      PanelEffectType[PanelEffectType["custom"] = 15] = "custom";
      PanelEffectType[PanelEffectType["animation"] = 16] = "animation";
    })(PanelEffectType = exports.PanelEffectType || (exports.PanelEffectType = {}));
    cc._RF.pop();
  }, {
    "../GameLoadingProxy": "GameLoadingProxy",
    "../common/core/TimerManager": "TimerManager",
    "../util/NativeUtil": "NativeUtil",
    "../util/StringUtil": "StringUtil",
    "../view/component/TipView": "TipView",
    "./../common/core/NodeStateListener": "NodeStateListener",
    "./../common/init/UIDefine": "UIDefine",
    "./../common/init/UIName": "UIName",
    "./ResLoadManager": "ResLoadManager",
    "./core/PanelEffectUtil": "PanelEffectUtil"
  } ],
  LightFlow: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "05bb86TqHZK5q+NZk+B4uXK", "LightFlow");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TimerManager_1 = require("./../../common/core/TimerManager");
    var BaseComponent_1 = require("../base/BaseComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var LightFlow = function(_super) {
      __extends(LightFlow, _super);
      function LightFlow() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.lightHTop = null;
        _this.lightHBottom = null;
        _this.lightVLeft = null;
        _this.lightVRight = null;
        _this.moveEase = cc.easing.sineInOut;
        _this.delayTimerId = 0;
        return _this;
      }
      LightFlow.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.padding_h = 10;
        this.padding_v = 10;
      };
      LightFlow.prototype.start = function() {};
      LightFlow.prototype.onEnable = function() {
        this.lightHTop.active = false;
        this.lightHBottom.active = false;
        this.lightVLeft.active = false;
        this.lightVRight.active = false;
        this.addDelayTimer();
      };
      LightFlow.prototype.addDelayTimer = function() {
        0 == this.delayTimerId && (this.delayTimerId = TimerManager_1.TimerManager.Instance.addCountdown(1e3, this, this.delayTimerOverHandler));
      };
      LightFlow.prototype.removeDelayTimer = function() {
        if (this.delayTimerId > 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.delayTimerId);
          this.delayTimerId = 0;
        }
      };
      LightFlow.prototype.delayTimerOverHandler = function() {
        this.delayTimerId = 0;
        this.startTween();
      };
      LightFlow.prototype.onDisable = function() {
        this.killAllTween();
        this.removeDelayTimer();
      };
      LightFlow.prototype.killAllTween = function() {
        cc.Tween.stopAllByTarget(this.lightHTop);
        cc.Tween.stopAllByTarget(this.lightHBottom);
        cc.Tween.stopAllByTarget(this.lightVLeft);
        cc.Tween.stopAllByTarget(this.lightVRight);
      };
      Object.defineProperty(LightFlow.prototype, "duration", {
        get: function() {
          return 3;
        },
        enumerable: false,
        configurable: true
      });
      LightFlow.prototype.startTween = function() {
        this.light_size = this.lightHTop.width;
        this.tweenComplete();
      };
      LightFlow.prototype.tweenTopL2R = function() {
        var from = this.padding_h - this.node.width / 2 + this.light_size / 2;
        var to = this.node.width / 2 - this.padding_h - this.light_size / 2;
        this.tweenMoveHorizontal(this.lightHTop, from, to, this.tweenRightT2B);
      };
      LightFlow.prototype.tweenTopR2L = function() {
        var from = this.node.width / 2 - this.padding_h - this.light_size / 2;
        var to = this.padding_h - this.node.width / 2 + this.light_size / 2;
        this.tweenMoveHorizontal(this.lightHTop, from, to, this.tweenComplete);
      };
      LightFlow.prototype.tweenBottomL2R = function() {
        var from = this.padding_h - this.node.width / 2 + this.light_size / 2;
        var to = this.node.width / 2 - this.padding_h - this.light_size / 2;
        this.tweenMoveHorizontal(this.lightHBottom, from, to, this.tweenRightB2T);
      };
      LightFlow.prototype.tweenBottomR2L = function() {
        var from = this.node.width / 2 - this.padding_h - this.light_size / 2;
        var to = this.padding_h - this.node.width / 2 + this.light_size / 2;
        this.tweenMoveHorizontal(this.lightHBottom, from, to, this.tweenLeftB2T);
      };
      LightFlow.prototype.tweenRightT2B = function() {
        var from = this.node.height / 2 - this.padding_v - this.light_size / 2;
        var to = this.padding_v - this.node.height / 2 + this.light_size / 2;
        this.tweenMoveVertical(this.lightVRight, from, to, this.tweenBottomR2L);
      };
      LightFlow.prototype.tweenRightB2T = function() {
        var from = this.padding_v - this.node.height / 2 + this.light_size / 2;
        var to = this.node.height / 2 - this.padding_v - this.light_size / 2;
        this.tweenMoveVertical(this.lightVRight, from, to, this.tweenTopR2L);
      };
      LightFlow.prototype.tweenLeftT2B = function() {
        var from = this.node.height / 2 - this.padding_v - this.light_size / 2;
        var to = this.padding_v - this.node.height / 2 + this.light_size / 2;
        this.tweenMoveVertical(this.lightVLeft, from, to, this.tweenBottomL2R);
      };
      LightFlow.prototype.tweenLeftB2T = function() {
        var from = this.padding_v - this.node.height / 2 + this.light_size / 2;
        var to = this.node.height / 2 - this.padding_v - this.light_size / 2;
        this.tweenMoveVertical(this.lightVLeft, from, to, this.tweenComplete);
      };
      LightFlow.prototype.tweenComplete = function() {
        Math.random() > .5 ? this.tweenTopL2R() : this.tweenLeftT2B();
      };
      LightFlow.prototype.tweenMoveHorizontal = function(target, from, to, next) {
        var duration = this.duration;
        var fadeDuration = duration / 4;
        target.x = from;
        target.active = true;
        target.opacity = 0;
        cc.tween(target).parallel(cc.tween().to(duration, {
          x: to
        }, {
          easing: this.moveEase
        }), cc.tween().to(fadeDuration, {
          opacity: 255
        }).delay(duration - 2 * fadeDuration).to(fadeDuration, {
          opacity: 0
        })).call(next, this).start();
      };
      LightFlow.prototype.tweenMoveVertical = function(target, from, to, next) {
        var duration = this.duration;
        var fadeDuration = duration / 4;
        target.y = from;
        target.active = true;
        target.opacity = 0;
        cc.tween(target).parallel(cc.tween(target).to(duration, {
          y: to
        }, {
          easing: this.moveEase
        }), cc.tween(target).to(fadeDuration, {
          opacity: 255
        }).delay(duration - 2 * fadeDuration).to(fadeDuration, {
          opacity: 0
        })).call(next, this).start();
      };
      __decorate([ property(cc.Node) ], LightFlow.prototype, "lightHTop", void 0);
      __decorate([ property(cc.Node) ], LightFlow.prototype, "lightHBottom", void 0);
      __decorate([ property(cc.Node) ], LightFlow.prototype, "lightVLeft", void 0);
      __decorate([ property(cc.Node) ], LightFlow.prototype, "lightVRight", void 0);
      LightFlow = __decorate([ ccclass ], LightFlow);
      return LightFlow;
    }(BaseComponent_1.default);
    exports.default = LightFlow;
    cc._RF.pop();
  }, {
    "../base/BaseComponent": "BaseComponent",
    "./../../common/core/TimerManager": "TimerManager"
  } ],
  LocalDataJson: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5fd92R7YyhIDqXkpuSdJA6B", "LocalDataJson");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.LocalDataJson = void 0;
    exports.LocalDataJson = {};
    cc._RF.pop();
  }, {} ],
  LocalDataKeyValue: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cd709glsupL8rV14//UKW4E", "LocalDataKeyValue");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.LocalDataKeyValue = void 0;
    var LocalDataUtil_1 = require("./LocalDataUtil");
    var LocalDataKeyValue = function() {
      function LocalDataKeyValue() {}
      LocalDataKeyValue.getLifeNodeQualityAges = function() {
        var setting = LocalDataUtil_1.LocalDataUtil.getKeyValueSettingByProperty("key", "LIFE_NODE_QUALITY_AGES");
        return setting.value;
      };
      return LocalDataKeyValue;
    }();
    exports.LocalDataKeyValue = LocalDataKeyValue;
    cc._RF.pop();
  }, {
    "./LocalDataUtil": "LocalDataUtil"
  } ],
  LocalDataUtil: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0a8d157FihAqI/CqcUHAjGB", "LocalDataUtil");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.LocalDataUtil = void 0;
    var LocalData_1 = require("./LocalData");
    var LocalDataUtil = function() {
      function LocalDataUtil() {}
      LocalDataUtil.init = function(value) {
        LocalDataUtil.localJsonObject = value;
        for (var key in value) if (Object.prototype.hasOwnProperty.call(value, key)) {
          var element = value[key];
          element.properties && element.properties.includes("id") && (LocalDataUtil.useHashCacheClass[key] = "id");
        }
      };
      LocalDataUtil.getLocalDataListByClass = function(clazz, className) {
        var key = className;
        var dataArr = LocalDataUtil.localData[key];
        if (dataArr) return dataArr;
        var jsonObject = LocalDataUtil.localJsonObject ? LocalDataUtil.localJsonObject[key] : null;
        if (null == jsonObject) return [];
        var count = jsonObject.values.length;
        var properties = jsonObject.properties;
        var countProperty = properties.length;
        LocalDataUtil.localData[key] = dataArr = [];
        for (var i = 0; i < count; i++) {
          var obj = new clazz();
          var values = jsonObject.values[i];
          for (var j = 0; j < countProperty; j++) obj[properties[j]] = values[j];
          dataArr.push(obj);
        }
        if (LocalDataUtil.useHashCacheClass[key]) {
          var cacheDict = {};
          var cacheKey = LocalDataUtil.useHashCacheClass[key];
          LocalDataUtil.hashCacheDict[key] = cacheDict;
          for (var i = 0; i < count; i++) {
            var dataValue = dataArr[i];
            var cacheKeyValue = dataValue[cacheKey];
            cacheDict[cacheKeyValue.toString()] = dataValue;
          }
        }
        delete LocalDataUtil.localJsonObject[key];
        return dataArr;
      };
      LocalDataUtil.getLocalDataByProperty = function(propertyName, value, clazz, className) {
        var cache = LocalDataUtil.latestCacheDict[className];
        if (cache && cache[propertyName] == value) return cache;
        var list = LocalDataUtil.getLocalDataListByClass(clazz, className);
        if (LocalDataUtil.useHashCacheClass[className] == propertyName) {
          var cacheDict = LocalDataUtil.hashCacheDict[className];
          return cacheDict[value];
        }
        var count = list.length;
        for (var i = 0; i < count; i++) if (list[i][propertyName] == value) return LocalDataUtil.latestCacheDict[className] = list[i];
        return null;
      };
      LocalDataUtil.getMultiLocalDataByProperty = function(propertyName, value, maxCount, clazz, className) {
        var list = LocalDataUtil.getLocalDataListByClass(clazz, className);
        var count = list.length;
        var arr = [];
        var length = 0;
        (void 0 == maxCount || maxCount < 1) && (maxCount = Number.MAX_VALUE);
        for (var i = 0; i < count; i++) if (list[i][propertyName] == value) {
          arr.push(list[i]);
          length++;
          if (length >= maxCount) break;
        }
        return arr;
      };
      LocalDataUtil.getAllKeyValueSetting = function() {
        return LocalDataUtil.getLocalDataListByClass(LocalData_1.lo.KeyValueSetting, "lo.KeyValueSetting");
      };
      LocalDataUtil.getKeyValueSettingByProperty = function(propertyName, value) {
        return LocalDataUtil.getLocalDataByProperty(propertyName, value, LocalData_1.lo.KeyValueSetting, "lo.KeyValueSetting");
      };
      LocalDataUtil.getMultiKeyValueSettingByProperty = function(propertyName, value, maxCount) {
        return LocalDataUtil.getMultiLocalDataByProperty(propertyName, value, maxCount, LocalData_1.lo.KeyValueSetting, "lo.KeyValueSetting");
      };
      LocalDataUtil.getAllLevelSetting = function() {
        return LocalDataUtil.getLocalDataListByClass(LocalData_1.lo.LevelSetting, "lo.LevelSetting");
      };
      LocalDataUtil.getLevelSettingByProperty = function(propertyName, value) {
        return LocalDataUtil.getLocalDataByProperty(propertyName, value, LocalData_1.lo.LevelSetting, "lo.LevelSetting");
      };
      LocalDataUtil.getMultiLevelSettingByProperty = function(propertyName, value, maxCount) {
        return LocalDataUtil.getMultiLocalDataByProperty(propertyName, value, maxCount, LocalData_1.lo.LevelSetting, "lo.LevelSetting");
      };
      LocalDataUtil.getLevelSettingById = function(value) {
        return LocalDataUtil.getLocalDataByProperty("id", value, LocalData_1.lo.LevelSetting, "lo.LevelSetting");
      };
      LocalDataUtil.localData = {};
      LocalDataUtil.useHashCacheClass = {};
      LocalDataUtil.latestCacheDict = {};
      LocalDataUtil.hashCacheDict = {};
      return LocalDataUtil;
    }();
    exports.LocalDataUtil = LocalDataUtil;
    cc._RF.pop();
  }, {
    "./LocalData": "LocalData"
  } ],
  LocalData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3df75Jjbv9AkqbCLSiA+Kub", "LocalData");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.lo = void 0;
    var lo;
    (function(lo) {
      var LevelSetting = function() {
        function LevelSetting() {}
        return LevelSetting;
      }();
      lo.LevelSetting = LevelSetting;
      var KeyValueSetting = function() {
        function KeyValueSetting() {}
        return KeyValueSetting;
      }();
      lo.KeyValueSetting = KeyValueSetting;
    })(lo = exports.lo || (exports.lo = {}));
    cc._RF.pop();
  }, {} ],
  LocalStorageUtil: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bc5b8jA4ShNErSm0zwgrm0W", "LocalStorageUtil");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.LocalStorageKey = exports.LocalStorageType = exports.LocalStorageUtil = void 0;
    var LoginModel_1 = require("./../model/LoginModel");
    var LocalStorageUtil = function() {
      function LocalStorageUtil() {}
      Object.defineProperty(LocalStorageUtil, "playerId", {
        get: function() {
          return LoginModel_1.LoginModel.Instance.role_id.toString();
        },
        enumerable: false,
        configurable: true
      });
      LocalStorageUtil.getKeyByString = function(key, player) {
        var keyStr = key;
        if (player) {
          var id = LocalStorageUtil.playerId;
          id && (keyStr += "_" + id);
        }
        return keyStr;
      };
      LocalStorageUtil.getKey = function(key) {
        var keyStr = LocalStorageKey[key];
        if (key >= LocalStorageKey.key_with_id_below_seperator) {
          var id = LocalStorageUtil.playerId;
          id && (keyStr += "_" + id);
        }
        return keyStr;
      };
      LocalStorageUtil.getItem = function(key, saveType) {
        var keyStr = LocalStorageUtil.getKey(key);
        var valueStr = "";
        if (saveType == LocalStorageType.login) valueStr = LocalStorageUtil.tempDict[keyStr]; else {
          if (saveType == LocalStorageType.today && !LocalStorageUtil.isTodaySaved(key)) return "";
          valueStr = localStorage.getItem(keyStr);
        }
        return valueStr;
      };
      LocalStorageUtil.setItem = function(key, value, saveType) {
        var keyStr = LocalStorageUtil.getKey(key);
        if (saveType == LocalStorageType.login) LocalStorageUtil.tempDict[keyStr] = value; else {
          saveType == LocalStorageType.today && LocalStorageUtil.setKeySaveTime(key);
          localStorage.setItem(keyStr, value);
        }
      };
      LocalStorageUtil.getItemString = function(key, player) {
        var keyStr = LocalStorageUtil.getKeyByString(key, player);
        return localStorage.getItem(keyStr);
      };
      LocalStorageUtil.setItemString = function(key, value, player) {
        var keyStr = LocalStorageUtil.getKeyByString(key, player);
        localStorage.setItem(keyStr, value);
      };
      LocalStorageUtil.getInt = function(key, defaultValue, saveType) {
        void 0 === defaultValue && (defaultValue = 0);
        var valueStr = LocalStorageUtil.getItem(key, saveType);
        if (valueStr) return parseInt(valueStr);
        return defaultValue;
      };
      LocalStorageUtil.setInt = function(key, value, saveType) {
        LocalStorageUtil.setItem(key, value.toString(), saveType);
      };
      LocalStorageUtil.getFloat = function(key, defaultValue, saveType) {
        void 0 === defaultValue && (defaultValue = 0);
        var valueStr = LocalStorageUtil.getItem(key, saveType);
        if (valueStr) return parseFloat(valueStr);
        return defaultValue;
      };
      LocalStorageUtil.setFloat = function(key, value, saveType) {
        LocalStorageUtil.setItem(key, value.toString(), saveType);
      };
      LocalStorageUtil.getBool = function(key, defaultValue, saveType) {
        void 0 === defaultValue && (defaultValue = false);
        var valueStr = LocalStorageUtil.getItem(key, saveType);
        if (valueStr) return "1" == valueStr;
        return defaultValue;
      };
      LocalStorageUtil.setBool = function(key, value, saveType) {
        LocalStorageUtil.setItem(key, value ? "1" : "0", saveType);
      };
      LocalStorageUtil.getData = function(key, saveType, defaultValue) {
        void 0 === defaultValue && (defaultValue = null);
        var valueStr = LocalStorageUtil.getItem(key, saveType);
        if (valueStr) return JSON.parse(valueStr);
        return defaultValue;
      };
      LocalStorageUtil.setData = function(key, value, saveType) {
        var valueStr = "";
        value && (valueStr = JSON.stringify(value));
        LocalStorageUtil.setItem(key, valueStr, saveType);
      };
      LocalStorageUtil.isTodaySaved = function(key) {
        var timeStr = LocalStorageUtil.getKeySaveTime(key);
        if (null == timeStr || 0 == timeStr.length) return true;
        var timestamp = parseInt(timeStr);
        if (timestamp > 0) {
          var date = new Date(timestamp);
          var today = new Date();
          if (date.getFullYear() != today.getFullYear() || date.getMonth() != today.getMonth() || date.getDate() != today.getDate()) return false;
        }
        return true;
      };
      LocalStorageUtil.getKeySaveTime = function(key) {
        var keyStr = LocalStorageUtil.getKey(key) + LocalStorageUtil.saveTime;
        return LocalStorageUtil.getItemString(keyStr, key >= LocalStorageKey.key_with_id_below_seperator);
      };
      LocalStorageUtil.setKeySaveTime = function(key) {
        var keyStr = LocalStorageUtil.getKey(key) + LocalStorageUtil.saveTime;
        LocalStorageUtil.setItemString(keyStr, cc.sys.now().toString(), key >= LocalStorageKey.key_with_id_below_seperator);
      };
      LocalStorageUtil.tempDict = {};
      LocalStorageUtil.saveTime = "_saveTime_";
      return LocalStorageUtil;
    }();
    exports.LocalStorageUtil = LocalStorageUtil;
    var LocalStorageType;
    (function(LocalStorageType) {
      LocalStorageType[LocalStorageType["default"] = 0] = "default";
      LocalStorageType[LocalStorageType["login"] = 1] = "login";
      LocalStorageType[LocalStorageType["today"] = 2] = "today";
    })(LocalStorageType = exports.LocalStorageType || (exports.LocalStorageType = {}));
    var LocalStorageKey;
    (function(LocalStorageKey) {
      LocalStorageKey[LocalStorageKey["key_acount"] = 0] = "key_acount";
      LocalStorageKey[LocalStorageKey["key_game_bgm"] = 1] = "key_game_bgm";
      LocalStorageKey[LocalStorageKey["key_game_sound"] = 2] = "key_game_sound";
      LocalStorageKey[LocalStorageKey["key_test_account"] = 3] = "key_test_account";
      LocalStorageKey[LocalStorageKey["key_with_id_below_seperator"] = 4] = "key_with_id_below_seperator";
      LocalStorageKey[LocalStorageKey["key_login_account"] = 5] = "key_login_account";
      LocalStorageKey[LocalStorageKey["key_login_password"] = 6] = "key_login_password";
      LocalStorageKey[LocalStorageKey["key_tourist"] = 7] = "key_tourist";
    })(LocalStorageKey = exports.LocalStorageKey || (exports.LocalStorageKey = {}));
    cc._RF.pop();
  }, {
    "./../model/LoginModel": "LoginModel"
  } ],
  LoginModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4054cqRrhNMr4G0j24EDYdJ", "LoginModel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StateObject = exports.tokenObject = exports.LoginModel = void 0;
    var Alert_1 = require("./../view/component/Alert");
    var ModelBase_1 = require("../common/core/ModelBase");
    var ModelMessageType_1 = require("../common/init/ModelMessageType");
    var proto_1 = require("../proto/proto");
    var StringUtil_1 = require("../util/StringUtil");
    var Alert_2 = require("../view/component/Alert");
    var GameCommonRes_1 = require("../GameCommonRes");
    var ResourceUtil_1 = require("../util/ResourceUtil");
    var AnimalModel_1 = require("./AnimalModel");
    var RoleModuleController_1 = require("../modulecontroller/RoleModuleController");
    var LayerManager_1 = require("../manager/LayerManager");
    var UIDefine_1 = require("../common/init/UIDefine");
    var Config_1 = require("../view/base/Config");
    var LoginModel = function(_super) {
      __extends(LoginModel, _super);
      function LoginModel() {
        var _this = _super.call(this) || this;
        _this.Room_Game_type = proto_1.e_game_type.null;
        _this._phoneVerifyTime = 0;
        _this.FirstLogin = true;
        _this.haveDailyGold = false;
        _this.idIndex = 0;
        _this.stateObj = null;
        _this._carousel = null;
        _this.FirstEnter = true;
        _this.tokenInfo = null;
        return _this;
      }
      Object.defineProperty(LoginModel, "Instance", {
        get: function() {
          null == LoginModel.instance && (LoginModel.instance = new LoginModel());
          return LoginModel.instance;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(LoginModel.prototype, "userInfo", {
        get: function() {
          return this._userInfo;
        },
        set: function(value) {
          value.free_state = false;
          this._userInfo = value;
          this.updateModel(ModelMessageType_1.ModelMessageType.UPDATE_LOGIN_INFO);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(LoginModel.prototype, "new_sec", {
        get: function() {
          if (this._userInfo) return this._userInfo.sec;
          return null;
        },
        set: function(value) {
          this._userInfo && (this._userInfo.sec = value);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(LoginModel.prototype, "gold", {
        get: function() {
          return this._userInfo.balance;
        },
        set: function(value) {
          if (null == this._userInfo) return;
          this._userInfo.balance = value;
          this.updateModel(ModelMessageType_1.ModelMessageType.USER_GOLD_UPDATE);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(LoginModel.prototype, "freegold", {
        get: function() {
          return this.freebalance;
        },
        set: function(value) {
          if (null == this.freebalance) return;
          this.freebalance = value;
          this.updateModel(ModelMessageType_1.ModelMessageType.USER_FREEGOLD_UPDATE);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(LoginModel.prototype, "chip", {
        get: function() {
          return this._userInfo.chip;
        },
        set: function(value) {
          this._userInfo.chip = value;
          this.updateModel(ModelMessageType_1.ModelMessageType.USER_CHIP_UPDATE);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(LoginModel.prototype, "freeDollTimes", {
        get: function() {
          return this._userInfo.free_times;
        },
        set: function(value) {
          this._userInfo.free_times = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(LoginModel.prototype, "charm", {
        get: function() {
          return this._userInfo.charm;
        },
        set: function(value) {
          this._userInfo.charm = value;
          this.updateModel(ModelMessageType_1.ModelMessageType.USER_CHARM_UPDATE);
        },
        enumerable: false,
        configurable: true
      });
      LoginModel.prototype.isWeixinBrowser = function() {
        var ua = window.navigator.userAgent.toLowerCase();
        var reg = new RegExp("MicroMessenger", "i");
        var result = ua.match(reg);
        return null != result;
      };
      Object.defineProperty(LoginModel.prototype, "phoneVerifyTime", {
        get: function() {
          return this._phoneVerifyTime;
        },
        set: function(value) {
          this._phoneVerifyTime = value;
          this.updateModel(ModelMessageType_1.ModelMessageType.PHONE_VERIFY_COOLTIME_UPDATE);
        },
        enumerable: false,
        configurable: true
      });
      LoginModel.prototype.updateGoldInSilence = function(value) {
        this._userInfo.balance = value;
      };
      Object.defineProperty(LoginModel.prototype, "role_id", {
        get: function() {
          if (this._userInfo) return this._userInfo.role_id;
          return 0;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(LoginModel.prototype, "agend_id", {
        get: function() {
          if (this.stateObj && this.stateObj.aid > 0) return this.stateObj.aid;
          return 0;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(LoginModel.prototype, "icon", {
        get: function() {
          this._userInfo && this._userInfo.icon && ResourceUtil_1.ResourceUtil.loadRemoteImage(this._userInfo.icon, function(spriteFrame) {
            return spriteFrame;
          });
          return GameCommonRes_1.default.Instance.DEFAULT_HEAD;
        },
        enumerable: false,
        configurable: true
      });
      LoginModel.prototype.loadHeadSprite = function(path) {
        if (!path || 0 === path.length) return AnimalModel_1.AnimalModel.Instance.res.DEFAULT_HEAD;
        ResourceUtil_1.ResourceUtil.loadRemoteImage(path, function(spriteFrame) {
          return spriteFrame || AnimalModel_1.AnimalModel.Instance.res.DEFAULT_HEAD;
        });
      };
      Object.defineProperty(LoginModel.prototype, "subscribe", {
        get: function() {
          if (this._userInfo) return this._userInfo.subscribe;
          return false;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(LoginModel.prototype, "forceLogout", {
        get: function() {
          return this._forceLogout;
        },
        set: function(value) {
          this._forceLogout = value;
          this.updateModel(ModelMessageType_1.ModelMessageType.FORCE_LOGOUT);
        },
        enumerable: false,
        configurable: true
      });
      LoginModel.prototype.checkGoldEnough = function(value, alert) {
        void 0 === value && (value = -1);
        void 0 === alert && (alert = true);
        if (7 != AnimalModel_1.AnimalModel.Instance.zooType) {
          if (value >= 0 && this.gold >= value) return true;
        } else if (value >= 0 && this.freegold >= value) return true;
        alert && 7 != AnimalModel_1.AnimalModel.Instance.zooType && Alert_2.default.open("\u91d1\u8c46\u4e0d\u8db3", null, function() {}, Alert_1.AlertButton.OK);
        return false;
      };
      LoginModel.prototype.checkCharmEnough = function(value, alert) {
        void 0 === value && (value = -1);
        void 0 === alert && (alert = true);
        if (value >= 0 && this.charm >= value) return true;
        alert && Alert_2.default.open("\u9b45\u529b\u503c\u4e0d\u8db3\uff0c\u662f\u5426\u8d2d\u4e70\uff1f", null, this.goldlessAlertCloseHandler.bind(this), Alert_1.AlertButton.OK | Alert_1.AlertButton.CANCEL);
        return false;
      };
      LoginModel.prototype.goldlessAlertCloseHandler = function(flag) {
        flag == Alert_1.AlertButton.OK && RoleModuleController_1.RoleModuleController.Instance.requestGetDeposit();
      };
      LoginModel.prototype.checkChipEnough = function(value) {
        if (value >= 0 && this.chip >= value) return true;
        return false;
      };
      LoginModel.prototype.checkWechatIsBindedByRecharge = function(alert) {
        void 0 === alert && (alert = true);
        if (this._userInfo.bing_wx) return true;
        alert && Alert_2.default.open("\u4e3a\u4e86\u65b9\u4fbf\u60a8\u4e0b\u6b21\u8fdb\u5165\u6e38\u620f\uff0c\u6211\u4eec\u5efa\u8bae\u60a8\u4f7f\u7528\u5fae\u4fe1\u5e10\u53f7\u767b\u5f55\u6e38\u620f\u540e\u518d\u7ee7\u7eed\u64cd\u4f5c", null, this.bindWechatAlertCloseHandler.bind(this), Alert_1.AlertButton.OK | Alert_1.AlertButton.CANCEL);
        return false;
      };
      LoginModel.prototype.bindWechatAlertCloseHandler = function(flag) {
        flag == Alert_1.AlertButton.OK && RoleModuleController_1.RoleModuleController.Instance.requestGetChargeInfo();
      };
      Object.defineProperty(LoginModel.prototype, "imageBase64", {
        get: function() {
          return this._imageBase64;
        },
        set: function(v) {
          this._imageBase64 = v;
        },
        enumerable: false,
        configurable: true
      });
      LoginModel.prototype.fileReadResult = function(data) {
        0 == this._imageBase64.length ? this._imageBase64.push(data) : this._imageBase64.length < this.idIndex + 1 ? this._imageBase64.push(data) : this._imageBase64[this.idIndex] = data;
        this.updateModel(ModelMessageType_1.ModelMessageType.FILE_READ_UPDATE);
      };
      Object.defineProperty(LoginModel.prototype, "url", {
        get: function() {
          if (null == this._url) {
            var specialUrl = this.generateSpecialUrl();
            if (specialUrl) this._url = specialUrl; else {
              var href = location.href.split("?")[0];
              href = href.split("#")[0];
              this._url = href + "?state=STATE";
            }
          }
          return this._url;
        },
        enumerable: false,
        configurable: true
      });
      LoginModel.prototype.generateSpecialUrl = function() {
        if (Config_1.default.isPHPLogin()) return Config_1.default.Instance.redirect_uri + "?state=STATE";
        return null;
      };
      LoginModel.prototype.getLoginUrl = function() {
        var href = location.href.split("?")[0];
        href = href.split("#")[0];
        href.lastIndexOf("/") != href.length - 1 && (href += "/");
        var version = Math.ceil(99999 * Math.random());
        href += StringUtil_1.default.replaceString("login.html?state=STATE&v={0}", version);
        return href;
      };
      LoginModel.prototype.getPayRedirectOauthUrl = function() {
        var specialUrl = this.generateSpecialUrl();
        if (specialUrl) return specialUrl;
        var href = location.href.split("?")[0];
        href = href.split("#")[0];
        href.lastIndexOf("/") != href.length - 1 && (href += "/");
        href += "login.html?appid={0}&state=STATE";
        return StringUtil_1.default.replaceString(href, Config_1.default.Instance.app_id);
      };
      LoginModel.prototype.getOauthUrl = function(ignoreSpecial) {
        if (Config_1.default.isPHPLogin()) return Config_1.default.Instance.redirect_uri + "?state=STATE";
        if (!ignoreSpecial) {
          var specialUrl = this.generateSpecialUrl();
          if (specialUrl) return specialUrl;
        }
        var ur = "https://open.weixin.qq.com/connect/oauth2/authorize?appid={0}&redirect_uri={1}&response_type=code&scope=snsapi_userinfo&state=STATE#wechat_redirect";
        return StringUtil_1.default.replaceString(ur, Config_1.default.Instance.app_id, Config_1.default.Instance.redirect_uri);
      };
      LoginModel.prototype.getCurrentGameType = function() {
        var game_type;
        LayerManager_1.LayerManager.Instance.isPopup(UIDefine_1.UIDefine.UIZooPanel) && (game_type = proto_1.e_game_type.zoo);
        return game_type;
      };
      LoginModel.prototype.wrapWechatLoginUrl = function(game_type) {
        var state = this.wrapStateObj(game_type);
        return this.wrapUrlWithObject(state, this.getOauthUrl());
      };
      LoginModel.prototype.wrapUrl = function(game_type, autoLogin) {
        var state = this.wrapStateObj(game_type, autoLogin);
        return this.wrapUrlWithObject(state, this.url);
      };
      LoginModel.prototype.wrapPayRedirectOauthUrl = function(game_type, autoLogin) {
        var state = this.wrapStateObj(game_type, autoLogin);
        return this.wrapUrlWithObject(state, this.getPayRedirectOauthUrl());
      };
      LoginModel.prototype.wrapPayUrl = function(game_type) {
        var state = this.wrapStateObj(game_type, 2);
        return "http://" + this.domain + "/ajc/index.php/pay/callback?s_url=" + encodeURIComponent(this.wrapUrlWithObject(state, this.url));
      };
      LoginModel.prototype.wrapWapPayUrl = function(pay_uri) {
        return "http://" + this.domain + "/pay/openinbs.html?wxp_url=" + pay_uri;
      };
      LoginModel.prototype.wrapNativePayRedirectUrl = function(charge) {
        var redirect_uri = this.wrapUrlWithObject(this.stateObj, Config_1.default.Instance.redirect_uri + "?state=STATE");
        var href = Config_1.default.Instance.pay_uri + "?s_url=" + encodeURIComponent(redirect_uri) + "&charge=" + window.btoa(charge);
        return href;
      };
      LoginModel.prototype.wrapUrlWithObject = function(obj, url) {
        if (null == obj) return url || this.url;
        var jsonStr = JSON.stringify(obj);
        var utf8Bytes = StringUtil_1.default.stringToUtf8Bytes(jsonStr);
        var hexStr = StringUtil_1.default.bytesToHexString(utf8Bytes);
        var finalUrl = url || this.url;
        return finalUrl.replace("STATE", hexStr);
      };
      LoginModel.prototype.wrapStateObj = function(game_type, autoLogin) {
        var obj = {
          id: this.role_id
        };
        null != this._userInfo && this._userInfo.agent_id > 0 && (obj["aid"] = this._userInfo.agent_id);
        game_type && (obj["type"] = game_type);
        autoLogin && (obj["auto"] = autoLogin);
        return obj;
      };
      LoginModel.prototype.wrapTouristOauthUrl = function() {
        var obj = {};
        null != this._userInfo && this._userInfo.agent_id > 0 && (obj["aid"] = this._userInfo.agent_id);
        obj["tid"] = this.role_id;
        return this.wrapUrlWithObject(obj, this.getOauthUrl());
      };
      LoginModel.prototype.getUrlParam = function(param, url) {
        var reg = new RegExp(param + "=([a-zA-Z0-9:/.|_]+)");
        var link = url || decodeURIComponent(location.href);
        var result = link.match(reg);
        if (null != result) return result[1];
        return null;
      };
      LoginModel.prototype.readWxLoginCode = function() {
        var value_code = this.getUrlParam("code");
        if (value_code && value_code.length >= 16) {
          this.code = value_code;
          return;
        }
        var value = this.getUrlParam("lc");
        value && value.length >= 16 && (this.code = value);
        var value2 = this.getUrlParam("rc");
        value2 && value2.length >= 16 && (this.r_code = value2);
        var value3 = this.getUrlParam("pc");
        value3 && value3.length >= 16 && (this.p_code = value3);
      };
      LoginModel.prototype.read49LoginCode = function() {
        null == this.login49Info && (this.login49Info = new proto_1.m_1021_tos());
        var userId = this.getUrlParam("userId");
        this.login49Info.userid = Number(userId);
        var appid = this.getUrlParam("appid");
        this.login49Info.appid = Number(appid);
        var time = this.getUrlParam("time");
        this.login49Info.time = Number(time);
        var reurl = this.getUrlParam("reurl");
        this.login49Info.reurl = encodeURIComponent(reurl);
        var extinfo = this.getUrlParam("extinfo");
        null != extinfo && void 0 != extinfo || (extinfo = "");
        this.login49Info.extinfo = extinfo;
        var sid = this.getUrlParam("sid");
        this.login49Info.sid = Number(sid);
        var source = this.getUrlParam("source");
        null != source && void 0 != source || (source = "");
        this.login49Info.source = source;
        var openid = this.getUrlParam("openid");
        null != openid && void 0 != openid || (openid = "");
        this.login49Info.openid = openid;
        var sign = this.getUrlParam("sign");
        this.login49Info.sign = sign;
      };
      LoginModel.prototype.dewrapUrl = function() {
        var url = decodeURIComponent(window.location.href);
        var reg = /state=([a-fA-F0-9]+)/;
        var result = url.match(reg);
        if (result) {
          var hexStr = result[1];
          var bytes = StringUtil_1.default.hexStringToBytes(hexStr);
          var objStr = StringUtil_1.default.utf8BytesToString(bytes);
          var obj = null;
          if ("{" === objStr.charAt(0)) try {
            obj = JSON.parse(objStr);
          } catch (e) {
            obj = null;
          }
          if (null != obj) {
            this.stateObj = obj;
            this.stateObj.web > 0 && delete this.stateObj.web;
          }
        }
      };
      LoginModel.prototype.logUrl = function(url) {
        var reg = new RegExp("state=([a-fA-F0-9]+)");
        var result = url.match(reg);
        if (null != result) {
          var state = result[1];
          var bytes = StringUtil_1.default.hexStringToBytes(state);
          var objstr = StringUtil_1.default.utf8BytesToString(bytes);
          var obj = null;
          if ("{" == objstr.charAt(0)) {
            try {
              obj = JSON.parse(objstr);
            } catch (e) {
              obj = null;
            }
            console.log(objstr);
          }
        }
      };
      Object.defineProperty(LoginModel.prototype, "carousel", {
        get: function() {
          return this._carousel;
        },
        set: function(value) {
          if (value && value.length > 0) {
            var first = false;
            if (null == this._carousel) {
              first = true;
              this._carousel = [];
            }
            var gettime = Date.now();
            for (var i = 0; i < value.length; i++) {
              var randomlasttime;
              var ad = value[i];
              if (first) {
                randomlasttime = Math.random() * value[i].sec * 1e3;
                ad[LoginModel.PROPERTY_GET_TIME] = gettime - randomlasttime;
              } else ad[LoginModel.PROPERTY_GET_TIME] = gettime - 1e3 * value[i].sec;
              this._carousel.push(ad);
            }
          } else null == value && (this._carousel = []);
        },
        enumerable: false,
        configurable: true
      });
      LoginModel.prototype.removeBroadcast = function(id) {
        if (null == this._carousel || 0 == this._carousel.length) return;
        for (var i = 0, len = this._carousel.length; i < len; i++) if (this._carousel[i].id == id) {
          this._carousel.splice(i, 1);
          return;
        }
      };
      Object.defineProperty(LoginModel.prototype, "redBagState", {
        get: function() {
          if (null == this._userInfo) return null;
          return this._userInfo.red_state;
        },
        set: function(value) {
          if (null == this._userInfo) return;
          this._userInfo.red_state = value;
        },
        enumerable: false,
        configurable: true
      });
      LoginModel.prototype.checkFocus = function() {
        if (false == this.redBagState) return true;
        if (false == this._userInfo.bing_wx) {
          Alert_2.default.open("\u60a8\u6709\u672a\u9886\u53d6\u7684\u7ea2\u5305\u5956\u54c1\uff0c\u662f\u5426\u9a6c\u4e0a\u9886\u53d6(\u4e3a\u4e86\u60a8\u80fd\u987a\u5229\u9886\u5956\uff0c\u8bf7\u7ed1\u5b9a\u5fae\u4fe1)", null, this.confirmFocus.bind(this), Alert_1.AlertButton.OK | Alert_1.AlertButton.CANCEL);
          return false;
        }
        if (false == this._userInfo.subscribe) {
          Alert_2.default.open("\u60a8\u6709\u672a\u9886\u53d6\u7684\u7ea2\u5305\u5956\u54c1\uff0c\u662f\u5426\u9a6c\u4e0a\u9886\u53d6(\u4e3a\u4e86\u60a8\u7684\u8d26\u53f7\u5b89\u5168\uff0c\u9700\u5173\u6ce8\u516c\u4f17\u53f7\u548c\u9a8c\u8bc1\u624b\u673a)", null, this.confirmFocus.bind(this), Alert_1.AlertButton.OK | Alert_1.AlertButton.CANCEL);
          return false;
        }
        if (!this._userInfo.phone || "" === this._userInfo.phone.trim()) {
          Alert_2.default.open("\u60a8\u6709\u672a\u9886\u53d6\u7684\u7ea2\u5305\u5956\u54c1\uff0c\u662f\u5426\u9a6c\u4e0a\u9886\u53d6(\u4e3a\u4e86\u60a8\u7684\u8d26\u53f7\u5b89\u5168\uff0c\u9700\u9a8c\u8bc1\u624b\u673a)", null, this.confirmBind.bind(this), Alert_1.AlertButton.OK | Alert_1.AlertButton.CANCEL);
          return false;
        }
        return true;
      };
      LoginModel.prototype.confirmFocus = function(flags) {
        this._userInfo.red_state = false;
      };
      LoginModel.prototype.confirmBind = function(flags) {
        this._userInfo.red_state = false;
      };
      LoginModel.prototype.getPrizeRes = function(src) {
        src = StringUtil_1.default.replaceString("https://{0}/{1}", this.domain, src);
        return src;
      };
      Object.defineProperty(LoginModel.prototype, "domain", {
        get: function() {
          var domain;
          true;
          domain = "epay.michongfun.com";
          return domain;
        },
        enumerable: false,
        configurable: true
      });
      LoginModel.PROPERTY_GET_TIME = "gettime";
      return LoginModel;
    }(ModelBase_1.ModelBase);
    exports.LoginModel = LoginModel;
    var tokenObject = function() {
      function tokenObject() {}
      return tokenObject;
    }();
    exports.tokenObject = tokenObject;
    var StateObject = function() {
      function StateObject() {}
      return StateObject;
    }();
    exports.StateObject = StateObject;
    cc._RF.pop();
  }, {
    "../GameCommonRes": "GameCommonRes",
    "../common/core/ModelBase": "ModelBase",
    "../common/init/ModelMessageType": "ModelMessageType",
    "../common/init/UIDefine": "UIDefine",
    "../manager/LayerManager": "LayerManager",
    "../modulecontroller/RoleModuleController": "RoleModuleController",
    "../proto/proto": "proto",
    "../util/ResourceUtil": "ResourceUtil",
    "../util/StringUtil": "StringUtil",
    "../view/base/Config": "Config",
    "../view/component/Alert": "Alert",
    "./../view/component/Alert": "Alert",
    "./AnimalModel": "AnimalModel"
  } ],
  LoginModuleCommand: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "69ae9SUC6BChYmc9G6Js9cz", "LoginModuleCommand");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.LoginModuleCommand = void 0;
    var LoginModuleCommand = function() {
      function LoginModuleCommand() {}
      LoginModuleCommand.LOGIN = 1001;
      LoginModuleCommand.TEST_LOGIN = 1002;
      LoginModuleCommand.LOGIN_SECURITY = 1003;
      LoginModuleCommand.LOGIN_ACCOUNT = 1004;
      LoginModuleCommand.CREATE_ACCOUNT = 1005;
      LoginModuleCommand.GET_CREATE_CODE = 1006;
      LoginModuleCommand.UPDATE_SECURITY = 1011;
      LoginModuleCommand.UPDATE_DOLL = 1020;
      LoginModuleCommand.LOGIN_49 = 1021;
      LoginModuleCommand.LOGIN_BY_TOKEN = 1022;
      LoginModuleCommand.TOURIST_LOGIN = 1096;
      LoginModuleCommand.PUSH_KICK_INFO = 1097;
      LoginModuleCommand.KICKOUT = 1098;
      LoginModuleCommand.HEARTBEAT = 1099;
      return LoginModuleCommand;
    }();
    exports.LoginModuleCommand = LoginModuleCommand;
    cc._RF.pop();
  }, {} ],
  LoginModuleController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fc866hPPRVPq5bY+ABEe+dz", "LoginModuleController");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.LoginModuleController = void 0;
    var proto_1 = require("../proto/proto");
    var TimerManager_1 = require("./../common/core/TimerManager");
    var Alert_1 = require("../view/component/Alert");
    var LoginModuleCommand_1 = require("../common/command/LoginModuleCommand");
    var ModuleBase_1 = require("../common/core/ModuleBase");
    var NotificationManager_1 = require("../common/core/NotificationManager");
    var LoginModel_1 = require("../model/LoginModel");
    var SocketConnection_1 = require("../common/net/SocketConnection");
    var Alert_2 = require("../view/component/Alert");
    var ModelMessageType_1 = require("../common/init/ModelMessageType");
    var ErrorCodeUtil_1 = require("../util/ErrorCodeUtil");
    var ErrorCodeType_1 = require("../common/init/ErrorCodeType");
    var StringUtil_1 = require("../util/StringUtil");
    var AnimalModuleController_1 = require("./AnimalModuleController");
    var TipView_1 = require("../view/component/TipView");
    var UIDisconnect_1 = require("../view/common/UIDisconnect");
    var LocalStorageUtil_1 = require("../util/LocalStorageUtil");
    var UIInvalidToken_1 = require("../view/common/UIInvalidToken");
    var LoginModuleController = function(_super) {
      __extends(LoginModuleController, _super);
      function LoginModuleController() {
        var _this = _super.call(this) || this;
        _this.heartbeatRespondTime = 0;
        _this.heartbeatTimerId = 0;
        _this.heartbeatDeltaTime = 0;
        return _this;
      }
      Object.defineProperty(LoginModuleController, "Instance", {
        get: function() {
          null == LoginModuleController.instance && (LoginModuleController.instance = new LoginModuleController());
          return LoginModuleController.instance;
        },
        enumerable: false,
        configurable: true
      });
      LoginModuleController.prototype.init = function() {
        var n = NotificationManager_1.common.NotificationManager.getInstance();
        n.registNotification(LoginModuleCommand_1.LoginModuleCommand.LOGIN, this.loginHandler, this);
        n.registNotification(LoginModuleCommand_1.LoginModuleCommand.TEST_LOGIN, this.testLoginHandler, this);
        n.registNotification(LoginModuleCommand_1.LoginModuleCommand.LOGIN_SECURITY, this.loginSecurityHandler, this);
        n.registNotification(LoginModuleCommand_1.LoginModuleCommand.LOGIN_ACCOUNT, this.loginAccountHandler, this);
        n.registNotification(LoginModuleCommand_1.LoginModuleCommand.CREATE_ACCOUNT, this.createAccountHandler, this);
        n.registNotification(LoginModuleCommand_1.LoginModuleCommand.GET_CREATE_CODE, this.getCreateCodeHandler, this);
        n.registNotification(LoginModuleCommand_1.LoginModuleCommand.UPDATE_SECURITY, this.updateSecurityHandler, this);
        n.registNotification(LoginModuleCommand_1.LoginModuleCommand.UPDATE_DOLL, this.updateDollHandler, this);
        n.registNotification(LoginModuleCommand_1.LoginModuleCommand.LOGIN_49, this.login49Handler, this);
        n.registNotification(LoginModuleCommand_1.LoginModuleCommand.LOGIN_BY_TOKEN, this.loginByTokenHandler, this);
        n.registNotification(LoginModuleCommand_1.LoginModuleCommand.TOURIST_LOGIN, this.touristLoginHandler, this);
        n.registNotification(LoginModuleCommand_1.LoginModuleCommand.PUSH_KICK_INFO, this.pushKickInfoHandler, this);
        n.registNotification(LoginModuleCommand_1.LoginModuleCommand.KICKOUT, this.kickoutHandler, this);
        n.registNotification(LoginModuleCommand_1.LoginModuleCommand.HEARTBEAT, this.heartbeatHandler, this);
      };
      LoginModuleController.prototype.loginResult = function(info) {
        var loginModel = LoginModel_1.LoginModel.Instance;
        var relogin = null != loginModel.userInfo;
        loginModel.userInfo = info;
        true;
        console.log(StringUtil_1.default.replaceString("role_id:{0},balance:{1}", info.role_id, info.balance));
        this.startHeartbeat();
        loginModel.isWeixinBrowser();
        if (relogin) loginModel.updateModel(ModelMessageType_1.ModelMessageType.USER_RELOGIN_SUCC); else switch (loginModel.tokenInfo.type) {
         case "zoo":
          AnimalModuleController_1.AnimalModuleController.Instance.requestEnterRoom();
        }
      };
      LoginModuleController.prototype.loginFail = function(cmd, errorCode) {
        if (errorCode == ErrorCodeType_1.ErrorCodeType.ERMSG_KICK_53) return;
        if (errorCode == ErrorCodeType_1.ErrorCodeType.ERMSG_TOURIST_NOT_OPEN_70) {
          TipView_1.default.open("\u6e38\u5ba2\u767b\u5f55\u529f\u80fd\u5df2\u5173\u95ed\uff0c\u8bf7\u4f7f\u7528\u624b\u673a\u53f7\u6216\u8005\u5fae\u4fe1\u767b\u5f55");
          return;
        }
        if (errorCode == ErrorCodeType_1.ErrorCodeType.ERMSG_ROLE_IS_MAX_17) {
          this.loginFailForServerBusy();
          return;
        }
        var loginModel = LoginModel_1.LoginModel.Instance;
        if (errorCode == ErrorCodeType_1.ErrorCodeType.ERMSG_CAN_NOT_FIND_OPENID_10) {
          if (null != loginModel.code) {
            if (loginModel.isWeixinBrowser()) {
              var direct_url = loginModel.getOauthUrl();
              var url = loginModel.wrapUrlWithObject(loginModel.stateObj, direct_url);
              location.replace(url);
            }
          } else location.reload();
          return;
        }
        if (errorCode == ErrorCodeType_1.ErrorCodeType.ERMSG_ERROR_SID_64) {
          if (null != loginModel.code) {
            var stateObj = loginModel.stateObj;
            var direct_url = loginModel.getOauthUrl();
            stateObj && stateObj.sid && (stateObj.sid = null);
            location.replace(loginModel.wrapUrlWithObject(stateObj, direct_url));
          } else TipView_1.default.open("\u8bf7\u4f7f\u7528\u5fae\u4fe1\u767b\u5f55");
          return;
        }
        ErrorCodeUtil_1.ErrorCodeUtil.errorCall(cmd, errorCode);
      };
      LoginModuleController.prototype.loginFailForServerBusy = function() {
        SocketConnection_1.SocketConnection.Instance.close();
        LoginModel_1.LoginModel.Instance.forceLogout = true;
        UIDisconnect_1.default.open();
        Alert_2.default.open("\u670d\u52a1\u5668\u5df2\u7ecf\u4eba\u6ee1\u4e3a\u60a3\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5", "\u767b\u9646\u5931\u8d25", null, Alert_1.AlertButton.OK);
      };
      LoginModuleController.prototype.requestLogin = function(code) {
        var tos = new proto_1.m_1001_tos();
        var stateObj = LoginModel_1.LoginModel.Instance.stateObj;
        tos.code = code;
        stateObj && stateObj.tid ? tos.role_id = stateObj.tid : tos.role_id = 0;
        var loginModel = LoginModel_1.LoginModel.Instance;
        tos.red_code = loginModel.r_code;
        tos.pay_code = loginModel.p_code;
        this.wrapLoginTos(tos);
        this.send(LoginModuleCommand_1.LoginModuleCommand.LOGIN, tos);
      };
      LoginModuleController.prototype.wrapLoginTos = function(tos) {
        var stateObj = LoginModel_1.LoginModel.Instance.stateObj;
        null != stateObj && stateObj.id > 0 ? tos.parent_id = stateObj.id : tos.parent_id = 0;
        null != stateObj && stateObj.aid > 0 ? tos.agent_id = stateObj.aid : tos.agent_id = 0;
        tos instanceof proto_1.m_1096_tos || null != stateObj && null != stateObj.sid && stateObj.sid.length > 0 && (tos.sid = stateObj.sid);
      };
      LoginModuleController.prototype.loginHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          this.loginResult(toc.info);
        } else this.loginFail(LoginModuleCommand_1.LoginModuleCommand.LOGIN, note.errorCode);
      };
      LoginModuleController.prototype.requestTestLogin = function(account) {
        var tos = new proto_1.m_1002_tos();
        tos.account = account;
        this.send(LoginModuleCommand_1.LoginModuleCommand.TEST_LOGIN, tos);
      };
      LoginModuleController.prototype.testLoginHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          this.loginResult(toc.info);
        } else {
          if (note.errorCode == ErrorCodeType_1.ErrorCodeType.ERMSG_KICK_53) return;
          ErrorCodeUtil_1.ErrorCodeUtil.errorCall(LoginModuleCommand_1.LoginModuleCommand.TEST_LOGIN, note.errorCode);
        }
      };
      LoginModuleController.prototype.requestLoginSecurity = function(security, role_id) {
        var tos = new proto_1.m_1003_tos();
        tos.security = security;
        tos.role_id = role_id;
        this.send(LoginModuleCommand_1.LoginModuleCommand.LOGIN_SECURITY, tos);
      };
      LoginModuleController.prototype.loginSecurityHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          this.loginResult(toc.info);
        } else {
          if (note.errorCode == ErrorCodeType_1.ErrorCodeType.ERMSG_KICK_53) return;
          if (ErrorCodeType_1.ErrorCodeType.ERMSG_SECURITY_IS_NOT_EFFECTIVE_7001 == note.errorCode || ErrorCodeType_1.ErrorCodeType.ERMSG_SECURITY_IS_NOT_MATCH_7002 == note.errorCode || ErrorCodeType_1.ErrorCodeType.ERMSG_SYS_01 == note.errorCode) {
            Alert_2.default.open("\u60a8\u7684\u767b\u5f55\u5df2\u8fc7\u671f\uff0c\u8bf7\u91cd\u65b0\u767b\u5f55", "\u767b\u5f55\u5931\u8d25", this.loginFailHandler.bind(this), Alert_1.AlertButton.OK);
            SocketConnection_1.SocketConnection.Instance.close();
            LoginModel_1.LoginModel.Instance.forceLogout = true;
            return;
          }
          if (note.errorCode == ErrorCodeType_1.ErrorCodeType.ERMSG_ROLE_IS_MAX_17) {
            this.loginFailForServerBusy();
            return;
          }
          ErrorCodeUtil_1.ErrorCodeUtil.errorCall(LoginModuleCommand_1.LoginModuleCommand.LOGIN_SECURITY, note.errorCode);
        }
      };
      LoginModuleController.prototype.requestLoginAccount = function(phone, password) {
        var tos = new proto_1.m_1004_tos();
        tos.phone = phone;
        tos.password = password;
        this.wrapLoginTos(tos);
        this.send(LoginModuleCommand_1.LoginModuleCommand.LOGIN_ACCOUNT, tos, tos);
      };
      LoginModuleController.prototype.loginAccountHandler = function(note) {
        if (0 == note.errorCode) {
          var tos = note.tos;
          var toc = note.toc;
          LocalStorageUtil_1.LocalStorageUtil.setItem(LocalStorageUtil_1.LocalStorageKey.key_login_account, tos.phone);
          LocalStorageUtil_1.LocalStorageUtil.setItem(LocalStorageUtil_1.LocalStorageKey.key_login_password, tos.password);
          this.loginResult(toc.info);
        } else {
          if (note.errorCode == ErrorCodeType_1.ErrorCodeType.ERMSG_ACCOUNT_NOT_EXIST_05) {
            Alert_2.default.open("\u5e10\u53f7\u4e0d\u5b58\u5728\uff0c\u8bf7\u4f7f\u7528\u9a8c\u8bc1\u7801\u767b\u5f55", "\u5e10\u53f7\u4e0d\u5b58\u5728", null, null);
            return;
          }
          this.loginFail(LoginModuleCommand_1.LoginModuleCommand.LOGIN_ACCOUNT, note.errorCode);
        }
      };
      LoginModuleController.prototype.requestCreateAccount = function(code, password) {
        var tos = new proto_1.m_1005_tos();
        tos.code = code;
        tos.password = password;
        this.wrapLoginTos(tos);
        this.send(LoginModuleCommand_1.LoginModuleCommand.CREATE_ACCOUNT, tos, tos);
      };
      LoginModuleController.prototype.createAccountHandler = function(note) {
        if (0 == note.errorCode) {
          var tos = note.tos;
          var toc = note.toc;
          LocalStorageUtil_1.LocalStorageUtil.setItem(LocalStorageUtil_1.LocalStorageKey.key_login_account, LoginModel_1.LoginModel.Instance.getVerifyCodePhone);
          LocalStorageUtil_1.LocalStorageUtil.setItem(LocalStorageUtil_1.LocalStorageKey.key_login_password, tos.password);
          this.loginResult(toc.info);
        } else this.loginFail(LoginModuleCommand_1.LoginModuleCommand.CREATE_ACCOUNT, note.errorCode);
      };
      LoginModuleController.prototype.requestGetCreateCode = function(phone) {
        var tos = new proto_1.m_1006_tos();
        tos.phone = phone;
        this.send(LoginModuleCommand_1.LoginModuleCommand.GET_CREATE_CODE, tos, tos);
      };
      LoginModuleController.prototype.getCreateCodeHandler = function(note) {
        if (0 == note.errorCode) {
          var tos = note.tos;
          LoginModel_1.LoginModel.Instance.phoneVerifyTime = cc.sys.now();
          LoginModel_1.LoginModel.Instance.getVerifyCodePhone = tos.phone;
          TipView_1.default.open("\u9a8c\u8bc1\u7801\u5df2\u53d1\u9001\uff0c\u8bf7\u7559\u610f\u624b\u673a\u77ed\u4fe1");
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(LoginModuleCommand_1.LoginModuleCommand.GET_CREATE_CODE, note.errorCode);
      };
      LoginModuleController.prototype.updateSecurityHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          LoginModel_1.LoginModel.Instance.new_sec = toc.info;
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(LoginModuleCommand_1.LoginModuleCommand.UPDATE_SECURITY, note.errorCode);
      };
      LoginModuleController.prototype.updateDollHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(LoginModuleCommand_1.LoginModuleCommand.UPDATE_DOLL, note.errorCode);
      };
      LoginModuleController.prototype.requestLogin49 = function(userid, appid, time, reurl, extinfo, sid, source, openid, sign) {
        var tos = new proto_1.m_1021_tos();
        tos.userid = userid;
        tos.appid = appid;
        tos.time = time;
        tos.reurl = reurl;
        tos.extinfo = extinfo;
        tos.sid = sid;
        tos.source = source;
        tos.openid = openid;
        tos.sign = sign;
        this.send(LoginModuleCommand_1.LoginModuleCommand.LOGIN_49, tos);
      };
      LoginModuleController.prototype.login49Handler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          this.loginResult(toc.info);
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(LoginModuleCommand_1.LoginModuleCommand.LOGIN_49, note.errorCode);
      };
      LoginModuleController.prototype.requestLoginByToken = function(token) {
        var tos = new proto_1.m_1022_tos();
        tos.token = token;
        this.send(LoginModuleCommand_1.LoginModuleCommand.LOGIN_BY_TOKEN, tos);
      };
      LoginModuleController.prototype.loginByTokenHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          this.loginResult(toc.info);
        } else {
          if (null != note.errorCode) {
            UIInvalidToken_1.default.open();
            return;
          }
          ErrorCodeUtil_1.ErrorCodeUtil.errorCall(LoginModuleCommand_1.LoginModuleCommand.LOGIN_BY_TOKEN, note.errorCode);
        }
      };
      LoginModuleController.prototype.requestTouristLogin = function() {
        var tos = new proto_1.m_1096_tos();
        var stateObj = LoginModel_1.LoginModel.Instance.stateObj;
        var id = Number(LocalStorageUtil_1.LocalStorageUtil.getItem(LocalStorageUtil_1.LocalStorageKey.key_tourist));
        stateObj && stateObj.tca > 0 && (id = 0);
        tos.id = id;
        this.wrapLoginTos(tos);
        this.send(LoginModuleCommand_1.LoginModuleCommand.TOURIST_LOGIN, tos);
      };
      LoginModuleController.prototype.touristLoginHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          LocalStorageUtil_1.LocalStorageUtil.setItem(LocalStorageUtil_1.LocalStorageKey.key_tourist, String(toc.info.role_id));
          this.loginResult(toc.info);
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(LoginModuleCommand_1.LoginModuleCommand.TOURIST_LOGIN, note.errorCode);
      };
      LoginModuleController.prototype.pushKickInfoHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          var time = StringUtil_1.default.dateToString(new Date(1e3 * toc.time), "YYYY-MM-DD hh:mm");
          var tip = StringUtil_1.default.replaceString("\u60a8\u7684\u8d26\u53f7\u5b58\u5728\u8fdd\u89c4\u884c\u4e3a\uff0c\u88ab\u7981\u6b62\u767b\u9646\n\u89e3\u7981\u65f6\u95f4\uff1a{0}\n\n", time);
          tip += "\u53ef\u80fd\u5bfc\u81f4\u8d26\u53f7\u88ab\u7981\u6b62\u767b\u9646\u7684\u539f\u56e0\uff1a\n\n", 
          tip += "1.\u8d26\u53f7\u5b58\u5728\u6076\u610f\u4f5c\u5f0a\u5acc\u7591\uff1b\n", 
          tip += "2.\u5728\u6e38\u620f\u4e2d\u53d1\u5e03\u5e7f\u544a\u3001\u8fdd\u6cd5\u5185\u5bb9\u7b49\uff1b\n", 
          tip += "3.\u73a9\u5bb6\u5b58\u5728\u6076\u610f\u6b3a\u8bc8\u7b49\u6076\u52a3\u884c\u4e3a\uff1b\n", 
          Alert_2.default.open(tip);
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(LoginModuleCommand_1.LoginModuleCommand.PUSH_KICK_INFO, note.errorCode);
      };
      LoginModuleController.prototype.kickoutHandler = function(note) {
        if (0 == note.errorCode) {
          LoginModel_1.LoginModel.Instance.forceLogout = true;
          SocketConnection_1.SocketConnection.Instance.close();
          this.showKickoutAlert();
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(LoginModuleCommand_1.LoginModuleCommand.KICKOUT, note.errorCode);
      };
      LoginModuleController.prototype.showKickoutAlert = function(tip) {
        null == tip && (tip = "\u60a8\u7684\u5e10\u53f7\u5728\u5176\u4ed6\u5730\u65b9\u767b\u5f55\uff0c\u6b64\u5904\u88ab\u5f3a\u5236\u4e0b\u7ebf\u3002");
        Alert_2.default.open(tip, this.kickoutAlertCloseHandler.bind(this), Alert_1.AlertButton.OK_CANCEL);
      };
      LoginModuleController.prototype.kickoutAlertCloseHandler = function(flags) {
        if ((flags & Alert_1.AlertButton.OK) == Alert_1.AlertButton.OK) {
          LoginModel_1.LoginModel.Instance.forceLogout = false;
          this.loginFailHandler(Alert_1.AlertButton.OK);
        } else UIDisconnect_1.default.open();
      };
      LoginModuleController.prototype.loginFailHandler = function(flag) {
        flag == Alert_1.AlertButton.OK && (null != LoginModel_1.LoginModel.Instance.code ? location.replace(LoginModel_1.LoginModel.Instance.wrapWechatLoginUrl()) : location.reload());
      };
      LoginModuleController.prototype.requestHeartbeat = function() {
        this.send(LoginModuleCommand_1.LoginModuleCommand.HEARTBEAT);
      };
      LoginModuleController.prototype.heartbeatHandler = function(note) {
        0 == note.errorCode ? this.heartbeatRespondTime = cc.sys.now() : ErrorCodeUtil_1.ErrorCodeUtil.errorCall(LoginModuleCommand_1.LoginModuleCommand.HEARTBEAT, note.errorCode);
      };
      Object.defineProperty(LoginModuleController.prototype, "heartbeatActive", {
        get: function() {
          return this.heartbeatRespondTime > 0 && cc.sys.now() - this.heartbeatRespondTime < 1e4;
        },
        enumerable: false,
        configurable: true
      });
      LoginModuleController.prototype.startHeartbeat = function() {
        this.heartbeatRespondTime = cc.sys.now();
        0 == this.heartbeatTimerId && (this.heartbeatTimerId = TimerManager_1.TimerManager.Instance.addCountdown(Number.MAX_VALUE, this, null, this.checkHeartbeat, 1e3));
      };
      LoginModuleController.prototype.stopHeartbeat = function() {
        if (this.heartbeatTimerId > 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.heartbeatTimerId);
          this.heartbeatTimerId = 0;
          console.log("stop heartbeat");
        }
      };
      LoginModuleController.prototype.checkHeartbeat = function() {
        if (0 == this.heartbeatRespondTime || cc.sys.now() - this.heartbeatRespondTime > 15e3) {
          var dispatchClose = SocketConnection_1.SocketConnection.Instance.onClose;
          this.heartbeatRespondTime = cc.sys.now();
          SocketConnection_1.SocketConnection.Instance.close();
          dispatchClose ? dispatchClose() : SocketConnection_1.SocketConnection.Instance.reconnect();
          console.log("heartbeat timeout");
        } else {
          this.heartbeatDeltaTime += 1;
          if (this.heartbeatDeltaTime >= 5) {
            this.heartbeatDeltaTime = 0;
            this.requestHeartbeat();
          }
        }
      };
      return LoginModuleController;
    }(ModuleBase_1.ModuleBase);
    exports.LoginModuleController = LoginModuleController;
    cc._RF.pop();
  }, {
    "../common/command/LoginModuleCommand": "LoginModuleCommand",
    "../common/core/ModuleBase": "ModuleBase",
    "../common/core/NotificationManager": "NotificationManager",
    "../common/init/ErrorCodeType": "ErrorCodeType",
    "../common/init/ModelMessageType": "ModelMessageType",
    "../common/net/SocketConnection": "SocketConnection",
    "../model/LoginModel": "LoginModel",
    "../proto/proto": "proto",
    "../util/ErrorCodeUtil": "ErrorCodeUtil",
    "../util/LocalStorageUtil": "LocalStorageUtil",
    "../util/StringUtil": "StringUtil",
    "../view/common/UIDisconnect": "UIDisconnect",
    "../view/common/UIInvalidToken": "UIInvalidToken",
    "../view/component/Alert": "Alert",
    "../view/component/TipView": "TipView",
    "./../common/core/TimerManager": "TimerManager",
    "./AnimalModuleController": "AnimalModuleController"
  } ],
  MathUtil: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9470bACEvNA8YWOdbWuSl4g", "MathUtil");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MathUtil = void 0;
    var StringUtil_1 = require("./StringUtil");
    var MathUtil = function() {
      function MathUtil() {}
      MathUtil.getCombine = function(total, select) {
        if (total <= select) return 1;
        return this.jie_cheng(total) / (this.jie_cheng(select) * this.jie_cheng(total - select));
      };
      MathUtil.getCombineList = function(contents, select) {
        var n = contents.length;
        var result = [];
        if (select < 1) return result;
        if (select >= n) return [ contents.concat() ];
        var states = [];
        for (var i = 0; i < select; i++) states[i] = i + 1;
        generate();
        var pos = select - 1;
        var m = n - select + 1;
        while (states[0] < m) {
          states[select - 1] == n ? pos-- : pos = select - 1;
          states[pos]++;
          for (var k = pos + 1; k < select; k++) states[k] = states[k - 1] + 1;
          generate();
        }
        function generate() {
          var one = [];
          for (var i = 0; i < select; i++) one[i] = contents[states[i] - 1];
          result.push(one);
        }
        return result;
      };
      MathUtil.getArrange = function(total, select) {
        return this.jie_cheng(total) / this.jie_cheng(total - select);
      };
      MathUtil.union = function(arr1, arr2) {
        var result = [];
        if (null == arr1 || 0 == arr1.length || null == arr2 || 0 == arr2.length) return result;
        var count = arr1.length;
        for (var i = 0; i < count; i++) arr2.indexOf(arr1[i]) > -1 && result.push(arr1[i]);
        return result;
      };
      MathUtil.getUnion = function(selection, lottery, select) {
        var unions = this.union(selection, lottery);
        return this.getCombine(unions.length, select);
      };
      MathUtil.jie_cheng = function(n) {
        var m = 1;
        while (n > 1) {
          m *= n;
          n--;
        }
        return m;
      };
      MathUtil.getRandomNumbersFromList = function(count, source) {
        var items = [];
        var totals = source.concat();
        while (items.length < count) {
          var index = Math.floor(Math.random() * totals.length);
          items.push(totals[index]);
          totals.splice(index, 1);
        }
        return items;
      };
      MathUtil.getRandomNumbersFromRange = function(count, start, end) {
        var items = [];
        var half = Math.floor((end - start) / 2);
        var i;
        if (count >= half) {
          for (i = start; i < end; i++) items.push(i);
          while (items.length > count) {
            i = Math.floor(items.length * Math.random());
            items.splice(i, 1);
          }
        } else while (items.length < count) {
          i = Math.floor((end - start) * Math.random() + start);
          -1 == items.indexOf(i) && items.push(i);
        }
        return items;
      };
      MathUtil.random = function(start, end) {
        if (end >= start) return Math.floor((end - start) * Math.random() + start);
        var max = start;
        var min = end;
        return Math.floor((max - min) * Math.random() + min);
      };
      MathUtil.range = function(start, end) {
        var result = [];
        for (var i = start; i < end; i++) result.push(i);
        return result;
      };
      MathUtil.rangeToString = function(start, end, prefix) {
        var result = [];
        for (var i = start; i < end; i++) result.push((prefix || "") + i.toString());
        return result;
      };
      MathUtil.sortNumeric = function(source, desending) {
        desending ? source.sort(MathUtil.sortNumberDesending) : source.sort(MathUtil.sortNumber);
      };
      MathUtil.sortNumber = function(a, b) {
        if (a < b) return -1;
        if (a > b) return 1;
        return 0;
      };
      MathUtil.sortNumberDesending = function(a, b) {
        if (a < b) return 1;
        if (a > b) return -1;
        return 0;
      };
      MathUtil.bezier = function(t) {
        var points = [];
        for (var _i = 1; _i < arguments.length; _i++) points[_i - 1] = arguments[_i];
        var it = 1 - t;
        var x = 0;
        var y = 0;
        var n = points.length - 1;
        for (var k = 0; k <= n; k++) {
          var p = points[k];
          var base = this.jie_cheng(n) / (this.jie_cheng(k) * this.jie_cheng(n - k)) * Math.pow(t, k) * Math.pow(it, n - k);
          x += base * p.x;
          y += base * p.y;
        }
        return new cc.Vec2(x, y);
      };
      MathUtil.bezier_length = function() {
        var points = [];
        for (var _i = 0; _i < arguments.length; _i++) points[_i] = arguments[_i];
        var len = 0;
        var args = [ 0 ];
        var p1 = points[0].clone();
        var p2;
        args = args.concat(points);
        var tStep = .001;
        for (var i = tStep; i <= 1; i += tStep) {
          args[0] = i;
          p2 = this.bezier.apply(null, args);
          len += cc.Vec2.distance(p1, p2);
          p1 = p2;
        }
        return len;
      };
      MathUtil.uniformScaleDown = function(contentWidth, contentHeight, maxWidth, maxHeight) {
        var displayWidth;
        var displayHeight;
        if (contentWidth > maxWidth || contentHeight > maxHeight) if (contentWidth / maxWidth > contentHeight / maxHeight) {
          displayWidth = maxWidth;
          displayHeight = Math.ceil(contentHeight / (contentWidth / maxWidth));
        } else {
          displayHeight = maxHeight;
          displayWidth = Math.ceil(contentWidth / (contentHeight / maxHeight));
        } else {
          displayHeight = contentHeight;
          displayWidth = contentWidth;
        }
        return {
          width: displayWidth,
          height: displayHeight
        };
      };
      MathUtil.uniformScaleUp = function(contentWidth, contentHeight, minWidth, minHeight) {
        var displayWidth;
        var displayHeight;
        if (contentWidth < minWidth || contentHeight < minHeight) if (contentWidth / minWidth < contentHeight / minHeight) {
          displayWidth = minWidth;
          displayHeight = Math.ceil(contentHeight / (contentWidth / minWidth));
        } else {
          displayHeight = minHeight;
          displayWidth = Math.ceil(contentWidth / (contentHeight / minHeight));
        } else {
          displayHeight = contentHeight;
          displayWidth = contentWidth;
        }
        return {
          width: displayWidth,
          height: displayHeight
        };
      };
      MathUtil.uniformScaleUpFitNarrow = function(contentWidth, contentHeight, targetWidth, targetHeight) {
        var displayWidth;
        var displayHeight;
        if (contentWidth < targetWidth && contentHeight < targetHeight) if (contentWidth / targetWidth > contentHeight / targetHeight) {
          displayWidth = targetWidth;
          displayHeight = Math.ceil(contentHeight / (contentWidth / targetWidth));
        } else {
          displayHeight = targetHeight;
          displayWidth = Math.ceil(contentWidth / (contentHeight / targetHeight));
        } else {
          displayHeight = contentHeight;
          displayWidth = contentWidth;
        }
        return {
          width: displayWidth,
          height: displayHeight
        };
      };
      MathUtil.uniformScaleTo = function(contentWidth, contentHeight, targetWidth, targetHeight) {
        var displayWidth;
        var displayHeight;
        if (contentWidth != targetWidth || contentHeight != targetHeight) {
          if (!(contentWidth > targetWidth && contentHeight > targetHeight)) return MathUtil.uniformScaleUp(contentWidth, contentHeight, targetWidth, targetHeight);
          if (contentWidth / targetWidth < contentHeight / targetHeight) {
            displayWidth = targetWidth;
            displayHeight = Math.ceil(contentHeight / (contentWidth / targetWidth));
          } else {
            displayHeight = targetHeight;
            displayWidth = Math.ceil(contentWidth / (contentHeight / targetHeight));
          }
        } else {
          displayHeight = contentHeight;
          displayWidth = contentWidth;
        }
        return {
          width: displayWidth,
          height: displayHeight
        };
      };
      MathUtil.getDistance = function(lng1, lat1, lng2, lat2) {
        if (0 == lng1 || 0 == lat1 || 0 == lng2 || 0 == lat2) return 0;
        var radLat1 = lat1 * Math.PI / 180;
        var radLat2 = lat2 * Math.PI / 180;
        var a = radLat1 - radLat2;
        var b = lng1 * Math.PI / 180 - lng2 * Math.PI / 180;
        var s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) + Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)));
        s *= 6378137;
        s = Math.round(s);
        return s;
      };
      MathUtil.uint32ToIP = function(value) {
        var bit_mask_1 = 4278190080;
        var bit_mask_2 = 16711680;
        var bit_mask_3 = 65280;
        var bit_mask_4 = 255;
        var bit_1 = (value & bit_mask_1) >> 24;
        var bit_2 = (value & bit_mask_2) >> 16;
        var bit_3 = (value & bit_mask_3) >> 8;
        var bit_4 = (value & bit_mask_4) >> 0;
        return StringUtil_1.default.replaceString("{0}.{1}.{2}.{3}", bit_1, bit_2, bit_3, bit_4);
      };
      return MathUtil;
    }();
    exports.MathUtil = MathUtil;
    cc._RF.pop();
  }, {
    "./StringUtil": "StringUtil"
  } ],
  Md5Utils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "57cf5NT/VNERowsbtAwWkbb", "Md5Utils");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Md5Utils = void 0;
    var Md5Utils = function() {
      function Md5Utils() {}
      Md5Utils.uint8ToString = function(u8a) {
        var s = "";
        for (var i = 0; i < u8a.length; i++) s += String.fromCharCode(u8a[i]);
        return s;
      };
      Md5Utils.calculate = function(filePath) {
        return new Promise(function(resolve, reject) {
          if ("undefined" === typeof jsb || !jsb.fileUtils) return reject("MD5 \u6587\u4ef6\u8ba1\u7b97\u4ec5\u652f\u6301\u539f\u751f\u5e73\u53f0\uff08jsb \u672a\u5b9a\u4e49\uff09");
          if (!jsb.fileUtils.isFileExist(filePath)) return reject("\u6587\u4ef6\u4e0d\u5b58\u5728: " + filePath);
          try {
            var bytes = jsb.fileUtils.getDataFromFile(filePath);
            var hash = window.md5(bytes);
            resolve(hash);
          } catch (err) {
            reject("MD5 \u8ba1\u7b97\u5931\u8d25: " + err);
          }
        });
      };
      Md5Utils.calculateString = function(content) {
        return window.md5(content);
      };
      return Md5Utils;
    }();
    exports.Md5Utils = Md5Utils;
    cc._RF.pop();
  }, {} ],
  MissionModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c98e4TJJwNFdKj8mBPe5PRf", "MissionModel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.task_type = exports.MissionModel = void 0;
    var ModelBase_1 = require("../common/core/ModelBase");
    var ModelMessageType_1 = require("../common/init/ModelMessageType");
    var MissionModuleController_1 = require("../modulecontroller/MissionModuleController");
    var MissionModel = function(_super) {
      __extends(MissionModel, _super);
      function MissionModel() {
        var _this = _super.call(this) || this;
        _this.cjWinVal = 0;
        return _this;
      }
      Object.defineProperty(MissionModel, "Instance", {
        get: function() {
          null == MissionModel.instance && (MissionModel.instance = new MissionModel());
          return MissionModel.instance;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MissionModel.prototype, "task_toc", {
        get: function() {
          return this._task_toc;
        },
        set: function(value) {
          this._task_toc = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(MissionModel.prototype, "single_task_toc", {
        get: function() {
          return this._single_task_toc;
        },
        set: function(value) {
          this._single_task_toc = value;
        },
        enumerable: false,
        configurable: true
      });
      MissionModel.prototype.getGameMission = function(game_type) {
        MissionModuleController_1.MissionModuleController.Instance.requestGetGameMission(game_type);
      };
      MissionModel.prototype.clearTaskData = function() {
        this._cur_task_info = null;
        this.zoo_task_list = [];
      };
      Object.defineProperty(MissionModel.prototype, "cur_task_info", {
        get: function() {
          return this._cur_task_info;
        },
        set: function(value) {
          this._cur_task_info = value;
          this.updateModel(ModelMessageType_1.ModelMessageType.UPDATE_ZOO_TASK);
        },
        enumerable: false,
        configurable: true
      });
      return MissionModel;
    }(ModelBase_1.ModelBase);
    exports.MissionModel = MissionModel;
    var task_type;
    (function(task_type) {
      task_type[task_type["daily"] = 0] = "daily";
      task_type[task_type["doll"] = 1] = "doll";
    })(task_type = exports.task_type || (exports.task_type = {}));
    cc._RF.pop();
  }, {
    "../common/core/ModelBase": "ModelBase",
    "../common/init/ModelMessageType": "ModelMessageType",
    "../modulecontroller/MissionModuleController": "MissionModuleController"
  } ],
  MissionModuleCommand: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3cc71flHtVNSLa8s+wZwg+l", "MissionModuleCommand");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MissionModuleCommand = void 0;
    var MissionModuleCommand = function() {
      function MissionModuleCommand() {}
      MissionModuleCommand.GET_LOGIN_GIFT = 4006;
      MissionModuleCommand.GET_MISSION = 4007;
      MissionModuleCommand.GET_GAME_MISSION = 4008;
      MissionModuleCommand.PUSH_FREE_DOLL_TIMES = 4009;
      MissionModuleCommand.GET_ZOO_TASK = 4010;
      MissionModuleCommand.PUSH_ZOO_TASK = 4011;
      MissionModuleCommand.GET_ZOO_TASK_REWARD = 4012;
      return MissionModuleCommand;
    }();
    exports.MissionModuleCommand = MissionModuleCommand;
    cc._RF.pop();
  }, {} ],
  MissionModuleController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cb6c7sQv51LYLeba2jx4uXf", "MissionModuleController");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MissionModuleController = void 0;
    var proto_1 = require("../proto/proto");
    var MissionModuleCommand_1 = require("../common/command/MissionModuleCommand");
    var ModuleBase_1 = require("../common/core/ModuleBase");
    var NotificationManager_1 = require("../common/core/NotificationManager");
    var ErrorCodeUtil_1 = require("../util/ErrorCodeUtil");
    var RoleModuleController_1 = require("./RoleModuleController");
    var LoginModel_1 = require("../model/LoginModel");
    var MissionModel_1 = require("../model/MissionModel");
    var ModelMessageType_1 = require("../common/init/ModelMessageType");
    var MissionModuleController = function(_super) {
      __extends(MissionModuleController, _super);
      function MissionModuleController() {
        return _super.call(this) || this;
      }
      Object.defineProperty(MissionModuleController, "Instance", {
        get: function() {
          null == MissionModuleController.instance && (MissionModuleController.instance = new MissionModuleController());
          return MissionModuleController.instance;
        },
        enumerable: false,
        configurable: true
      });
      MissionModuleController.prototype.init = function() {
        var n = NotificationManager_1.common.NotificationManager.getInstance();
        n.registNotification(MissionModuleCommand_1.MissionModuleCommand.GET_LOGIN_GIFT, this.getLoginGiftHandler, this);
        n.registNotification(MissionModuleCommand_1.MissionModuleCommand.GET_MISSION, this.getMissionHandler, this);
        n.registNotification(MissionModuleCommand_1.MissionModuleCommand.GET_GAME_MISSION, this.getGameMissionHandler, this);
        n.registNotification(MissionModuleCommand_1.MissionModuleCommand.PUSH_FREE_DOLL_TIMES, this.pushFreeDollTimesHandler, this);
        n.registNotification(MissionModuleCommand_1.MissionModuleCommand.GET_ZOO_TASK, this.getZooTaskHandler, this);
        n.registNotification(MissionModuleCommand_1.MissionModuleCommand.PUSH_ZOO_TASK, this.pushZooTaskHandler, this);
        n.registNotification(MissionModuleCommand_1.MissionModuleCommand.GET_ZOO_TASK_REWARD, this.getZooTaskRewardHandler, this);
      };
      MissionModuleController.prototype.requestGetLoginGift = function() {
        this.send(MissionModuleCommand_1.MissionModuleCommand.GET_LOGIN_GIFT);
      };
      MissionModuleController.prototype.getLoginGiftHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(MissionModuleCommand_1.MissionModuleCommand.GET_LOGIN_GIFT, note.errorCode);
      };
      MissionModuleController.prototype.requestGetMission = function() {
        this.send(MissionModuleCommand_1.MissionModuleCommand.GET_MISSION);
      };
      MissionModuleController.prototype.getMissionHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(MissionModuleCommand_1.MissionModuleCommand.GET_MISSION, note.errorCode);
      };
      MissionModuleController.prototype.requestGetGameMission = function(type) {
        var tos = new proto_1.m_4008_tos();
        tos.type = type;
        this.send(MissionModuleCommand_1.MissionModuleCommand.GET_GAME_MISSION, tos);
      };
      MissionModuleController.prototype.getGameMissionHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(MissionModuleCommand_1.MissionModuleCommand.GET_GAME_MISSION, note.errorCode);
      };
      MissionModuleController.prototype.pushFreeDollTimesHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          if (toc) {
            LoginModel_1.LoginModel.Instance.freeDollTimes = toc.free_times;
            RoleModuleController_1.RoleModuleController.Instance.requestGetRedPoint();
          }
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(MissionModuleCommand_1.MissionModuleCommand.PUSH_FREE_DOLL_TIMES, note.errorCode);
      };
      MissionModuleController.prototype.requestGetZooTask = function() {
        this.send(MissionModuleCommand_1.MissionModuleCommand.GET_ZOO_TASK);
      };
      MissionModuleController.prototype.getZooTaskHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          if (null != toc) {
            MissionModel_1.MissionModel.Instance.zoo_task_list = toc.info;
            MissionModel_1.MissionModel.Instance.cur_task_info = toc.doing;
          }
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(MissionModuleCommand_1.MissionModuleCommand.GET_ZOO_TASK, note.errorCode);
      };
      MissionModuleController.prototype.pushZooTaskHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          MissionModel_1.MissionModel.Instance.cur_task_info = toc ? toc.info : null;
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(MissionModuleCommand_1.MissionModuleCommand.PUSH_ZOO_TASK, note.errorCode);
      };
      MissionModuleController.prototype.requestGetZooTaskReward = function(id) {
        var tos = new proto_1.m_4012_tos();
        tos.id = id;
        this.send(MissionModuleCommand_1.MissionModuleCommand.GET_ZOO_TASK_REWARD, tos);
      };
      MissionModuleController.prototype.getZooTaskRewardHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          if (toc) {
            toc.balance && (LoginModel_1.LoginModel.Instance.gold = toc.balance);
            toc.chip && (LoginModel_1.LoginModel.Instance.chip = toc.chip);
          }
          MissionModel_1.MissionModel.Instance.updateModel(ModelMessageType_1.ModelMessageType.ZOO_TASK_GET_REWARD);
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(MissionModuleCommand_1.MissionModuleCommand.GET_ZOO_TASK_REWARD, note.errorCode);
      };
      return MissionModuleController;
    }(ModuleBase_1.ModuleBase);
    exports.MissionModuleController = MissionModuleController;
    cc._RF.pop();
  }, {
    "../common/command/MissionModuleCommand": "MissionModuleCommand",
    "../common/core/ModuleBase": "ModuleBase",
    "../common/core/NotificationManager": "NotificationManager",
    "../common/init/ModelMessageType": "ModelMessageType",
    "../model/LoginModel": "LoginModel",
    "../model/MissionModel": "MissionModel",
    "../proto/proto": "proto",
    "../util/ErrorCodeUtil": "ErrorCodeUtil",
    "./RoleModuleController": "RoleModuleController"
  } ],
  ModelBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e605fUtPkJIGbey0SHoX5OM", "ModelBase");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ModelBase = void 0;
    var ModelMessageManager_1 = require("./ModelMessageManager");
    var ModelBase = function() {
      function ModelBase() {}
      ModelBase.prototype.updateModel = function(type) {
        ModelMessageManager_1.ModelMessageManager.Instance.sendMessage(type);
      };
      return ModelBase;
    }();
    exports.ModelBase = ModelBase;
    cc._RF.pop();
  }, {
    "./ModelMessageManager": "ModelMessageManager"
  } ],
  ModelMessageCarer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d858aOxcIRK+rKUbErhy0d+", "ModelMessageCarer");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.careMessages = exports.ModelMessageCarer = exports.UpdateType = void 0;
    var ModelMessageObserver_1 = require("./../../common/core/ModelMessageObserver");
    var BaseComponent_1 = require("./BaseComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UpdateType;
    (function(UpdateType) {
      UpdateType[UpdateType["every"] = 0] = "every";
      UpdateType[UpdateType["dirty"] = 1] = "dirty";
    })(UpdateType = exports.UpdateType || (exports.UpdateType = {}));
    var ModelMessageCarer = function(_super) {
      __extends(ModelMessageCarer, _super);
      function ModelMessageCarer() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ModelMessageCarer.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.messageObserver = new ModelMessageObserver_1.ModelMessageObserver(this);
      };
      Object.defineProperty(ModelMessageCarer.prototype, "careMessages", {
        get: function() {
          return null;
        },
        enumerable: false,
        configurable: true
      });
      ModelMessageCarer.prototype.updateData = function(type) {};
      ModelMessageCarer = __decorate([ ccclass ], ModelMessageCarer);
      return ModelMessageCarer;
    }(BaseComponent_1.default);
    exports.ModelMessageCarer = ModelMessageCarer;
    function careMessages() {
      var msgs = [];
      for (var _i = 0; _i < arguments.length; _i++) msgs[_i] = arguments[_i];
      return function(target, methodName, descriptor) {
        if (!(target instanceof ModelMessageCarer)) throw new Error("\u53ea\u80fd\u5728 ModelMessageCarer \u7684\u5b50\u7c7b\u4e2d\u624d\u80fd\u6ce8\u518c careMessages:" + methodName);
        var messages = target.decoratorMessages;
        null == messages && (messages = target.decoratorMessages = []);
        messages.push(new DecoratorMessage(target, msgs, methodName));
        return descriptor;
      };
    }
    exports.careMessages = careMessages;
    var DecoratorMessage = function() {
      function DecoratorMessage(target, messages, callback) {
        this.target = target;
        this.messages = messages;
        this.callback = callback;
      }
      return DecoratorMessage;
    }();
    cc._RF.pop();
  }, {
    "./../../common/core/ModelMessageObserver": "ModelMessageObserver",
    "./BaseComponent": "BaseComponent"
  } ],
  ModelMessageManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "00dcfEE9ghAKI9lGJh0/UIR", "ModelMessageManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ModelMessageManager = void 0;
    var Delegate_1 = require("./Delegate");
    var ModelMessageManager = function() {
      function ModelMessageManager() {
        this.delegates = new Map();
      }
      Object.defineProperty(ModelMessageManager, "Instance", {
        get: function() {
          null == this.instance && (this.instance = new ModelMessageManager());
          return this.instance;
        },
        enumerable: false,
        configurable: true
      });
      ModelMessageManager.prototype.registMessage = function(type, callback, thisObj) {
        var delegate = this.delegates.get(type);
        if (null == delegate) {
          delegate = new Delegate_1.Delegate();
          this.delegates.set(type, delegate);
        }
        true;
        if (void 0 === type) throw new Error("\u6d88\u606f\u540d\u79f0\u4e0d\u80fd\u4e3a undefined");
        delegate.on(callback, thisObj);
      };
      ModelMessageManager.prototype.unregistMessage = function(type, callback, thisObj) {
        var delegate = this.delegates.get(type);
        delegate && delegate.off(callback, thisObj);
      };
      ModelMessageManager.prototype.sendMessage = function(type) {
        var delegate = this.delegates.get(type);
        delegate && delegate.invoke(type);
      };
      return ModelMessageManager;
    }();
    exports.ModelMessageManager = ModelMessageManager;
    cc._RF.pop();
  }, {
    "./Delegate": "Delegate"
  } ],
  ModelMessageObserver: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b1cefYttddGwp4bjitDQnf6", "ModelMessageObserver");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ModelMessageObserver = void 0;
    var ModelMessageManager_1 = require("./ModelMessageManager");
    var NodeStateListener_1 = require("./NodeStateListener");
    var ModelMessageObserver = function() {
      function ModelMessageObserver(messageCarer) {
        if (null == messageCarer) throw new Error("messageCarer cannot be null");
        this.messages = messageCarer.careMessages;
        this.messageCallback = messageCarer.updateData.bind(messageCarer);
        var commonDecoratorMessages = messageCarer.decoratorMessages;
        if (commonDecoratorMessages && commonDecoratorMessages.length > 0) {
          var cloneDecoratorMessages_1 = [];
          commonDecoratorMessages.forEach(function(element) {
            if (!(messageCarer instanceof element.target.constructor)) return;
            cloneDecoratorMessages_1.push({
              messages: element.messages,
              callback: element.callback,
              cb: messageCarer[element.callback].bind(messageCarer)
            });
          });
          this.decoratorMessages = cloneDecoratorMessages_1;
        }
        if ((null == this.messages || 0 == this.messages.length) && (null == this.decoratorMessages || 0 == this.decoratorMessages.length)) return;
        if (messageCarer instanceof cc.Component) {
          var component = messageCarer;
          var listener = component.getComponent(NodeStateListener_1.NodeStateListener);
          null == listener && (listener = component.addComponent(NodeStateListener_1.NodeStateListener));
          listener.onEnableCallback.on(this.onEnableHandle.bind(this));
          listener.onDisableCallback.on(this.onDisableHandle.bind(this));
          listener.onDestroyCallback.on(this.onDestroyHandle.bind(this));
          listener.enabled && this.onEnableHandle();
        }
      }
      ModelMessageObserver.prototype.onEnableHandle = function() {
        this.enable = true;
      };
      ModelMessageObserver.prototype.onDisableHandle = function() {
        this.enable = false;
      };
      ModelMessageObserver.prototype.onDestroyHandle = function() {
        this.destroy();
      };
      Object.defineProperty(ModelMessageObserver.prototype, "enable", {
        get: function() {
          return this._enable;
        },
        set: function(value) {
          if (this._enable == value) return;
          this._enable = value;
          if (this.messages && this.messages.length > 0) if (value) for (var i = 0; i < this.messages.length; i++) ModelMessageManager_1.ModelMessageManager.Instance.registMessage(this.messages[i], this.messageCallback); else for (var i = 0; i < this.messages.length; i++) ModelMessageManager_1.ModelMessageManager.Instance.unregistMessage(this.messages[i], this.messageCallback);
          if (this.decoratorMessages && this.decoratorMessages.length > 0) if (value) {
            var _loop_1 = function(i) {
              var message = this_1.decoratorMessages[i];
              message.messages.forEach(function(msg) {
                ModelMessageManager_1.ModelMessageManager.Instance.registMessage(msg, message.cb);
              });
            };
            var this_1 = this;
            for (var i = 0; i < this.decoratorMessages.length; i++) _loop_1(i);
          } else {
            var _loop_2 = function(i) {
              var message = this_2.decoratorMessages[i];
              message.messages.forEach(function(msg) {
                ModelMessageManager_1.ModelMessageManager.Instance.unregistMessage(msg, message.cb);
              });
            };
            var this_2 = this;
            for (var i = 0; i < this.decoratorMessages.length; i++) _loop_2(i);
          }
        },
        enumerable: false,
        configurable: true
      });
      ModelMessageObserver.prototype.destroy = function() {
        this.enable = false;
        this.messages = null;
        this.messageCallback = null;
        this.decoratorMessages = null;
      };
      return ModelMessageObserver;
    }();
    exports.ModelMessageObserver = ModelMessageObserver;
    cc._RF.pop();
  }, {
    "./ModelMessageManager": "ModelMessageManager",
    "./NodeStateListener": "NodeStateListener"
  } ],
  ModelMessageType: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "78a45Ucv+VIUI9rLPda/bPK", "ModelMessageType");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ModelMessageType = void 0;
    var ModelMessageType = function() {
      function ModelMessageType() {}
      ModelMessageType.SOCKET_DISCONNECTE = "SOCKET_DISCONNECTE";
      ModelMessageType.FORCE_LOGOUT = "FORCE_LOGOUT";
      ModelMessageType.USER_RECONNECTE = "USER_RECONNECTE";
      ModelMessageType.USER_RELOGIN_SUCC = "USER_RELOGIN_SUCC";
      ModelMessageType.UPDATE_LOGIN_INFO = "UPDATE_LOGIN_INFO";
      ModelMessageType.USER_GOLD_UPDATE = "USER_GOLD_UPDATE";
      ModelMessageType.USER_FREEGOLD_UPDATE = "USER_FREEGOLD_UPDATE";
      ModelMessageType.USER_CHIP_UPDATE = "USER_CHIP_UPDATE";
      ModelMessageType.USER_CHARM_UPDATE = "USER_CHARM_UPDATE";
      ModelMessageType.USER_FIRST_RECHARGE = "USER_FIRST_RECHARGE";
      ModelMessageType.USER_RECHARGE_SUCCESS = "USER_RECHARGE_SUCCESS";
      ModelMessageType.PHONE_VERIFY_COOLTIME_UPDATE = "PHONE_VERIFY_COOLTIME_UPDATE";
      ModelMessageType.ACOUNT_INFO_UPDATE = "ACOUNT_INFO_UPDATE";
      ModelMessageType.ACOUNT_BIND_WX_CODE_NOT_EXIST = "ACOUNT_BIND_WX_CODE_NOT_EXIST";
      ModelMessageType.ACOUNT_BIND_WX_HAS_BINDED = "ACOUNT_BIND_WX_HAS_BINDED";
      ModelMessageType.ACOUNT_BIND_WX_FAIL = "ACOUNT_BIND_WX_FAIL";
      ModelMessageType.UPDATE_RED_POINT = "UPDATE_RED_POINT";
      ModelMessageType.UPDATE_GOLD_DETAILS = "UPDATE_GOLD_DETAILS";
      ModelMessageType.CHAT_BORADCAST_UPDATE = "CHAT_BORADCAST_UPDATE";
      ModelMessageType.CHAT_EMOTION_UPDATE = "CHAT_EMOTION_UPDATE";
      ModelMessageType.ZOO_ROOM_INFO = "ZOO_ROOM_INFO";
      ModelMessageType.ZOO_ENTER_ROOM = "ZOO_ENTER_ROOM";
      ModelMessageType.ZOO_LEAVE_ROOM = "ZOO_LEAVE_ROOM";
      ModelMessageType.ZOO_PLAYER_BET_UPDATE = "ZOO_PLAYER_BET_UPDATE";
      ModelMessageType.ZOO_PLAYER_UPDATE = "ZOO_PLAYER_UPDATE";
      ModelMessageType.ZOO_ANIMAL_ENTER = "ZOO_ANIMAL_ENTER";
      ModelMessageType.ZOO_ANIMAL_LEAVE = "ZOO_ANIMAL_LEAVE";
      ModelMessageType.ZOO_ANIMAL_DEAD = "ZOO_ANIMAL_DEAD";
      ModelMessageType.ZOO_ELEPHANT_COME = "ZOO_ELEPHANT_COME";
      ModelMessageType.ZOO_BOMB_COME = "ZOO_BOMB_COME";
      ModelMessageType.ZOO_SELF_RECORD = "ZOO_SELF_RECORD";
      ModelMessageType.ZOO_RECENT_RECORD = "ZOO_RECENT_RECORD";
      ModelMessageType.ZOO_ICE_SKILL_EFFECT_START = "ZOO_ICE_SKILL_EFFECT_START";
      ModelMessageType.ZOO_ICE_SKILL_EFFECT_DELAY = "ZOO_ICE_SKILL_EFFECT_DELAY";
      ModelMessageType.ZOO_ICE_SKILL_EFFECT_COMPLETE = "ZOO_ICE_SKILL_EFFECT_COMPLETE";
      ModelMessageType.ZOO_ICE_SKILL_FROZEN_UPDATE = "ZOO_ICE_SKILL_FROZEN_UPDATE";
      ModelMessageType.ZOO_ICE_SKILL_PROGRESS_UPDATE = "ZOO_ICE_SKILL_PROGRESS_UPDATE";
      ModelMessageType.ZOO_SKILL_LIST_UPDATE = "ZOO_SKILL_LIST_UPDATE";
      ModelMessageType.ZOO_CRI_START_1 = "ZOO_CRI_START_1";
      ModelMessageType.ZOO_CRI_DOWN = "ZOO_CRI_DOWN";
      ModelMessageType.ZOO_CRI_START = "ZOO_CRI_START";
      ModelMessageType.ZOO_CRI_STOP = "ZOO_CRI_STOP";
      ModelMessageType.ZOO_CRI_EFFECT_COMPLETE = "ZOO_CRI_EFFECT_COMPLETE";
      ModelMessageType.ZOO_CRI_PROGRESS_UPDATE = "ZOO_CRI_PROGRESS_UPDATE";
      ModelMessageType.ZOO_BUFF_HIT_PROGRESS_START = "ZOO_BUFF_HIT_PROGRESS_START";
      ModelMessageType.ZOO_BUFF_HIT_PROGRESS_UPDATE = "ZOO_BUFF_HIT_PROGRESS_UPDATE";
      ModelMessageType.ZOO_BUFF_HIT_PROGRESS_CANCEL = "ZOO_BUFF_HIT_PROGRESS_CANCEL";
      ModelMessageType.ZOO_BUFF_START = "ZOO_BUFF_START";
      ModelMessageType.ZOO_LOCK_START = "ZOO_LOCK_START";
      ModelMessageType.ZOO_LOCK_END = "ZOO_LOCK_END";
      ModelMessageType.ZOO_BUFF_PROGRESS_START = "ZOO_BUFF_BUFF_PROGRESS_START";
      ModelMessageType.ZOO_BUFF_PROGRESS_UPDATE = "ZOO_BUFF_PROGRESS_UPDATE";
      ModelMessageType.ZOO_STOP_AUTO_HIT = "ZOO_STOP_AUTO_HIT";
      ModelMessageType.UPDATE_SELF_PROFIT = "UPDATE_SELF_PROFIT";
      ModelMessageType.UPDATE_PROFIT_LOG = "UPDATE_PROFIT_LOG";
      ModelMessageType.UPDATE_WEALTH_LOG = "UPDATE_WEALTH_LOG";
      ModelMessageType.UPDATE_RANK_HELP = "UPDATE_RANK_HELP";
      ModelMessageType.GUIDE_CONTENT_UPDATE = "GUIDE_CONTENT_UPDATE";
      ModelMessageType.GUIDE_ZOO_HIT_ANIMAL_START = "GUIDE_ZOO_HIT_ANIMAL_START";
      ModelMessageType.GUIDE_ZOO_HIT_ANIMAL_END = "GUIDE_ZOO_HIT_ANIMAL_END";
      ModelMessageType.FILE_READ_UPDATE = "FILE_READ_UPDATE";
      ModelMessageType.HOME_GIFT_LIST = "HOME_GIFT_LIST";
      ModelMessageType.ZOO_TODAY_RANK = "ZOO_TODAY_RANK";
      ModelMessageType.ZOO_YESTODAY_RANK = "ZOO_YESTODAY_RANK";
      ModelMessageType.ZOO_GAMERULE_RANK = "ZOO_GAMERULE_RANK";
      ModelMessageType.ZOO_ACT_SCORE_UPDATE = "ZOO_ACT_GOLD_SCORE_UPDATE";
      ModelMessageType.ZOO_ACT_RANK_UPDATE = "ZOO_ACT_RANK_UPDATE";
      ModelMessageType.ZOO_ACT_STATE_UPDATE = "ZOO_ACT_STATE_UPDATE";
      ModelMessageType.ZOO_ACT_BROADCAST_UPDATE = "ZOO_ACT_BROADCAST_UPDATE";
      ModelMessageType.ZOO_ACT_TIME_OVER = "ZOO_ACT_TIME_OVER";
      ModelMessageType.ZOO_TOOL_PRICE = "ZOO_TOOL_PRICE";
      ModelMessageType.ZOO_CJ_UPDATE = "ZOO_CJ_UPDATE";
      ModelMessageType.UPDATE_ZOO_TASK = "UPDATE_ZOO_TASK";
      ModelMessageType.ZOO_TASK_GET_REWARD = "ZOO_TASK_GET_REWARD";
      return ModelMessageType;
    }();
    exports.ModelMessageType = ModelMessageType;
    cc._RF.pop();
  }, {} ],
  ModelMessage: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4edafoK+X5AdLWPalYTI5WR", "ModelMessage");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.modelMessage = void 0;
    var modelMessage;
    (function(modelMessage) {
      var login;
      (function(login) {
        login.HEARTBEAT = "HEARTBEAT";
        login.KICKOUT = "KICKOUT";
        login.PUSH_KICK_INFO = "PUSH_KICK_INFO";
        login.TOURIST_LOGIN = "TOURIST_LOGIN";
        login.LOGIN_BY_TOKEN = "LOGIN_BY_TOKEN";
        login.LOGIN_49 = "LOGIN_49";
        login.UPDATE_DOLL = "UPDATE_DOLL";
        login.UPDATE_SECURITY = "UPDATE_SECURITY";
        login.GET_CREATE_CODE = "GET_CREATE_CODE";
        login.CREATE_ACCOUNT = "CREATE_ACCOUNT";
        login.LOGIN_ACCOUNT = "LOGIN_ACCOUNT";
        login.LOGIN_SECURITY = "LOGIN_SECURITY";
        login.TEST_LOGIN = "TEST_LOGIN";
        login.LOGIN = "LOGIN";
        login.ERROR_MSG = "ERROR_MSG";
        login.HEART = "HEART";
        login.SYSTEM_LOGIN = "SYSTEM_LOGIN";
        login.PHONE_SCREAT_LOGIN = "PHONE_SCREAT_LOGIN";
        login.PHONE_CREATE = "PHONE_CREATE";
        login.PHONE_LOGIN = "PHONE_LOGIN";
        login.ROLE_LOGIN_TEST = "ROLE_LOGIN_TEST";
        login.SECRET_LOGIN = "SECRET_LOGIN";
        login.ROLE_LOGIN = "ROLE_LOGIN";
      })(login = modelMessage.login || (modelMessage.login = {}));
      var animal;
      (function(animal) {
        animal.PUSH_ACTIVITY_BROADCAST = "PUSH_ACTIVITY_BROADCAST";
        animal.PUSH_ACTIVITY_HIT = "PUSH_ACTIVITY_HIT";
        animal.PUSH_ACTIVITY_RANK = "PUSH_ACTIVITY_RANK";
        animal.LOOK_ACTIVITY = "LOOK_ACTIVITY";
        animal.PUSH_ACTIVITY_STATE = "PUSH_ACTIVITY_STATE";
        animal.PUSH_ACTIVITY_ANIMAL_DIE = "PUSH_ACTIVITY_ANIMAL_DIE";
        animal.PUSH_ACTIVITY_ANIMAL_ENTER = "PUSH_ACTIVITY_ANIMAL_ENTER";
        animal.PUSH_ACTIVITY_OUT = "PUSH_ACTIVITY_OUT";
        animal.PUSH_ACTIVITY_ANIMAL = "PUSH_ACTIVITY_ANIMAL";
        animal.GET_ACTIVITY_RANK = "GET_ACTIVITY_RANK";
        animal.HIT_ACTIVITY_ANIMAL = "HIT_ACTIVITY_ANIMAL";
        animal.ENTER_ACTIVITY = "ENTER_ACTIVITY";
        animal.PUSH_ROLE_USE_SKILL = "PUSH_ROLE_USE_SKILL";
        animal.PUSH_ANIMAL_COMING = "PUSH_ANIMAL_COMING";
        animal.PUSH_ANIMAL_DIE = "PUSH_ANIMAL_DIE";
        animal.PUSH_ROLE_LEAVE = "PUSH_ROLE_LEAVE";
        animal.PUSH_ROLE_ENTER = "PUSH_ROLE_ENTER";
        animal.PUSH_ANIMAL_ENTER = "PUSH_ANIMAL_ENTER";
        animal.PUSH_LEAVE_ANIMAL = "PUSH_LEAVE_ANIMAL";
        animal.PUSH_HIT_ANIMAL = "PUSH_HIT_ANIMAL";
        animal.CLEAR_ONE_BLOW = "CLEAR_ONE_BLOW";
        animal.PUSH_ONE_BLOW = "PUSH_ONE_BLOW";
        animal.GET_CJ_LOG = "GET_CJ_LOG";
        animal.PUSH_CJ_REWARD = "PUSH_CJ_REWARD";
        animal.PUSH_CJ = "PUSH_CJ";
        animal.GET_TOOLS_PRICE = "GET_TOOLS_PRICE";
        animal.BUY_TOOLS = "BUY_TOOLS";
        animal.GET_ZOO_TYPE_INFO = "GET_ZOO_TYPE_INFO";
        animal.USE_ANIMAL_SKILL = "USE_ANIMAL_SKILL";
        animal.GET_ANIMAL_REWARD = "GET_ANIMAL_REWARD";
        animal.GET_ANIMAL_RECORD = "GET_ANIMAL_RECORD";
        animal.GO_BET = "GO_BET";
        animal.LEAVE_ROOM = "LEAVE_ROOM";
        animal.ENTER_ROOM = "ENTER_ROOM";
      })(animal = modelMessage.animal || (modelMessage.animal = {}));
      var role;
      (function(role) {
        role.GET_ERROR = "GET_ERROR";
        role.PUSH_FREE_GIFT = "PUSH_FREE_GIFT";
        role.PUSH_KEFU_MSG = "PUSH_KEFU_MSG";
        role.GET_CHARGE_INFO = "GET_CHARGE_INFO";
        role.GET_GOFLY_URL = "GET_GOFLY_URL";
        role.APPLY_WITHDRAW_SECOND = "APPLY_WITHDRAW_SECOND";
        role.APPLY_WITHDRAW = "APPLY_WITHDRAW";
        role.VERIFY_WITHDRAW = "VERIFY_WITHDRAW";
        role.VERIFY_CARD = "VERIFY_CARD";
        role.ADD_CARD = "ADD_CARD";
        role.LOAD_OPEN_ACCT = "LOAD_OPEN_ACCT";
        role.SEARCH_CARD = "SEARCH_CARD";
        role.REMOVE_RED_TO_GOLD = "REMOVE_RED_TO_GOLD";
        role.GET_SERVICE_DEPOSIT = "GET_SERVICE_DEPOSIT";
        role.GET_PROFIT_SETTING = "GET_PROFIT_SETTING";
        role.GET_GAME_AD = "GET_GAME_AD";
        role.GET_NOT_GET_REWARD = "GET_NOT_GET_REWARD";
        role.NOT_GET_REWARD = "NOT_GET_REWARD";
        role.ALTER_PASSWORD = "ALTER_PASSWORD";
        role.SET_PASSWORD = "SET_PASSWORD";
        role.BING_ROLE_CODE = "BING_ROLE_CODE";
        role.GET_WXPUBLIC = "GET_WXPUBLIC";
        role.GET_WXPUBILC_STATE = "GET_WXPUBILC_STATE";
        role.REPORT = "REPORT";
        role.GET_FEEDBACK = "GET_FEEDBACK";
        role.FEEDBACK = "FEEDBACK";
        role.GET_CMS_VAL = "GET_CMS_VAL";
        role.GET_CMS_GIFT = "GET_CMS_GIFT";
        role.GET_RED_POINT = "GET_RED_POINT";
        role.FRIEND_TOTAL_INFO = "FRIEND_TOTAL_INFO";
        role.MATCH_PHONE = "MATCH_PHONE";
        role.GET_AUTH_CODE = "GET_AUTH_CODE";
        role.GET_RUN_INFO = "GET_RUN_INFO";
        role.LOOK_FRIEND = "LOOK_FRIEND";
        role.ERASE_PROFIT = "ERASE_PROFIT";
        role.GET_SELF_SHARE_LOG = "GET_SELF_SHARE_LOG";
        role.DO_LIKE = "DO_LIKE";
        role.GET_SHARE_LOG = "GET_SHARE_LOG";
        role.SHARE_PRIZE_INFO = "SHARE_PRIZE_INFO";
        role.GET_LAST_PROFIT = "GET_LAST_PROFIT";
        role.GET_SELF_INFO = "GET_SELF_INFO";
        role.GET_ROLE_PRIZE = "GET_ROLE_PRIZE";
        role.SET_ADDRESS_STATE = "SET_ADDRESS_STATE";
        role.DELETE_ROLE_ADDRESS = "DELETE_ROLE_ADDRESS";
        role.ALTER_ROLE_ADDRESS = "ALTER_ROLE_ADDRESS";
        role.ADD_ROLE_ADDRESS = "ADD_ROLE_ADDRESS";
        role.GET_ROLE_ADDRESS = "GET_ROLE_ADDRESS";
        role.GET_ROLE_DETAIL = "GET_ROLE_DETAIL";
        role.RECHARGE_SUCCESS = "RECHARGE_SUCCESS";
        role.GET_CHARGE = "GET_CHARGE";
        role.PUSH_ROLE_CHIP = "PUSH_ROLE_CHIP";
        role.GET_DEPOSIT = "GET_DEPOSIT";
        role.UPDATE_ROLE_INFO = "UPDATE_ROLE_INFO";
      })(role = modelMessage.role || (modelMessage.role = {}));
      var mission;
      (function(mission) {
        mission.GET_ZOO_TASK_REWARD = "GET_ZOO_TASK_REWARD";
        mission.PUSH_ZOO_TASK = "PUSH_ZOO_TASK";
        mission.GET_ZOO_TASK = "GET_ZOO_TASK";
        mission.PUSH_FREE_DOLL_TIMES = "PUSH_FREE_DOLL_TIMES";
        mission.GET_GAME_MISSION = "GET_GAME_MISSION";
        mission.GET_MISSION = "GET_MISSION";
        mission.GET_LOGIN_GIFT = "GET_LOGIN_GIFT";
      })(mission = modelMessage.mission || (modelMessage.mission = {}));
      var rank;
      (function(rank) {
        rank.GET_YESTODAY_PROFIT_RANK = "GET_YESTODAY_PROFIT_RANK";
        rank.GET_GAME_PROFIT_RANK = "GET_GAME_PROFIT_RANK";
        rank.GET_GAME_PROFIT_RANK_SETTING = "GET_GAME_PROFIT_RANK_SETTING";
      })(rank = modelMessage.rank || (modelMessage.rank = {}));
      var chat;
      (function(chat) {
        chat.SEND_ROLE_BROADCAST = "SEND_ROLE_BROADCAST";
        chat.PUSH_GAME_AD = "PUSH_GAME_AD";
        chat.CYCLE_DELETE_BROADCAST = "CYCLE_DELETE_BROADCAST";
        chat.CYCLE_BROADCAST = "CYCLE_BROADCAST";
        chat.BROADCAST_WORDS = "BROADCAST_WORDS";
        chat.GET_EMOTICON = "GET_EMOTICON";
        chat.SEND_EMOTICON = "SEND_EMOTICON";
        chat.GET_SIGN = "GET_SIGN";
      })(chat = modelMessage.chat || (modelMessage.chat = {}));
    })(modelMessage = exports.modelMessage || (exports.modelMessage = {}));
    cc._RF.pop();
  }, {} ],
  ModuleBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d637aM60b1AUKmoQXLwruY4", "ModuleBase");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ModuleBase = void 0;
    var AsyncState_1 = require("./AsyncState");
    var NotificationManager_1 = require("./NotificationManager");
    var ModuleBase = function() {
      function ModuleBase() {
        this.init();
      }
      ModuleBase.prototype.init = function() {
        throw new Error("inherit class must to override init Function");
      };
      ModuleBase.prototype.send = function(cmd, tos, clientData, showLoading) {
        void 0 === clientData && (clientData = null);
        void 0 === showLoading && (showLoading = true);
        NotificationManager_1.common.NotificationManager.getInstance().send(cmd, tos, clientData, showLoading);
      };
      ModuleBase.prototype.sendAsync = function(cmd, tos, hasToc, showLoading) {
        void 0 === hasToc && (hasToc = true);
        void 0 === showLoading && (showLoading = true);
        return NotificationManager_1.common.NotificationManager.getInstance().sendAsync(cmd, tos, hasToc, showLoading);
      };
      ModuleBase.prototype.sendAsyncThenCatch = function(cmd, tos, showLoading) {
        void 0 === showLoading && (showLoading = true);
        return NotificationManager_1.common.NotificationManager.getInstance().sendAsync(cmd, tos, true, showLoading).then(function(value) {
          return {
            data: value,
            toc: value,
            state: AsyncState_1.AsyncState.succ
          };
        }, function(state) {
          return {
            state: state
          };
        });
      };
      return ModuleBase;
    }();
    exports.ModuleBase = ModuleBase;
    cc._RF.pop();
  }, {
    "./AsyncState": "AsyncState",
    "./NotificationManager": "NotificationManager"
  } ],
  ModuleInitor: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5f9c79VVxpJE4l1DjKOxvRH", "ModuleInitor");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ModuleInitor = void 0;
    var LoginModuleController_1 = require("../../modulecontroller/LoginModuleController");
    var AnimalModuleController_1 = require("../../modulecontroller/AnimalModuleController");
    var RoleModuleController_1 = require("../../modulecontroller/RoleModuleController");
    var MissionModuleController_1 = require("../../modulecontroller/MissionModuleController");
    var RankModuleController_1 = require("../../modulecontroller/RankModuleController");
    var ChatModuleController_1 = require("../../modulecontroller/ChatModuleController");
    var ModuleInitor = function() {
      function ModuleInitor() {}
      ModuleInitor.init = function() {
        LoginModuleController_1.LoginModuleController.Instance;
        AnimalModuleController_1.AnimalModuleController.Instance;
        RoleModuleController_1.RoleModuleController.Instance;
        MissionModuleController_1.MissionModuleController.Instance;
        RankModuleController_1.RankModuleController.Instance;
        ChatModuleController_1.ChatModuleController.Instance;
      };
      return ModuleInitor;
    }();
    exports.ModuleInitor = ModuleInitor;
    cc._RF.pop();
  }, {
    "../../modulecontroller/AnimalModuleController": "AnimalModuleController",
    "../../modulecontroller/ChatModuleController": "ChatModuleController",
    "../../modulecontroller/LoginModuleController": "LoginModuleController",
    "../../modulecontroller/MissionModuleController": "MissionModuleController",
    "../../modulecontroller/RankModuleController": "RankModuleController",
    "../../modulecontroller/RoleModuleController": "RoleModuleController"
  } ],
  ModuleType: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3b450n/yfpMb6KcyrdjGmQq", "ModuleType");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ModuleType = void 0;
    var ModuleType = function() {
      function ModuleType() {}
      ModuleType.LOGIN = 10;
      ModuleType.ANIMAL = 18;
      ModuleType.ROLE = 30;
      ModuleType.MISSION = 40;
      ModuleType.RANK = 41;
      ModuleType.CHAT = 60;
      return ModuleType;
    }();
    exports.ModuleType = ModuleType;
    cc._RF.pop();
  }, {} ],
  NativeUtil: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0c863zTM2tHZLOtO2rb2zUb", "NativeUtil");
    "use strict";
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NativeUtil = function() {
      function NativeUtil() {}
      NativeUtil_1 = NativeUtil;
      Object.defineProperty(NativeUtil, "Instance", {
        get: function() {
          null == NativeUtil_1._instance && (NativeUtil_1._instance = new NativeUtil_1());
          return NativeUtil_1._instance;
        },
        enumerable: false,
        configurable: true
      });
      NativeUtil.prototype.setProtraitOrientation = function() {};
      NativeUtil.prototype.setLandscapeOrientation = function() {};
      NativeUtil.prototype.getClipboardContent = function() {
        return "";
      };
      NativeUtil.prototype.copyToClipBoard = function(content) {};
      NativeUtil.prototype.callNativeMethod = function(methodName, params) {
        void 0 === params && (params = {});
        if (!cc.sys.isNative || !cc.sys.isMobile || cc.sys.os !== cc.sys.OS_ANDROID) {
          console.warn("\u5f53\u524d\u73af\u5883\u4e0d\u652f\u6301\u8c03\u7528\u539f\u751f\u65b9\u6cd5");
          return;
        }
        try {
          jsb.reflection.callStaticMethod("com/example/demo/AppActivity", "onJsCallNative", "(Ljava/lang/String;Ljava/lang/String;)V", methodName, JSON.stringify(params));
        } catch (e) {
          console.error("\u8c03\u7528\u539f\u751f\u65b9\u6cd5\u5931\u8d25:", e);
        }
      };
      var NativeUtil_1;
      NativeUtil._instance = null;
      NativeUtil = NativeUtil_1 = __decorate([ ccclass ], NativeUtil);
      return NativeUtil;
    }();
    exports.default = NativeUtil;
    cc._RF.pop();
  }, {} ],
  NodeStateListener: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "96729nM1ptHB4fXf6sM9Rzo", "NodeStateListener");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.NodeStateListener = void 0;
    var Delegate_1 = require("./Delegate");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NodeStateListener = function(_super) {
      __extends(NodeStateListener, _super);
      function NodeStateListener() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.onEnableCallback = new Delegate_1.Delegate();
        _this.onDisableCallback = new Delegate_1.Delegate();
        _this.onDestroyCallback = new Delegate_1.Delegate();
        return _this;
      }
      NodeStateListener.prototype.onEnable = function() {
        this.onEnableCallback.invoke(this.node);
      };
      NodeStateListener.prototype.onDisable = function() {
        this.onDisableCallback.invoke(this.node);
      };
      NodeStateListener.prototype.onDestroy = function() {
        this.onDestroyCallback.invoke(this.node);
        this.onEnableCallback.clear();
        this.onDisableCallback.clear();
        this.onDestroyCallback.clear();
      };
      NodeStateListener = __decorate([ ccclass ], NodeStateListener);
      return NodeStateListener;
    }(cc.Component);
    exports.NodeStateListener = NodeStateListener;
    cc._RF.pop();
  }, {
    "./Delegate": "Delegate"
  } ],
  NotificationManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "eeb31D+nTBJl6gdOc6NiD8B", "NotificationManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.common = void 0;
    var SocketConnection_1 = require("../net/SocketConnection");
    var AsyncState_1 = require("./AsyncState");
    var common;
    (function(common) {
      var requestTimeoutMs = 8e3;
      var NotificationManager = function() {
        function NotificationManager() {
          this.checkFlagInterval = 0;
          this.maxCacheFlags = 20;
          this.clientDataDict = [];
          this.callbacks = {};
        }
        NotificationManager.getInstance = function() {
          null == NotificationManager.instance && (NotificationManager.instance = new NotificationManager());
          return NotificationManager.instance;
        };
        NotificationManager.prototype.registNotification = function(cmd, callback, thisObj) {
          var calls = this.callbacks[cmd];
          if (null == calls) {
            calls = new Array();
            this.callbacks[cmd] = calls;
          }
          calls.push(new NotificationCallback(callback, thisObj));
        };
        NotificationManager.prototype.unregistNotification = function(cmd, callback, thisObj) {
          var calls = this.callbacks[cmd];
          if (null == calls) return;
          for (var i = 0; i < calls.length; i++) {
            var call = calls[i];
            if (call.callback == callback && call.thisObj == thisObj) {
              calls.splice(i, 1);
              break;
            }
          }
        };
        NotificationManager.prototype.clear = function() {
          this.callbacks = {};
        };
        NotificationManager.prototype.send = function(cmd, tos, clientData, showLoading, socketConnection) {
          var connection = socketConnection || SocketConnection_1.SocketConnection.Instance;
          var flag = 0;
          if (void 0 !== clientData || null != tos) {
            flag = NotificationManager.flags++;
            var ncd = new NotificationClientData(tos, flag);
            ncd.clientData = clientData;
            this.clientDataDict.push(ncd);
            if (this.checkFlagInterval++ > this.maxCacheFlags) {
              this.checkFlagInterval = 0;
              this.checkToRemoveClientDataFlag();
            }
          }
          connection.send(cmd, flag, tos, showLoading);
        };
        NotificationManager.prototype.sendAsync = function(cmd, tos, hasToc, showLoading, socketConnection) {
          var connection = socketConnection || SocketConnection_1.SocketConnection.Instance;
          if (!connection.connected) return Promise.reject(AsyncState_1.AsyncState.fail);
          var flag = NotificationManager.flags++;
          var ncd = new NotificationClientData(tos, flag);
          this.clientDataDict.push(ncd);
          if (this.checkFlagInterval++ > this.maxCacheFlags) {
            this.checkFlagInterval = 0;
            this.checkToRemoveClientDataFlag();
          }
          var p = new Promise(function(resolve, reject) {
            ncd.asyncResolve = resolve;
            ncd.asyncReject = reject;
            ncd.asyncRespondToc = hasToc;
            ncd.asyncTimeoutId = setTimeout(function() {
              ncd.asyncReject = null;
              ncd.asyncResolve = null;
              ncd.asyncTimeoutId = 0;
              reject(AsyncState_1.AsyncState.timeout);
            }, requestTimeoutMs);
          });
          connection.send(cmd, flag, tos, showLoading);
          return p;
        };
        NotificationManager.prototype.receive = function(note) {
          var calls = this.callbacks[note.cmd];
          if (null == calls) return;
          var ncd;
          if (note.flag > 0) for (var j = 0; j < this.clientDataDict.length; j++) if (this.clientDataDict[j].flag == note.flag) {
            ncd = this.clientDataDict[j];
            note.tos = ncd.tos;
            note.clientData = ncd.clientData;
            this.clientDataDict.splice(j, 1);
            break;
          }
          for (var i = 0; i < calls.length; i++) calls[i].call(note);
          if (ncd) {
            ncd.asyncTimeoutId > 0 && clearTimeout(ncd.asyncTimeoutId);
            0 == note.errorCode ? null != ncd.asyncResolve && (ncd.asyncRespondToc ? ncd.asyncResolve(note.toc) : ncd.asyncResolve(AsyncState_1.AsyncState.succ)) : null != ncd.asyncReject && ncd.asyncReject(new AsyncState_1.AsyncState(note.errorCode));
          }
          Notification.release(note);
        };
        NotificationManager.prototype.checkToRemoveClientDataFlag = function() {
          if (this.clientDataDict.length < 1) return;
          var nowTime = cc.sys.now();
          for (var i = 0; i < this.clientDataDict.length; i++) {
            var ncd = this.clientDataDict[i];
            if (!(nowTime - ncd.time >= 3e4)) break;
            this.clientDataDict.splice(i, 1);
            i -= 1;
          }
        };
        NotificationManager.flags = 1;
        return NotificationManager;
      }();
      common.NotificationManager = NotificationManager;
      var NotificationCallback = function() {
        function NotificationCallback(func, thisObj) {
          this.callback = func;
          this.thisObj = thisObj;
        }
        NotificationCallback.prototype.call = function(note) {
          this.callback.call(this.thisObj, note);
        };
        return NotificationCallback;
      }();
      common.NotificationCallback = NotificationCallback;
      var NotificationClientData = function() {
        function NotificationClientData(data, flag) {
          this.asyncTimeoutId = 0;
          this.tos = data;
          this.flag = flag;
          this._time = cc.sys.now();
        }
        Object.defineProperty(NotificationClientData.prototype, "time", {
          get: function() {
            return this._time;
          },
          enumerable: false,
          configurable: true
        });
        return NotificationClientData;
      }();
      common.NotificationClientData = NotificationClientData;
      var Notification = function() {
        function Notification() {}
        Notification.create = function() {
          if (Notification.count > 0) {
            Notification.count--;
            return Notification.instances.pop();
          }
          return new Notification();
        };
        Notification.release = function(instance) {
          if (-1 == Notification.instances.indexOf(instance)) {
            instance.toc = null;
            instance.clientData = null;
            instance.flag = 0;
            instance.tos = null;
            instance.errorCode = 0;
            instance.cmd = 0;
            Notification.count++;
            Notification.instances.push(instance);
          }
        };
        Notification.instances = [];
        Notification.count = 0;
        return Notification;
      }();
      common.Notification = Notification;
    })(common = exports.common || (exports.common = {}));
    cc._RF.pop();
  }, {
    "../net/SocketConnection": "SocketConnection",
    "./AsyncState": "AsyncState"
  } ],
  ObjectUtil: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9c1d3tBo69GoZ20NeId4ktr", "ObjectUtil");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ObjectUtil = void 0;
    var ObjectUtil = function() {
      function ObjectUtil() {}
      ObjectUtil.generateListItemRenderer = function(count, listExists, type, originPrefab, parent, forEach) {
        null == listExists && (listExists = []);
        var parentNode = parent;
        null == parentNode && listExists.length > 0 && (parentNode = listExists[0].node.parent);
        if (listExists.length < count) {
          if (null == parentNode) throw new Error("parent \u4e0d\u80fd\u4e3a null");
          if (null == originPrefab && 0 == listExists.length) throw new Error("originPrefab \u4e0d\u80fd\u4e3a null");
          while (listExists.length < count) {
            var node = void 0;
            var component = void 0;
            var prefab = null;
            originPrefab instanceof cc.Prefab ? prefab = originPrefab : originPrefab instanceof Function && (prefab = originPrefab(listExists.length));
            if (prefab) {
              node = cc.instantiate(prefab);
              component = node.getComponent(type);
            } else if (listExists.length > 0) {
              node = cc.instantiate(listExists[0].node);
              component = node.getComponent(type);
            }
            node.setParent(parentNode);
            var existCount = listExists.length;
            var siblingIndex = existCount > 0 ? listExists[existCount - 1].node.getSiblingIndex() + 1 : -1;
            siblingIndex > -1 && node.getSiblingIndex() != siblingIndex && node.setSiblingIndex(siblingIndex);
            listExists.push(component);
          }
        }
        if (listExists.length > count) for (var i = count; i < listExists.length; i++) listExists[i].node.active = false;
        if (null != forEach) for (var i = 0; i < count; i++) {
          listExists[i].node.active || (listExists[i].node.active = true);
          forEach(i, count, listExists[i]);
        }
        return listExists;
      };
      ObjectUtil.generateNodeList = function(count, listExists, prefab, parent, forEach) {
        null == listExists && (listExists = []);
        var parentNode = parent;
        null == parentNode && listExists.length > 0 && (parentNode = listExists[0].parent);
        if (null == parentNode) throw new Error("parent \u4e0d\u80fd\u4e3a null");
        if (null == prefab && 0 == listExists.length) throw new Error("prefab \u4e0d\u80fd\u4e3a null");
        if (listExists.length < count) while (listExists.length < count) {
          var node = void 0;
          prefab ? node = cc.instantiate(prefab) : listExists.length > 0 && (node = cc.instantiate(listExists[0]));
          node.setParent(parentNode);
          var existCount = listExists.length;
          var siblingIndex = existCount > 0 ? listExists[existCount - 1].getSiblingIndex() + 1 : -1;
          siblingIndex > -1 && node.getSiblingIndex() != siblingIndex && node.setSiblingIndex(siblingIndex);
          listExists.push(node);
        }
        if (listExists.length > count) for (var i = count; i < listExists.length; i++) listExists[i].active = false;
        if (null != forEach) for (var i = 0; i < count; i++) {
          listExists[i].active || (listExists[i].active = true);
          forEach(i, count, listExists[i]);
        }
        return listExists;
      };
      ObjectUtil.appendListItemRenderer = function(appendCount, listExists, type, prefab, parent, forEach) {
        null == listExists && (listExists = []);
        if (appendCount < 1) return;
        var parentNode = parent;
        null == parentNode && listExists.length > 0 && (parentNode = listExists[0].node.parent);
        if (null == parentNode) throw new Error("parent \u4e0d\u80fd\u4e3a null");
        if (null == prefab && 0 == listExists.length) throw new Error("prefab \u4e0d\u80fd\u4e3a null");
        var currentActiveCount = 0;
        var totalActiveCount;
        for (var i = listExists.length - 1; i >= 0; i--) if (listExists[i].node.active) {
          currentActiveCount = i + 1;
          break;
        }
        totalActiveCount = currentActiveCount + appendCount;
        if (listExists.length < totalActiveCount) while (listExists.length < totalActiveCount) {
          var node = void 0;
          var component = void 0;
          if (prefab) {
            node = cc.instantiate(prefab);
            component = node.getComponent(type);
          } else if (listExists.length > 0) {
            node = cc.instantiate(listExists[0].node);
            component = node.getComponent(type);
          }
          node.setParent(parentNode);
          var existCount = listExists.length;
          var siblingIndex = existCount > 0 ? listExists[existCount - 1].node.getSiblingIndex() + 1 : -1;
          siblingIndex > -1 && node.getSiblingIndex() != siblingIndex && node.setSiblingIndex(siblingIndex);
          listExists.push(component);
        }
        if (listExists.length > totalActiveCount) for (var i = totalActiveCount; i < listExists.length; i++) listExists[i].node.active = false;
        if (null != forEach) for (var i = currentActiveCount; i < totalActiveCount; i++) {
          listExists[i].node.active || (listExists[i].node.active = true);
          forEach(i - currentActiveCount, i, totalActiveCount, listExists[i]);
        }
        return listExists;
      };
      ObjectUtil.activeListItemRenderer = function(listExist, type, prefabOrNode, parent) {
        for (var i = 0; i < listExist.length; i++) if (!listExist[i].node.active) {
          listExist[i].node.active = true;
          return listExist[i];
        }
        if (null == prefabOrNode) {
          if (!(listExist.length > 0)) throw new Error("\u53c2\u6570 prefabOrNode \u4e0d\u80fd\u4e3a null");
          prefabOrNode = listExist[0].node;
        }
        if (null == parent) {
          if (!(listExist.length > 0)) throw new Error("\u53c2\u6570 parent \u4e0d\u80fd\u4e3a null");
          parent = listExist[0].node.parent;
        }
        var node = cc.instantiate(prefabOrNode);
        var component = node.getComponent(type);
        parent && node.parent != parent && node.setParent(parent);
        node.active || (node.active = true);
        listExist.push(component);
        return component;
      };
      ObjectUtil.setNodeGray = function(node, gray, includeChildren, ignoreMask) {
        void 0 === ignoreMask && (ignoreMask = false);
        if (includeChildren) {
          var renders = node.getComponentsInChildren(cc.RenderComponent);
          if (ignoreMask) for (var i = 0; i < renders.length; i++) {
            if (renders[i] instanceof cc.Mask) continue;
            this.setSpriteGray(renders[i], gray);
          } else for (var i = 0; i < renders.length; i++) this.setSpriteGray(renders[i], gray);
        } else {
          var render = node.getComponent(cc.RenderComponent);
          render && ObjectUtil.setSpriteGray(render, gray);
        }
      };
      ObjectUtil.setSpriteGray = function(sprite, gray) {
        var material = gray ? cc.Material.getBuiltinMaterial("2d-gray-sprite") : cc.Material.getBuiltinMaterial("2d-sprite");
        sprite.setMaterial(0, material);
      };
      ObjectUtil.containsNode = function(parentMaybe, childMaybe) {
        if (null == childMaybe.parent) return false;
        var parent = childMaybe.parent;
        while (null != parent) {
          if (parent == parentMaybe) return true;
          parent = parent.parent;
        }
        return false;
      };
      return ObjectUtil;
    }();
    exports.ObjectUtil = ObjectUtil;
    cc._RF.pop();
  }, {} ],
  PanelEffectAnimationHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e044boqOf1CKYRRuq4q0ZeD", "PanelEffectAnimationHandler");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PanelEffectAnimationHandler = void 0;
    var PanelEffectUtil_1 = require("./PanelEffectUtil");
    var PanelEffectAnimationHandler = function() {
      function PanelEffectAnimationHandler() {}
      PanelEffectAnimationHandler.prototype.open = function() {
        this.excutor(this.option);
        this.doAnimation();
      };
      PanelEffectAnimationHandler.prototype.close = function() {
        this.onCloseComplete();
      };
      PanelEffectAnimationHandler.prototype.doAnimation = function() {
        var node = this.option.node;
        var effect = this.effectOperation == PanelEffectUtil_1.PanelEffectOperation.open ? this.option.openEffect : this.option.closeEffect;
        var time = .5;
        var animation = node.getComponent(cc.Animation);
        if (null == animation) {
          this.onOpenComplete();
          return;
        }
        time = animation.defaultClip.duration;
        animation.play();
        return cc.tween(node).delay(time).call(this.onOpenComplete, this).start();
      };
      PanelEffectAnimationHandler.prototype.onOpenComplete = function() {
        this.option = null;
        this.excutor = null;
        PanelEffectUtil_1.PanelEffectUtil.Instance.next();
      };
      PanelEffectAnimationHandler.prototype.onCloseComplete = function() {
        this.excutor && this.excutor(this.option);
        this.option = null;
        this.excutor = null;
        PanelEffectUtil_1.PanelEffectUtil.Instance.next();
      };
      return PanelEffectAnimationHandler;
    }();
    exports.PanelEffectAnimationHandler = PanelEffectAnimationHandler;
    cc._RF.pop();
  }, {
    "./PanelEffectUtil": "PanelEffectUtil"
  } ],
  PanelEffectBlackFadeInOutHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a682cgQ8fBDY54c610N4nHN", "PanelEffectBlackFadeInOutHandler");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PanelEffectBlackFadeInOutHandler = void 0;
    var LayerManager_1 = require("../LayerManager");
    var PanelEffectUtil_1 = require("./PanelEffectUtil");
    var PanelEffectBlackFadeInOutHandler = function() {
      function PanelEffectBlackFadeInOutHandler() {}
      PanelEffectBlackFadeInOutHandler.prototype.open = function() {
        this.blackFadeIn();
      };
      PanelEffectBlackFadeInOutHandler.prototype.close = function() {
        this.blackFadeIn();
      };
      PanelEffectBlackFadeInOutHandler.prototype.blackFadeIn = function() {
        null == this.blackNode && this.createBlackBackground();
        cc.Tween.stopAllByTarget(this.blackNode);
        var duration = .35;
        cc.tween(this.blackNode).to(duration, {
          opacity: 255
        }).call(this.onBlackFadeInComplete, this).to(duration, {
          opacity: 0
        }).call(this.onBlackFadeOutComplete, this).start();
      };
      PanelEffectBlackFadeInOutHandler.prototype.createBlackBackground = function() {
        var node = null;
        var sprite = null;
        node = new cc.Node("BLACK_BACKGROUND");
        node.color = cc.Color.BLACK;
        node.opacity = 0;
        node.position = cc.Vec3.ZERO;
        sprite = node.addComponent(cc.Sprite);
        sprite.spriteFrame = LayerManager_1.LayerManager.Instance.getColorSpriteFrame();
        sprite.sizeMode = cc.Sprite.SizeMode.CUSTOM;
        var widget = node.addComponent(cc.Widget);
        widget.isAlignLeft = widget.isAlignRight = widget.isAlignTop = widget.isAlignBottom = true;
        widget.top = widget.bottom = widget.left = widget.right = 0;
        this.blackNode = node;
        LayerManager_1.LayerManager.Instance.addChild(node, LayerManager_1.LayerType.layer_tip);
      };
      PanelEffectBlackFadeInOutHandler.prototype.onBlackFadeInComplete = function() {
        this.excutor(this.option);
      };
      PanelEffectBlackFadeInOutHandler.prototype.onBlackFadeOutComplete = function() {
        var node = this.blackNode;
        this.option = null;
        this.excutor = null;
        this.blackNode = null;
        node.destroy();
        PanelEffectUtil_1.PanelEffectUtil.Instance.next();
      };
      return PanelEffectBlackFadeInOutHandler;
    }();
    exports.PanelEffectBlackFadeInOutHandler = PanelEffectBlackFadeInOutHandler;
    cc._RF.pop();
  }, {
    "../LayerManager": "LayerManager",
    "./PanelEffectUtil": "PanelEffectUtil"
  } ],
  PanelEffectCustomHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "90ffeZysshNYK/kX8zfAOFy", "PanelEffectCustomHandler");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PanelEffectCustomHandler = void 0;
    var TimerManager_1 = require("../../common/core/TimerManager");
    var PanelEffectUtil_1 = require("./PanelEffectUtil");
    var PanelEffectCustomHandler = function() {
      function PanelEffectCustomHandler() {
        this.openTimerId = 0;
        this.closeTimerId = 0;
      }
      PanelEffectCustomHandler.prototype.open = function() {
        this.excutor(this.option);
        var customEffectPanel = this.getICustomEffectPanel(this.option.node);
        if (null == customEffectPanel) {
          true;
          throw new Error("ICustomEffectPanel not implements:" + this.option.node.name);
        }
        customEffectPanel.openDuration > 0 && (this.openTimerId = TimerManager_1.TimerManager.Instance.addCountdown(customEffectPanel.openDuration, this, this.autoExcuteOpenCallback));
        customEffectPanel.doOpenEffect(this.onOpenComplete.bind(this));
      };
      PanelEffectCustomHandler.prototype.close = function() {
        var customEffectPanel = this.getICustomEffectPanel(this.option.node);
        if (null == customEffectPanel) {
          true;
          throw new Error("ICustomEffectPanel not implements:" + this.option.node.name);
        }
        customEffectPanel.closeDuration > 0 && (this.closeTimerId = TimerManager_1.TimerManager.Instance.addCountdown(customEffectPanel.closeDuration, this, this.autoExcuteCloseCallback));
        customEffectPanel.doCloseEffect(this.onCloseComplete.bind(this));
      };
      PanelEffectCustomHandler.prototype.autoExcuteOpenCallback = function() {
        this.openTimerId = 0;
        this.onOpenComplete();
      };
      PanelEffectCustomHandler.prototype.autoExcuteCloseCallback = function() {
        this.closeTimerId = 0;
        this.onCloseComplete();
      };
      PanelEffectCustomHandler.prototype.getICustomEffectPanel = function(node) {
        var allComponents = node["_components"];
        for (var i = 0; i < allComponents.length; i++) {
          var c = allComponents[i];
          if (c.doCloseEffect instanceof Function && c.doOpenEffect instanceof Function) return c;
        }
        return null;
      };
      PanelEffectCustomHandler.prototype.onOpenComplete = function() {
        if (this.openTimerId > 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.openTimerId);
          this.openTimerId = 0;
        }
        if (null != this.excutor) {
          this.option = null;
          this.excutor = null;
          PanelEffectUtil_1.PanelEffectUtil.Instance.next();
        }
      };
      PanelEffectCustomHandler.prototype.onCloseComplete = function() {
        if (this.closeTimerId > 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.closeTimerId);
          this.closeTimerId = 0;
        }
        if (this.excutor) {
          this.excutor(this.option);
          this.option = null;
          this.excutor = null;
          PanelEffectUtil_1.PanelEffectUtil.Instance.next();
        }
      };
      return PanelEffectCustomHandler;
    }();
    exports.PanelEffectCustomHandler = PanelEffectCustomHandler;
    cc._RF.pop();
  }, {
    "../../common/core/TimerManager": "TimerManager",
    "./PanelEffectUtil": "PanelEffectUtil"
  } ],
  PanelEffectEmptyHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ca762HDHBlPYavIH13lMqNx", "PanelEffectEmptyHandler");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PanelEffectEmptyHandler = void 0;
    var PanelEffectUtil_1 = require("./PanelEffectUtil");
    var PanelEffectEmptyHandler = function() {
      function PanelEffectEmptyHandler() {}
      PanelEffectEmptyHandler.prototype.open = function() {
        this.excutor(this.option);
        this.onOpenComplete();
      };
      PanelEffectEmptyHandler.prototype.close = function() {
        this.onCloseComplete();
      };
      PanelEffectEmptyHandler.prototype.onOpenComplete = function() {
        this.option = null;
        this.excutor = null;
        PanelEffectUtil_1.PanelEffectUtil.Instance.next();
      };
      PanelEffectEmptyHandler.prototype.onCloseComplete = function() {
        this.excutor && this.excutor(this.option);
        this.option = null;
        this.excutor = null;
        PanelEffectUtil_1.PanelEffectUtil.Instance.next();
      };
      return PanelEffectEmptyHandler;
    }();
    exports.PanelEffectEmptyHandler = PanelEffectEmptyHandler;
    cc._RF.pop();
  }, {
    "./PanelEffectUtil": "PanelEffectUtil"
  } ],
  PanelEffectFadeHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1fbc2kWL1ZCYJyCOsfF94HS", "PanelEffectFadeHandler");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PanelEffectFadeHandler = void 0;
    var LayerManager_1 = require("../LayerManager");
    var PanelEffectUtil_1 = require("./PanelEffectUtil");
    var PanelEffectFadeHandler = function() {
      function PanelEffectFadeHandler() {}
      PanelEffectFadeHandler.prototype.open = function() {
        this.excutor(this.option);
        cc.Tween.stopAllByTarget(this.option.node);
        this.doFade().call(this.onOpenComplete, this).start();
      };
      PanelEffectFadeHandler.prototype.close = function() {
        cc.Tween.stopAllByTarget(this.option.node);
        this.doFade().call(this.onCloseComplete, this).start();
      };
      PanelEffectFadeHandler.prototype.doFade = function() {
        var node = this.option.node;
        var effect = this.effectOperation == PanelEffectUtil_1.PanelEffectOperation.open ? this.option.openEffect : this.option.closeEffect;
        var from = 0;
        var to = 255;
        var time = .45;
        var easeType = cc.easing.smooth;
        if (effect == LayerManager_1.PanelEffectType.alphaFadeOut) {
          from = 255;
          to = 0;
        }
        node.opacity != from && (node.opacity = from);
        return cc.tween(node).to(time, {
          opacity: to
        }, {
          easing: easeType
        });
      };
      PanelEffectFadeHandler.prototype.onOpenComplete = function() {
        this.option = null;
        this.excutor = null;
        PanelEffectUtil_1.PanelEffectUtil.Instance.next();
      };
      PanelEffectFadeHandler.prototype.onCloseComplete = function() {
        this.excutor && this.excutor(this.option);
        var node = this.option.node;
        node && node.isValid && 255 != node.opacity && (node.opacity = 255);
        this.option = null;
        this.excutor = null;
        PanelEffectUtil_1.PanelEffectUtil.Instance.next();
      };
      return PanelEffectFadeHandler;
    }();
    exports.PanelEffectFadeHandler = PanelEffectFadeHandler;
    cc._RF.pop();
  }, {
    "../LayerManager": "LayerManager",
    "./PanelEffectUtil": "PanelEffectUtil"
  } ],
  PanelEffectMoveHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7d9fbQaojVCiKNqBpUb8wzz", "PanelEffectMoveHandler");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PanelEffectMoveHandler = void 0;
    var LayerManager_1 = require("../LayerManager");
    var PanelEffectUtil_1 = require("./PanelEffectUtil");
    var PanelEffectMoveHandler = function() {
      function PanelEffectMoveHandler() {
        this.widgetReset = false;
      }
      PanelEffectMoveHandler.prototype.open = function() {
        this.excutor(this.option);
        cc.Tween.stopAllByTarget(this.option.node);
        this.doMove().call(this.onOpenComplete, this).start();
      };
      PanelEffectMoveHandler.prototype.close = function() {
        cc.Tween.stopAllByTarget(this.option.node);
        this.doMove().call(this.onCloseComplete, this).start();
      };
      PanelEffectMoveHandler.prototype.doMove = function() {
        var node = this.option.node;
        var from;
        var to;
        var time = .5;
        var easeType;
        var effectType;
        var parent = node.parent;
        var widget = node.getComponent(cc.Widget);
        if (widget && widget.enabled) {
          widget.updateAlignment();
          widget.enabled = false;
          this.widgetReset = true;
        }
        if (this.effectOperation == PanelEffectUtil_1.PanelEffectOperation.open) {
          effectType = this.option.openEffect;
          easeType = cc.easing.cubicInOut;
          to = this.option.initPosition;
        } else {
          effectType = this.option.closeEffect;
          easeType = cc.easing.cubicIn;
          to = this.option.node.position;
        }
        from = effectType == LayerManager_1.PanelEffectType.movebottom ? new cc.Vec3(to.x, to.y - (node.height + (parent.height - node.height) / 2 + to.y)) : effectType == LayerManager_1.PanelEffectType.movetop ? new cc.Vec3(to.x, to.y + (node.height + (parent.height - node.height) / 2 - to.y)) : effectType == LayerManager_1.PanelEffectType.moveright ? new cc.Vec3(to.x + (node.width + (parent.width - node.width) / 2 - to.x), to.y) : new cc.Vec3(to.x - (node.width + (parent.width - node.width) / 2 + to.x), to.y);
        if (this.effectOperation == PanelEffectUtil_1.PanelEffectOperation.close) {
          var temp = from;
          from = to;
          to = temp;
        }
        node.position.x == from.x && node.position.y == from.y || (node.position = from);
        return cc.tween(node).to(time, {
          position: to
        }, {
          easing: easeType
        });
      };
      PanelEffectMoveHandler.prototype.onOpenComplete = function() {
        if (this.widgetReset && this.option.node) {
          var widget = this.option.node.getComponent(cc.Widget);
          if (widget && !widget.enabled) {
            widget.enabled = true;
            widget.updateAlignment();
          }
        }
        this.option = null;
        this.excutor = null;
        PanelEffectUtil_1.PanelEffectUtil.Instance.next();
      };
      PanelEffectMoveHandler.prototype.onCloseComplete = function() {
        var node = this.option.node;
        if (node && node.isValid) if (this.widgetReset) {
          var widget = this.option.node.getComponent(cc.Widget);
          if (widget && !widget.enabled) {
            widget.enabled = true;
            widget.updateAlignment();
          }
        } else node.position = this.option.initPosition;
        this.excutor && this.excutor(this.option);
        this.option = null;
        this.excutor = null;
        PanelEffectUtil_1.PanelEffectUtil.Instance.next();
      };
      return PanelEffectMoveHandler;
    }();
    exports.PanelEffectMoveHandler = PanelEffectMoveHandler;
    cc._RF.pop();
  }, {
    "../LayerManager": "LayerManager",
    "./PanelEffectUtil": "PanelEffectUtil"
  } ],
  PanelEffectScaleHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1e1971dgHVLoLt0GuUi+oZV", "PanelEffectScaleHandler");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PanelEffectScaleHandler = void 0;
    var LayerManager_1 = require("../LayerManager");
    var PanelEffectUtil_1 = require("./PanelEffectUtil");
    var PanelEffectScaleHandler = function() {
      function PanelEffectScaleHandler() {}
      PanelEffectScaleHandler.prototype.open = function() {
        this.excutor(this.option);
        cc.Tween.stopAllByTarget(this.option.node);
        this.doScale().call(this.onOpenComplete, this).start();
      };
      PanelEffectScaleHandler.prototype.close = function() {
        cc.Tween.stopAllByTarget(this.option.node);
        this.doScale().call(this.onCloseComplete, this).start();
      };
      PanelEffectScaleHandler.prototype.doScale = function() {
        var node = this.option.node;
        var effect = this.effectOperation == PanelEffectUtil_1.PanelEffectOperation.open ? this.option.openEffect : this.option.closeEffect;
        var from = 1;
        var to = 0;
        var time = .35;
        var easeType = cc.easing.backIn;
        if (effect == LayerManager_1.PanelEffectType.scaleUp) {
          from = .4;
          to = 1;
          easeType = cc.easing.backOut;
        } else if (effect == LayerManager_1.PanelEffectType.scaleDown) {
          from = 1;
          to = .6;
        }
        node.scaleX == from && node.scaleY == from || (node.scale = from);
        return cc.tween(node).to(time, {
          scale: to
        }, {
          easing: easeType
        });
      };
      PanelEffectScaleHandler.prototype.onOpenComplete = function() {
        this.option = null;
        this.excutor = null;
        PanelEffectUtil_1.PanelEffectUtil.Instance.next();
      };
      PanelEffectScaleHandler.prototype.onCloseComplete = function() {
        this.excutor && this.excutor(this.option);
        var node = this.option.node;
        node && node.isValid && (1 == node.scaleX && 1 == node.scaleY || (node.scale = 1));
        this.option = null;
        this.excutor = null;
        PanelEffectUtil_1.PanelEffectUtil.Instance.next();
      };
      return PanelEffectScaleHandler;
    }();
    exports.PanelEffectScaleHandler = PanelEffectScaleHandler;
    cc._RF.pop();
  }, {
    "../LayerManager": "LayerManager",
    "./PanelEffectUtil": "PanelEffectUtil"
  } ],
  PanelEffectSlideHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "16d71xHRTBDYY3oFsZYM01O", "PanelEffectSlideHandler");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PanelEffectSlideHandler = void 0;
    var LayerManager_1 = require("../LayerManager");
    var PanelEffectUtil_1 = require("./PanelEffectUtil");
    var PanelEffectSlideHandler = function() {
      function PanelEffectSlideHandler() {
        this.duration = .8;
        this.widgetReset = false;
      }
      PanelEffectSlideHandler.prototype.open = function() {
        this.option.node && cc.Tween.stopAllByTarget(this.option.node);
        var closePrefabsWhenAdded = this.option.closeUIWhenAdded;
        closePrefabsWhenAdded && (this.option.closeUIWhenAdded = null);
        this.excutor(this.option);
        if (closePrefabsWhenAdded) {
          this.option.closeUIWhenAdded = closePrefabsWhenAdded;
          if (closePrefabsWhenAdded.length > 0) {
            var closeNode = LayerManager_1.LayerManager.Instance.getChildByUIDefine(closePrefabsWhenAdded[0]);
            if (closeNode) {
              cc.Tween.stopAllByTarget(closeNode);
              this.doMoveRelateObject(closeNode);
            }
          } else console.log("\u4f7f\u7528slide\u6253\u5f00\u6548\u679c\u5fc5\u987b\u6307\u5b9a\u5173\u95ed\u7684\u754c\u9762:" + this.option.node.name);
        }
        this.doMove().call(this.onOpenComplete, this).start();
      };
      PanelEffectSlideHandler.prototype.close = function() {
        this.option.node && cc.Tween.stopAllByTarget(this.option.node);
        this.doMove().call(this.onCloseComplete, this).start();
      };
      PanelEffectSlideHandler.prototype.doMove = function() {
        var node = this.option.node;
        var from;
        var to;
        var time = .5;
        var easeType = cc.easing.cubicInOut;
        var effectType;
        var parent = node.parent;
        var widget = node.getComponent(cc.Widget);
        if (widget && widget.enabled) {
          widget.updateAlignment();
          widget.enabled = false;
          this.widgetReset = true;
        }
        if (this.effectOperation == PanelEffectUtil_1.PanelEffectOperation.open) {
          effectType = this.option.openEffect;
          to = this.option.initPosition;
        } else {
          effectType = this.option.closeEffect;
          to = this.option.node.position;
        }
        from = effectType == LayerManager_1.PanelEffectType.slidebottom ? new cc.Vec3(to.x, to.y - (node.height + (parent.height - node.height) / 2 + to.y)) : effectType == LayerManager_1.PanelEffectType.slidetop ? new cc.Vec3(to.x, to.y + (node.height + (parent.height - node.height) / 2 - to.y)) : effectType == LayerManager_1.PanelEffectType.slideright ? new cc.Vec3(to.x + (node.width + (parent.width - node.width) / 2 - to.x), to.y) : new cc.Vec3(to.x - (node.width + (parent.width - node.width) / 2 + to.x), to.y);
        if (this.effectOperation == PanelEffectUtil_1.PanelEffectOperation.close) {
          var temp = from;
          from = to;
          to = temp;
        }
        node.position.x == from.x && node.position.y == from.y || (node.position = from);
        return cc.tween(node).to(time, {
          position: to
        }, {
          easing: easeType
        });
      };
      PanelEffectSlideHandler.prototype.doMoveRelateObject = function(node) {
        var from;
        var to;
        var time = this.duration;
        var easeType = cc.easing.cubicInOut;
        var effectType = this.option.openEffect;
        var parent = node.parent;
        from = this.option.node.position;
        to = effectType == LayerManager_1.PanelEffectType.slidetop ? new cc.Vec3(from.x, from.y - (node.height + (parent.height - node.height) / 2 + from.y)) : effectType == LayerManager_1.PanelEffectType.slidebottom ? new cc.Vec3(from.x, from.y + (node.height + (parent.height - node.height) / 2 - from.y)) : effectType == LayerManager_1.PanelEffectType.slideleft ? new cc.Vec3(from.x + (node.width + (parent.width - node.width) / 2 - from.x), from.y) : new cc.Vec3(from.x - (node.width + (parent.width - node.width) / 2 + from.x), from.y);
        node.position.x == from.x && node.position.y == from.y || (node.position = from);
        cc.tween(node).to(time, {
          position: to
        }, {
          easing: easeType
        }).start();
      };
      PanelEffectSlideHandler.prototype.onOpenComplete = function() {
        this.option.closeUIWhenAdded && LayerManager_1.LayerManager.Instance.removeChildrenWithPrefab(this.option.closeUIWhenAdded, true);
        if (this.widgetReset && this.option.node) {
          var widget = this.option.node.getComponent(cc.Widget);
          if (widget && !widget.enabled) {
            widget.enabled = true;
            widget.updateAlignment();
          }
        }
        this.option = null;
        this.excutor = null;
        PanelEffectUtil_1.PanelEffectUtil.Instance.next();
      };
      PanelEffectSlideHandler.prototype.onCloseComplete = function() {
        this.excutor && this.excutor(this.option);
        var node = this.option.node;
        node && node.isValid && (node.position = this.option.initPosition);
        this.option = null;
        this.excutor = null;
        PanelEffectUtil_1.PanelEffectUtil.Instance.next();
      };
      return PanelEffectSlideHandler;
    }();
    exports.PanelEffectSlideHandler = PanelEffectSlideHandler;
    cc._RF.pop();
  }, {
    "../LayerManager": "LayerManager",
    "./PanelEffectUtil": "PanelEffectUtil"
  } ],
  PanelEffectUtil: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c2a03SsLbJHQaWspg1uN2+q", "PanelEffectUtil");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PanelEffectOperation = exports.PanelEffectUtil = void 0;
    var TimerManager_1 = require("../../common/core/TimerManager");
    var LayerManager_1 = require("../LayerManager");
    var PanelEffectBlackFadeInOutHandler_1 = require("./PanelEffectBlackFadeInOutHandler");
    var PanelEffectCustomHandler_1 = require("./PanelEffectCustomHandler");
    var PanelEffectFadeHandler_1 = require("./PanelEffectFadeHandler");
    var PanelEffectMoveHandler_1 = require("./PanelEffectMoveHandler");
    var PanelEffectScaleHandler_1 = require("./PanelEffectScaleHandler");
    var PanelEffectEmptyHandler_1 = require("./PanelEffectEmptyHandler");
    var PanelEffectAnimationHandler_1 = require("./PanelEffectAnimationHandler");
    var PanelEffectUtil = function() {
      function PanelEffectUtil() {
        this.handlers = [];
        this.delayTimerId = 0;
        this.delayStartTime = 0;
      }
      Object.defineProperty(PanelEffectUtil, "Instance", {
        get: function() {
          return PanelEffectUtil.instance;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(PanelEffectUtil.prototype, "currentHandler", {
        get: function() {
          return this.handler;
        },
        set: function(value) {
          null == this.handler && null != value ? LayerManager_1.LayerManager.Instance.interactable = false : null != this.handler && null == value && (LayerManager_1.LayerManager.Instance.interactable = true);
          this.handler = value;
        },
        enumerable: false,
        configurable: true
      });
      PanelEffectUtil.prototype.handlePanelOpenEffect = function(cacher, openExcutor) {
        if (!(cacher.option instanceof LayerManager_1.UIOptionMultiInstance) && this.isEffectPanelOpenning(cacher.uiDefine, true)) return;
        var handler = this.getHandler(cacher.openEffect);
        handler.excutor = openExcutor;
        handler.effectOperation = PanelEffectOperation.open;
        handler.option = cacher;
        this.excuteOpenHandler(handler);
      };
      PanelEffectUtil.prototype.handlePanelCloseEffect = function(cacher, closeExcutor) {
        var handler = this.getHandler(cacher.closeEffect);
        handler.excutor = closeExcutor;
        handler.effectOperation = PanelEffectOperation.close;
        handler.option = cacher;
        this.excuteCloseHandler(handler);
      };
      PanelEffectUtil.prototype.excuteOpenHandler = function(handler) {
        if (null != this.currentHandler) this.handlers.push(handler); else {
          this.currentHandler = handler;
          this.currentHandler.open();
        }
      };
      PanelEffectUtil.prototype.excuteCloseHandler = function(handler) {
        if (null != this.currentHandler) this.handlers.push(handler); else {
          this.currentHandler = handler;
          this.currentHandler.close();
        }
      };
      PanelEffectUtil.prototype.next = function() {
        if (this.delayTimerId > 0 && cc.sys.now() - this.delayStartTime < 250) return;
        if (this.handlers.length > 0) {
          this.delayStartTime = cc.sys.now();
          this.delayTimerId = TimerManager_1.TimerManager.Instance.addCountdown(100, this, this.delayToNext);
        } else this.currentHandler = null;
        LayerManager_1.LayerManager.Instance.updateQueuePanel(300);
      };
      PanelEffectUtil.prototype.delayToNext = function() {
        this.delayTimerId = 0;
        if (this.handlers.length > 0) {
          this.currentHandler = this.handlers.shift();
          if (this.currentHandler.effectOperation == PanelEffectOperation.open) this.currentHandler.open(); else {
            var relateNode = this.currentHandler.option.node;
            if (null != relateNode && relateNode.active) this.currentHandler.close(); else {
              this.currentHandler.excutor = null;
              this.currentHandler.option = null;
              this.next();
            }
          }
        } else this.currentHandler = null;
      };
      PanelEffectUtil.prototype.removeOpenHandler = function(uiDefine) {
        if (this.handlers.length > 0) for (var i = 0, length = this.handlers.length; i < length; i++) {
          var handler = this.handlers[i];
          if (handler.option.uiDefine == uiDefine && handler.effectOperation == PanelEffectOperation.open) {
            this.handlers.splice(i, 1);
            i--;
            length--;
          }
        }
      };
      PanelEffectUtil.prototype.removeOpenHandlerByLayer = function(layer) {
        if (this.handlers.length > 0) for (var i = 0, length = this.handlers.length; i < length; i++) {
          var handler = this.handlers[i];
          if (handler.option.layer == layer && handler.effectOperation == PanelEffectOperation.open) {
            this.handlers.splice(i, 1);
            i--;
            length--;
          }
        }
      };
      PanelEffectUtil.prototype.isEffectPanelProcessing = function(uiDefine, includeWaiting) {
        if (this.currentHandler && this.currentHandler.option && this.currentHandler.option.uiDefine == uiDefine) return true;
        if (includeWaiting && this.handlers.length > 0) for (var i = 0, length = this.handlers.length; i < length; i++) {
          var handler = this.handlers[i];
          if (handler.option.uiDefine == uiDefine) return true;
        }
        return false;
      };
      PanelEffectUtil.prototype.isEffectPanelOpenning = function(uiDefine, includeWaiting) {
        if (this.currentHandler && this.currentHandler.option && this.currentHandler.option.uiDefine == uiDefine) return this.currentHandler.effectOperation == PanelEffectOperation.open;
        if (includeWaiting && this.handlers.length > 0) for (var i = 0, length = this.handlers.length; i < length; i++) {
          var handler = this.handlers[i];
          if (handler.option.uiDefine == uiDefine && handler.effectOperation == PanelEffectOperation.open) return true;
        }
        return false;
      };
      PanelEffectUtil.prototype.isEffectPanelClosing = function(uiDefine) {
        if (this.currentHandler && this.currentHandler.option && this.currentHandler.option.uiDefine == uiDefine) return this.currentHandler.effectOperation == PanelEffectOperation.close;
        return false;
      };
      PanelEffectUtil.prototype.getHandler = function(effectType) {
        var handler = null;
        switch (effectType) {
         case LayerManager_1.PanelEffectType.scaleDown:
         case LayerManager_1.PanelEffectType.scaleUp:
          handler = new PanelEffectScaleHandler_1.PanelEffectScaleHandler();
          break;

         case LayerManager_1.PanelEffectType.movebottom:
         case LayerManager_1.PanelEffectType.moveleft:
         case LayerManager_1.PanelEffectType.moveright:
         case LayerManager_1.PanelEffectType.movetop:
          handler = new PanelEffectMoveHandler_1.PanelEffectMoveHandler();
          break;

         case LayerManager_1.PanelEffectType.slideleft:
         case LayerManager_1.PanelEffectType.slideright:
         case LayerManager_1.PanelEffectType.slidetop:
         case LayerManager_1.PanelEffectType.slidebottom:
          break;

         case LayerManager_1.PanelEffectType.alphaFadeIn:
         case LayerManager_1.PanelEffectType.alphaFadeOut:
          handler = new PanelEffectFadeHandler_1.PanelEffectFadeHandler();
          break;

         case LayerManager_1.PanelEffectType.blackFadeInOut:
          handler = new PanelEffectBlackFadeInOutHandler_1.PanelEffectBlackFadeInOutHandler();
          break;

         case LayerManager_1.PanelEffectType.custom:
          handler = new PanelEffectCustomHandler_1.PanelEffectCustomHandler();
          break;

         case LayerManager_1.PanelEffectType.empty:
          handler = new PanelEffectEmptyHandler_1.PanelEffectEmptyHandler();
          break;

         case LayerManager_1.PanelEffectType.animation:
          handler = new PanelEffectAnimationHandler_1.PanelEffectAnimationHandler();
        }
        return handler;
      };
      PanelEffectUtil.instance = new PanelEffectUtil();
      return PanelEffectUtil;
    }();
    exports.PanelEffectUtil = PanelEffectUtil;
    var PanelEffectOperation;
    (function(PanelEffectOperation) {
      PanelEffectOperation[PanelEffectOperation["open"] = 0] = "open";
      PanelEffectOperation[PanelEffectOperation["close"] = 1] = "close";
    })(PanelEffectOperation = exports.PanelEffectOperation || (exports.PanelEffectOperation = {}));
    cc._RF.pop();
  }, {
    "../../common/core/TimerManager": "TimerManager",
    "../LayerManager": "LayerManager",
    "./PanelEffectAnimationHandler": "PanelEffectAnimationHandler",
    "./PanelEffectBlackFadeInOutHandler": "PanelEffectBlackFadeInOutHandler",
    "./PanelEffectCustomHandler": "PanelEffectCustomHandler",
    "./PanelEffectEmptyHandler": "PanelEffectEmptyHandler",
    "./PanelEffectFadeHandler": "PanelEffectFadeHandler",
    "./PanelEffectMoveHandler": "PanelEffectMoveHandler",
    "./PanelEffectScaleHandler": "PanelEffectScaleHandler"
  } ],
  PikaqiuSkillHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "065f97TfKVB6LYwFQGuRbO/", "PikaqiuSkillHandler");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AudioName_1 = require("../../common/init/AudioName");
    var GameCommonRes_1 = require("../../GameCommonRes");
    var AudioManager_1 = require("../../manager/AudioManager");
    var PoolManager_1 = require("../../manager/PoolManager");
    var EffectImage_1 = require("../component/EffectImage");
    var ZooAnimal_1 = require("./ZooAnimal");
    var PikaqiuSkillHandler = function() {
      function PikaqiuSkillHandler(pikaqiu, animals, layer) {
        this.pikaqiu = null;
        this.animals = [];
        this.deadAnimal = null;
        this.layer = null;
        this.role_id = 0;
        this.pikaqiu_value = null;
        this.animal_values = [];
        this.playingEffects = [];
        this.deadFunc = null;
        this.completeFunc = null;
        this.pikaqiu = pikaqiu;
        this.animals = animals;
        this.layer = layer;
        this.excute();
      }
      PikaqiuSkillHandler.prototype.excute = function() {
        var _this = this;
        var animal = this.pikaqiu;
        var animalPoint = animal.node.convertToWorldSpaceAR(cc.v2(0, 0));
        animal.setAnimalStaticImage(GameCommonRes_1.default.Instance.pikaqiuLastSpriteFrame);
        this.setAnimalState(animal, animalPoint);
        var effect1 = this.createPiKaQiuEffect(animal);
        AudioManager_1.AudioManager.Instance.playEffect(AudioName_1.AudioName.RESOURCES_AUDIO_ZOO_PIKAQIU);
        var count = this.animals.length;
        count > 0 ? this.animals.forEach(function(animal, i) {
          cc.tween(animal.node).delay(.1 * i + .3).call(function() {
            return _this.setAnimalLightn(animal);
          }).start();
        }) : cc.tween(animal.node).delay(.5).call(function() {
          return _this.handlerPikaqiuDead();
        }).delay(.2).call(function() {
          return _this.effectShowComplete();
        }).start();
      };
      PikaqiuSkillHandler.prototype.setAnimalLightn = function(animal) {
        var _this = this;
        var effect1 = this.playingEffects[0];
        var animalPoint = animal.node.convertToWorldSpaceAR(cc.v2(0, 0));
        this.setAnimalState(animal, animalPoint);
        var effect2 = this.createPiKaQiuEffect(animal);
        var effect3 = this.createPiKaQiuLightn(effect1, effect2);
        effect2.node.scale = 0;
        effect3.node.scaleX = 0;
        cc.tween(effect3.node).to(.2, {
          scaleX: 1
        }).call(function() {
          return _this.showLightnEffect(effect2);
        }).delay(1.3).call(function() {
          return _this.handleAnimalDead(animal);
        }).delay(.2).call(function() {
          return _this.hideLightnEffect(effect2);
        }).to(.2, {
          scaleX: 0
        }).call(function() {
          return _this.stopLightEffect(effect3);
        }).start();
      };
      PikaqiuSkillHandler.prototype.showLightnEffect = function(effect) {
        cc.tween(effect.node).to(.1, {
          scale: 1
        }).start();
      };
      PikaqiuSkillHandler.prototype.hideLightnEffect = function(effect) {
        var _this = this;
        cc.tween(effect.node).to(.1, {
          scale: 0
        }).call(function() {
          return _this.stopLightEffect(effect);
        }).start();
      };
      PikaqiuSkillHandler.prototype.stopLightEffect = function(effect) {
        effect.node.parent && effect.node.removeFromParent();
        effect.stop();
      };
      PikaqiuSkillHandler.prototype.handleAnimalDead = function(animal) {
        var _this = this;
        var index = this.animals.indexOf(animal);
        index > -1 && this.animals.splice(index, 1);
        this.deadAnimal = animal;
        this.deadFunc && this.deadFunc();
        0 === this.animals.length && cc.tween(this.pikaqiu.node).delay(.2).call(function() {
          return _this.handlerPikaqiuDead();
        }).delay(.2).call(function() {
          return _this.effectShowComplete();
        }).start();
      };
      PikaqiuSkillHandler.prototype.handlerPikaqiuDead = function() {
        var _this = this;
        if (this.playingEffects.length > 0) {
          var effectImage_1 = this.playingEffects[0];
          cc.tween(effectImage_1.node).to(.1, {
            scale: 0
          }).call(function() {
            return _this.stopLightEffect(effectImage_1);
          }).start();
        }
        if (this.pikaqiu) {
          this.deadAnimal = this.pikaqiu;
          this.pikaqiu = null;
          this.deadFunc && this.deadFunc();
        }
      };
      PikaqiuSkillHandler.prototype.effectShowComplete = function() {
        this.completeFunc && this.completeFunc();
      };
      PikaqiuSkillHandler.prototype.setAnimalState = function(animal, worldPos) {
        animal.dead();
        var localPos = this.layer.convertToNodeSpaceAR(worldPos);
        animal.node.setPosition(localPos);
        animal.node.parent = this.layer;
      };
      PikaqiuSkillHandler.prototype.createPiKaQiuEffect = function(animal) {
        var effectImage = PoolManager_1.PoolManager.getInstance().pop(EffectImage_1.default, function() {
          return EffectImage_1.default.createEffectImage(EffectImage_1.default.ballSize.width, EffectImage_1.default.ballSize.height);
        });
        var dir = animal.getDirection();
        if (effectImage) {
          effectImage.init(1);
          effectImage.node.setAnchorPoint(.5, .5);
          var offsetX = dir === ZooAnimal_1.AnimalDirection.left ? -animal.node.anchorX * animal.node.width : animal.node.anchorX * animal.node.width - animal.node.width;
          var x = offsetX + animal.node.x + animal.node.width / 2;
          var y = animal.node.y + animal.node.anchorY * animal.node.height - animal.node.height / 2;
          effectImage.node.setPosition(x, y);
          effectImage.play(GameCommonRes_1.default.Instance.pikaqiuAnimationClips[1]);
          this.playingEffects.push(effectImage);
          effectImage.node.parent = this.layer;
          effectImage.node.setSiblingIndex(animal.node.getSiblingIndex());
        }
        return effectImage;
      };
      PikaqiuSkillHandler.prototype.createPiKaQiuLightn = function(effect1, effect2) {
        var effectSize = EffectImage_1.default.lightSize;
        var effectImage = PoolManager_1.PoolManager.getInstance().pop(EffectImage_1.default, function() {
          return EffectImage_1.default.createEffectImage(effectSize.width, effectSize.height);
        });
        if (effectImage) {
          effectImage.init(2);
          var dx = effect1.node.x - effect2.node.x;
          var dy = effect1.node.y - effect2.node.y;
          var dist = Math.sqrt(dx * dx + dy * dy);
          var angle = Math.atan2(effect2.node.y - effect1.node.y, effect2.node.x - effect1.node.x) * (180 / Math.PI);
          effectImage.node.setAnchorPoint(80 / effectSize.width, 180 / effectSize.height);
          effectImage.node.setPosition(effect1.node.getPosition());
          effectImage.node.angle = angle;
          var originalWidth = effectSize.width;
          var targetWidth = dist + originalWidth * effectImage.node.anchorX + 100;
          var sprite = effectImage.node.getComponent(cc.Sprite);
          if (sprite) {
            sprite.sizeMode = cc.Sprite.SizeMode.CUSTOM;
            effectImage.node.width = targetWidth;
          } else console.warn("EffectImage\u8282\u70b9\u4e0a\u6ca1\u6709\u627e\u5230Sprite\u7ec4\u4ef6");
          effectImage.play(GameCommonRes_1.default.Instance.pikaqiuAnimationClips[0]);
          this.playingEffects.push(effectImage);
          effectImage.node.parent = this.layer;
          effectImage.node.setSiblingIndex(effect1.node.getSiblingIndex());
        }
        return effectImage;
      };
      PikaqiuSkillHandler.prototype.recycle = function() {
        this.layer = null;
        this.pikaqiu = null;
        this.animals = null;
        this.deadAnimal = null;
        this.role_id = 0;
        this.pikaqiu_value = null;
        this.animal_values = null;
        this.recycleAllEffects();
      };
      PikaqiuSkillHandler.prototype.recycleAllEffects = function() {
        var _this = this;
        if (0 === this.playingEffects.length) return;
        this.playingEffects.forEach(function(e) {
          return _this.resetEffectImage(e);
        });
        PoolManager_1.PoolManager.getInstance().pushArray(this.playingEffects);
        this.playingEffects.length = 0;
      };
      PikaqiuSkillHandler.prototype.resetEffectImage = function(effectImage) {
        if (effectImage) {
          effectImage.stop();
          effectImage.node.parent && effectImage.node.removeFromParent();
          cc.Tween.stopAllByTarget(effectImage.node);
          effectImage.reset();
        }
      };
      return PikaqiuSkillHandler;
    }();
    exports.default = PikaqiuSkillHandler;
    cc._RF.pop();
  }, {
    "../../GameCommonRes": "GameCommonRes",
    "../../common/init/AudioName": "AudioName",
    "../../manager/AudioManager": "AudioManager",
    "../../manager/PoolManager": "PoolManager",
    "../component/EffectImage": "EffectImage",
    "./ZooAnimal": "ZooAnimal"
  } ],
  PlayerHead: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "10de4uqWxtITbS9UDHwQtZh", "PlayerHead");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimalModel_1 = require("../../model/AnimalModel");
    var LoginModel_1 = require("../../model/LoginModel");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var WinText_1 = require("./WinText");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var PlayerHead = function(_super) {
      __extends(PlayerHead, _super);
      function PlayerHead() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.spriteBg = null;
        _this.spriteHead = null;
        _this.labelName = null;
        _this.winText = null;
        _this._role_id = 0;
        _this.fadeTween = null;
        return _this;
      }
      Object.defineProperty(PlayerHead.prototype, "role_id", {
        get: function() {
          return this._role_id;
        },
        enumerable: false,
        configurable: true
      });
      PlayerHead.prototype.onLoad = function() {
        this.node.children.forEach(function(child) {
          return child.pauseSystemEvents(true);
        });
        this.labelName.string = "";
        this.winText.node.active && (this.winText.node.active = false);
        this.addHeadMask();
        this.drawOuterCircle(cc.Color.WHITE);
        this.spriteBg.node.opacity = 0;
      };
      PlayerHead.prototype.addHeadMask = function() {
        var maskNode = new cc.Node("headMask");
        var mask = maskNode.addComponent(cc.Mask);
        mask.type = cc.Mask.Type.ELLIPSE;
        maskNode.width = this.spriteHead.node.width;
        maskNode.height = this.spriteHead.node.height;
        maskNode.setPosition(this.spriteHead.node.position);
        maskNode.parent = this.node;
        this.spriteHead.node.parent = maskNode;
      };
      PlayerHead.prototype.setColor = function(color, index) {
        var _a, _b;
        this.drawOuterCircle("number" === typeof color ? new cc.Color().fromHEX(color.toString(16).padStart(6, "0")) : color);
        var headBgs = null === (_b = null === (_a = AnimalModel_1.AnimalModel.Instance) || void 0 === _a ? void 0 : _a.res) || void 0 === _b ? void 0 : _b.headBgs;
        headBgs && headBgs.length > 0 && (this.spriteBg.spriteFrame = headBgs[index >= 0 && index < headBgs.length ? index : 0]);
      };
      PlayerHead.prototype.drawOuterCircle = function(color) {
        var graphicsNode = this.node.getChildByName("circleGraphics") || new cc.Node("circleGraphics");
        if (!graphicsNode.parent) {
          graphicsNode.parent = this.node;
          this.labelName.node.setSiblingIndex(graphicsNode.getSiblingIndex() + 1);
        }
        var graphics = graphicsNode.getComponent(cc.Graphics) || graphicsNode.addComponent(cc.Graphics);
        graphics.clear();
        var radius = this.spriteHead.node.width / 2 + 3;
        graphics.lineWidth = 6;
        graphics.strokeColor = color;
        graphics.circle(0, 0, radius);
        graphics.stroke();
      };
      PlayerHead.prototype.updateView = function(value) {
        var RES = AnimalModel_1.AnimalModel.Instance.res;
        if (value) {
          var spriteFrame = RES.DEFAULT_HEAD;
          this.spriteHead.spriteFrame = spriteFrame;
          this.labelName.string = value.name;
          this._role_id = value.role_id;
        } else {
          this.spriteHead.spriteFrame = RES.DEFAULT_HEAD;
          this.labelName.string = "";
          this._role_id = 0;
          this.winText.node.active && (this.winText.node.active = false);
        }
      };
      PlayerHead.prototype.showWinText = function(text) {
        var _a;
        this.winText.node.active || (this.winText.node.active = true);
        this.winText.node.parent && this.winText.node.setSiblingIndex(-1);
        null === (_a = this.winText) || void 0 === _a ? void 0 : _a.updateText(text);
      };
      PlayerHead.prototype.fade = function() {
        var _this = this;
        if (this.fadeTween) return;
        var node = this.spriteBg.node;
        this.fadeTween = cc.tween(node).to(.3, {
          opacity: 255
        }).to(.3, {
          opacity: 0
        }).call(function() {
          return _this.fadeComplete();
        }).start();
      };
      PlayerHead.prototype.fadeComplete = function() {
        this.fadeTween = null;
      };
      PlayerHead.prototype.onDestroy = function() {
        this.fadeTween = null;
      };
      PlayerHead.prototype.getGlobalAnchor = function() {
        return this.spriteHead.node.convertToWorldSpaceAR(cc.v2(0, 0));
      };
      __decorate([ property(cc.Sprite) ], PlayerHead.prototype, "spriteBg", void 0);
      __decorate([ property(cc.Sprite) ], PlayerHead.prototype, "spriteHead", void 0);
      __decorate([ property(cc.Label) ], PlayerHead.prototype, "labelName", void 0);
      __decorate([ property(WinText_1.default) ], PlayerHead.prototype, "winText", void 0);
      PlayerHead = __decorate([ ccclass ], PlayerHead);
      return PlayerHead;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = PlayerHead;
    cc._RF.pop();
  }, {
    "../../model/AnimalModel": "AnimalModel",
    "../../model/LoginModel": "LoginModel",
    "./../base/ModelMessageCarer": "ModelMessageCarer",
    "./WinText": "WinText"
  } ],
  PoolManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "49362RmNFpAeLbdS0RineOq", "PoolManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PoolManager = void 0;
    var PoolManager = function() {
      function PoolManager() {
        this.dict = {};
        this.dictCounter = {};
        this.resetHandlerDict = {};
      }
      PoolManager.getInstance = function() {
        this.instance || (this.instance = new PoolManager());
        return this.instance;
      };
      PoolManager.prototype.registerResetHandler = function(clazz, handler) {
        var className = this.getClassName(clazz);
        this.resetHandlerDict[className] = handler;
      };
      PoolManager.prototype.unregisterResetHandler = function(clazz) {
        var className = this.getClassName(clazz);
        delete this.resetHandlerDict[className];
      };
      PoolManager.prototype.pop = function(clazz, factory) {
        var className = this.getClassName(clazz);
        var list = this.dict[className] || (this.dict[className] = []);
        if (list.length > 0) {
          var obj = list.pop();
          "resetObject" in obj ? obj.resetObject() : this.resetHandlerDict[className] && this.resetHandlerDict[className](obj);
          return obj;
        }
        true;
        this.recordCounter(className);
        return factory();
      };
      PoolManager.prototype.popArray = function(clazz, count) {
        var arr = [];
        for (var i = 0; i < count; i++) arr.push(this.pop(clazz, function() {
          return new clazz();
        }));
        return arr;
      };
      PoolManager.prototype.push = function(obj) {
        if (!obj) return;
        var className = this.getClassName(obj.constructor);
        var list = this.dict[className] || (this.dict[className] = []);
        if (true, -1 !== list.indexOf(obj)) throw new Error("\u5bf9\u8c61\u6c60\u91cd\u590d push\uff1a" + className);
        list.push(obj);
      };
      PoolManager.prototype.pushStrictly = function(obj) {
        if (!obj) return;
        var className = this.getClassName(obj.constructor);
        var list = this.dict[className] || (this.dict[className] = []);
        -1 === list.indexOf(obj) && list.push(obj);
      };
      PoolManager.prototype.pushArray = function(list) {
        if (!list || 0 === list.length) return;
        var className = this.getClassName(list[0].constructor);
        var pool = this.dict[className] || (this.dict[className] = []);
        pool.push.apply(pool, list);
      };
      PoolManager.prototype.pushArrayStrictly = function(list) {
        var _this = this;
        if (!list || 0 === list.length) return;
        list.forEach(function(obj) {
          return _this.pushStrictly(obj);
        });
      };
      PoolManager.prototype.clear = function(clazz, keep) {
        void 0 === keep && (keep = 0);
        var className = this.getClassName(clazz);
        var list = this.dict[className];
        list && list.length > keep && (list.length = keep);
      };
      PoolManager.prototype.getNumInstance = function(clazz) {
        var className = this.getClassName(clazz);
        var list = this.dict[className];
        return list ? list.length : 0;
      };
      PoolManager.prototype.toString = function() {
        return Object.entries(this.dictCounter).map(function(_a) {
          var cls = _a[0], count = _a[1];
          return cls + ": " + count;
        }).join("\n");
      };
      PoolManager.prototype.recordCounter = function(className) {
        this.dictCounter[className] ? this.dictCounter[className]++ : this.dictCounter[className] = 1;
      };
      PoolManager.prototype.getClassName = function(clazz) {
        return clazz.name || Object.prototype.toString.call(clazz);
      };
      PoolManager.instance = null;
      return PoolManager;
    }();
    exports.PoolManager = PoolManager;
    cc._RF.pop();
  }, {} ],
  ProtoTransferBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "156f8/4K5hMoJjZyIV8rTgf", "ProtoTransferBase");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProtoTransferBase = void 0;
    var ProtoTransferBase = function() {
      function ProtoTransferBase() {}
      Object.defineProperty(ProtoTransferBase.prototype, "enableDecodeEmptyBuff", {
        get: function() {
          return true;
        },
        enumerable: false,
        configurable: true
      });
      ProtoTransferBase.prototype.decode = function(cmd, buff) {
        var toc = this.getTocClass(cmd);
        if (null == toc) return null;
        try {
          var value = toc.decode(protobuf.Reader.create(null !== buff && void 0 !== buff ? buff : []));
          return value;
        } catch (e) {
          console.error(e);
        }
        return null;
      };
      ProtoTransferBase.prototype.encode = function(cmd, data) {
        if (null == data) return null;
        var tos = this.getTosClass(cmd);
        if (null == tos) return null;
        var message = new tos(data);
        return tos.encode(message, protobuf.Writer.create()).finish();
      };
      ProtoTransferBase.prototype.getTocClass = function(cmd) {
        var tocName = "m_" + cmd + "_toc";
        return this.getMessage(tocName);
      };
      ProtoTransferBase.prototype.getTosClass = function(cmd) {
        var tosName = "m_" + cmd + "_tos";
        return this.getMessage(tosName);
      };
      ProtoTransferBase.prototype.getMessage = function(name) {
        return cc.js.getClassByName(name);
      };
      return ProtoTransferBase;
    }();
    exports.ProtoTransferBase = ProtoTransferBase;
    cc._RF.pop();
  }, {} ],
  ProtoTransfer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a13bcDmqeJFIqdvR08x7tpI", "ProtoTransfer");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ProtoTransfer = void 0;
    var ProtoTransferBase_1 = require("../common/net/ProtoTransferBase");
    var proto = require("./proto");
    var ProtoTransfer = function(_super) {
      __extends(ProtoTransfer, _super);
      function ProtoTransfer() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ProtoTransfer.prototype.getMessage = function(name) {
        return proto[name];
      };
      return ProtoTransfer;
    }(ProtoTransferBase_1.ProtoTransferBase);
    exports.ProtoTransfer = ProtoTransfer;
    cc._RF.pop();
  }, {
    "../common/net/ProtoTransferBase": "ProtoTransferBase",
    "./proto": "proto"
  } ],
  QRCodeGenerator: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b45e4ebfjVLqJjkGXua58iU", "QRCodeGenerator");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var QRCodeGenerator = function(_super) {
      __extends(QRCodeGenerator, _super);
      function QRCodeGenerator() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      QRCodeGenerator.prototype.generateQRCode = function(text) {
        var qr = qrcode(0, "H");
        qr.addData(text);
        qr.make();
        var moduleCount = qr.getModuleCount();
        var size = this.node.width;
        var blockSize = size / moduleCount;
        var graphics = this.node.getComponent(cc.Graphics);
        if (null == graphics) {
          graphics = this.node.addComponent(cc.Graphics);
          graphics.fillColor = cc.Color.BLACK;
        }
        for (var row = 0; row < moduleCount; row++) for (var col = 0; col < moduleCount; col++) if (qr.isDark(row, col)) {
          var x = col * blockSize - size / 2;
          var y = size / 2 - (row + 1) * blockSize;
          graphics.rect(x, y, blockSize, blockSize);
          graphics.fill();
        }
      };
      QRCodeGenerator = __decorate([ ccclass ], QRCodeGenerator);
      return QRCodeGenerator;
    }(cc.Component);
    exports.default = QRCodeGenerator;
    cc._RF.pop();
  }, {} ],
  RankModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "88a23p+B7xNm7VqSax/E4jP", "RankModel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RankModel = void 0;
    var ModelBase_1 = require("../common/core/ModelBase");
    var ModelMessageType_1 = require("../common/init/ModelMessageType");
    var RankModel = function(_super) {
      __extends(RankModel, _super);
      function RankModel() {
        var _this = _super.call(this) || this;
        _this.yestoday_zooRank = [];
        return _this;
      }
      Object.defineProperty(RankModel, "Instance", {
        get: function() {
          null == RankModel.instance && (RankModel.instance = new RankModel());
          return RankModel.instance;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RankModel.prototype, "today_zooRanks", {
        get: function() {
          return this.today_zooRank;
        },
        set: function(info) {
          this.today_zooRank = info;
          this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_TODAY_RANK);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RankModel.prototype, "yestoday_zooRanks", {
        get: function() {
          return this.yestoday_zooRank;
        },
        set: function(info) {
          this.yestoday_zooRank = info;
          this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_YESTODAY_RANK);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RankModel.prototype, "gameRule_zooRanks", {
        get: function() {
          return this.gameRule_zooRank;
        },
        set: function(info) {
          this.gameRule_zooRank = info;
          this.updateModel(ModelMessageType_1.ModelMessageType.ZOO_GAMERULE_RANK);
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(RankModel.prototype, "getZooRankState", {
        get: function() {
          var rank_data = this.gameRule_zooRanks;
          return null != rank_data && rank_data.state;
        },
        enumerable: false,
        configurable: true
      });
      return RankModel;
    }(ModelBase_1.ModelBase);
    exports.RankModel = RankModel;
    cc._RF.pop();
  }, {
    "../common/core/ModelBase": "ModelBase",
    "../common/init/ModelMessageType": "ModelMessageType"
  } ],
  RankModuleCommand: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "67d02YIO3hAwbz96V0uYtiY", "RankModuleCommand");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RankModuleCommand = void 0;
    var RankModuleCommand = function() {
      function RankModuleCommand() {}
      RankModuleCommand.GET_GAME_PROFIT_RANK_SETTING = 4101;
      RankModuleCommand.GET_GAME_PROFIT_RANK = 4102;
      RankModuleCommand.GET_YESTODAY_PROFIT_RANK = 4103;
      return RankModuleCommand;
    }();
    exports.RankModuleCommand = RankModuleCommand;
    cc._RF.pop();
  }, {} ],
  RankModuleController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "473b2vVbllMWLd5q8PxC5EM", "RankModuleController");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RankModuleController = void 0;
    var proto_1 = require("../proto/proto");
    var RankModuleCommand_1 = require("../common/command/RankModuleCommand");
    var ModuleBase_1 = require("../common/core/ModuleBase");
    var NotificationManager_1 = require("../common/core/NotificationManager");
    var ErrorCodeUtil_1 = require("../util/ErrorCodeUtil");
    var RankModel_1 = require("../model/RankModel");
    var RankModuleController = function(_super) {
      __extends(RankModuleController, _super);
      function RankModuleController() {
        return _super.call(this) || this;
      }
      Object.defineProperty(RankModuleController, "Instance", {
        get: function() {
          null == RankModuleController.instance && (RankModuleController.instance = new RankModuleController());
          return RankModuleController.instance;
        },
        enumerable: false,
        configurable: true
      });
      RankModuleController.prototype.init = function() {
        var n = NotificationManager_1.common.NotificationManager.getInstance();
        n.registNotification(RankModuleCommand_1.RankModuleCommand.GET_GAME_PROFIT_RANK_SETTING, this.getGameProfitRankSettingHandler, this);
        n.registNotification(RankModuleCommand_1.RankModuleCommand.GET_GAME_PROFIT_RANK, this.getGameProfitRankHandler, this);
        n.registNotification(RankModuleCommand_1.RankModuleCommand.GET_YESTODAY_PROFIT_RANK, this.getYestodayProfitRankHandler, this);
      };
      RankModuleController.prototype.requestGetGameProfitRankSetting = function(type) {
        var tos = new proto_1.m_4101_tos();
        tos.type = type;
        this.send(RankModuleCommand_1.RankModuleCommand.GET_GAME_PROFIT_RANK_SETTING, tos);
      };
      RankModuleController.prototype.getGameProfitRankSettingHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          RankModel_1.RankModel.Instance.gameRule_zooRanks = toc || null;
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RankModuleCommand_1.RankModuleCommand.GET_GAME_PROFIT_RANK_SETTING, note.errorCode);
      };
      RankModuleController.prototype.requestGetGameProfitRank = function(type, amount) {
        var tos = new proto_1.m_4102_tos();
        tos.type = type;
        tos.amount = amount;
        this.send(RankModuleCommand_1.RankModuleCommand.GET_GAME_PROFIT_RANK, tos);
      };
      RankModuleController.prototype.getGameProfitRankHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          RankModel_1.RankModel.Instance.today_zooRanks = toc || null;
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RankModuleCommand_1.RankModuleCommand.GET_GAME_PROFIT_RANK, note.errorCode);
      };
      RankModuleController.prototype.requestGetYestodayProfitRank = function(type, amount) {
        var tos = new proto_1.m_4103_tos();
        tos.type = type;
        tos.amount = amount;
        this.send(RankModuleCommand_1.RankModuleCommand.GET_YESTODAY_PROFIT_RANK, tos);
      };
      RankModuleController.prototype.getYestodayProfitRankHandler = function(note) {
        if (0 == note.errorCode) {
          var toc = note.toc;
          RankModel_1.RankModel.Instance.yestoday_zooRanks = toc ? toc.info : null;
        } else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RankModuleCommand_1.RankModuleCommand.GET_YESTODAY_PROFIT_RANK, note.errorCode);
      };
      return RankModuleController;
    }(ModuleBase_1.ModuleBase);
    exports.RankModuleController = RankModuleController;
    cc._RF.pop();
  }, {
    "../common/command/RankModuleCommand": "RankModuleCommand",
    "../common/core/ModuleBase": "ModuleBase",
    "../common/core/NotificationManager": "NotificationManager",
    "../model/RankModel": "RankModel",
    "../proto/proto": "proto",
    "../util/ErrorCodeUtil": "ErrorCodeUtil"
  } ],
  RecentRewardItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1746eeYwgZGk70mysb+zPtF", "RecentRewardItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimalModel_1 = require("../../model/AnimalModel");
    var StringUtil_1 = require("../../util/StringUtil");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var HomeHead_1 = require("./HomeHead");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RecentRewardItem = function(_super) {
      __extends(RecentRewardItem, _super);
      function RecentRewardItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.rect_bg = null;
        _this.labelName = null;
        _this.labelTime = null;
        _this.labelBet = null;
        _this.spriteAnimal = null;
        _this.img_coin = null;
        _this.labelWin = null;
        _this.playerHead = null;
        _this.color1 = new cc.Color(76, 46, 46);
        _this.color2 = new cc.Color(38, 50, 62);
        _this.color3 = new cc.Color(2, 61, 76);
        return _this;
      }
      RecentRewardItem.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      RecentRewardItem.prototype.start = function() {};
      RecentRewardItem.prototype.updateView = function(data, itemIndex) {
        var _a;
        var info = data;
        if (info) {
          this.playerHead && this.playerHead.setHeadInfo(info.icon || "", info.vip || 0, true);
          this.labelName.string = info.name || "\u672a\u77e5\u73a9\u5bb6";
          this.labelTime.string = info.time ? StringUtil_1.default.timestampToString(info.time, "MM-DD hh:mm") : "--";
          var animalModel = AnimalModel_1.AnimalModel.Instance;
          if (animalModel) {
            this.labelBet.string = animalModel.dividedMultiple(info.bet_val || 0).toString();
            var win = animalModel.dividedMultiple(info.win || 0);
            this.labelWin.string = win >= 1e4 ? StringUtil_1.default.numberToString(win) : win.toString();
            var animalIcons = null === (_a = animalModel.res) || void 0 === _a ? void 0 : _a.animalIcons;
            animalIcons && info.animal >= 1 && info.animal <= animalIcons.length ? this.spriteAnimal.spriteFrame = animalIcons[info.animal - 1] : console.warn("RecentRewardItem: Invalid animal " + info.animal + " or missing icons");
          }
          if (!this.playerHead.node.active) {
            this.playerHead.node.active = true;
            this.labelName.node.active = true;
            this.labelTime.node.active = true;
            this.labelBet.node.active = true;
            this.labelWin.node.active = true;
            this.spriteAnimal.node.active = true;
            this.img_coin.node.active = true;
          }
        } else if (this.playerHead.node.active) {
          this.playerHead.node.active = false;
          this.labelName.node.active = false;
          this.labelTime.node.active = false;
          this.labelBet.node.active = false;
          this.labelWin.node.active = false;
          this.spriteAnimal.node.active = false;
          this.img_coin.node.active = false;
        }
        this.rect_bg.color = 0 === itemIndex ? this.color1 : itemIndex % 2 === 0 ? this.color2 : this.color3;
      };
      __decorate([ property(cc.Node) ], RecentRewardItem.prototype, "rect_bg", void 0);
      __decorate([ property(cc.Label) ], RecentRewardItem.prototype, "labelName", void 0);
      __decorate([ property(cc.Label) ], RecentRewardItem.prototype, "labelTime", void 0);
      __decorate([ property(cc.Label) ], RecentRewardItem.prototype, "labelBet", void 0);
      __decorate([ property(cc.Sprite) ], RecentRewardItem.prototype, "spriteAnimal", void 0);
      __decorate([ property(cc.Sprite) ], RecentRewardItem.prototype, "img_coin", void 0);
      __decorate([ property(cc.Label) ], RecentRewardItem.prototype, "labelWin", void 0);
      __decorate([ property(HomeHead_1.default) ], RecentRewardItem.prototype, "playerHead", void 0);
      RecentRewardItem = __decorate([ ccclass ], RecentRewardItem);
      return RecentRewardItem;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = RecentRewardItem;
    cc._RF.pop();
  }, {
    "../../model/AnimalModel": "AnimalModel",
    "../../util/StringUtil": "StringUtil",
    "./../base/ModelMessageCarer": "ModelMessageCarer",
    "./HomeHead": "HomeHead"
  } ],
  RedpointModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "99722DFsWRLf4Pziy7cfWZp", "RedpointModel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RedpointModel = exports.RedpointType = void 0;
    var ModelBase_1 = require("../common/core/ModelBase");
    var RedpointType;
    (function(RedpointType) {
      RedpointType[RedpointType["none"] = 0] = "none";
      RedpointType[RedpointType["sign"] = 1] = "sign";
    })(RedpointType = exports.RedpointType || (exports.RedpointType = {}));
    var RedpointModel = function(_super) {
      __extends(RedpointModel, _super);
      function RedpointModel() {
        var _this = _super.call(this) || this;
        _this.redpointDict = new Map();
        _this.redpointMessageDict = new Map();
        _this.init();
        return _this;
      }
      Object.defineProperty(RedpointModel, "Instance", {
        get: function() {
          null == RedpointModel.instance && (RedpointModel.instance = new RedpointModel());
          return RedpointModel.instance;
        },
        enumerable: false,
        configurable: true
      });
      RedpointModel.prototype.init = function() {
        var reg = new RegExp("[^\\d]", "g");
        for (var key in RedpointType) {
          reg.lastIndex = 0;
          if (!reg.test(key)) continue;
          var type = RedpointType[key];
          this.redpointDict.set(type, 0);
          this.redpointMessageDict.set(type, "RedpointType_" + key);
        }
      };
      RedpointModel.prototype.isRedpointMessage = function(type, modelMessageType) {
        return this.redpointMessageDict.has(type) && this.redpointMessageDict.get(type) == modelMessageType;
      };
      RedpointModel.prototype.getRedpointMessage = function(type) {
        return this.redpointMessageDict.get(type);
      };
      RedpointModel.prototype.hasRedpoint = function(type) {
        return this.redpointDict.get(type) > 0;
      };
      RedpointModel.prototype.getRedpointCounter = function(type) {
        return this.redpointDict.get(type);
      };
      RedpointModel.prototype.updateRedpoint = function(type, num) {
        if (this.redpointDict.get(type) == num) return;
        this.redpointDict.set(type, num);
        var msg;
        this.redpointMessageDict.has(type) && (msg = this.redpointMessageDict.get(type));
        msg && this.updateModel(msg);
      };
      RedpointModel.prototype.updateRedpointVisible = function(type, visible) {
        this.updateRedpoint(type, visible ? 1 : 0);
      };
      return RedpointModel;
    }(ModelBase_1.ModelBase);
    exports.RedpointModel = RedpointModel;
    cc._RF.pop();
  }, {
    "../common/core/ModelBase": "ModelBase"
  } ],
  RepeatClicker: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a4634aY6V1NbqUKZ1JEdSC/", "RepeatClicker");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RepeatClicker = function(_super) {
      __extends(RepeatClicker, _super);
      function RepeatClicker() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.mouseDownDuration = 500;
        _this.mouseDownInterval = 100;
        _this.mouseDownIgnoreDuration = 0;
        _this._autoRepeat = true;
        _this.lastMousedownTime = 0;
        _this.timerId = 0;
        _this.fixedDeltaTime = 30;
        _this.duration = 0;
        return _this;
      }
      RepeatClicker_1 = RepeatClicker;
      RepeatClicker.prototype.onLoad = function() {
        this.node.on(cc.Node.EventType.TOUCH_START, this.mouseDownHandler, this);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.touchMoveHandler, this);
        this.node.on(cc.Node.EventType.TOUCH_END, this.mouseUpHandler, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.mouseUpHandler, this);
      };
      RepeatClicker.prototype.start = function() {};
      RepeatClicker.prototype.onDisable = function() {
        this.removeTimer();
      };
      Object.defineProperty(RepeatClicker.prototype, "autoRepeat", {
        get: function() {
          return this._autoRepeat;
        },
        set: function(value) {
          this._autoRepeat = value;
          value || this.removeTimer();
        },
        enumerable: false,
        configurable: true
      });
      RepeatClicker.prototype.stop = function() {
        this.removeTimer();
      };
      RepeatClicker.prototype.mouseUpHandler = function() {
        this.removeTimer();
      };
      RepeatClicker.prototype.mouseDownHandler = function(e) {
        this.duration = 0;
        var location = e.getLocation();
        this.clickStageX = location.x;
        this.clickStageY = location.y;
        this.autoRepeat && this.addTimer();
        if (this.mouseDownIgnoreDuration > 0) {
          var oldTime = this.lastMousedownTime;
          if (cc.sys.now() - oldTime < this.mouseDownIgnoreDuration) return;
        }
        this.lastMousedownTime = cc.sys.now();
        this.dispatchMouseDownEvent();
      };
      RepeatClicker.prototype.touchMoveHandler = function(e) {
        var location = e.getLocation();
        this.clickStageX = location.x;
        this.clickStageY = location.y;
      };
      RepeatClicker.prototype.addTimer = function() {
        0 == this.timerId && (this.timerId = setInterval(this.mousedownInterval.bind(this), this.fixedDeltaTime));
      };
      RepeatClicker.prototype.removeTimer = function() {
        if (this.timerId > 0) {
          clearInterval(this.timerId);
          this.timerId = 0;
        }
      };
      RepeatClicker.prototype.mousedownInterval = function() {
        var lastInterval = 0;
        var nowInterval = 0;
        var lastDuration = this.duration;
        this.duration += this.fixedDeltaTime;
        if (lastDuration < this.mouseDownDuration && this.duration >= this.mouseDownDuration) this.dispatchMouseDownEvent(); else if (lastDuration > this.mouseDownDuration) {
          lastInterval = Math.floor((lastDuration - this.mouseDownDuration) / this.mouseDownInterval);
          nowInterval = Math.floor((this.duration - this.mouseDownDuration) / this.mouseDownInterval);
          lastInterval < nowInterval && this.dispatchMouseDownEvent();
        }
      };
      RepeatClicker.prototype.dispatchMouseDownEvent = function() {
        this.node.hasEventListener(RepeatClicker_1.REPEAT_CLICK) && this.node.emit(RepeatClicker_1.REPEAT_CLICK, this.node);
      };
      RepeatClicker.prototype.onDestroy = function() {
        var _a, _b, _c;
        null === (_a = null === this || void 0 === this ? void 0 : this.node) || void 0 === _a ? void 0 : _a.off(cc.Node.EventType.TOUCH_START, this.mouseDownHandler, this);
        null === (_b = null === this || void 0 === this ? void 0 : this.node) || void 0 === _b ? void 0 : _b.off(cc.Node.EventType.TOUCH_END, this.mouseUpHandler, this);
        null === (_c = null === this || void 0 === this ? void 0 : this.node) || void 0 === _c ? void 0 : _c.off(cc.Node.EventType.TOUCH_CANCEL, this.mouseUpHandler, this);
      };
      var RepeatClicker_1;
      RepeatClicker.REPEAT_CLICK = "repeat_click";
      RepeatClicker = RepeatClicker_1 = __decorate([ ccclass ], RepeatClicker);
      return RepeatClicker;
    }(cc.Component);
    exports.default = RepeatClicker;
    cc._RF.pop();
  }, {} ],
  ResLoadManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bd812v2OWtHZZhYNLJuh7bR", "ResLoadManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ResLoadMode = exports.ResGroup = exports.ResLoadManager = void 0;
    var LayerManager_1 = require("./LayerManager");
    var Delegate_1 = require("./../common/core/Delegate");
    var TimerManager_1 = require("../common/core/TimerManager");
    var ResLoadManager = function() {
      function ResLoadManager() {
        this.onProgress = new Delegate_1.Delegate();
        this.onCompleted = new Delegate_1.Delegate();
        this.loadingGroups = [];
        this.timerId = 0;
      }
      Object.defineProperty(ResLoadManager, "Instance", {
        get: function() {
          return ResLoadManager.instance;
        },
        enumerable: false,
        configurable: true
      });
      ResLoadManager.prototype.loadGroup = function(groupName, groups, progress, completed) {
        true;
        var loadingGroup = this.getGroupLoader(groupName);
        loadingGroup && console.warn("\u5df2\u7ecf\u5b58\u5728\u540c\u540d\u7684\u8d44\u6e90\u7ec4\u6b63\u5728\u52a0\u8f7d\u4e2d\uff1a" + groupName);
        var groupList = Array.isArray(groups) ? groups : [ groups ];
        var group = new ResGroupLoader(groupName, groupList);
        group.onCompleted.on(completed);
        group.onProgress = progress;
        this.loadingGroups.push(group);
        this.addTimer();
        group.loadGroup();
      };
      ResLoadManager.prototype.cancelLoadGroup = function(groupName) {
        var cacelCount = 0;
        for (var i = 0; i < this.loadingGroups.length; i++) {
          var loader = this.loadingGroups[i];
          if (loader.groupName == groupName) {
            cacelCount++;
            loader.clear();
            this.loadingGroups.splice(i--, 1);
          }
        }
        return cacelCount;
      };
      ResLoadManager.prototype.isGroupLoading = function(groupName) {
        return null != this.getGroupLoader(groupName);
      };
      ResLoadManager.prototype.getGroupLoader = function(groupName) {
        for (var i = 0; i < this.loadingGroups.length; i++) {
          var loader = this.loadingGroups[i];
          if (loader.groupName == groupName) return loader;
        }
        return null;
      };
      ResLoadManager.prototype.checkGroupIsLoaded = function(groups) {
        if (null == groups || 0 == groups.length) return true;
        for (var i = 0; i < groups.length; i++) {
          var group = groups[i];
          var bundle = group.bundleName ? cc.assetManager.getBundle(group.bundleName) : cc.assetManager.resources;
          if (null == bundle) return false;
          if (group.jsons && !this.checkBundleAssetsExists(bundle, group.jsons)) return false;
          if (group.texts && !this.checkBundleAssetsExists(bundle, group.texts)) return false;
          if (group.sprites && !this.checkBundleAssetsExists(bundle, group.sprites)) return false;
          if (group.audioClips && !this.checkBundleAssetsExists(bundle, group.audioClips)) return false;
          if (group.prefabs && !this.checkBundleAssetsExists(bundle, group.prefabs)) return false;
          if (group.assets) for (var i_1 = 0; i_1 < group.assets.length; i_1++) if (null == bundle.get(group.assets[i_1].url)) return false;
        }
        return true;
      };
      ResLoadManager.prototype.checkBundleAssetsExists = function(bundle, urls) {
        for (var i = 0; i < urls.length; i++) if (null == bundle.get(urls[i])) return false;
        return true;
      };
      ResLoadManager.prototype.addTimer = function() {
        0 == this.timerId && (this.timerId = TimerManager_1.TimerManager.Instance.addCountdown(1 << 31, this, null, this.timerUpdateHandler, 100));
      };
      ResLoadManager.prototype.removeTimer = function() {
        if (this.timerId > 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.timerId);
          this.timerId = 0;
        }
      };
      ResLoadManager.prototype.timerUpdateHandler = function() {
        for (var i = 0; i < this.loadingGroups.length; i++) {
          var loader = this.loadingGroups[i];
          var progress = loader.getLoadingProgress();
          if (progress.changed) {
            loader.onProgress && loader.onProgress(loader.groupName, progress.finish, progress.total);
            this.onProgress.invoke(progress);
          }
          if (progress.completed) {
            this.loadingGroups.splice(i--, 1);
            if (loader.onCompleted) {
              loader.onCompleted.invoke(loader.groupName);
              loader.clear();
            }
            this.onCompleted.invoke(progress.groupName);
          }
        }
        0 == this.loadingGroups.length && this.removeTimer();
      };
      ResLoadManager.MAX_THREAD_PER_GROUP = 5;
      ResLoadManager.instance = new ResLoadManager();
      return ResLoadManager;
    }();
    exports.ResLoadManager = ResLoadManager;
    var ResGroupLoader = function() {
      function ResGroupLoader(groupName, preloads) {
        this.onCompleted = new Delegate_1.Delegate();
        this.loadingBundleAssetCount = 0;
        this.loadingProgressCounter = [];
        this.finish = 0;
        this.total = 0;
        this.completed = false;
        this.bundleChanged = false;
        this.groupName = groupName;
        this.preloads = preloads;
        this.waitToLoads = preloads.concat();
      }
      ResGroupLoader.prototype.getLoadingProgress = function() {
        var loadingFinish = this.finish;
        var loadingTotal = this.total;
        this.loadingProgressCounter.forEach(function(value, index, array) {
          if (!value) return;
          loadingFinish += value.finish;
          loadingTotal += value.total;
        });
        var changed = null == this.progress || this.progress.finish != loadingFinish || this.progress.total != loadingTotal;
        if (null == this.progress) this.progress = {
          groupName: this.groupName,
          finish: loadingFinish,
          total: loadingTotal,
          changed: changed,
          completed: this.completed
        }; else {
          this.progress.finish = loadingFinish;
          this.progress.total = loadingTotal;
          this.progress.changed = changed;
          this.progress.completed = this.completed;
        }
        return this.progress;
      };
      ResGroupLoader.prototype.loadGroup = function() {
        this.loadingBundle = null;
        this.loadingGroup = null;
        this.loadingBundleAssets = null;
        this.loadNextGroup();
      };
      ResGroupLoader.prototype.clear = function() {
        this.onCompleted.clear();
        this.onProgress = null;
        this.waitToLoads.length > 0 && (this.waitToLoads.length = 0);
        this.loadingBundleAssets && this.loadingBundleAssets.length > 0 && (this.loadingBundleAssets.length = 0);
      };
      ResGroupLoader.prototype.loadNextGroup = function() {
        var _this = this;
        if (this.waitToLoads.length > 0) {
          this.loadingGroup = this.waitToLoads.shift();
          this.loadingBundleAssets = this.generateAssets(this.loadingGroup);
          this.loadingBundleAssetCount = this.loadingBundleAssets.length;
          this.bundleChanged = true;
          if (this.loadingGroup.bundleName) {
            var bundle = cc.assetManager.getBundle(this.loadingGroup.bundleName);
            if (null == bundle) {
              this.total += 1;
              cc.assetManager.loadBundle(this.loadingGroup.bundleName, null, function(error, bundle) {
                _this.finish += 1;
                if (error) {
                  console.log(error);
                  _this.loadGroup();
                } else {
                  _this.loadingBundle = bundle;
                  _this.loadRes();
                }
              });
            } else {
              this.loadingBundle = bundle;
              this.loadRes();
            }
          } else {
            this.loadingBundle = cc.assetManager.resources;
            this.loadRes();
          }
        } else this.completed = true;
      };
      ResGroupLoader.prototype.loadRes = function() {
        if (0 == this.loadingBundleAssetCount && 0 == this.loadingBundleAssets.length) {
          this.loadGroup();
          return;
        }
        if (this.bundleChanged) {
          this.bundleChanged = false;
          var times = ResLoadManager.MAX_THREAD_PER_GROUP;
          while (this.loadingBundleAssets.length > 0) {
            this.loadNextRes();
            if (--times <= 0) break;
          }
        } else this.loadingBundleAssets.length > 0 ? this.loadNextRes() : 0 == this.loadingBundleAssetCount && this.loadGroup();
      };
      ResGroupLoader.prototype.loadNextRes = function() {
        var _this = this;
        if (0 == this.loadingBundleAssets.length) return;
        var asset = this.loadingBundleAssets.shift();
        var loadingIndex = this.loadingProgressCounter.length;
        var doLoad = this.loadingBundle.load.bind(this.loadingBundle);
        this.loadingProgressCounter.push({
          finish: 0,
          total: 0
        });
        asset.mode == ResLoadMode.dir ? doLoad = this.loadingBundle.loadDir.bind(this.loadingBundle) : asset.mode == ResLoadMode.scene && (doLoad = this.loadingBundle.loadScene.bind(this.loadingBundle));
        doLoad(asset.url, asset.type, function(finish, total, item) {
          var progress = _this.loadingProgressCounter[loadingIndex];
          if (progress) {
            progress.total = total;
            progress.finish = finish;
          }
        }, function(error, assets) {
          var progress = _this.loadingProgressCounter[loadingIndex];
          _this.finish += progress.finish;
          _this.total += progress.total;
          _this.loadingProgressCounter[loadingIndex] = null;
          _this.loadingBundleAssetCount--;
          error && console.log(error);
          _this.loadRes();
        });
      };
      ResGroupLoader.prototype.generateAssets = function(res) {
        var assets = [];
        res.scene && assets.push({
          url: res.scene.name,
          type: res.scene.options,
          mode: ResLoadMode.scene
        });
        res.assets && assets.push.apply(assets, res.assets);
        res.prefabs && assets.push.apply(assets, this.getAssets(res.prefabs, cc.Prefab));
        res.sprites && assets.push.apply(assets, this.getAssets(res.sprites, cc.SpriteFrame));
        res.jsons && assets.push.apply(assets, this.getAssets(res.jsons, cc.JsonAsset));
        res.texts && assets.push.apply(assets, this.getAssets(res.texts, cc.TextAsset));
        res.audioClips && assets.push.apply(assets, this.getAssets(res.audioClips, cc.AudioClip));
        return assets;
      };
      ResGroupLoader.prototype.getAssets = function(urls, type) {
        var assets = [];
        for (var i = 0; i < urls.length; i++) assets.push({
          url: urls[i],
          type: type
        });
        return assets;
      };
      return ResGroupLoader;
    }();
    var ResGroup = function() {
      function ResGroup(bundleName) {
        bundleName && (this.bundleName = bundleName);
      }
      ResGroup.prototype.addPrefab = function() {
        var uidefines = [];
        for (var _i = 0; _i < arguments.length; _i++) uidefines[_i] = arguments[_i];
        void 0 === this.prefabs && (this.prefabs = []);
        for (var i = 0; i < uidefines.length; i++) {
          var uiUrl = LayerManager_1.LayerManager.Instance.getUIUrl(uidefines[i]);
          void 0 === this.bundleName && (this.bundleName = uiUrl.bundle);
          this.prefabs.push(uiUrl.url);
        }
      };
      return ResGroup;
    }();
    exports.ResGroup = ResGroup;
    var ResLoadMode;
    (function(ResLoadMode) {
      ResLoadMode[ResLoadMode["asset"] = 0] = "asset";
      ResLoadMode[ResLoadMode["dir"] = 1] = "dir";
      ResLoadMode[ResLoadMode["scene"] = 2] = "scene";
    })(ResLoadMode = exports.ResLoadMode || (exports.ResLoadMode = {}));
    cc._RF.pop();
  }, {
    "../common/core/TimerManager": "TimerManager",
    "./../common/core/Delegate": "Delegate",
    "./LayerManager": "LayerManager"
  } ],
  ResizeWatcher: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "46bd4nG+JZFP7Hwtc2HaX9S", "ResizeWatcher");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ResizeWatcher = function(_super) {
      __extends(ResizeWatcher, _super);
      function ResizeWatcher() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._lastWidth = 0;
        _this._lastHeight = 0;
        return _this;
      }
      ResizeWatcher_1 = ResizeWatcher;
      ResizeWatcher.prototype.start = function() {
        var _this = this;
        this._lastWidth = cc.winSize.width;
        this._lastHeight = cc.winSize.height;
        window.onresize = function() {
          var w = cc.winSize.width;
          var h = cc.winSize.height;
          if (w !== _this._lastWidth || h !== _this._lastHeight) {
            _this._lastWidth = w;
            _this._lastHeight = h;
            _this.node.emit(ResizeWatcher_1.RESIZE_EVENT);
          }
        };
      };
      var ResizeWatcher_1;
      ResizeWatcher.RESIZE_EVENT = "resize";
      ResizeWatcher = ResizeWatcher_1 = __decorate([ ccclass ], ResizeWatcher);
      return ResizeWatcher;
    }(cc.Component);
    exports.default = ResizeWatcher;
    cc._RF.pop();
  }, {} ],
  ResourceUtil: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3cb1bKKunFMQL/MSxLCRjKx", "ResourceUtil");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ResourceUtil = void 0;
    var AudioName_1 = require("../common/init/AudioName");
    var GameCommonRes_1 = require("../GameCommonRes");
    var PoolManager_1 = require("../manager/PoolManager");
    var proto_1 = require("../proto/proto");
    var ResLoadManager_1 = require("./../manager/ResLoadManager");
    var StringUtil_1 = require("./StringUtil");
    var ResourceUtil = function() {
      function ResourceUtil() {}
      ResourceUtil.getAudioClipByAudioName = function(audioName) {
        var resUrl = ResourceUtil.getResourceUrl(audioName);
        var bundle = cc.assetManager.getBundle(resUrl.bundle);
        if (bundle) return bundle.get(resUrl.url, cc.AudioClip);
        return null;
      };
      ResourceUtil.getAsset = function(resFullName, type) {
        var resUrl = ResourceUtil.getResourceUrl(resFullName);
        var bundle = cc.assetManager.getBundle(resUrl.bundle);
        if (bundle) return bundle.get(resUrl.url, type);
        return null;
      };
      ResourceUtil.getAssetAsync = function(resFullName, type, callback) {
        var resUrl = ResourceUtil.getResourceUrl(resFullName);
        var bundle = cc.assetManager.getBundle(resUrl.bundle);
        if (bundle) {
          var asset = bundle.get(resUrl.url, type);
          if (asset && null != callback) {
            callback(asset, resFullName);
            return true;
          }
        }
        var resGroup = ResourceUtil.wrapResGroup(resUrl, type);
        ResLoadManager_1.ResLoadManager.Instance.loadGroup(resFullName, [ resGroup ], null, function() {
          var asset = ResourceUtil.getAsset(resFullName, type);
          null != callback && callback(asset, resFullName);
        });
        return false;
      };
      ResourceUtil.wrapResGroup = function() {
        var resUrl = "string" == typeof arguments[0] ? ResourceUtil.getResourceUrl(arguments[0]) : arguments[0];
        var type = arguments[1];
        var dir = arguments[2];
        var resGroup = new ResLoadManager_1.ResGroup();
        resGroup.bundleName = resUrl.bundle;
        resGroup.assets = dir ? [ {
          url: resUrl.url,
          type: type,
          mode: ResLoadManager_1.ResLoadMode.dir
        } ] : [ {
          url: resUrl.url,
          type: type
        } ];
        return resGroup;
      };
      ResourceUtil.wrapResDirGroup = function() {
        var params = [ arguments[0], arguments[1], true ];
        return ResourceUtil.wrapResGroup.apply(null, params);
      };
      ResourceUtil.getResourceUrl = function(resFullName) {
        if (resFullName) {
          var index = resFullName.indexOf("/");
          var bundle = resFullName.slice(0, index);
          var url = resFullName.slice(index + 1);
          return {
            bundle: bundle,
            url: url
          };
        }
        return null;
      };
      ResourceUtil.loadRemoteImage = function(url, callback) {
        var protocol = "http://";
        if (!url) return;
        if (url.startsWith(protocol)) {
          var nextIndex = url.indexOf(protocol, protocol.length);
          nextIndex > -1 && (url = url.slice(nextIndex));
        }
        if (url.startsWith("http")) {
          var option = {
            type: cc.Texture2D,
            isCrossOrigin: true
          };
          url.endsWith(".jpg") ? option.ext = ".jpg" : option.ext = ".png";
          cc.assetManager.loadRemote(url, option, function(err, asset) {
            callback && callback(err ? null : new cc.SpriteFrame(asset));
          });
        } else cc.resources.load(url, cc.SpriteFrame, function(err, asset) {
          callback && callback(err ? null : asset);
        });
      };
      ResourceUtil.loadGameIcon = function(type, callback) {
        var url = StringUtil_1.default.replaceString("sprite/game/{0}", type);
        cc.resources.load(url, cc.SpriteFrame, function(err, asset) {
          callback && callback(err ? null : asset);
        });
      };
      ResourceUtil.loadPlayerHead = function(icon, callback) {
        var validIcon = "1";
        if (null != icon && "" != icon) {
          var index = Number.parseInt(icon);
          index > 0 && index <= 20 && (validIcon = icon);
        }
        var url = StringUtil_1.default.replaceString("sprite/head/Head{0}", validIcon.padStart(2, "0"));
        cc.resources.load(url, cc.SpriteFrame, function(err, asset) {
          callback && callback(err ? null : asset);
        });
      };
      ResourceUtil.getZooAnimalDieEffect = function(animal) {
        switch (animal) {
         case proto_1.e_animal.pikachu:
          return AudioName_1.AudioName.RESOURCES_AUDIO_ZOO_PIKAQIU;

         case proto_1.e_animal.elephant:
          return AudioName_1.AudioName.RESOURCES_AUDIO_ZOO_EL_WIN;

         case proto_1.e_animal.bomber:
          return AudioName_1.AudioName.RESOURCES_AUDIO_ZOO_BOMB;
        }
        return AudioName_1.AudioName.RESOURCES_AUDIO_ZOO_BASE;
      };
      ResourceUtil.createZooGoldIcon = function() {
        var iconNode = null;
        try {
          iconNode = PoolManager_1.PoolManager.getInstance().pop(cc.Node, function() {
            return new cc.Node("ZooGoldIcon");
          });
          if (!iconNode || "function" !== typeof iconNode.setPosition) {
            console.warn("\u5bf9\u8c61\u6c60\u8fd4\u56de\u7684\u8282\u70b9\u65e0\u6548\uff0c\u521b\u5efa\u65b0\u8282\u70b9");
            iconNode = new cc.Node("ZooGoldIcon");
          }
        } catch (error) {
          console.warn("\u5bf9\u8c61\u6c60\u83b7\u53d6\u5931\u8d25\uff0c\u521b\u5efa\u65b0\u8282\u70b9:", error);
          iconNode = new cc.Node("ZooGoldIcon");
        }
        if (iconNode && "function" === typeof iconNode.setPosition) {
          iconNode.setPosition(0, 0);
          iconNode.setScale(1, 1);
          iconNode.setAnchorPoint(.5, .5);
          iconNode.opacity = 255;
          iconNode.angle = 0;
          var iconSprite = iconNode.getComponent(cc.Sprite);
          iconSprite || (iconSprite = iconNode.addComponent(cc.Sprite));
          iconSprite.spriteFrame = GameCommonRes_1.default.Instance.taskItemIcons[0];
          return iconSprite;
        }
        console.error("\u65e0\u6cd5\u521b\u5efa\u6709\u6548\u7684 cc.Node \u5bf9\u8c61");
        return null;
      };
      return ResourceUtil;
    }();
    exports.ResourceUtil = ResourceUtil;
    cc._RF.pop();
  }, {
    "../GameCommonRes": "GameCommonRes",
    "../common/init/AudioName": "AudioName",
    "../manager/PoolManager": "PoolManager",
    "../proto/proto": "proto",
    "./../manager/ResLoadManager": "ResLoadManager",
    "./StringUtil": "StringUtil"
  } ],
  RichTextClickHandler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e4e1aAC/05B0KNWOOkNJ+aJ", "RichTextClickHandler");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ModelMessageManager_1 = require("../../common/core/ModelMessageManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RichTextClickHandler = function(_super) {
      __extends(RichTextClickHandler, _super);
      function RichTextClickHandler() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.careMessage = true;
        _this.clickHandler = null;
        return _this;
      }
      RichTextClickHandler.prototype.onLoad = function() {};
      RichTextClickHandler.prototype.handler = function(e, param) {
        this.onClickHandler && this.onClickHandler(e, param);
        this.careMessage && param && ModelMessageManager_1.ModelMessageManager.Instance.sendMessage(param);
        this.clickHandler && this.clickHandler.emit([ e, param ]);
      };
      __decorate([ property ], RichTextClickHandler.prototype, "careMessage", void 0);
      __decorate([ property({
        type: cc.Component.EventHandler,
        tooltip: "\u70b9\u51fb\u6587\u672c\u540e\u7684\u56de\u8c03"
      }) ], RichTextClickHandler.prototype, "clickHandler", void 0);
      RichTextClickHandler = __decorate([ ccclass ], RichTextClickHandler);
      return RichTextClickHandler;
    }(cc.Component);
    exports.default = RichTextClickHandler;
    cc._RF.pop();
  }, {
    "../../common/core/ModelMessageManager": "ModelMessageManager"
  } ],
  RoleModel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b1a07Hvzx1JDLp0i03Bn/ye", "RoleModel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UploadImage = exports.HomeScrollType = exports.HomeScrollOption = exports.ShareType = exports.RoleModel = void 0;
    var ModelBase_1 = require("../common/core/ModelBase");
    var RoleModel = function(_super) {
      __extends(RoleModel, _super);
      function RoleModel() {
        return _super.call(this) || this;
      }
      Object.defineProperty(RoleModel, "Instance", {
        get: function() {
          null == RoleModel.instance && (RoleModel.instance = new RoleModel());
          return RoleModel.instance;
        },
        enumerable: false,
        configurable: true
      });
      return RoleModel;
    }(ModelBase_1.ModelBase);
    exports.RoleModel = RoleModel;
    var ShareType;
    (function(ShareType) {
      ShareType[ShareType["public"] = 0] = "public";
      ShareType[ShareType["self"] = 1] = "self";
    })(ShareType = exports.ShareType || (exports.ShareType = {}));
    var HomeScrollOption = function() {
      function HomeScrollOption() {}
      return HomeScrollOption;
    }();
    exports.HomeScrollOption = HomeScrollOption;
    var HomeScrollType;
    (function(HomeScrollType) {
      HomeScrollType[HomeScrollType["system"] = 1] = "system";
      HomeScrollType[HomeScrollType["notification"] = 2] = "notification";
      HomeScrollType[HomeScrollType["mall"] = 3] = "mall";
      HomeScrollType[HomeScrollType["doll"] = 4] = "doll";
    })(HomeScrollType = exports.HomeScrollType || (exports.HomeScrollType = {}));
    var UploadImage = function() {
      function UploadImage() {
        this.thumb = 1;
        this.width = 100;
        this.height = 100;
      }
      return UploadImage;
    }();
    exports.UploadImage = UploadImage;
    cc._RF.pop();
  }, {
    "../common/core/ModelBase": "ModelBase"
  } ],
  RoleModuleCommand: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "006ffj/gONBKacpCGrprW/o", "RoleModuleCommand");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RoleModuleCommand = void 0;
    var RoleModuleCommand = function() {
      function RoleModuleCommand() {}
      RoleModuleCommand.UPDATE_ROLE_INFO = 3001;
      RoleModuleCommand.GET_DEPOSIT = 3002;
      RoleModuleCommand.PUSH_ROLE_CHIP = 3003;
      RoleModuleCommand.GET_CHARGE = 3010;
      RoleModuleCommand.RECHARGE_SUCCESS = 3011;
      RoleModuleCommand.GET_ROLE_DETAIL = 3012;
      RoleModuleCommand.GET_ROLE_ADDRESS = 3013;
      RoleModuleCommand.ADD_ROLE_ADDRESS = 3014;
      RoleModuleCommand.ALTER_ROLE_ADDRESS = 3015;
      RoleModuleCommand.DELETE_ROLE_ADDRESS = 3016;
      RoleModuleCommand.SET_ADDRESS_STATE = 3017;
      RoleModuleCommand.GET_ROLE_PRIZE = 3018;
      RoleModuleCommand.GET_SELF_INFO = 3019;
      RoleModuleCommand.GET_LAST_PROFIT = 3020;
      RoleModuleCommand.SHARE_PRIZE_INFO = 3022;
      RoleModuleCommand.GET_SHARE_LOG = 3023;
      RoleModuleCommand.DO_LIKE = 3024;
      RoleModuleCommand.GET_SELF_SHARE_LOG = 3025;
      RoleModuleCommand.ERASE_PROFIT = 3026;
      RoleModuleCommand.LOOK_FRIEND = 3027;
      RoleModuleCommand.GET_RUN_INFO = 3028;
      RoleModuleCommand.GET_AUTH_CODE = 3029;
      RoleModuleCommand.MATCH_PHONE = 3030;
      RoleModuleCommand.FRIEND_TOTAL_INFO = 3031;
      RoleModuleCommand.GET_RED_POINT = 3032;
      RoleModuleCommand.GET_CMS_GIFT = 3033;
      RoleModuleCommand.GET_CMS_VAL = 3034;
      RoleModuleCommand.FEEDBACK = 3035;
      RoleModuleCommand.GET_FEEDBACK = 3036;
      RoleModuleCommand.REPORT = 3037;
      RoleModuleCommand.GET_WXPUBILC_STATE = 3038;
      RoleModuleCommand.GET_WXPUBLIC = 3039;
      RoleModuleCommand.BING_ROLE_CODE = 3040;
      RoleModuleCommand.SET_PASSWORD = 3041;
      RoleModuleCommand.ALTER_PASSWORD = 3042;
      RoleModuleCommand.NOT_GET_REWARD = 3043;
      RoleModuleCommand.GET_NOT_GET_REWARD = 3044;
      RoleModuleCommand.GET_GAME_AD = 3045;
      RoleModuleCommand.GET_PROFIT_SETTING = 3046;
      RoleModuleCommand.GET_SERVICE_DEPOSIT = 3047;
      RoleModuleCommand.REMOVE_RED_TO_GOLD = 3048;
      RoleModuleCommand.SEARCH_CARD = 3049;
      RoleModuleCommand.LOAD_OPEN_ACCT = 3050;
      RoleModuleCommand.ADD_CARD = 3051;
      RoleModuleCommand.VERIFY_CARD = 3052;
      RoleModuleCommand.VERIFY_WITHDRAW = 3054;
      RoleModuleCommand.APPLY_WITHDRAW = 3056;
      RoleModuleCommand.APPLY_WITHDRAW_SECOND = 3057;
      RoleModuleCommand.GET_GOFLY_URL = 3058;
      RoleModuleCommand.GET_CHARGE_INFO = 3096;
      RoleModuleCommand.PUSH_KEFU_MSG = 3097;
      RoleModuleCommand.PUSH_FREE_GIFT = 3098;
      RoleModuleCommand.GET_ERROR = 3099;
      return RoleModuleCommand;
    }();
    exports.RoleModuleCommand = RoleModuleCommand;
    cc._RF.pop();
  }, {} ],
  RoleModuleController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c427c8CdhxF6aJlHX8H+JRe", "RoleModuleController");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.RoleModuleController = void 0;
    var proto_1 = require("../proto/proto");
    var RoleModuleCommand_1 = require("../common/command/RoleModuleCommand");
    var ModuleBase_1 = require("../common/core/ModuleBase");
    var NotificationManager_1 = require("../common/core/NotificationManager");
    var ErrorCodeUtil_1 = require("../util/ErrorCodeUtil");
    var RoleModuleController = function(_super) {
      __extends(RoleModuleController, _super);
      function RoleModuleController() {
        return _super.call(this) || this;
      }
      Object.defineProperty(RoleModuleController, "Instance", {
        get: function() {
          null == RoleModuleController.instance && (RoleModuleController.instance = new RoleModuleController());
          return RoleModuleController.instance;
        },
        enumerable: false,
        configurable: true
      });
      RoleModuleController.prototype.init = function() {
        var n = NotificationManager_1.common.NotificationManager.getInstance();
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.UPDATE_ROLE_INFO, this.updateRoleInfoHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_DEPOSIT, this.getDepositHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.PUSH_ROLE_CHIP, this.pushRoleChipHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_CHARGE, this.getChargeHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.RECHARGE_SUCCESS, this.rechargeSuccessHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_ROLE_DETAIL, this.getRoleDetailHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_ROLE_ADDRESS, this.getRoleAddressHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.ADD_ROLE_ADDRESS, this.addRoleAddressHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.ALTER_ROLE_ADDRESS, this.alterRoleAddressHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.DELETE_ROLE_ADDRESS, this.deleteRoleAddressHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.SET_ADDRESS_STATE, this.setAddressStateHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_ROLE_PRIZE, this.getRolePrizeHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_SELF_INFO, this.getSelfInfoHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_LAST_PROFIT, this.getLastProfitHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.SHARE_PRIZE_INFO, this.sharePrizeInfoHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_SHARE_LOG, this.getShareLogHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.DO_LIKE, this.doLikeHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_SELF_SHARE_LOG, this.getSelfShareLogHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.ERASE_PROFIT, this.eraseProfitHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.LOOK_FRIEND, this.lookFriendHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_RUN_INFO, this.getRunInfoHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_AUTH_CODE, this.getAuthCodeHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.MATCH_PHONE, this.matchPhoneHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.FRIEND_TOTAL_INFO, this.friendTotalInfoHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_RED_POINT, this.getRedPointHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_CMS_GIFT, this.getCmsGiftHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_CMS_VAL, this.getCmsValHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.FEEDBACK, this.feedbackHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_FEEDBACK, this.getFeedbackHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.REPORT, this.reportHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_WXPUBILC_STATE, this.getWxpubilcStateHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_WXPUBLIC, this.getWxpublicHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.BING_ROLE_CODE, this.bingRoleCodeHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.SET_PASSWORD, this.setPasswordHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.ALTER_PASSWORD, this.alterPasswordHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.NOT_GET_REWARD, this.notGetRewardHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_NOT_GET_REWARD, this.getNotGetRewardHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_GAME_AD, this.getGameAdHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_PROFIT_SETTING, this.getProfitSettingHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_SERVICE_DEPOSIT, this.getServiceDepositHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.REMOVE_RED_TO_GOLD, this.removeRedToGoldHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.SEARCH_CARD, this.searchCardHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.LOAD_OPEN_ACCT, this.loadOpenAcctHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.ADD_CARD, this.addCardHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.VERIFY_CARD, this.verifyCardHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.VERIFY_WITHDRAW, this.verifyWithdrawHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.APPLY_WITHDRAW, this.applyWithdrawHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.APPLY_WITHDRAW_SECOND, this.applyWithdrawSecondHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_GOFLY_URL, this.getGoflyUrlHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_CHARGE_INFO, this.getChargeInfoHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.PUSH_KEFU_MSG, this.pushKefuMsgHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.PUSH_FREE_GIFT, this.pushFreeGiftHandler, this);
        n.registNotification(RoleModuleCommand_1.RoleModuleCommand.GET_ERROR, this.getErrorHandler, this);
      };
      RoleModuleController.prototype.updateRoleInfoHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.UPDATE_ROLE_INFO, note.errorCode);
      };
      RoleModuleController.prototype.requestGetDeposit = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_DEPOSIT);
      };
      RoleModuleController.prototype.getDepositHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_DEPOSIT, note.errorCode);
      };
      RoleModuleController.prototype.pushRoleChipHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.PUSH_ROLE_CHIP, note.errorCode);
      };
      RoleModuleController.prototype.requestGetCharge = function(id, url, charge_type, type) {
        var tos = new proto_1.m_3010_tos();
        tos.id = id;
        tos.url = url;
        tos.charge_type = charge_type;
        tos.type = type;
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_CHARGE, tos);
      };
      RoleModuleController.prototype.getChargeHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_CHARGE, note.errorCode);
      };
      RoleModuleController.prototype.rechargeSuccessHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.RECHARGE_SUCCESS, note.errorCode);
      };
      RoleModuleController.prototype.requestGetRoleDetail = function(id, amount) {
        var tos = new proto_1.m_3012_tos();
        tos.id = id;
        tos.amount = amount;
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_ROLE_DETAIL, tos);
      };
      RoleModuleController.prototype.getRoleDetailHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_ROLE_DETAIL, note.errorCode);
      };
      RoleModuleController.prototype.requestGetRoleAddress = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_ROLE_ADDRESS);
      };
      RoleModuleController.prototype.getRoleAddressHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_ROLE_ADDRESS, note.errorCode);
      };
      RoleModuleController.prototype.requestAddRoleAddress = function(name, phone, address) {
        var tos = new proto_1.m_3014_tos();
        tos.name = name;
        tos.phone = phone;
        tos.address = address;
        this.send(RoleModuleCommand_1.RoleModuleCommand.ADD_ROLE_ADDRESS, tos);
      };
      RoleModuleController.prototype.addRoleAddressHandler = function(note) {
        0 == note.errorCode || ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.ADD_ROLE_ADDRESS, note.errorCode);
      };
      RoleModuleController.prototype.requestAlterRoleAddress = function(info) {
        var tos = new proto_1.m_3015_tos();
        tos.info = info;
        this.send(RoleModuleCommand_1.RoleModuleCommand.ALTER_ROLE_ADDRESS, tos);
      };
      RoleModuleController.prototype.alterRoleAddressHandler = function(note) {
        0 == note.errorCode || ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.ALTER_ROLE_ADDRESS, note.errorCode);
      };
      RoleModuleController.prototype.requestDeleteRoleAddress = function(id) {
        var tos = new proto_1.m_3016_tos();
        tos.id = id;
        this.send(RoleModuleCommand_1.RoleModuleCommand.DELETE_ROLE_ADDRESS, tos);
      };
      RoleModuleController.prototype.deleteRoleAddressHandler = function(note) {
        0 == note.errorCode || ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.DELETE_ROLE_ADDRESS, note.errorCode);
      };
      RoleModuleController.prototype.requestSetAddressState = function(id) {
        var tos = new proto_1.m_3017_tos();
        tos.id = id;
        this.send(RoleModuleCommand_1.RoleModuleCommand.SET_ADDRESS_STATE, tos);
      };
      RoleModuleController.prototype.setAddressStateHandler = function(note) {
        0 == note.errorCode || ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.SET_ADDRESS_STATE, note.errorCode);
      };
      RoleModuleController.prototype.requestGetRolePrize = function(type, id, amount) {
        var tos = new proto_1.m_3018_tos();
        tos.type = type;
        tos.id = id;
        tos.amount = amount;
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_ROLE_PRIZE, tos);
      };
      RoleModuleController.prototype.getRolePrizeHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_ROLE_PRIZE, note.errorCode);
      };
      RoleModuleController.prototype.requestGetSelfInfo = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_SELF_INFO);
      };
      RoleModuleController.prototype.getSelfInfoHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_SELF_INFO, note.errorCode);
      };
      RoleModuleController.prototype.requestGetLastProfit = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_LAST_PROFIT);
      };
      RoleModuleController.prototype.getLastProfitHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_LAST_PROFIT, note.errorCode);
      };
      RoleModuleController.prototype.requestSharePrizeInfo = function(words, picture) {
        var tos = new proto_1.m_3022_tos();
        tos.words = words;
        tos.picture = picture;
        this.send(RoleModuleCommand_1.RoleModuleCommand.SHARE_PRIZE_INFO, tos);
      };
      RoleModuleController.prototype.sharePrizeInfoHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.SHARE_PRIZE_INFO, note.errorCode);
      };
      RoleModuleController.prototype.requestGetShareLog = function(id, amount, type) {
        var tos = new proto_1.m_3023_tos();
        tos.id = id;
        tos.amount = amount;
        tos.type = type;
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_SHARE_LOG, tos);
      };
      RoleModuleController.prototype.getShareLogHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_SHARE_LOG, note.errorCode);
      };
      RoleModuleController.prototype.requestDoLike = function(id) {
        var tos = new proto_1.m_3024_tos();
        tos.id = id;
        this.send(RoleModuleCommand_1.RoleModuleCommand.DO_LIKE, tos);
      };
      RoleModuleController.prototype.doLikeHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.DO_LIKE, note.errorCode);
      };
      RoleModuleController.prototype.requestGetSelfShareLog = function(id, amount) {
        var tos = new proto_1.m_3025_tos();
        tos.id = id;
        tos.amount = amount;
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_SELF_SHARE_LOG, tos);
      };
      RoleModuleController.prototype.getSelfShareLogHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_SELF_SHARE_LOG, note.errorCode);
      };
      RoleModuleController.prototype.requestEraseProfit = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.ERASE_PROFIT);
      };
      RoleModuleController.prototype.eraseProfitHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.ERASE_PROFIT, note.errorCode);
      };
      RoleModuleController.prototype.requestLookFriend = function(level, amount, page) {
        var tos = new proto_1.m_3027_tos();
        tos.level = level;
        tos.amount = amount;
        tos.page = page;
        this.send(RoleModuleCommand_1.RoleModuleCommand.LOOK_FRIEND, tos);
      };
      RoleModuleController.prototype.lookFriendHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.LOOK_FRIEND, note.errorCode);
      };
      RoleModuleController.prototype.requestGetRunInfo = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_RUN_INFO);
      };
      RoleModuleController.prototype.getRunInfoHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_RUN_INFO, note.errorCode);
      };
      RoleModuleController.prototype.requestGetAuthCode = function(phone) {
        var tos = new proto_1.m_3029_tos();
        tos.phone = phone;
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_AUTH_CODE, tos);
      };
      RoleModuleController.prototype.getAuthCodeHandler = function(note) {
        0 == note.errorCode || ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_AUTH_CODE, note.errorCode);
      };
      RoleModuleController.prototype.requestMatchPhone = function(code) {
        var tos = new proto_1.m_3030_tos();
        tos.code = code;
        this.send(RoleModuleCommand_1.RoleModuleCommand.MATCH_PHONE, tos);
      };
      RoleModuleController.prototype.matchPhoneHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.MATCH_PHONE, note.errorCode);
      };
      RoleModuleController.prototype.requestFriendTotalInfo = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.FRIEND_TOTAL_INFO);
      };
      RoleModuleController.prototype.friendTotalInfoHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.FRIEND_TOTAL_INFO, note.errorCode);
      };
      RoleModuleController.prototype.requestGetRedPoint = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_RED_POINT);
      };
      RoleModuleController.prototype.getRedPointHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_RED_POINT, note.errorCode);
      };
      RoleModuleController.prototype.requestGetCmsGift = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_CMS_GIFT);
      };
      RoleModuleController.prototype.getCmsGiftHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_CMS_GIFT, note.errorCode);
      };
      RoleModuleController.prototype.requestGetCmsVal = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_CMS_VAL);
      };
      RoleModuleController.prototype.getCmsValHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_CMS_VAL, note.errorCode);
      };
      RoleModuleController.prototype.requestFeedback = function(content) {
        var tos = new proto_1.m_3035_tos();
        tos.content = content;
        this.send(RoleModuleCommand_1.RoleModuleCommand.FEEDBACK, tos);
      };
      RoleModuleController.prototype.feedbackHandler = function(note) {
        0 == note.errorCode || ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.FEEDBACK, note.errorCode);
      };
      RoleModuleController.prototype.requestGetFeedback = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_FEEDBACK);
      };
      RoleModuleController.prototype.getFeedbackHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_FEEDBACK, note.errorCode);
      };
      RoleModuleController.prototype.requestReport = function(type) {
        var tos = new proto_1.m_3037_tos();
        tos.type = type;
        this.send(RoleModuleCommand_1.RoleModuleCommand.REPORT, tos);
      };
      RoleModuleController.prototype.reportHandler = function(note) {
        0 == note.errorCode || ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.REPORT, note.errorCode);
      };
      RoleModuleController.prototype.requestGetWxpubilcState = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_WXPUBILC_STATE);
      };
      RoleModuleController.prototype.getWxpubilcStateHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_WXPUBILC_STATE, note.errorCode);
      };
      RoleModuleController.prototype.requestGetWxpublic = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_WXPUBLIC);
      };
      RoleModuleController.prototype.getWxpublicHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_WXPUBLIC, note.errorCode);
      };
      RoleModuleController.prototype.requestBingRoleCode = function(code) {
        var tos = new proto_1.m_3040_tos();
        tos.code = code;
        this.send(RoleModuleCommand_1.RoleModuleCommand.BING_ROLE_CODE, tos);
      };
      RoleModuleController.prototype.bingRoleCodeHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.BING_ROLE_CODE, note.errorCode);
      };
      RoleModuleController.prototype.requestSetPassword = function(password) {
        var tos = new proto_1.m_3041_tos();
        tos.password = password;
        this.send(RoleModuleCommand_1.RoleModuleCommand.SET_PASSWORD, tos);
      };
      RoleModuleController.prototype.setPasswordHandler = function(note) {
        0 == note.errorCode || ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.SET_PASSWORD, note.errorCode);
      };
      RoleModuleController.prototype.requestAlterPassword = function(code, password) {
        var tos = new proto_1.m_3042_tos();
        tos.code = code;
        tos.password = password;
        this.send(RoleModuleCommand_1.RoleModuleCommand.ALTER_PASSWORD, tos);
      };
      RoleModuleController.prototype.alterPasswordHandler = function(note) {
        0 == note.errorCode || ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.ALTER_PASSWORD, note.errorCode);
      };
      RoleModuleController.prototype.requestNotGetReward = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.NOT_GET_REWARD);
      };
      RoleModuleController.prototype.notGetRewardHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.NOT_GET_REWARD, note.errorCode);
      };
      RoleModuleController.prototype.requestGetNotGetReward = function(type) {
        var tos = new proto_1.m_3044_tos();
        tos.type = type;
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_NOT_GET_REWARD, tos);
      };
      RoleModuleController.prototype.getNotGetRewardHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_NOT_GET_REWARD, note.errorCode);
      };
      RoleModuleController.prototype.requestGetGameAd = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_GAME_AD);
      };
      RoleModuleController.prototype.getGameAdHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_GAME_AD, note.errorCode);
      };
      RoleModuleController.prototype.requestGetProfitSetting = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_PROFIT_SETTING);
      };
      RoleModuleController.prototype.getProfitSettingHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_PROFIT_SETTING, note.errorCode);
      };
      RoleModuleController.prototype.requestGetServiceDeposit = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_SERVICE_DEPOSIT);
      };
      RoleModuleController.prototype.getServiceDepositHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_SERVICE_DEPOSIT, note.errorCode);
      };
      RoleModuleController.prototype.requestRemoveRedToGold = function(flag, val) {
        var tos = new proto_1.m_3048_tos();
        tos.flag = flag;
        tos.val = val;
        this.send(RoleModuleCommand_1.RoleModuleCommand.REMOVE_RED_TO_GOLD, tos);
      };
      RoleModuleController.prototype.removeRedToGoldHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.REMOVE_RED_TO_GOLD, note.errorCode);
      };
      RoleModuleController.prototype.requestSearchCard = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.SEARCH_CARD);
      };
      RoleModuleController.prototype.searchCardHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.SEARCH_CARD, note.errorCode);
      };
      RoleModuleController.prototype.requestLoadOpenAcct = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.LOAD_OPEN_ACCT);
      };
      RoleModuleController.prototype.loadOpenAcctHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.LOAD_OPEN_ACCT, note.errorCode);
      };
      RoleModuleController.prototype.requestAddCard = function(phone, card_no) {
        var tos = new proto_1.m_3051_tos();
        tos.phone = phone;
        tos.card_no = card_no;
        this.send(RoleModuleCommand_1.RoleModuleCommand.ADD_CARD, tos);
      };
      RoleModuleController.prototype.addCardHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.ADD_CARD, note.errorCode);
      };
      RoleModuleController.prototype.requestVerifyCard = function(id, code) {
        var tos = new proto_1.m_3052_tos();
        tos.id = id;
        tos.code = code;
        this.send(RoleModuleCommand_1.RoleModuleCommand.VERIFY_CARD, tos);
      };
      RoleModuleController.prototype.verifyCardHandler = function(note) {
        0 == note.errorCode || ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.VERIFY_CARD, note.errorCode);
      };
      RoleModuleController.prototype.requestVerifyWithdraw = function(code, id, type) {
        var tos = new proto_1.m_3054_tos();
        tos.code = code;
        tos.id = id;
        tos.type = type;
        this.send(RoleModuleCommand_1.RoleModuleCommand.VERIFY_WITHDRAW, tos);
      };
      RoleModuleController.prototype.verifyWithdrawHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.VERIFY_WITHDRAW, note.errorCode);
      };
      RoleModuleController.prototype.requestApplyWithdraw = function(id, card_id, type) {
        var tos = new proto_1.m_3056_tos();
        tos.id = id;
        tos.card_id = card_id;
        tos.type = type;
        this.send(RoleModuleCommand_1.RoleModuleCommand.APPLY_WITHDRAW, tos);
      };
      RoleModuleController.prototype.applyWithdrawHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.APPLY_WITHDRAW, note.errorCode);
      };
      RoleModuleController.prototype.requestApplyWithdrawSecond = function(id, type) {
        var tos = new proto_1.m_3057_tos();
        tos.id = id;
        tos.type = type;
        this.send(RoleModuleCommand_1.RoleModuleCommand.APPLY_WITHDRAW_SECOND, tos);
      };
      RoleModuleController.prototype.applyWithdrawSecondHandler = function(note) {
        0 == note.errorCode || ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.APPLY_WITHDRAW_SECOND, note.errorCode);
      };
      RoleModuleController.prototype.requestGetGoflyUrl = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_GOFLY_URL);
      };
      RoleModuleController.prototype.getGoflyUrlHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_GOFLY_URL, note.errorCode);
      };
      RoleModuleController.prototype.requestGetChargeInfo = function() {
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_CHARGE_INFO);
      };
      RoleModuleController.prototype.getChargeInfoHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_CHARGE_INFO, note.errorCode);
      };
      RoleModuleController.prototype.pushKefuMsgHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.PUSH_KEFU_MSG, note.errorCode);
      };
      RoleModuleController.prototype.pushFreeGiftHandler = function(note) {
        if (0 == note.errorCode) var toc = note.toc; else ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.PUSH_FREE_GIFT, note.errorCode);
      };
      RoleModuleController.prototype.requestGetError = function(error) {
        var tos = new proto_1.m_3099_tos();
        tos.error = error;
        this.send(RoleModuleCommand_1.RoleModuleCommand.GET_ERROR, tos);
      };
      RoleModuleController.prototype.getErrorHandler = function(note) {
        0 == note.errorCode || ErrorCodeUtil_1.ErrorCodeUtil.errorCall(RoleModuleCommand_1.RoleModuleCommand.GET_ERROR, note.errorCode);
      };
      return RoleModuleController;
    }(ModuleBase_1.ModuleBase);
    exports.RoleModuleController = RoleModuleController;
    cc._RF.pop();
  }, {
    "../common/command/RoleModuleCommand": "RoleModuleCommand",
    "../common/core/ModuleBase": "ModuleBase",
    "../common/core/NotificationManager": "NotificationManager",
    "../proto/proto": "proto",
    "../util/ErrorCodeUtil": "ErrorCodeUtil"
  } ],
  RotateTarget: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d3b30Ln7/ROb6tLPXwgsAYz", "RotateTarget");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RotateTarget = function(_super) {
      __extends(RotateTarget, _super);
      function RotateTarget() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.delta = -2;
        return _this;
      }
      RotateTarget.prototype.onLoad = function() {};
      RotateTarget.prototype.update = function(dt) {
        this.node.angle += this.delta;
      };
      __decorate([ property ], RotateTarget.prototype, "delta", void 0);
      RotateTarget = __decorate([ ccclass ], RotateTarget);
      return RotateTarget;
    }(cc.Component);
    exports.default = RotateTarget;
    cc._RF.pop();
  }, {} ],
  SafeAreaExtend: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "39177vFlcBMfI1y4Ac4vJ4A", "SafeAreaExtend");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property, help = _a.help, menu = _a.menu, inspector = _a.inspector, executeInEditMode = _a.executeInEditMode, requireComponent = _a.requireComponent;
    var SafeAreaExtend = function(_super) {
      __extends(SafeAreaExtend, _super);
      function SafeAreaExtend() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.asCCComponent = true;
        _this.enableTop = true;
        _this.enableBottom = true;
        _this.enableLeft = true;
        _this.enableRight = true;
        return _this;
      }
      SafeAreaExtend.prototype.onEnable = function() {
        this.updateArea();
        cc.view.on("canvas-resize", this.updateArea, this);
      };
      SafeAreaExtend.prototype.onDisable = function() {
        cc.view.off("canvas-resize", this.updateArea, this);
      };
      SafeAreaExtend.prototype.updateArea = function() {
        var widget = this.node.getComponent(cc.Widget);
        if (!widget) return;
        false;
        widget.updateAlignment();
        var lastPos = this.node.position;
        var lastAnchorPoint = this.node.getAnchorPoint();
        widget.isAlignTop = widget.isAlignBottom = widget.isAlignLeft = widget.isAlignRight = true;
        var screenWidth = cc.winSize.width, screenHeight = cc.winSize.height;
        var safeArea = cc.sys.getSafeAreaRect();
        if (this.enableTop) {
          widget.top = screenHeight - safeArea.y - safeArea.height;
          cc.sys.isNative && cc.sys.os == cc.sys.OS_IOS && (widget.top *= .7);
        }
        this.enableBottom && (widget.bottom = safeArea.y);
        this.enableLeft && (widget.left = safeArea.x);
        this.enableRight && (widget.right = screenWidth - safeArea.x - safeArea.width);
        widget.updateAlignment();
        var curPos = this.node.position;
        var anchorX = lastAnchorPoint.x - (curPos.x - lastPos.x) / this.node.width;
        var anchorY = lastAnchorPoint.y - (curPos.y - lastPos.y) / this.node.height;
        this.node.setAnchorPoint(anchorX, anchorY);
        cc["_widgetManager"].add(widget);
      };
      __decorate([ property({
        editorOnly: true,
        visible: false
      }) ], SafeAreaExtend.prototype, "asCCComponent", void 0);
      __decorate([ property ], SafeAreaExtend.prototype, "enableTop", void 0);
      __decorate([ property ], SafeAreaExtend.prototype, "enableBottom", void 0);
      __decorate([ property ], SafeAreaExtend.prototype, "enableLeft", void 0);
      __decorate([ property ], SafeAreaExtend.prototype, "enableRight", void 0);
      SafeAreaExtend = __decorate([ ccclass(), executeInEditMode, requireComponent(cc.Widget) ], SafeAreaExtend);
      return SafeAreaExtend;
    }(cc.Component);
    exports.default = SafeAreaExtend;
    cc._RF.pop();
  }, {} ],
  ScreenCapture: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8fc8014DyxLHofJi75zoPuJ", "ScreenCapture");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ScreenCapture = function(_super) {
      __extends(ScreenCapture, _super);
      function ScreenCapture() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      ScreenCapture.prototype.onLoad = function() {};
      ScreenCapture.prototype.start = function() {};
      ScreenCapture.prototype.capture = function(targetNode) {
        var camera = this.getComponentInChildren(cc.Camera);
        var texture = new cc.RenderTexture();
        var scale = 1;
        this.node.position = targetNode.position;
        this.texture = texture;
        texture.initWithSize(targetNode.width * scale, targetNode.height * scale, cc["gfx"].RB_FMT_S8);
        camera.targetTexture = texture;
        camera.orthoSize = targetNode.height / 2;
        camera.render(targetNode);
        var width = texture.width;
        var height = texture.height;
        if (!this.canvas) {
          this.canvas = document.createElement("canvas");
          this.canvas.width = width;
          this.canvas.height = height;
        }
        var ctx = this.canvas.getContext("2d");
        var data = texture.readPixels();
        var rowBytes = 4 * width;
        for (var row = 0; row < height; row++) {
          var srow = height - 1 - row;
          var imageData = ctx.createImageData(width, 1);
          var start = srow * width * 4;
          for (var i = 0; i < rowBytes; i++) imageData.data[i] = data[start + i];
          ctx.putImageData(imageData, 0, row);
        }
        var bounds = targetNode.getBoundingBoxToWorld();
        var windowSize = cc.view.getFrameSize();
        var qrcodeDiv = document.createElement("div");
        var top = (cc.visibleRect.height - bounds.y - bounds.height) / cc.visibleRect.height * windowSize.height + "px";
        qrcodeDiv.style.width = "100%";
        qrcodeDiv.style.marginTop = top;
        qrcodeDiv.style.textAlign = "center";
        qrcodeDiv.style.zIndex = "999";
        qrcodeDiv.style.position = "absolute";
        qrcodeDiv.style.display = "block";
        document.body.appendChild(qrcodeDiv);
        this.div = qrcodeDiv;
        var dataURL = this.canvas.toDataURL("image/png");
        var image = document.createElement("img");
        image.src = dataURL;
        image.crossOrigin = "";
        image.width = windowSize.width / cc.visibleRect.width * width;
        image.height = windowSize.height / cc.visibleRect.height * height;
        image.style.marginLeft = bounds.x / cc.visibleRect.width * windowSize.width + "px";
        image.style.display = "block";
        qrcodeDiv.appendChild(image);
        return image;
      };
      ScreenCapture.prototype.clear = function() {
        var camera = this.getComponentInChildren(cc.Camera);
        camera.targetTexture = null;
        if (this.canvas) {
          this.canvas.remove();
          this.canvas = null;
        }
        if (this.div) {
          this.div.remove();
          this.div = null;
        }
        if (this.texture) {
          this.texture.destroy();
          this.texture = null;
        }
      };
      ScreenCapture = __decorate([ ccclass ], ScreenCapture);
      return ScreenCapture;
    }(cc.Component);
    exports.default = ScreenCapture;
    cc._RF.pop();
  }, {} ],
  ScrollItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "feef80BLQ1OM4S+OyN2sPBq", "ScrollItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ScrollItem = function(_super) {
      __extends(ScrollItem, _super);
      function ScrollItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.labelBroadcast = null;
        return _this;
      }
      ScrollItem.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      ScrollItem.prototype.updateRenderer = function(value) {
        if (!this.labelBroadcast) {
          console.warn("ScrollItem: labelBroadcast not available");
          return;
        }
        this.labelBroadcast.string = null != value ? String(value) : "";
      };
      ScrollItem.prototype.mergeRenderer = function(value) {
        if (!this.labelBroadcast) {
          console.warn("ScrollItem: labelBroadcast not available");
          return;
        }
        if (null != value) {
          var currentText = this.labelBroadcast.string || "";
          var newValue = String(value);
          this.labelBroadcast.string = currentText + " + " + newValue;
        }
      };
      __decorate([ property(cc.Label) ], ScrollItem.prototype, "labelBroadcast", void 0);
      ScrollItem = __decorate([ ccclass ], ScrollItem);
      return ScrollItem;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = ScrollItem;
    cc._RF.pop();
  }, {
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  ScrollMultiView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e5b9dEC509FlZy0ZYqkdJAQ", "ScrollMultiView");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ScrollView_1 = require("./ScrollView");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ScrollMultiView = function(_super) {
      __extends(ScrollMultiView, _super);
      function ScrollMultiView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.itemHeight = 50;
        _this.row = 0;
        _this.rowCountArr = [];
        return _this;
      }
      ScrollMultiView.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.updateRow();
      };
      ScrollMultiView.prototype.onDisable = function() {
        _super.prototype.onDisable.call(this);
      };
      ScrollMultiView.prototype.updateRow = function() {
        if (this.row > 0) return;
        void 0 == this.itemHeight && (this.itemHeight = 50);
        this.row = Math.max(1, Math.floor(this.node.height / this.itemHeight));
      };
      ScrollMultiView.prototype.showNextEnable = function() {
        var count = this.showingOptions.length;
        for (var i = 0; i < this.row; i++) {
          var enable = true;
          if (this.rowCountArr[i]) for (var optIndex = 0; optIndex < count; optIndex++) {
            var opt = this.showingOptions[optIndex];
            if (opt.rowIndex == i && opt.itemRenderer.x + opt.distance + opt.itemWidth * (1 - opt.itemRenderer.anchorX) >= this.node.width * (1 - this.node.anchorX)) {
              enable = false;
              break;
            }
          }
          if (enable) {
            this.nextAddRowIndex = i;
            return true;
          }
        }
        return false;
      };
      ScrollMultiView.prototype.setItemInitPosition = function(option) {
        var count = this.showingOptions.length;
        var rowIndex = this.nextAddRowIndex;
        var item = option.itemRenderer;
        var rowCount = this.rowCountArr[rowIndex];
        option.rowIndex = rowIndex;
        void 0 == this.itemHeight && (this.itemHeight = item.height + 10);
        item.x = this.node.width * (1 - this.node.anchorX) + item.width * item.anchorX + 30;
        item.y = this.node.height * this.node.anchorY - (this.itemHeight * rowIndex + this.itemHeight * item.anchorY + (this.itemHeight - item.height) / 2);
        this.rowCountArr[rowIndex] = rowCount > 0 ? rowCount + 1 : 1;
      };
      ScrollMultiView.prototype.recycleOption = function(option, dispatchEndedEvent) {
        if (option.rowIndex >= 0) {
          var rowCount = this.rowCountArr[option.rowIndex];
          rowCount > 0 && (this.rowCountArr[option.rowIndex] = rowCount - 1);
          option.rowIndex = void 0;
        }
        _super.prototype.recycleOption.call(this, option, dispatchEndedEvent);
      };
      __decorate([ property({
        tooltip: "\u5b50\u9879\u9ad8\u5ea6"
      }) ], ScrollMultiView.prototype, "itemHeight", void 0);
      __decorate([ property({
        tooltip: "\u884c\u6570"
      }) ], ScrollMultiView.prototype, "row", void 0);
      ScrollMultiView = __decorate([ ccclass ], ScrollMultiView);
      return ScrollMultiView;
    }(ScrollView_1.default);
    exports.default = ScrollMultiView;
    cc._RF.pop();
  }, {
    "./ScrollView": "ScrollView"
  } ],
  ScrollSlideView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "07fb005NppHo5duphbp3Bdq", "ScrollSlideView");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ScrollView_1 = require("./ScrollView");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ScrollSlideView = function(_super) {
      __extends(ScrollSlideView, _super);
      function ScrollSlideView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.itemHeight = 50;
        _this.row = 0;
        _this.rowCountArr = [];
        return _this;
      }
      ScrollSlideView.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.updateRow();
      };
      ScrollSlideView.prototype.onDisable = function() {
        _super.prototype.onDisable.call(this);
      };
      ScrollSlideView.prototype.updateRow = function() {
        if (this.row > 0) return;
        void 0 == this.itemHeight && (this.itemHeight = 50);
        this.row = Math.max(1, Math.floor(this.node.height / this.itemHeight));
      };
      ScrollSlideView.prototype.addTimer = function() {};
      ScrollSlideView.prototype.update = function() {};
      ScrollSlideView.prototype.showNextEnable = function() {
        var count = this.showingOptions.length;
        for (var i = 0; i < this.row; i++) if (!this.rowCountArr[i]) {
          this.nextAddRowIndex = i;
          return true;
        }
        return false;
      };
      ScrollSlideView.prototype.setItemInitPosition = function(option) {
        var _this = this;
        var count = this.showingOptions.length;
        var rowIndex = this.nextAddRowIndex;
        var item = option.itemRenderer;
        option.rowIndex = rowIndex;
        void 0 == this.itemHeight && (this.itemHeight = item.height + 10);
        item.x = -(this.node.width * (1 - this.node.anchorX) + item.width * item.anchorX + 30);
        item.y = this.node.height * this.node.anchorY - (this.itemHeight * rowIndex + this.itemHeight * item.anchorY + (this.itemHeight - item.height) / 2);
        this.rowCountArr[rowIndex] = 1;
        var duration = this.waitingOptions.length > 20 ? 1 : 2;
        var tween = cc.tween(item);
        tween.to(.5, {
          x: 0
        }, {
          easing: cc.easing.cubicInOut
        });
        tween.delay(duration);
        tween.to(.3, {
          x: item.x
        }, {
          easing: cc.easing.cubicInOut
        });
        tween.call(function() {
          _this.itemTweenComplete(option);
        });
        tween.start();
        this.showNext();
      };
      ScrollSlideView.prototype.itemTweenComplete = function(option) {
        var showingIndex = this.showingOptions.indexOf(option);
        showingIndex > -1 && this.showingOptions.splice(showingIndex, 1);
        this.recycleOption(option, false);
        this.showNext();
      };
      ScrollSlideView.prototype.recycleOption = function(option, dispatchEndedEvent) {
        if (option.rowIndex >= 0) {
          var rowCount = this.rowCountArr[option.rowIndex];
          rowCount > 0 && (this.rowCountArr[option.rowIndex] = 0);
          option.rowIndex = void 0;
        }
        option.itemRenderer && cc.Tween.stopAllByTarget(option.itemRenderer);
        _super.prototype.recycleOption.call(this, option, dispatchEndedEvent);
      };
      __decorate([ property({
        tooltip: "\u5b50\u9879\u9ad8\u5ea6"
      }) ], ScrollSlideView.prototype, "itemHeight", void 0);
      __decorate([ property({
        tooltip: "\u884c\u6570"
      }) ], ScrollSlideView.prototype, "row", void 0);
      ScrollSlideView = __decorate([ ccclass ], ScrollSlideView);
      return ScrollSlideView;
    }(ScrollView_1.default);
    exports.default = ScrollSlideView;
    cc._RF.pop();
  }, {
    "./ScrollView": "ScrollView"
  } ],
  ScrollView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f6780XrHnpAUIkq19b+f3re", "ScrollView");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ScrollEventType = exports.ScrollOption = void 0;
    var BaseComponent_1 = require("../base/BaseComponent");
    var TimerManager_1 = require("../../common/core/TimerManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ScrollView = function(_super) {
      __extends(ScrollView, _super);
      function ScrollView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.itemRender = null;
        _this.loop = false;
        _this.step = 3;
        _this.timerId = 0;
        _this.updateFrame = 0;
        _this.listDirty = false;
        _this.waitingOptions = [];
        _this.showingOptions = [];
        _this.nodePool = new cc.NodePool();
        _this.loopOptions = [];
        return _this;
      }
      ScrollView.prototype.onLoad = function() {
        if (null == this.itemRender && null == this.itemPrefabFunction && this.node.childrenCount > 0) for (var i = 0; i < this.node.childrenCount; i++) {
          var child = this.node.children[i];
          if (this.isItemRenderNode(child)) {
            this.itemRender = child;
            child.active && (child.active = false);
            this.nodePool.put(child);
          }
        }
      };
      ScrollView.prototype.onEnable = function() {
        this.addTimer();
        this.showNext();
      };
      ScrollView.prototype.onDisable = function() {
        this.removeTimer();
      };
      ScrollView.prototype.isItemRenderNode = function(node) {
        var allComponents = node["_components"];
        for (var i = 0; i < allComponents.length; i++) {
          var c = allComponents[i];
          if (c.updateRenderer instanceof Function) return true;
        }
        return false;
      };
      ScrollView.prototype.addTimer = function() {
        if (0 == this.showingOptions.length && 0 == this.waitingOptions.length) return;
        0 == this.timerId && (this.timerId = TimerManager_1.TimerManager.Instance.addCountdown(Number.MAX_VALUE, this, null, this.doUpdate, 0));
      };
      ScrollView.prototype.removeTimer = function() {
        if (this.timerId > 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.timerId);
          this.timerId = 0;
        }
      };
      ScrollView.prototype.doUpdate = function() {
        var showingCount = this.showingOptions.length;
        var waitingCount = this.waitingOptions.length;
        if (0 == showingCount) {
          0 == waitingCount && this.removeTimer();
          return;
        }
        for (var i = 0; i < showingCount; i++) {
          var option = this.showingOptions[i];
          if (option.itemRenderer.x + option.itemWidth * (1 - option.itemRenderer.anchorX) < this.node.width * (this.node.anchorX - 1)) {
            this.showingOptions.splice(i, 1);
            this.recycleOption(option, true);
            showingCount--;
            i--;
          } else option.itemRenderer.x -= this.step;
        }
        if (this.waitingOptions.length > 0) if (showingCount > 0) {
          this.updateFrame = (this.updateFrame + 1) % 30;
          0 == this.updateFrame && this.showNextEnable() && this.showNext(true);
        } else this.showNext(true);
        if (0 == this.showingOptions.length && 0 == this.waitingOptions.length) {
          if (this.loop && this.loopOptions.length > 0) {
            var count = this.loopOptions.length;
            for (var i = 0; i < count; i++) this.add(ScrollOption.clone(this.loopOptions[i]));
          } else this.removeTimer();
          this.node.hasEventListener(ScrollEventType.COMPLETE) && this.node.emit(ScrollEventType.COMPLETE);
        }
      };
      ScrollView.prototype.add = function(option) {
        this.usePriority && (this.listDirty = true);
        0 == this.waitingOptions.length && TimerManager_1.TimerManager.Instance.addDelayCall(this.showNext, this);
        this.waitingOptions.unshift(option);
      };
      Object.defineProperty(ScrollView.prototype, "itemPrefabFunction", {
        get: function() {
          return this._itemPrefabFunction;
        },
        set: function(value) {
          this._itemPrefabFunction = value;
        },
        enumerable: false,
        configurable: true
      });
      ScrollView.prototype.showNext = function(ignoreCheckNextEnable) {
        if (!ignoreCheckNextEnable && !this.showNextEnable()) return;
        var showingCount = this.showingOptions.length;
        var waitingCount = this.waitingOptions.length;
        if (waitingCount > 1 && this.listDirty) {
          this.listDirty = false;
          this.waitingOptions = this.waitingOptions.sort(this.sortOptionFunc);
        }
        if (waitingCount > 0) {
          var option = this.waitingOptions.pop();
          this.showingOptions.push(option);
          waitingCount > 50 && (this.waitingOptions = this.waitingOptions.slice(waitingCount - 25));
          var itemRendererPrefab = void 0;
          null != this._itemPrefabFunction ? itemRendererPrefab = this.itemPrefabFunction(option.data) : null != this.itemRender && (itemRendererPrefab = this.itemRender);
          if (null != itemRendererPrefab && null != option.data) {
            var itemNode = this.createItemRenderNode(itemRendererPrefab);
            var itemRenderer = this.getIScrollItemRenderer(itemNode);
            itemNode.on(cc.Node.EventType.SIZE_CHANGED, this.itemRenderResizeHandler, this);
            itemNode.parent = this.node;
            itemRenderer && itemRenderer.updateRenderer(option.data);
            option.itemWidth = itemNode.width;
            option.itemRenderer = itemNode;
          }
          this.setItemInitPosition(option);
        }
      };
      ScrollView.prototype.createItemRenderNode = function(prefab) {
        var node = this.nodePool.get();
        !node && prefab && (node = cc.instantiate(prefab));
        node && !node.active && (node.active = true);
        return node;
      };
      ScrollView.prototype.getIScrollItemRenderer = function(node) {
        var allComponents = node["_components"];
        for (var i = 0; i < allComponents.length; i++) {
          var c = allComponents[i];
          if (c.updateRenderer instanceof Function) return c;
        }
        return null;
      };
      ScrollView.prototype.setItemInitPosition = function(option) {
        var item = option.itemRenderer;
        item.x = this.node.width * (1 - this.node.anchorX) + item.width * item.anchorX + 30;
        item.y = 0;
      };
      ScrollView.prototype.itemRenderResizeHandler = function(e) {
        var count = this.showingOptions.length;
        var i;
        if (count > 0) for (i = 0; i < count; i++) {
          var option = this.showingOptions[i];
          option.itemRenderer && (option.itemWidth = option.itemRenderer.width);
        }
        if (count < 2) return;
        TimerManager_1.TimerManager.Instance.addDelayCall(this.resetShowingPosition, this, true);
      };
      ScrollView.prototype.resetShowingPosition = function() {
        var count = this.showingOptions.length;
        if (count < 2) return;
        var showingOptionCopy = this.showingOptions.concat();
        showingOptionCopy.sort(function(a, b) {
          if (a.itemRenderer.x < b.itemRenderer.x) return -1;
          if (a.itemRenderer.x > b.itemRenderer.x) return 1;
          return 0;
        });
        for (var i = 1; i < count; i++) {
          var item = showingOptionCopy[i].itemRenderer;
          for (var j = 0; j < i; j++) {
            var preItem = showingOptionCopy[j].itemRenderer;
            item.x - item.width * item.anchorX < preItem.x + preItem.width * (1 - preItem.anchorX) && Math.abs(item.y - preItem.y) < item.height && (item.x = preItem.x + preItem.width * (1 - preItem.anchorX) + item.width * item.anchorX + showingOptionCopy[j].distance);
          }
        }
      };
      ScrollView.prototype.sortOptionFunc = function(a, b) {
        if (a.priority > b.priority) return -1;
        if (a.priority < b.priority) return 1;
        if (a.index > b.index) return 1;
        if (a.index < b.index) return -1;
        return 0;
      };
      ScrollView.prototype.showNextEnable = function() {
        var showingCount = this.showingOptions.length;
        if (0 == showingCount) return true;
        var option = this.showingOptions[showingCount - 1];
        return option.itemRenderer.x + option.distance + option.itemWidth * (1 - option.itemRenderer.anchorX) < this.node.width * (1 - this.node.anchorX);
      };
      Object.defineProperty(ScrollView.prototype, "running", {
        get: function() {
          return this.showingOptions.length > 0 || this.waitingOptions.length > 0;
        },
        enumerable: false,
        configurable: true
      });
      ScrollView.prototype.pushItem = function(data, priority, distance) {
        void 0 === priority && (priority = 0);
        void 0 === distance && (distance = 100);
        var option = ScrollOption.create();
        option.index = ScrollOption.flag++;
        option.priority = priority;
        option.distance = distance;
        option.data = data;
        priority && (this.usePriority = true);
        this.loop && this.loopOptions.push(ScrollOption.clone(option));
        this.add(option);
        this.addTimer();
      };
      ScrollView.prototype.clear = function() {
        var count = this.showingOptions.length;
        var i;
        this.removeTimer();
        if (count > 0) {
          for (i = 0; i < count; i++) this.recycleOption(this.showingOptions[i], false);
          this.showingOptions.length = 0;
        }
        count = this.waitingOptions.length;
        if (count > 0) {
          for (i = 0; i < count; i++) this.recycleOption(this.waitingOptions[i], false);
          this.waitingOptions.length = 0;
        }
        this.loopOptions.length > 0 && (this.loopOptions.length = 0);
      };
      ScrollView.prototype.recycleOption = function(option, dispatchEndedEvent) {
        if (option.itemRenderer) {
          dispatchEndedEvent && option.itemRenderer.emit(ScrollEventType.ITEM_SCROLL_ENDED);
          option.itemRenderer.parent && option.itemRenderer.removeFromParent();
          option.itemRenderer.off(cc.Node.EventType.SIZE_CHANGED, this.itemRenderResizeHandler, this);
          this.nodePool.put(option.itemRenderer);
          option.itemRenderer = null;
        }
        option.data = null;
        option.rowIndex = void 0;
        option.priority = 0;
        ScrollOption.release(option);
      };
      ScrollView.prototype.onDestroy = function() {
        this.nodePool.clear();
        this.clear();
      };
      __decorate([ property({
        type: cc.Prefab,
        tooltip: "\u5b50\u9879\u9884\u8bbe\u4f53"
      }) ], ScrollView.prototype, "itemRender", void 0);
      __decorate([ property({
        tooltip: "\u662f\u5426\u5faa\u73af\u6eda\u52a8"
      }) ], ScrollView.prototype, "loop", void 0);
      __decorate([ property({
        tooltip: "\u6eda\u52a8\u6b65\u8fdb\u503c"
      }) ], ScrollView.prototype, "step", void 0);
      ScrollView = __decorate([ ccclass ], ScrollView);
      return ScrollView;
    }(BaseComponent_1.default);
    exports.default = ScrollView;
    var ScrollOption = function() {
      function ScrollOption() {
        this.index = 0;
        this.priority = 0;
        this.distance = 100;
        this.itemWidth = 0;
        this.rowIndex = 0;
        this.showTime = 0;
      }
      ScrollOption.clone = function(source) {
        var option = ScrollOption.create();
        option.index = source.index;
        option.data = source.data;
        option.priority = source.priority;
        option.distance = source.distance;
        return option;
      };
      ScrollOption.create = function() {
        if (ScrollOption.instances.length > 0) return ScrollOption.instances.pop();
        return new ScrollOption();
      };
      ScrollOption.release = function(value) {
        ScrollOption.instances.includes(value) ? console.warn("ScrollOption \u91cd\u590d\u52a0\u5165\u5bf9\u8c61\u6c60") : ScrollOption.instances.push(value);
      };
      ScrollOption.flag = 0;
      ScrollOption.instances = [];
      return ScrollOption;
    }();
    exports.ScrollOption = ScrollOption;
    var ScrollEventType = function() {
      function ScrollEventType() {}
      ScrollEventType.COMPLETE = "COMPLETE";
      ScrollEventType.ITEM_SCROLL_ENDED = "ITEM_SCROLL_ENDED";
      return ScrollEventType;
    }();
    exports.ScrollEventType = ScrollEventType;
    cc._RF.pop();
  }, {
    "../../common/core/TimerManager": "TimerManager",
    "../base/BaseComponent": "BaseComponent"
  } ],
  ScrollVirtualGrid: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "297e1+CoTBEUY/c6za/3/QQ", "ScrollVirtualGrid");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ScrollVirtualList_1 = require("./ScrollVirtualList");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ScrollVirtualGrid = function(_super) {
      __extends(ScrollVirtualGrid, _super);
      function ScrollVirtualGrid() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.itemComponentType = null;
        _this.itemPrefab = null;
        _this.itemNode = null;
        _this.itemWidth = 0;
        _this.itemHeight = 0;
        _this.selectType = ScrollVirtualList_1.SelectionType.none;
        _this.paddingTop = 0;
        _this.paddingBottom = 0;
        _this.paddingLeft = 0;
        _this.paddingRight = 0;
        _this.spaceX = 0;
        _this.spaceY = 0;
        _this.wrapCount = 0;
        _this.actualWrapCount = 0;
        _this.container = null;
        _this.viewportSize = 0;
        _this.contentSize = 0;
        _this.scrollView = null;
        _this.direction = 0;
        _this.dataProvider = [];
        _this.itemRenderMap = new Map();
        _this.displayingItemRenders = [];
        _this.tempItemRenders = [];
        _this._selectedIndex = -1;
        _this._selectedIndices = [];
        _this.latestVirtualStartIndex = -1;
        _this.latestVirtualEndIndex = -1;
        return _this;
      }
      Object.defineProperty(ScrollVirtualGrid.prototype, "isHorizontal", {
        get: function() {
          return 1 == this.direction;
        },
        enumerable: false,
        configurable: true
      });
      ScrollVirtualGrid.prototype.onLoad = function() {
        this.scrollView = this.node.getComponent(cc.ScrollView);
        this.container = this.scrollView.content;
        this.direction = this.scrollView.horizontal ? 1 : 0;
        if (this.itemNode) {
          0 == this.itemWidth && (this.itemWidth = this.itemNode.width);
          0 == this.itemHeight && (this.itemHeight = this.itemNode.height);
          this.itemNode.active = false;
        }
        var contentWidget = this.container.getComponent(cc.Widget);
        var viewport = this.scrollView.content.parent;
        var viewportWidget = viewport.getComponent(cc.Widget);
        viewport.on(cc.Node.EventType.SIZE_CHANGED, this.onViewportSizeChanged, this);
        if (this.isHorizontal) {
          viewport.anchorX = 0;
          this.container.anchorX = 0;
        } else {
          viewport.anchorY = 1;
          this.container.anchorY = 1;
        }
        viewportWidget || (viewportWidget = viewport.addComponent(cc.Widget));
        viewport.width = this.scrollView.node.width;
        viewport.height = this.scrollView.node.height;
        viewportWidget.isAlignTop = viewportWidget.isAlignBottom = viewportWidget.isAbsoluteLeft = viewportWidget.isAlignRight = true;
        viewportWidget.isAlignHorizontalCenter = viewportWidget.isAlignVerticalCenter = false;
        viewportWidget.top = viewportWidget.bottom = viewportWidget.left = viewportWidget.right = 0;
        viewportWidget.alignMode = cc.Widget.AlignMode.ON_WINDOW_RESIZE;
        viewportWidget.updateAlignment();
        this.isHorizontal ? this.viewportSize = this.container.parent.width : this.viewportSize = this.container.parent.height;
        contentWidget || (contentWidget = this.container.addComponent(cc.Widget));
        contentWidget.isAlignTop = contentWidget.isAlignBottom = contentWidget.isAbsoluteLeft = contentWidget.isAlignRight = contentWidget.isAlignHorizontalCenter = contentWidget.isAlignVerticalCenter = false;
        viewportWidget.top = viewportWidget.bottom = viewportWidget.left = viewportWidget.right = 0;
        if (this.isHorizontal) {
          contentWidget.isAlignLeft = true;
          contentWidget.left = 0;
        } else {
          contentWidget.isAlignTop = true;
          contentWidget.top = 0;
        }
        contentWidget.updateAlignment();
        this.scrollView.node.on("scrolling", this.onScrollChangeHandler, this);
        this.scrollView.node.on("scroll-to-bottom", this.onTryToLoadMore, this);
        this.container.on(cc.Node.EventType.TOUCH_START, this.onContentTouchStartHandler, this);
        this.container.on(cc.Node.EventType.TOUCH_END, this.onContentTouchEndHandler, this);
      };
      ScrollVirtualGrid.prototype.start = function() {};
      ScrollVirtualGrid.prototype.onEnable = function() {
        this.setDirty();
        this.refresh();
      };
      ScrollVirtualGrid.prototype.onViewportSizeChanged = function() {
        this.isHorizontal ? this.viewportSize = this.container.parent.width : this.viewportSize = this.container.parent.height;
        this.setDirty();
        this.waitForRefresh();
      };
      ScrollVirtualGrid.prototype.onScrollChangeHandler = function() {
        this.refresh();
      };
      ScrollVirtualGrid.prototype.setData = function(dataProvider, resetScrollPosition) {
        void 0 === resetScrollPosition && (resetScrollPosition = true);
        this.dataProvider = null !== dataProvider && void 0 !== dataProvider ? dataProvider : [];
        this._selectedIndex = -1;
        this._selectedIndices.length = 0;
        this.setDirty();
        this.updateContentSize();
        resetScrollPosition && (this.isHorizontal ? this.scrollView.scrollToLeft(0) : this.scrollView.scrollToTop(0));
        this.updateDataProvider();
      };
      Object.defineProperty(ScrollVirtualGrid.prototype, "selectedIndex", {
        get: function() {
          return this._selectedIndex;
        },
        set: function(value) {
          if (this._selectedIndex == value) return;
          this._selectedIndex = value;
          this.selectType == ScrollVirtualList_1.SelectionType.multiple && value > -1 && -1 == this._selectedIndices.indexOf(value) && this._selectedIndices.push(value);
          this.setDirty();
          this.refresh();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(ScrollVirtualGrid.prototype, "selectedIndices", {
        get: function() {
          return this._selectedIndices;
        },
        set: function(value) {
          this._selectedIndices = null !== value && void 0 !== value ? value : [];
          this._selectedIndex >= 0 && -1 == this._selectedIndices.indexOf(this._selectedIndex) && (this._selectedIndex = -1);
          this.setDirty();
          this.refresh();
        },
        enumerable: false,
        configurable: true
      });
      ScrollVirtualGrid.prototype.addItem = function(data) {
        this.dataProvider.push(data);
        this.setDirty();
        this.updateContentSize();
        this.updateDataProvider();
      };
      ScrollVirtualGrid.prototype.addRange = function(list) {
        var _a;
        if (null == list || 0 == list.length) return;
        (_a = this.dataProvider).push.apply(_a, list);
        this.setDirty();
        this.updateContentSize();
        this.updateDataProvider();
      };
      ScrollVirtualGrid.prototype.remove = function(index, count) {
        void 0 === count && (count = 1);
        if (index < 0 || index >= this.dataProvider.length) return;
        if (this.selectedIndex > -1) {
          this._selectedIndex >= index && this._selectedIndex < index + count && (this._selectedIndex = -1);
          if (this.selectedIndices.length > 0) for (var i = this.selectedIndices.length - 1; i >= 0; i++) if (this._selectedIndices[i] >= index && this._selectedIndices[i] < index + count) {
            this._selectedIndices.splice(i, 1);
            break;
          }
        }
        this.dataProvider.splice(index, count);
        this.setDirty();
        this.updateContentSize();
        this.updateDataProvider();
      };
      ScrollVirtualGrid.prototype.refreshData = function() {
        this.setDirty();
        this.refresh();
      };
      ScrollVirtualGrid.prototype.getVirtualItemRenderer = function(index) {
        var _this = this;
        if (index < 0 || index >= this.displayingItemRenders.length) return null;
        var itemNode = this.displayingItemRenders.find(function(item) {
          var render = _this.getComponentFromNode(item);
          return render.index == index;
        });
        return itemNode;
      };
      ScrollVirtualGrid.prototype.updateContentSize = function() {
        var column = 0;
        var row = 0;
        if ((0 == this.itemWidth || 0 == this.itemHeight) && this.dataProvider.length > 0) {
          var prefab = this.itemPrefab;
          null == this.itemPrefab && null != this.itemPrefabFunc && (prefab = this.itemPrefabFunc(this.dataProvider[0], 0));
          var itemNode = cc.instantiate(prefab);
          itemNode.setParent(this.container);
          itemNode.name = prefab.name;
          0 == this.itemWidth && (this.itemWidth = itemNode.width);
          0 == this.itemHeight && (this.itemHeight = itemNode.height);
          this.tempItemRenders.push(itemNode);
          this.cacheTempItemRenderer();
        }
        if (this.isHorizontal) {
          row = this.wrapCount;
          0 == row && (row = this.calculateWrapCount(this.container.height, this.itemHeight, this.spaceY));
          column = Math.ceil(1 * this.dataProvider.length / row);
          this.actualWrapCount = row;
          this.contentSize = column * this.itemWidth;
          0 != this.spaceX && column > 1 && (this.contentSize += (column - 1) * this.spaceX);
          this.contentSize += this.paddingLeft + this.paddingRight;
          this.container.width = this.contentSize;
        } else {
          column = this.wrapCount;
          column <= 0 && (column = this.calculateWrapCount(this.container.width, this.itemWidth, this.spaceX));
          row = Math.ceil(1 * this.dataProvider.length / column);
          this.actualWrapCount = column;
          this.contentSize = row * this.itemHeight;
          0 != this.spaceY && row > 1 && (this.contentSize += (row - 1) * this.spaceY);
          this.contentSize += this.paddingTop + this.paddingBottom;
          this.container.height = this.contentSize;
        }
      };
      ScrollVirtualGrid.prototype.calculateWrapCount = function(maxSize, itemSize, space) {
        var wrapCount = 0;
        if (wrapCount <= 0) {
          wrapCount = Math.floor(maxSize / itemSize);
          0 == wrapCount && (wrapCount = 1);
          if (space >= 0) while (wrapCount > 1) {
            if (!(wrapCount * itemSize + (wrapCount - 1) * space > maxSize)) break;
            wrapCount--;
          } else while (true) {
            var c = wrapCount + 1;
            if (!(c * itemSize + (c - 1) * space <= maxSize)) break;
            wrapCount++;
          }
        }
        return wrapCount;
      };
      ScrollVirtualGrid.prototype.updateDataProvider = function() {
        0 == this.dataProvider.length ? this.clear() : this.refresh();
      };
      ScrollVirtualGrid.prototype.setDirty = function() {
        this.latestVirtualStartIndex = -1;
        this.latestVirtualEndIndex = -1;
      };
      ScrollVirtualGrid.prototype.refresh = function() {
        var _a;
        var _this = this;
        var _b, _c;
        if (0 == this.dataProvider.length) return;
        var position = this.container.y;
        if (this.isHorizontal) {
          position = this.container.x;
          position > 0 ? position = 0 : this.contentSize > this.viewportSize && position < -(this.contentSize - this.viewportSize) && (position = -(this.contentSize - this.viewportSize));
        } else position < 0 ? position = 0 : this.contentSize > this.viewportSize && position > this.contentSize - this.viewportSize && (position = this.contentSize - this.viewportSize);
        var _d = this.calculateVirtualStartIndex(Math.abs(position)), virtualStartIndex = _d.virtualStartIndex, virtualStartPosition = _d.virtualStartPosition;
        var virtualEndIndex = this.calculateVirtualEndIndex(position, virtualStartIndex, virtualStartPosition);
        var displayItemCount = virtualEndIndex - virtualStartIndex + 1;
        var needUpdateData = this.latestVirtualStartIndex != virtualStartIndex || this.latestVirtualEndIndex != virtualEndIndex || displayItemCount != this.displayingItemRenders.length;
        var offsetWidth = (this.container.width - this.itemWidth) / 2;
        if (needUpdateData) {
          var maxIndex = this.dataProvider.length - 1;
          this.latestVirtualEndIndex < maxIndex && virtualEndIndex == maxIndex && this.scheduleOnce(function() {
            _this.onTryToLoadMore();
          }, 0);
          this.onItemDiplayChanged && this.scheduleOnce(function() {
            _this.onItemDiplayChanged(virtualStartIndex, virtualEndIndex);
          }, 0);
        }
        if (needUpdateData) {
          this.latestVirtualStartIndex = virtualStartIndex;
          this.latestVirtualEndIndex = virtualEndIndex;
          true;
          console.log({
            virtualStartIndex: virtualStartIndex,
            virtualEndIndex: virtualEndIndex,
            displayItemCount: displayItemCount,
            virtualStartPosition: virtualStartPosition
          });
          if (this.displayingItemRenders.length > 0) {
            (_a = this.tempItemRenders).push.apply(_a, this.displayingItemRenders);
            this.displayingItemRenders.length = 0;
          }
          var itemRendererPrefab = this.itemPrefab;
          var displayingIndex = 0;
          for (var i = virtualStartIndex; i <= virtualEndIndex; i++) {
            var itemNode = null;
            null != this.itemPrefabFunc && (itemRendererPrefab = null !== (_b = this.itemPrefabFunc(this.dataProvider[i], i)) && void 0 !== _b ? _b : this.itemPrefab);
            itemNode = this.getReuseItemRenderer(null !== (_c = null === itemRendererPrefab || void 0 === itemRendererPrefab ? void 0 : itemRendererPrefab.name) && void 0 !== _c ? _c : this.itemNode.name, this.dataProvider[i], this.tempItemRenders);
            if (null == itemNode) {
              if (itemRendererPrefab) {
                itemNode = cc.instantiate(itemRendererPrefab);
                itemNode.name = itemRendererPrefab.name;
              } else {
                itemNode = cc.instantiate(this.itemNode);
                itemNode.name = this.itemNode.name;
              }
              itemNode.setParent(this.container);
            }
            itemNode.active || (itemNode.active = true);
            var itemComponent = this.getComponentFromNode(itemNode);
            itemComponent.index = i;
            itemComponent.data = this.dataProvider[i];
            this.selectType > 0 && (this.selectType == ScrollVirtualList_1.SelectionType.single_cancelable || this.selectType == ScrollVirtualList_1.SelectionType.single ? itemComponent.selected = i == this.selectedIndex : this.selectType == ScrollVirtualList_1.SelectionType.multiple && (itemComponent.selected = this.selectedIndices.indexOf(i) >= 0));
            var p = new cc.Vec3();
            if (this.isHorizontal) {
              p.x = virtualStartPosition + Math.floor(displayingIndex / this.actualWrapCount) * (this.itemWidth + this.spaceX) + itemNode.width / 2;
              p.y = this.paddingTop - displayingIndex % this.actualWrapCount * (this.itemHeight + this.spaceY) - itemNode.height / 2;
              itemNode.position = p;
            } else {
              p.x = this.paddingLeft + displayingIndex % this.actualWrapCount * (this.itemWidth + this.spaceX) - offsetWidth;
              p.y = virtualStartPosition - Math.floor(displayingIndex / this.actualWrapCount) * (this.itemHeight + this.spaceY) - itemNode.height / 2;
              itemNode.position = p;
            }
            displayingIndex++;
            this.displayingItemRenders.push(itemNode);
          }
          this.cacheTempItemRenderer();
        } else {
          var displayingIndex = 0;
          for (var i = virtualStartIndex; i <= virtualEndIndex; i++) {
            var itemNode = this.displayingItemRenders[displayingIndex];
            var p = new cc.Vec3();
            if (this.isHorizontal) {
              p.x = virtualStartPosition + Math.floor(displayingIndex / this.actualWrapCount) * (this.itemWidth + this.spaceX) + itemNode.width / 2;
              p.y = this.paddingTop - displayingIndex % this.actualWrapCount * (this.itemHeight + this.spaceY) - itemNode.height / 2;
              itemNode.position = p;
            } else {
              p.x = this.paddingLeft + displayingIndex % this.actualWrapCount * (this.itemWidth + this.spaceX) - offsetWidth;
              p.y = virtualStartPosition - Math.floor(displayingIndex / this.actualWrapCount) * (this.itemHeight + this.spaceY) - itemNode.height / 2;
              itemNode.position = p;
            }
            displayingIndex++;
          }
        }
      };
      ScrollVirtualGrid.prototype.cacheTempItemRenderer = function() {
        if (null != this.tempItemRenders && this.tempItemRenders.length > 0) {
          for (var i = 0; i < this.tempItemRenders.length; i++) {
            var item = this.tempItemRenders[i];
            var cacheList = this.itemRenderMap.get(item.name);
            null == cacheList && this.itemRenderMap.set(item.name, cacheList = []);
            item.active = false;
            cacheList.push(item);
          }
          this.tempItemRenders.length = 0;
        }
      };
      ScrollVirtualGrid.prototype.getComponentFromNode = function(node) {
        var renderer;
        renderer = this.itemComponentType ? node.getComponent(this.itemComponentType) : node["_components"][0];
        return renderer;
      };
      ScrollVirtualGrid.prototype.getReuseItemRenderer = function(itemName, itemData, priorityUseItemRenders) {
        var _this = this;
        var itemRenderer = null;
        if (null != priorityUseItemRenders && priorityUseItemRenders.length > 0) {
          itemRenderer = priorityUseItemRenders.find(function(item) {
            if (item.name == itemName) {
              var render = _this.getComponentFromNode(item);
              return render.data == itemData;
            }
            return false;
          });
          null == itemRenderer && (itemRenderer = priorityUseItemRenders.find(function(item) {
            return item.name == itemName;
          }));
          if (null != itemRenderer) {
            var index = priorityUseItemRenders.indexOf(itemRenderer);
            priorityUseItemRenders.splice(index, 1);
          }
        }
        if (null == itemRenderer) {
          var cacheList = this.itemRenderMap.get(itemName);
          null != cacheList && cacheList.length > 0 && (itemRenderer = cacheList.shift());
        }
        return itemRenderer;
      };
      ScrollVirtualGrid.prototype.calculateVirtualStartIndex = function(position) {
        var virtualStartIndex = 0;
        var virtualStartPosition = 0;
        if (this.isHorizontal) {
          var columnIndex = Math.floor((position + this.paddingLeft) / (this.itemWidth + this.spaceX));
          columnIndex < 0 && (columnIndex = 0);
          virtualStartPosition = columnIndex * (this.itemWidth + this.spaceX) + this.paddingLeft;
          virtualStartIndex = columnIndex * this.actualWrapCount;
        } else {
          var rowIndex = Math.floor((position + this.paddingTop) / (this.itemHeight + this.spaceY));
          rowIndex < 0 && (rowIndex = 0);
          virtualStartPosition = -rowIndex * (this.itemHeight + this.spaceY) - this.paddingTop;
          virtualStartIndex = rowIndex * this.actualWrapCount;
        }
        return {
          virtualStartIndex: virtualStartIndex,
          virtualStartPosition: virtualStartPosition
        };
      };
      ScrollVirtualGrid.prototype.calculateVirtualEndIndex = function(position, virtualStartIndex, virtualStartPosition) {
        var virtualEndIndex = virtualStartIndex;
        var start = virtualStartPosition;
        if (this.isHorizontal) {
          var columnIndex = Math.floor(virtualStartIndex / this.actualWrapCount);
          for (var i = virtualStartIndex; i < this.dataProvider.length; i++) {
            start += this.itemWidth + this.spaceX;
            if (!(start + position < this.viewportSize)) break;
            columnIndex++;
          }
          virtualEndIndex = (columnIndex + 1) * this.actualWrapCount - 1;
        } else {
          var rowIndex = Math.floor(virtualStartIndex / this.actualWrapCount);
          for (var i = virtualStartIndex; i < this.dataProvider.length; i++) {
            start -= this.itemHeight;
            start -= this.spaceY;
            if (!(start > -(position + this.viewportSize))) break;
            rowIndex++;
          }
          virtualEndIndex = (rowIndex + 1) * this.actualWrapCount - 1;
        }
        virtualEndIndex > this.dataProvider.length - 1 && (virtualEndIndex = this.dataProvider.length - 1);
        return virtualEndIndex;
      };
      ScrollVirtualGrid.prototype.waitForRefresh = function() {
        var _this = this;
        this.scheduleOnce(function() {
          _this.refresh();
        }, 0);
      };
      ScrollVirtualGrid.prototype.clear = function() {
        var _a;
        if (this.displayingItemRenders.length > 0) {
          (_a = this.tempItemRenders).push.apply(_a, this.displayingItemRenders);
          this.displayingItemRenders.length = 0;
        }
        this.cacheTempItemRenderer();
      };
      ScrollVirtualGrid.prototype.onTryToLoadMore = function() {
        var _this = this;
        this.onLoadMore && this.onLoadMore().then(function(list) {
          list && list.length > 0 && _this.addRange(list);
        });
      };
      ScrollVirtualGrid.prototype.onContentTouchStartHandler = function(e) {};
      ScrollVirtualGrid.prototype.onContentTouchEndHandler = function(e) {
        var point = this.container.convertToNodeSpaceAR(e.getLocation());
        var clickItemNode = null;
        for (var i = 0; i < this.displayingItemRenders.length; i++) {
          var itemNode = this.displayingItemRenders[i];
          var centerX = itemNode.x - (itemNode.anchorX - .5) * itemNode.width;
          var centerY = itemNode.y - (itemNode.anchorY - .5) * itemNode.height;
          if (Math.abs(centerX - point.x) < .5 * itemNode.width && Math.abs(centerY - point.y) < .5 * itemNode.height) {
            clickItemNode = itemNode;
            break;
          }
        }
        if (clickItemNode) {
          var itemRenderer = this.getComponentFromNode(clickItemNode);
          if (this.selectType > 0) {
            var selectionDirty = false;
            if (this.selectType == ScrollVirtualList_1.SelectionType.single) {
              selectionDirty = this._selectedIndex != itemRenderer.index;
              this._selectedIndex = itemRenderer.index;
              selectionDirty && null != this.onSelected && this.onSelected(itemRenderer.data, this.selectedIndex);
            } else {
              selectionDirty = true;
              if (this.selectType == ScrollVirtualList_1.SelectionType.multiple) {
                var multiIndex = this._selectedIndices.indexOf(itemRenderer.index);
                if (multiIndex >= 0) {
                  this._selectedIndices.splice(multiIndex, 1);
                  this._selectedIndex = -1;
                } else {
                  this._selectedIndices.push(itemRenderer.index);
                  this._selectedIndex = itemRenderer.index;
                }
              } else this.selectedIndex == itemRenderer.index ? this._selectedIndex = -1 : this._selectedIndex = itemRenderer.index;
              this._selectedIndex >= 0 ? null != this.onSelected && this.onSelected(itemRenderer.data, itemRenderer.index) : null != this.onDiselected && this.onDiselected(itemRenderer.data, itemRenderer.index);
            }
            if (selectionDirty) {
              this.setDirty();
              this.refresh();
            }
          }
          this.onItemClick && this.onItemClick(itemRenderer.data, itemRenderer.index);
        }
      };
      __decorate([ property({
        type: cc.Prefab,
        tooltip: "itemPrefab \u548c itemNode \u4e8c\u9009\u4e00"
      }) ], ScrollVirtualGrid.prototype, "itemPrefab", void 0);
      __decorate([ property({
        type: cc.Node,
        tooltip: "itemPrefab \u548c itemNode \u4e8c\u9009\u4e00"
      }) ], ScrollVirtualGrid.prototype, "itemNode", void 0);
      __decorate([ property ], ScrollVirtualGrid.prototype, "itemWidth", void 0);
      __decorate([ property ], ScrollVirtualGrid.prototype, "itemHeight", void 0);
      __decorate([ property({
        type: cc.Enum(ScrollVirtualList_1.SelectionType),
        tooltip: "\u9009\u4e2d\u7c7b\u578b"
      }) ], ScrollVirtualGrid.prototype, "selectType", void 0);
      __decorate([ property ], ScrollVirtualGrid.prototype, "paddingTop", void 0);
      __decorate([ property ], ScrollVirtualGrid.prototype, "paddingBottom", void 0);
      __decorate([ property ], ScrollVirtualGrid.prototype, "paddingLeft", void 0);
      __decorate([ property ], ScrollVirtualGrid.prototype, "paddingRight", void 0);
      __decorate([ property ], ScrollVirtualGrid.prototype, "spaceX", void 0);
      __decorate([ property ], ScrollVirtualGrid.prototype, "spaceY", void 0);
      __decorate([ property({
        tooltip: "\u6362\u884c\u6570\uff0c\u672a\u6307\u5b9a\u65f6\uff0c\u81ea\u52a8\u6839\u636e\u5bb9\u5668\u5bbd\u5ea6\u8ba1\u7b97"
      }) ], ScrollVirtualGrid.prototype, "wrapCount", void 0);
      ScrollVirtualGrid = __decorate([ ccclass ], ScrollVirtualGrid);
      return ScrollVirtualGrid;
    }(cc.Component);
    exports.default = ScrollVirtualGrid;
    cc._RF.pop();
  }, {
    "./ScrollVirtualList": "ScrollVirtualList"
  } ],
  ScrollVirtualList: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6a518TVwHdOQ7/UxO7K58U6", "ScrollVirtualList");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.VirtualItemRenderer = exports.IVirtualItemRenderer = exports.SelectionType = void 0;
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SelectionType;
    (function(SelectionType) {
      SelectionType[SelectionType["none"] = 0] = "none";
      SelectionType[SelectionType["single"] = 1] = "single";
      SelectionType[SelectionType["single_cancelable"] = 2] = "single_cancelable";
      SelectionType[SelectionType["multiple"] = 3] = "multiple";
    })(SelectionType = exports.SelectionType || (exports.SelectionType = {}));
    var ScrollVirtualList = function(_super) {
      __extends(ScrollVirtualList, _super);
      function ScrollVirtualList() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.itemComponentType = null;
        _this.itemPrefab = null;
        _this.itemNode = null;
        _this.itemSize = 0;
        _this.isDynamicItemSize = false;
        _this.autoScrollToBottom = false;
        _this.alignToBottom = false;
        _this.selectType = SelectionType.none;
        _this.paddingTop = 0;
        _this.paddingBottom = 0;
        _this.paddingLeft = 0;
        _this.paddingRight = 0;
        _this.space = 0;
        _this.container = null;
        _this.viewportSize = 0;
        _this.contentSize = 0;
        _this.scrollView = null;
        _this.autoScrollEnabled = false;
        _this.isDragging = false;
        _this.direction = 0;
        _this.dataProvider = [];
        _this.itemRenderMap = new Map();
        _this.displayingItemRenders = [];
        _this.tempItemRenders = [];
        _this.itemRenderSizeList = [];
        _this._selectedIndex = -1;
        _this._selectedIndices = [];
        _this.latestVirtualStartIndex = -1;
        _this.latestVirtualEndIndex = -1;
        _this.waitingForUpdateContentSize = false;
        _this.waitingForUpdateDisplayingItemSize = false;
        return _this;
      }
      Object.defineProperty(ScrollVirtualList.prototype, "isHorizontal", {
        get: function() {
          return 1 == this.direction;
        },
        enumerable: false,
        configurable: true
      });
      ScrollVirtualList.prototype.onLoad = function() {
        this.scrollView = this.node.getComponent(cc.ScrollView);
        this.container = this.scrollView.content;
        this.direction = this.scrollView.horizontal ? 1 : 0;
        if (this.itemNode) {
          0 == this.itemSize && (this.itemSize = this.isHorizontal ? this.itemNode.width : this.itemNode.height);
          this.itemNode.active = false;
        }
        var contentWidget = this.container.getComponent(cc.Widget);
        var viewport = this.scrollView.content.parent;
        var viewportWidget = viewport.getComponent(cc.Widget);
        viewport.on(cc.Node.EventType.SIZE_CHANGED, this.onViewportSizeChanged, this);
        if (this.isHorizontal) {
          viewport.anchorX = 0;
          this.container.anchorX = 0;
        } else {
          viewport.anchorY = 1;
          this.container.anchorY = 1;
        }
        viewportWidget || (viewportWidget = viewport.addComponent(cc.Widget));
        viewport.width = this.scrollView.node.width;
        viewport.height = this.scrollView.node.height;
        viewportWidget.isAlignTop = viewportWidget.isAlignBottom = viewportWidget.isAbsoluteLeft = viewportWidget.isAlignRight = true;
        viewportWidget.isAlignHorizontalCenter = viewportWidget.isAlignVerticalCenter = false;
        viewportWidget.top = viewportWidget.bottom = viewportWidget.left = viewportWidget.right = 0;
        viewportWidget.alignMode = cc.Widget.AlignMode.ON_WINDOW_RESIZE;
        viewportWidget.updateAlignment();
        this.isHorizontal ? this.viewportSize = this.container.parent.width : this.viewportSize = this.container.parent.height;
        contentWidget || (contentWidget = this.container.addComponent(cc.Widget));
        contentWidget.isAlignTop = contentWidget.isAlignBottom = contentWidget.isAbsoluteLeft = contentWidget.isAlignRight = contentWidget.isAlignHorizontalCenter = contentWidget.isAlignVerticalCenter = false;
        viewportWidget.top = viewportWidget.bottom = viewportWidget.left = viewportWidget.right = 0;
        if (this.isHorizontal) {
          contentWidget.isAlignLeft = true;
          contentWidget.left = 0;
        } else {
          contentWidget.isAlignTop = true;
          contentWidget.top = 0;
        }
        contentWidget.updateAlignment();
        this.scrollView.node.on("scrolling", this.onScrollChangeHandler, this);
        this.scrollView.node.on("scroll-began", this.onScrollBeganHandler, this);
        this.scrollView.node.on("scroll-ended", this.onScrollEndedHandler, this);
        this.scrollView.node.on("scroll-to-bottom", this.onTryToLoadMore, this);
        this.container.on(cc.Node.EventType.TOUCH_START, this.onContentTouchStartHandler, this);
        this.container.on(cc.Node.EventType.TOUCH_END, this.onContentTouchEndHandler, this);
      };
      ScrollVirtualList.prototype.start = function() {};
      ScrollVirtualList.prototype.onEnable = function() {
        this.setDirty();
        if (this.autoScrollToBottom) {
          this.autoScrollEnabled = true;
          this.scrollToBottom();
        }
        this.refresh();
      };
      ScrollVirtualList.prototype.onViewportSizeChanged = function() {
        this.isHorizontal ? this.viewportSize = this.container.parent.width : this.viewportSize = this.container.parent.height;
        this.setDirty();
        this.waitForRefresh(this.autoScrollToBottom);
      };
      ScrollVirtualList.prototype.onScrollChangeHandler = function() {
        var scrollOffset = this.scrollView.getScrollOffset();
        var maxOffset = this.scrollView.getMaxScrollOffset();
        var scrollEnded = false;
        scrollEnded = this.isHorizontal ? scrollOffset.x >= maxOffset.x : scrollOffset.y >= maxOffset.y;
        scrollEnded && (this.autoScrollEnabled || this.isDragging || (this.autoScrollEnabled = true));
        this.refresh();
      };
      ScrollVirtualList.prototype.setData = function(dataProvider, resetScrollPosition) {
        void 0 === resetScrollPosition && (resetScrollPosition = true);
        this.dataProvider = null !== dataProvider && void 0 !== dataProvider ? dataProvider : [];
        this._selectedIndex = -1;
        this._selectedIndices.length = 0;
        this.itemRenderSizeList.length = 0;
        this.setDirty();
        this.resetContentSize();
        resetScrollPosition && (this.isHorizontal ? this.scrollView.scrollToLeft(0) : this.scrollView.scrollToTop(0));
        this.updateDataProvider();
      };
      Object.defineProperty(ScrollVirtualList.prototype, "selectedIndex", {
        get: function() {
          return this._selectedIndex;
        },
        set: function(value) {
          if (this._selectedIndex == value) return;
          this._selectedIndex = value;
          this.setDirty();
          this.refresh();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(ScrollVirtualList.prototype, "selectedIndices", {
        get: function() {
          return this._selectedIndices;
        },
        set: function(value) {
          this._selectedIndices = null !== value && void 0 !== value ? value : [];
          this._selectedIndex >= 0 && -1 == this._selectedIndices.indexOf(this._selectedIndex) && (this._selectedIndex = -1);
          this.setDirty();
          this.refresh();
        },
        enumerable: false,
        configurable: true
      });
      ScrollVirtualList.prototype.addItem = function(data) {
        this.dataProvider.push(data);
        this.setDirty();
        this.resetContentSize();
        this.updateDataProvider();
      };
      ScrollVirtualList.prototype.addRange = function(list) {
        var _a;
        if (null == list || 0 == list.length) return;
        (_a = this.dataProvider).push.apply(_a, list);
        this.setDirty();
        this.resetContentSize();
        this.updateDataProvider();
      };
      ScrollVirtualList.prototype.remove = function(index, count) {
        void 0 === count && (count = 1);
        if (index < 0 || index >= this.dataProvider.length) return;
        if (this.selectedIndex > -1) {
          this._selectedIndex >= index && this._selectedIndex < index + count && (this._selectedIndex = -1);
          if (this.selectedIndices.length > 0) for (var i = this.selectedIndices.length - 1; i >= 0; i++) if (this._selectedIndices[i] >= index && this._selectedIndices[i] < index + count) {
            this._selectedIndices.splice(i, 1);
            break;
          }
        }
        this.dataProvider.splice(index, count);
        this.itemRenderSizeList.splice(index, count);
        this.setDirty();
        this.updateContentSize();
        this.updateDataProvider();
      };
      ScrollVirtualList.prototype.refreshData = function() {
        this.setDirty();
        this.refresh();
      };
      ScrollVirtualList.prototype.getVirtualItemRenderer = function(index) {
        var _this = this;
        if (index < 0 || index >= this.displayingItemRenders.length) return null;
        var itemNode = this.displayingItemRenders.find(function(item) {
          var render = _this.getComponentFromNode(item);
          return render.index == index;
        });
        return itemNode;
      };
      ScrollVirtualList.prototype.resetContentSize = function() {
        var sizeListCount = this.itemRenderSizeList.length;
        var dataLength = this.dataProvider.length;
        if (0 == this.itemSize && null == this.itemSizeFunc && dataLength > 0) {
          var prefab = this.itemPrefab;
          null == this.itemPrefab && null != this.itemPrefabFunc && (prefab = this.itemPrefabFunc(this.dataProvider[0], 0));
          var itemNode = cc.instantiate(prefab);
          itemNode.setParent(this.container);
          itemNode.name = prefab.name;
          this.itemSize = this.isHorizontal ? itemNode.width : itemNode.height;
          this.tempItemRenders.push(itemNode);
          this.cacheTempItemRenderer();
        }
        var size = this.itemSize;
        this.contentSize = 0;
        for (var i = 0; i < dataLength; i++) if (sizeListCount <= i) {
          sizeListCount++;
          null != this.itemSizeFunc && (size = this.itemSizeFunc(this.dataProvider[i], i));
          this.contentSize += size;
          this.itemRenderSizeList.push(size);
        } else this.contentSize += this.itemRenderSizeList[i];
        0 != this.space && dataLength > 0 && (this.contentSize += (dataLength - 1) * this.space);
        if (this.isHorizontal) {
          this.contentSize += this.paddingLeft + this.paddingRight;
          this.container.width = this.contentSize;
        } else {
          this.contentSize += this.paddingTop + this.paddingBottom;
          this.container.height = this.contentSize;
        }
      };
      ScrollVirtualList.prototype.updateContentSize = function() {
        this.itemSize > 0 && null == this.itemSizeFunc && !this.isDynamicItemSize ? this.contentSize = this.dataProvider.length * this.itemSize : this.contentSize = this.itemRenderSizeList.reduce(function(a, b) {
          return a + b;
        }, 0);
        0 != this.space && this.dataProvider.length > 0 && (this.contentSize += (this.dataProvider.length - 1) * this.space);
        if (this.isHorizontal) {
          this.contentSize += this.paddingLeft + this.paddingRight;
          this.container.width = this.contentSize;
        } else {
          this.contentSize += this.paddingTop + this.paddingBottom;
          this.container.height = this.contentSize;
        }
      };
      ScrollVirtualList.prototype.updateDataProvider = function() {
        if (0 == this.dataProvider.length) this.clear(); else {
          this.autoScrollToBottom && this.scrollToBottom();
          this.refresh();
        }
      };
      ScrollVirtualList.prototype.setDirty = function() {
        this.latestVirtualStartIndex = -1;
        this.latestVirtualEndIndex = -1;
      };
      ScrollVirtualList.prototype.refresh = function() {
        var _a;
        var _this = this;
        var _b, _c;
        if (0 == this.dataProvider.length) return;
        var position = this.container.y;
        if (this.isHorizontal) {
          position = this.container.x;
          position > 0 ? position = 0 : this.contentSize > this.viewportSize && position < -(this.contentSize - this.viewportSize) && (position = -(this.contentSize - this.viewportSize));
        } else position < 0 ? position = 0 : this.contentSize > this.viewportSize && position > this.contentSize - this.viewportSize && (position = this.contentSize - this.viewportSize);
        var _d = this.calculateVirtualStartIndex(Math.abs(position)), virtualStartIndex = _d.virtualStartIndex, virtualStartPosition = _d.virtualStartPosition;
        var virtualEndIndex = this.calculateVirtualEndIndex(position, virtualStartIndex, virtualStartPosition);
        var offset = virtualStartPosition;
        var displayItemCount = virtualEndIndex - virtualStartIndex + 1;
        this.alignToBottom && this.contentSize < this.viewportSize && (offset = virtualStartPosition + (this.contentSize - this.viewportSize));
        var needUpdateData = this.latestVirtualStartIndex != virtualStartIndex || this.latestVirtualEndIndex != virtualEndIndex || displayItemCount != this.displayingItemRenders.length;
        if (needUpdateData) {
          var maxIndex = this.dataProvider.length - 1;
          this.latestVirtualEndIndex < maxIndex && virtualEndIndex == maxIndex && this.scheduleOnce(function() {
            _this.onTryToLoadMore();
          }, 0);
          this.onItemDiplayChanged && this.scheduleOnce(function() {
            _this.onItemDiplayChanged(virtualStartIndex, virtualEndIndex);
          }, 0);
        }
        if (needUpdateData) {
          this.latestVirtualStartIndex = virtualStartIndex;
          this.latestVirtualEndIndex = virtualEndIndex;
          if (this.displayingItemRenders.length > 0) {
            (_a = this.tempItemRenders).push.apply(_a, this.displayingItemRenders);
            this.displayingItemRenders.length = 0;
          }
          var itemRendererPrefab = this.itemPrefab;
          for (var i = virtualStartIndex; i <= virtualEndIndex; i++) {
            var itemNode = null;
            null != this.itemPrefabFunc && (itemRendererPrefab = null !== (_b = this.itemPrefabFunc(this.dataProvider[i], i)) && void 0 !== _b ? _b : this.itemPrefab);
            itemNode = this.getReuseItemRenderer(null !== (_c = null === itemRendererPrefab || void 0 === itemRendererPrefab ? void 0 : itemRendererPrefab.name) && void 0 !== _c ? _c : this.itemNode.name, this.dataProvider[i], this.tempItemRenders);
            if (null == itemNode) {
              if (itemRendererPrefab) {
                itemNode = cc.instantiate(itemRendererPrefab);
                itemNode.name = itemRendererPrefab.name;
              } else {
                itemNode = cc.instantiate(this.itemNode);
                itemNode.name = this.itemNode.name;
              }
              this.isDynamicItemSize && itemNode.on(cc.Node.EventType.SIZE_CHANGED, this.onItemSizeChanged, this);
              itemNode.setParent(this.container);
            }
            itemNode.active || (itemNode.active = true);
            var itemComponent = this.getComponentFromNode(itemNode);
            itemComponent.index = i;
            itemComponent.data = this.dataProvider[i];
            this.selectType > 0 && (this.selectType == SelectionType.single_cancelable || this.selectType == SelectionType.single ? itemComponent.selected = i == this.selectedIndex : this.selectType == SelectionType.multiple && (itemComponent.selected = this.selectedIndices.indexOf(i) >= 0));
            if (this.isHorizontal) {
              itemNode.position = cc.v3(offset + itemNode.width / 2, this.paddingTop);
              offset += this.itemRenderSizeList[i] + this.space;
            } else {
              itemNode.position = cc.v3(this.paddingLeft, offset - itemNode.height / 2);
              offset -= this.itemRenderSizeList[i] + this.space;
            }
            this.displayingItemRenders.push(itemNode);
          }
          this.cacheTempItemRenderer();
        } else {
          var displayingIndex = 0;
          for (var i = virtualStartIndex; i <= virtualEndIndex; i++) {
            var itemRenderer = this.displayingItemRenders[displayingIndex];
            if (this.isHorizontal) {
              itemRenderer.position = cc.v3(offset + itemRenderer.width / 2, this.paddingTop, 0);
              offset += this.itemRenderSizeList[i] + this.space;
            } else {
              itemRenderer.position = cc.v3(this.paddingLeft, offset - itemRenderer.height / 2, 0);
              offset -= this.itemRenderSizeList[i] + this.space;
            }
            displayingIndex++;
          }
        }
        this.isDynamicItemSize && this.invalidateDisplayingItemSize();
      };
      ScrollVirtualList.prototype.cacheTempItemRenderer = function() {
        if (null != this.tempItemRenders && this.tempItemRenders.length > 0) {
          for (var i = 0; i < this.tempItemRenders.length; i++) {
            var item = this.tempItemRenders[i];
            var cacheList = this.itemRenderMap.get(item.name);
            null == cacheList && this.itemRenderMap.set(item.name, cacheList = []);
            item.active = false;
            cacheList.push(item);
          }
          this.tempItemRenders.length = 0;
        }
      };
      ScrollVirtualList.prototype.onItemSizeChanged = function(e) {
        if (!this.isDynamicItemSize) return;
        var changed = this.checkItemSizeChanged(e.target);
        changed && this.invalidateContentSize();
      };
      ScrollVirtualList.prototype.checkItemSizeChanged = function(item) {
        var renderer = this.getComponentFromNode(item);
        var oldSize = this.itemRenderSizeList[renderer.index];
        if (this.isHorizontal) {
          if (oldSize == item.width) return false;
          this.itemRenderSizeList[renderer.index] = item.width;
        } else {
          if (oldSize == item.height) return false;
          this.itemRenderSizeList[renderer.index] = item.height;
        }
        return true;
      };
      ScrollVirtualList.prototype.getComponentFromNode = function(node) {
        var renderer;
        renderer = this.itemComponentType ? node.getComponent(this.itemComponentType) : node["_components"][0];
        return renderer;
      };
      ScrollVirtualList.prototype.getReuseItemRenderer = function(itemName, itemData, priorityUseItemRenders) {
        var _this = this;
        var itemRenderer = null;
        if (null != priorityUseItemRenders && priorityUseItemRenders.length > 0) {
          itemRenderer = priorityUseItemRenders.find(function(item) {
            if (item.name == itemName) {
              var render = _this.getComponentFromNode(item);
              return render.data == itemData;
            }
            return false;
          });
          null == itemRenderer && (itemRenderer = priorityUseItemRenders.find(function(item) {
            return item.name == itemName;
          }));
          if (null != itemRenderer) {
            var index = priorityUseItemRenders.indexOf(itemRenderer);
            priorityUseItemRenders.splice(index, 1);
          }
        }
        if (null == itemRenderer) {
          var cacheList = this.itemRenderMap.get(itemName);
          null != cacheList && cacheList.length > 0 && (itemRenderer = cacheList.shift());
        }
        return itemRenderer;
      };
      ScrollVirtualList.prototype.calculateVirtualStartIndex = function(position) {
        var virtualStartIndex = 0;
        var virtualStartPosition = 0;
        var paddingStart = this.paddingTop;
        this.isHorizontal && (paddingStart = this.paddingLeft);
        if (this.itemSize > 0 && null == this.itemSizeFunc && !this.isDynamicItemSize) {
          virtualStartIndex = Math.floor((position + paddingStart) / (this.itemSize + this.space));
          virtualStartIndex < 0 && (virtualStartIndex = 0);
          virtualStartPosition = this.isHorizontal ? virtualStartIndex * (this.itemSize + this.space) + paddingStart : -virtualStartIndex * (this.itemSize + this.space) - paddingStart;
          return {
            virtualStartIndex: virtualStartIndex,
            virtualStartPosition: virtualStartPosition
          };
        }
        var y = -paddingStart;
        virtualStartPosition = y;
        for (var i = 0; i < this.dataProvider.length; i++) {
          var size = this.itemRenderSizeList[i];
          y -= size;
          y -= this.space;
          if (!(y + position >= 0)) break;
          virtualStartIndex++;
          virtualStartPosition = y - paddingStart;
        }
        return {
          virtualStartIndex: virtualStartIndex,
          virtualStartPosition: virtualStartPosition
        };
      };
      ScrollVirtualList.prototype.calculateVirtualEndIndex = function(position, virtualStartIndex, virtualStartPosition) {
        var virtualEndIndex = virtualStartIndex;
        var start = virtualStartPosition;
        if (this.isHorizontal) for (var i = virtualStartIndex; i < this.dataProvider.length; i++) {
          var size = this.itemRenderSizeList[i];
          start += size;
          start += this.space;
          if (!(start + position < this.viewportSize)) break;
          virtualEndIndex++;
        } else for (var i = virtualStartIndex; i < this.dataProvider.length; i++) {
          var size = this.itemRenderSizeList[i];
          start -= size;
          start -= this.space;
          if (!(start > -(position + this.viewportSize))) break;
          virtualEndIndex++;
        }
        virtualEndIndex > this.dataProvider.length - 1 && (virtualEndIndex = this.dataProvider.length - 1);
        return virtualEndIndex;
      };
      ScrollVirtualList.prototype.waitForRefresh = function(scrollToBottom) {
        var _this = this;
        this.scheduleOnce(function() {
          scrollToBottom && _this.scrollToBottom();
          _this.refresh();
        }, 0);
      };
      ScrollVirtualList.prototype.scrollToBottom = function() {
        if (!this.autoScrollEnabled) return;
        this.autoScrollToBottom && this.scrollView.scrollToBottom(0);
      };
      ScrollVirtualList.prototype.clear = function() {
        var _a;
        if (this.displayingItemRenders.length > 0) {
          (_a = this.tempItemRenders).push.apply(_a, this.displayingItemRenders);
          this.displayingItemRenders.length = 0;
        }
        this.cacheTempItemRenderer();
      };
      ScrollVirtualList.prototype.invalidateContentSize = function() {
        var _this = this;
        if (this.waitingForUpdateContentSize) return;
        this.waitingForUpdateContentSize = true;
        this.scheduleOnce(function() {
          _this.waitingForUpdateContentSize = false;
          _this.validateContentSize();
        }, 0);
      };
      ScrollVirtualList.prototype.validateContentSize = function() {
        this.setDirty();
        this.updateContentSize();
        this.autoScrollToBottom && this.scrollToBottom();
        this.refresh();
      };
      ScrollVirtualList.prototype.invalidateDisplayingItemSize = function() {
        var _this = this;
        if (!this.isDynamicItemSize) return;
        if (this.waitingForUpdateDisplayingItemSize) return;
        this.waitingForUpdateDisplayingItemSize = true;
        this.scheduleOnce(function() {
          _this.waitingForUpdateDisplayingItemSize = false;
          var sizeChanged = false;
          for (var i = 0; i < _this.displayingItemRenders.length; i++) {
            var item = _this.displayingItemRenders[i];
            var changed = _this.checkItemSizeChanged(item);
            changed && (sizeChanged = true);
          }
          sizeChanged && _this.validateContentSize();
        }, 0);
      };
      ScrollVirtualList.prototype.onScrollBeganHandler = function() {
        this.contentSize > this.viewportSize && (this.autoScrollEnabled = false);
        this.isDragging = true;
      };
      ScrollVirtualList.prototype.onScrollEndedHandler = function() {
        this.autoScrollEnabled = true;
        this.isDragging = false;
      };
      ScrollVirtualList.prototype.onTryToLoadMore = function() {
        var _this = this;
        this.onLoadMore && this.onLoadMore().then(function(list) {
          list && list.length > 0 && _this.addRange(list);
        });
      };
      ScrollVirtualList.prototype.onContentTouchStartHandler = function(e) {};
      ScrollVirtualList.prototype.onContentTouchEndHandler = function(e) {
        var point = this.container.convertToNodeSpaceAR(e.getLocation());
        var clickItemNode = null;
        for (var i = 0; i < this.displayingItemRenders.length; i++) {
          var itemNode = this.displayingItemRenders[i];
          var centerX = itemNode.x - (itemNode.anchorX - .5) * itemNode.width;
          var centerY = itemNode.y - (itemNode.anchorY - .5) * itemNode.height;
          if (Math.abs(centerX - point.x) < .5 * itemNode.width && Math.abs(centerY - point.y) < .5 * itemNode.height) {
            clickItemNode = itemNode;
            break;
          }
        }
        if (clickItemNode) {
          var itemRenderer = this.getComponentFromNode(clickItemNode);
          if (this.selectType > 0) {
            var selectionDirty = false;
            if (this.selectType == SelectionType.single) {
              selectionDirty = this._selectedIndex != itemRenderer.index;
              this._selectedIndex = itemRenderer.index;
              selectionDirty && null != this.onSelected && this.onSelected(itemRenderer.data, this.selectedIndex);
            } else {
              selectionDirty = true;
              if (this.selectType == SelectionType.multiple) {
                var multiIndex = this._selectedIndices.indexOf(itemRenderer.index);
                if (multiIndex >= 0) {
                  this._selectedIndices.splice(multiIndex, 1);
                  this._selectedIndex = -1;
                } else {
                  this._selectedIndices.push(itemRenderer.index);
                  this._selectedIndex = itemRenderer.index;
                }
              } else this.selectedIndex == itemRenderer.index ? this._selectedIndex = -1 : this._selectedIndex = itemRenderer.index;
              this._selectedIndex >= 0 ? null != this.onSelected && this.onSelected(itemRenderer.data, itemRenderer.index) : null != this.onDiselected && this.onDiselected(itemRenderer.data, itemRenderer.index);
            }
            if (selectionDirty) {
              this.setDirty();
              this.refresh();
            }
          }
          this.onItemClick && this.onItemClick(itemRenderer.data, itemRenderer.index);
        }
      };
      __decorate([ property({
        type: cc.Prefab,
        tooltip: "itemPrefab \u548c itemNode \u4e8c\u9009\u4e00"
      }) ], ScrollVirtualList.prototype, "itemPrefab", void 0);
      __decorate([ property({
        type: cc.Node,
        tooltip: "itemPrefab \u548c itemNode \u4e8c\u9009\u4e00"
      }) ], ScrollVirtualList.prototype, "itemNode", void 0);
      __decorate([ property ], ScrollVirtualList.prototype, "itemSize", void 0);
      __decorate([ property ], ScrollVirtualList.prototype, "isDynamicItemSize", void 0);
      __decorate([ property ], ScrollVirtualList.prototype, "autoScrollToBottom", void 0);
      __decorate([ property ], ScrollVirtualList.prototype, "alignToBottom", void 0);
      __decorate([ property({
        type: cc.Enum(SelectionType),
        tooltip: "\u9009\u4e2d\u7c7b\u578b"
      }) ], ScrollVirtualList.prototype, "selectType", void 0);
      __decorate([ property ], ScrollVirtualList.prototype, "paddingTop", void 0);
      __decorate([ property ], ScrollVirtualList.prototype, "paddingBottom", void 0);
      __decorate([ property ], ScrollVirtualList.prototype, "paddingLeft", void 0);
      __decorate([ property ], ScrollVirtualList.prototype, "paddingRight", void 0);
      __decorate([ property ], ScrollVirtualList.prototype, "space", void 0);
      ScrollVirtualList = __decorate([ ccclass ], ScrollVirtualList);
      return ScrollVirtualList;
    }(cc.Component);
    exports.default = ScrollVirtualList;
    var IVirtualItemRenderer = function(_super) {
      __extends(IVirtualItemRenderer, _super);
      function IVirtualItemRenderer() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      return IVirtualItemRenderer;
    }(cc.Component);
    exports.IVirtualItemRenderer = IVirtualItemRenderer;
    var VirtualItemRenderer = function(_super) {
      __extends(VirtualItemRenderer, _super);
      function VirtualItemRenderer() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      Object.defineProperty(VirtualItemRenderer.prototype, "index", {
        get: function() {
          return this._index;
        },
        set: function(value) {
          this._index = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(VirtualItemRenderer.prototype, "data", {
        get: function() {
          return this._data;
        },
        set: function(value) {
          this._data = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(VirtualItemRenderer.prototype, "selected", {
        get: function() {
          return this._selected;
        },
        set: function(value) {
          this._selected = value;
        },
        enumerable: false,
        configurable: true
      });
      return VirtualItemRenderer;
    }(cc.Component);
    exports.VirtualItemRenderer = VirtualItemRenderer;
    cc._RF.pop();
  }, {} ],
  SelfHead: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "234807Ws1hMbK/2lN3XfKj4", "SelfHead");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var WinText_1 = require("./WinText");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SelfHead = function(_super) {
      __extends(SelfHead, _super);
      function SelfHead() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.animationHead = null;
        _this.winText = null;
        _this.hitQueue = 0;
        _this.isPlaying = false;
        _this.maxQueueSize = 3;
        _this.lastHitTime = 0;
        _this.queueClearDelay = 2e3;
        return _this;
      }
      SelfHead.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.winText.node.active && (this.winText.node.active = false);
        this.animationHead.on(cc.Animation.EventType.FINISHED, this.onAnimFinished, this);
      };
      SelfHead.prototype.hit = function() {
        var currentTime = cc.sys.now();
        currentTime - this.lastHitTime > this.queueClearDelay && (this.hitQueue = 0);
        this.lastHitTime = currentTime;
        this.hitQueue < this.maxQueueSize && this.hitQueue++;
        this.isPlaying || this.playNextHit();
      };
      SelfHead.prototype.playNextHit = function() {
        if (this.hitQueue <= 0) {
          this.isPlaying = false;
          return;
        }
        this.isPlaying = true;
        this.animationHead && this.animationHead.play("animation_self");
      };
      SelfHead.prototype.onAnimFinished = function() {
        this.hitQueue--;
        this.hitQueue > 0 ? this.playNextHit() : this.isPlaying = false;
      };
      SelfHead.prototype.stop = function() {
        this.animationHead && this.animationHead.stop();
        this.hitQueue = 0;
        this.isPlaying = false;
        this.lastHitTime = 0;
      };
      SelfHead.prototype.clearQueue = function() {
        this.hitQueue = Math.min(this.hitQueue, 1);
        this.lastHitTime = cc.sys.now();
      };
      SelfHead.prototype.showWinText = function(text) {
        this.winText.node.active || (this.winText.node.active = true);
        this.winText.node.parent && this.winText.node.setSiblingIndex(-1);
        this.winText.updateText(text);
      };
      SelfHead.prototype.getGlobalAnchor = function() {
        return this.winText.node.convertToWorldSpaceAR(cc.v2(0, 0));
      };
      __decorate([ property(cc.Animation) ], SelfHead.prototype, "animationHead", void 0);
      __decorate([ property(WinText_1.default) ], SelfHead.prototype, "winText", void 0);
      SelfHead = __decorate([ ccclass ], SelfHead);
      return SelfHead;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = SelfHead;
    cc._RF.pop();
  }, {
    "./../base/ModelMessageCarer": "ModelMessageCarer",
    "./WinText": "WinText"
  } ],
  SocketConnection: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "38a91/kKfpCOJwOQu9V8/lX", "SocketConnection");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SocketConnection = void 0;
    var NotificationManager_1 = require("../core/NotificationManager");
    var SocketLoadingImpl_1 = require("./SocketLoadingImpl");
    var SocketConnection = function() {
      function SocketConnection() {
        this.HEADER_SIZE = 11;
        this.HEADER_SIZE_TOS = 9;
        this.ON_CONNECT = "onConnect";
        this.emptyBuff = new Uint8Array();
      }
      Object.defineProperty(SocketConnection, "Instance", {
        get: function() {
          null == this.connection && (this.connection = new SocketConnection());
          return this.connection;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(SocketConnection.prototype, "connected", {
        get: function() {
          return this.socket && this.socket.readyState == this.socket.OPEN;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(SocketConnection.prototype, "url", {
        get: function() {
          return this._url;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(SocketConnection.prototype, "connecting", {
        get: function() {
          return this._connecting;
        },
        enumerable: false,
        configurable: true
      });
      SocketConnection.prototype.reconnect = function() {
        if (!this.url) return;
        if (this.connected || this.connecting) return;
        this.connect(this.url);
      };
      SocketConnection.prototype.connect = function(url) {
        if (this.connected || this.connecting) return;
        this._url = url;
        this._connecting = true;
        if (null == this.socket) {
          this.socket = new WebSocket(url.endsWith("/ws") ? url : url + "/ws");
          this.socket.binaryType = "arraybuffer";
          this.socket.onopen = this.onConnectHandler.bind(this);
          this.socket.onmessage = this.onReceiveDataHandler.bind(this);
          this.socket.onclose = this.onCloseHandler.bind(this);
          this.socket.onerror = this.onErrorHandler.bind(this);
        }
        true;
        console.log("\u6b63\u5728\u8fde\u63a5..." + url);
        SocketLoadingImpl_1.SocketLoadingImpl.Instance.addLoading(this.ON_CONNECT);
      };
      SocketConnection.prototype.onConnectHandler = function(e) {
        this._connecting = false;
        console.log("\u8fde\u63a5\u6210\u529f\u3002");
        SocketLoadingImpl_1.SocketLoadingImpl.Instance.removeLoading(this.ON_CONNECT);
        this.onOpen && this.onOpen();
      };
      SocketConnection.prototype.onCloseHandler = function(e) {
        this._connecting = false;
        console.log("\u8fde\u63a5\u5173\u95ed\u3002");
        SocketLoadingImpl_1.SocketLoadingImpl.Instance.clear();
        this.onClose && this.onClose();
      };
      SocketConnection.prototype.onErrorHandler = function(e) {
        this._connecting = false;
        console.log("\u8fde\u63a5\u53d1\u751f\u9519\u8bef\u3002");
        SocketLoadingImpl_1.SocketLoadingImpl.Instance.clear();
        this.onError && this.onError();
      };
      SocketConnection.prototype.onReceiveDataHandler = function(e) {
        var buff = e.data;
        var dataView = new DataView(buff);
        var errorCode = dataView.getUint16(0);
        var dataSize = dataView.getUint16(2);
        var status = dataView.getUint8(4);
        var flag = dataView.getUint32(5);
        var cmd = dataView.getUint16(9);
        var notification = NotificationManager_1.common.Notification.create();
        if (dataSize > 0) {
          var uint8Array = new Uint8Array(dataSize);
          for (var i = 0; i < dataSize; i++) uint8Array[i] = dataView.getUint8(i + this.HEADER_SIZE);
          notification.toc = this.transfer.decode(cmd, uint8Array);
        } else 0 == errorCode && this.transfer.enableDecodeEmptyBuff && (notification.toc = this.transfer.decode(cmd, this.emptyBuff));
        true;
        var log = this.isPrintLog(cmd);
        if (log && SocketConnection.connection == this) {
          dataSize > 0 && null == notification.toc && console.warn("\u6570\u636e\u89e3\u5305\u51fa\u9519\uff0c\u8bf7\u91cd\u65b0\u5bfc\u51fa\u6a21\u5757\u63a5\u53e3\uff1a" + cmd);
          notification.toc && console.log(notification.toc);
        }
        notification.cmd = cmd;
        notification.errorCode = errorCode;
        notification.flag = flag;
        SocketLoadingImpl_1.SocketLoadingImpl.Instance.removeLoading(cmd.toString());
        NotificationManager_1.common.NotificationManager.getInstance().receive(notification);
      };
      SocketConnection.prototype.send = function(cmd, flag_id, tos, showLoading) {
        if (!this.connected) {
          this.onClose && this.onClose();
          return;
        }
        var dataBytes = this.transfer.encode(cmd, tos);
        var dataSize = null == dataBytes ? 0 : dataBytes.byteLength;
        var arrayBuff = new ArrayBuffer(this.HEADER_SIZE_TOS + dataSize);
        var dataView = new DataView(arrayBuff);
        dataView.setUint16(0, dataSize);
        dataView.setUint8(2, 0);
        dataView.setUint32(3, flag_id);
        dataView.setUint16(7, cmd);
        if (dataSize > 0) for (var i = 0; i < dataSize; i++) dataView.setUint8(this.HEADER_SIZE_TOS + i, dataBytes[i]);
        this.socket.send(arrayBuff);
        true;
        var log = this.isPrintLog(cmd);
        log && SocketConnection.connection == this && tos && console.log(tos);
        showLoading && SocketLoadingImpl_1.SocketLoadingImpl.Instance.addLoading(cmd.toString());
      };
      SocketConnection.prototype.isPrintLog = function(cmd) {
        switch (cmd) {
         case 1099:
          return false;
        }
        return true;
      };
      SocketConnection.prototype.close = function() {
        if (null == this.socket) return;
        this.socket.onopen = null;
        this.socket.onmessage = null;
        this.socket.onclose = null;
        this.socket.onerror = null;
        this.socket.close();
        this.socket = null;
        this._connecting = false;
        SocketLoadingImpl_1.SocketLoadingImpl.Instance.clear();
      };
      SocketConnection.prototype.clear = function() {
        this._url = null;
        this.close();
      };
      return SocketConnection;
    }();
    exports.SocketConnection = SocketConnection;
    cc._RF.pop();
  }, {
    "../core/NotificationManager": "NotificationManager",
    "./SocketLoadingImpl": "SocketLoadingImpl"
  } ],
  SocketLoadingImpl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3ca86WnyKdNa7jN/W32ijyg", "SocketLoadingImpl");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SocketLoadingImpl = void 0;
    var TimerManager_1 = require("../core/TimerManager");
    var SocketLoadingImpl = function() {
      function SocketLoadingImpl() {
        this.useProxy = false;
        this.loadingDict = {};
        this.currentDuration = 0;
        this.timerId = 0;
        this.timerInterval = 50;
      }
      Object.defineProperty(SocketLoadingImpl, "Instance", {
        get: function() {
          null == SocketLoadingImpl.instance && (SocketLoadingImpl.instance = new SocketLoadingImpl());
          return SocketLoadingImpl.instance;
        },
        enumerable: false,
        configurable: true
      });
      SocketLoadingImpl.prototype.init = function(proxy) {
        this.loadingProxy = proxy;
        this.useProxy = true;
        this.delay = proxy.delay;
        this.timeout = proxy.timeout;
        this.cares = proxy.cares;
        if (null == this.cares || 0 == this.cares.length) {
          this.cares = null;
          this.ignores = proxy.ignores;
        }
        this.timeout <= 0 && (this.timeout = 1e4);
      };
      Object.defineProperty(SocketLoadingImpl.prototype, "enable", {
        get: function() {
          return this.useProxy;
        },
        set: function(value) {
          if (value == this.useProxy) return;
          value || this.clear();
          this.useProxy = value;
        },
        enumerable: false,
        configurable: true
      });
      SocketLoadingImpl.prototype.addLoading = function(cmd) {
        if (this.currentCmd == cmd || null == cmd || !this.useProxy) return;
        if (null != this.cares) {
          var yes = false;
          for (var i = 0; i < this.cares.length; i++) if (this.cares[i] == cmd) {
            yes = true;
            break;
          }
          if (!yes) return;
        }
        if (null != this.ignores && this.ignores.length > 0) for (var i = 0; i < this.ignores.length; i++) if (this.ignores[i] == cmd) return;
        null != this.currentCmd ? void 0 == this.loadingDict[cmd] && (this.loadingDict[cmd] = cc.sys.now()) : this.showNextLoading(cmd);
      };
      SocketLoadingImpl.prototype.removeLoading = function(cmd) {
        if (!this.useProxy) return;
        void 0 != this.loadingDict[cmd] && delete this.loadingDict[cmd];
        if (this.currentCmd == cmd) {
          this.currentCmd = null;
          this.currentDuration = 0;
          this.removeTimer();
          this.showNextLoading();
        }
      };
      SocketLoadingImpl.prototype.showNextLoading = function(nextCmd) {
        void 0 === nextCmd && (nextCmd = null);
        if (null != nextCmd) {
          this.currentCmd = nextCmd;
          this.currentDuration = 0;
        } else {
          this.currentCmd = null;
          for (var exist in this.loadingDict) {
            this.currentCmd = exist;
            break;
          }
          null != this.currentCmd && (this.currentDuration = Math.max(cc.sys.now() - this.loadingDict[this.currentCmd], 0));
        }
        if (null != this.currentCmd) if (this.currentDuration >= this.delay) {
          this.loadingProxy.show(this.currentCmd);
          this.addTimer(false);
        } else this.addTimer(true); else {
          this.removeTimer();
          this.loadingProxy.hide();
        }
      };
      SocketLoadingImpl.prototype.addTimer = function(checkDelay) {
        this.timerId > 0 && TimerManager_1.TimerManager.Instance.removeTimer(this.timerId);
        this.timerId = checkDelay ? TimerManager_1.TimerManager.Instance.addCountdown(this.timeout, this, this.timeoutHandler, this.timerUpdateHandler, this.timerInterval) : TimerManager_1.TimerManager.Instance.addCountdown(this.timeout, this, this.timeoutHandler, null, this.timerInterval);
      };
      SocketLoadingImpl.prototype.timerUpdateHandler = function() {
        var last = this.currentDuration;
        this.currentDuration += this.timerInterval;
        last < this.delay && this.currentDuration >= this.delay && this.loadingProxy.show(this.currentCmd);
      };
      SocketLoadingImpl.prototype.timeoutHandler = function() {
        this.timerId = 0;
        this.loadingDict = {};
        this.loadingProxy.showTimeout(this.currentCmd);
        this.currentCmd = null;
        this.currentDuration = 0;
      };
      SocketLoadingImpl.prototype.removeTimer = function() {
        if (this.timerId > 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.timerId);
          this.timerId = 0;
        }
      };
      SocketLoadingImpl.prototype.clear = function() {
        this.loadingDict = {};
        this.timerId > 0 && this.removeTimer();
        if (null != this.currentCmd) {
          this.currentCmd = null;
          this.currentDuration = 0;
          this.loadingProxy.hide();
        }
      };
      return SocketLoadingImpl;
    }();
    exports.SocketLoadingImpl = SocketLoadingImpl;
    cc._RF.pop();
  }, {
    "../core/TimerManager": "TimerManager"
  } ],
  SocketLoadingView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ab4622vQp9O2ozmQDFWIndv", "SocketLoadingView");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SocketLoadingProxy = void 0;
    var LayerManager_1 = require("../../manager/LayerManager");
    var TimerManager_1 = require("../../common/core/TimerManager");
    var ModelMessageCarer_1 = require("../base/ModelMessageCarer");
    var UIDefine_1 = require("../../common/init/UIDefine");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var SocketLoadingView = function(_super) {
      __extends(SocketLoadingView, _super);
      function SocketLoadingView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nodeLoading = null;
        _this.textLoading = null;
        _this.timerId = 0;
        return _this;
      }
      SocketLoadingView.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      SocketLoadingView.prototype.start = function() {};
      SocketLoadingView.prototype.update = function(dt) {
        this.nodeLoading.angle = (this.nodeLoading.angle - 5) % 360;
      };
      SocketLoadingView.prototype.show = function(cmd) {
        LayerManager_1.LayerManager.Instance.addChild(this.node, LayerManager_1.LayerType.layer_modal);
        this.removeTimer();
      };
      SocketLoadingView.prototype.showTimeout = function(cmd) {
        this.textLoading.node.active = true;
        this.addTimer();
      };
      SocketLoadingView.prototype.hide = function() {
        LayerManager_1.LayerManager.Instance.removeChild(this.node, false);
        this.removeTimer();
      };
      SocketLoadingView.prototype.addTimer = function() {
        0 == this.timerId && (this.timerId = TimerManager_1.TimerManager.Instance.addCountdown(3e3, this, this.timerOverHandler));
      };
      SocketLoadingView.prototype.removeTimer = function() {
        if (this.timerId > 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.timerId);
          this.timerId = 0;
        }
        this.textLoading.node.active && (this.textLoading.node.active = false);
      };
      SocketLoadingView.prototype.timerOverHandler = function() {
        this.timerId = 0;
        this.hide();
      };
      __decorate([ property(cc.Node) ], SocketLoadingView.prototype, "nodeLoading", void 0);
      __decorate([ property(cc.Label) ], SocketLoadingView.prototype, "textLoading", void 0);
      SocketLoadingView = __decorate([ ccclass ], SocketLoadingView);
      return SocketLoadingView;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = SocketLoadingView;
    var SocketLoadingProxy = function() {
      function SocketLoadingProxy() {
        this.delay = 500;
        this.timeout = 1e4;
        this.ignores = [ "1098" ];
        this.cares = null;
      }
      SocketLoadingProxy.prototype.createLoadingView = function() {
        if (null == this.socketLoadingView) {
          var prefab = LayerManager_1.LayerManager.Instance.getUIPrefab(UIDefine_1.UIDefine.SocketLoadingView);
          if (prefab) {
            var node = cc.instantiate(prefab);
            this.socketLoadingView = node.getComponent(SocketLoadingView);
          }
        }
      };
      SocketLoadingProxy.prototype.show = function(cmd) {
        this.createLoadingView();
        this.socketLoadingView && this.socketLoadingView.show(cmd);
      };
      SocketLoadingProxy.prototype.showTimeout = function(cmd) {
        this.createLoadingView();
        this.socketLoadingView && this.socketLoadingView.showTimeout(cmd);
      };
      SocketLoadingProxy.prototype.hide = function() {
        null != this.socketLoadingView && this.socketLoadingView.hide();
      };
      return SocketLoadingProxy;
    }();
    exports.SocketLoadingProxy = SocketLoadingProxy;
    cc._RF.pop();
  }, {
    "../../common/core/TimerManager": "TimerManager",
    "../../common/init/UIDefine": "UIDefine",
    "../../manager/LayerManager": "LayerManager",
    "../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  StringUtil: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9dff2ozzY5FtJbMiVuA6BfF", "StringUtil");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var NativeUtil_1 = require("./NativeUtil");
    var StringUtil = function() {
      function StringUtil() {}
      StringUtil.isNumOrLetters = function(value) {
        var regExp = new RegExp("[a-zA-Z0-9]{5,15}", "gi");
        return regExp.exec(value).length > 0;
      };
      StringUtil.copyToClipboard = function(content) {
        if (cc.sys.isBrowser) {
          var inputElement = document.createElement("input");
          inputElement.setAttribute("value", content);
          document.body.appendChild(inputElement);
          inputElement.select();
          document.execCommand("copy");
          document.body.removeChild(inputElement);
        } else NativeUtil_1.default.Instance.copyToClipBoard(content);
      };
      StringUtil.timestampToString = function(time, outputFormat) {
        void 0 === outputFormat && (outputFormat = "YYYY/MM/DD hh:mm:ss");
        StringUtil.timestampDate.setTime(1e3 * time);
        return StringUtil.dateToString(StringUtil.timestampDate, outputFormat);
      };
      StringUtil.dateToString = function(date, outputFormat) {
        void 0 === outputFormat && (outputFormat = "YYYY/MM/DD hh:mm:ss");
        var result;
        var year = "";
        var month = "";
        var day = "";
        var hour = "";
        var minute = "";
        var second = "";
        var yearReg = /Y{2,4}/;
        var monthReg = /M{1,2}/;
        var dateReg = /D{1,2}/;
        var hourReg = /h{1,2}/;
        var minuteReg = /m{1,2}/;
        var secondReg = /s{1,2}/;
        result = outputFormat.match(yearReg);
        result && result.length > 0 && (year = date.getFullYear().toString().slice(4 - result[0].length));
        result = outputFormat.match(monthReg);
        if (result && result.length > 0) {
          month = result[0];
          month = month.length > 1 ? (date.getMonth() < 9 ? "0" : "") + (date.getMonth() + 1) : date.getMonth() + 1 + "";
        }
        result = outputFormat.match(dateReg);
        if (result && result.length > 0) {
          day = result[0];
          day = day.length > 1 ? (date.getDate() < 10 ? "0" : "") + date.getDate() : date.getDate() + "";
        }
        result = outputFormat.match(hourReg);
        if (result && result.length > 0) {
          hour = result[0];
          hour = hour.length > 1 ? (date.getHours() < 10 ? "0" : "") + date.getHours() : date.getHours() + "";
        }
        result = outputFormat.match(minuteReg);
        if (result && result.length > 0) {
          minute = result[0];
          minute = minute.length > 1 ? (date.getMinutes() < 10 ? "0" : "") + date.getMinutes() : date.getMinutes() + "";
        }
        result = outputFormat.match(secondReg);
        if (result && result.length > 0) {
          second = result[0];
          second = second.length > 1 ? (date.getSeconds() < 10 ? "0" : "") + date.getSeconds() : date.getSeconds() + "";
        }
        outputFormat = outputFormat.replace(yearReg, year);
        outputFormat = outputFormat.replace(monthReg, month);
        outputFormat = outputFormat.replace(dateReg, day);
        outputFormat = outputFormat.replace(hourReg, hour);
        outputFormat = outputFormat.replace(minuteReg, minute);
        outputFormat = outputFormat.replace(secondReg, second);
        return outputFormat;
      };
      StringUtil.isStrEmpty = function(value) {
        return null == value || "" == value;
      };
      StringUtil.replaceString = function(str) {
        var param = [];
        for (var _i = 1; _i < arguments.length; _i++) param[_i - 1] = arguments[_i];
        var result = str.match(StringUtil.reg);
        var resultStr;
        if (null != result) {
          resultStr = str;
          for (var i = 0; i < result.length; i++) {
            var index = result[i].slice(1, -1);
            var replace = param.length > index ? param[index] : "";
            resultStr = resultStr.replace(result[i], replace);
          }
          return resultStr;
        }
        return str;
      };
      StringUtil.getUrlVariable = function(paramName) {
        if (null == StringUtil.queryMap) {
          var query = window.location.search.substring(1);
          var vars = query.split("&");
          var map = StringUtil.queryMap = new Map();
          for (var i = 0; i < vars.length; i++) {
            var idx = vars[i].indexOf("=");
            var name = vars[i].slice(0, idx).trim();
            var value = vars[i].slice(idx + 1).trim();
            map.set(name, value);
          }
        }
        if (StringUtil.queryMap.has(paramName)) return StringUtil.queryMap.get(paramName);
        return "";
      };
      StringUtil.getNodePath = function(node) {
        var names = [ node.name ];
        while (node.parent) {
          names.push(node.parent.name);
          node = node.parent;
        }
        if (names.length > 1) {
          names.reverse();
          names.shift();
        }
        return names.join("/");
      };
      StringUtil.secondsToString = function(seconds, format) {
        void 0 === format && (format = "hh:mm:ss");
        var h = Math.floor(seconds / 3600);
        var m = Math.floor(seconds % 3600 / 60);
        var s = seconds % 60;
        var result;
        var hour;
        var minute;
        var second;
        var hourReg = /h{1,2}/;
        var minuteReg = /m{1,2}/;
        var secondReg = /s{1,2}/;
        result = format.match(hourReg);
        result && result.length > 0 && (hour = result[0]);
        hour = hour ? hour.length > 1 ? (h < 10 ? "0" : "") + h : h + "" : "";
        result = format.match(minuteReg);
        result && result.length > 0 && (minute = result[0]);
        minute = minute ? minute.length > 1 ? (m < 10 ? "0" : "") + m : m + "" : "";
        result = format.match(secondReg);
        result && result.length > 0 && (second = result[0]);
        second = second ? second.length > 1 ? (s < 10 ? "0" : "") + s : s + "" : "";
        format = format.replace(hourReg, hour);
        format = format.replace(minuteReg, minute);
        format = format.replace(secondReg, second);
        return format;
      };
      StringUtil.decodeUnicode = function(str) {
        return str.replace(/\\u([0-9a-fA-F]{4})/g, function(match, grp) {
          return String.fromCharCode(parseInt(grp, 16));
        });
      };
      StringUtil.formatNumber = function(str) {
        var number = parseFloat(str);
        if (isNaN(number)) return "0.00";
        var fixed = number.toFixed(2);
        var parts = fixed.split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
      };
      StringUtil.utf8Encode = function(str) {
        var encoder = [];
        for (var i = 0; i < str.length; i++) {
          var charcode = str.charCodeAt(i);
          if (charcode < 128) encoder.push(charcode); else if (charcode < 2048) encoder.push(192 | charcode >> 6, 128 | 63 & charcode); else if (charcode < 55296 || charcode >= 57344) encoder.push(224 | charcode >> 12, 128 | charcode >> 6 & 63, 128 | 63 & charcode); else {
            i++;
            charcode = 65536 + ((1023 & charcode) << 10 | 1023 & str.charCodeAt(i));
            encoder.push(240 | charcode >> 18, 128 | charcode >> 12 & 63, 128 | charcode >> 6 & 63, 128 | 63 & charcode);
          }
        }
        return new Uint8Array(encoder);
      };
      StringUtil.bytesToHexString = function(bytes, separator) {
        void 0 === separator && (separator = " ");
        return Array.from(bytes).map(function(n) {
          return n.toString(16).padStart(2, "0");
        }).join(separator);
      };
      StringUtil.hexStringToBytes = function(hex) {
        var bytes = [];
        for (var i = 0; i < hex.length; i += 2) bytes.push(parseInt(hex.substr(i, 2), 16));
        return bytes;
      };
      StringUtil.stringToUtf8Bytes = function(str) {
        var encoder = new TextEncoder();
        return Array.from(encoder.encode(str));
      };
      StringUtil.utf8BytesToString = function(bytes) {
        var decoder = new TextDecoder();
        return decoder.decode(new Uint8Array(bytes));
      };
      StringUtil.numberToString = function(value, precision) {
        void 0 === precision && (precision = 1);
        if (value < 1e3) return value.toString();
        if (value % 1e3 == 0) return value / 1e3 + "K";
        if (value > 1e5) return Math.floor(value / 1e3) + "K";
        if (value > 1e4) return (.01 * Math.floor(value / 100)).toPrecision(precision + 2) + "K";
        return (.01 * Math.floor(value / 100)).toPrecision(precision + 1) + "K";
      };
      StringUtil.timestampDate = new Date();
      StringUtil.reg = new RegExp("\\{\\d\\}", "g");
      return StringUtil;
    }();
    exports.default = StringUtil;
    cc._RF.pop();
  }, {
    "./NativeUtil": "NativeUtil"
  } ],
  Tabbar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "292d7joZ85Jlo4Coxuygk5X", "Tabbar");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TabbarItem = exports.ITabbarItem = void 0;
    var ObjectUtil_1 = require("../../util/ObjectUtil");
    var BaseComponent_1 = require("../base/BaseComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Tabbar = function(_super) {
      __extends(Tabbar, _super);
      function Tabbar() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nodeTabList = [];
        _this.itemComponentType = null;
        _this._selectedIndex = 0;
        _this.dataProvider = [];
        return _this;
      }
      Tabbar.prototype.onLoad = function() {
        var _this = this;
        _super.prototype.onLoad.call(this);
        this.nodeTabList.forEach(function(node) {
          node.on(cc.Node.EventType.TOUCH_END, _this.onClickItemHandler, _this);
        });
      };
      Tabbar.prototype.start = function() {
        this.refresh();
      };
      Object.defineProperty(Tabbar.prototype, "selectedIndex", {
        get: function() {
          return this._selectedIndex;
        },
        set: function(value) {
          if (this._selectedIndex == value) return;
          this._selectedIndex = value;
          this.refresh();
        },
        enumerable: false,
        configurable: true
      });
      Tabbar.prototype.setData = function(dataProvider, resetSelectedIndex) {
        this.dataProvider = null !== dataProvider && void 0 !== dataProvider ? dataProvider : [];
        void 0 !== resetSelectedIndex && (this._selectedIndex = resetSelectedIndex);
        this.updateDataProvider();
        this.refresh();
      };
      Tabbar.prototype.updateDataProvider = function() {
        var _this = this;
        ObjectUtil_1.ObjectUtil.generateNodeList(this.dataProvider.length, this.nodeTabList, null, null, function(index, count, item) {
          item.on(cc.Node.EventType.TOUCH_END, _this.onClickItemHandler, _this);
        });
        this.nodeTabList.forEach(function(node, index) {
          if (!node.active) return;
          var item = _this.getComponentFromNode(node);
          item.index = index;
          item.data = _this.dataProvider[index];
          item.selected = index == _this._selectedIndex;
        });
      };
      Tabbar.prototype.onClickItemHandler = function(event) {
        var node = event.target;
        var item = this.getComponentFromNode(node);
        if (item) {
          var index = this.nodeTabList.indexOf(node);
          if (-1 == index) return;
          if (index === this.selectedIndex) return;
          this.selectedIndex = index;
          this.onSelected && this.onSelected(item.data, index);
        }
      };
      Tabbar.prototype.refresh = function() {
        var _this = this;
        this.nodeTabList.forEach(function(node, index) {
          if (!node.active) return;
          var item = _this.getComponentFromNode(node);
          item && (item.selected = index == _this._selectedIndex);
        });
      };
      Tabbar.prototype.getComponentFromNode = function(node) {
        var renderer;
        renderer = this.itemComponentType ? node.getComponent(this.itemComponentType) : node["_components"][0];
        return renderer;
      };
      __decorate([ property([ cc.Node ]) ], Tabbar.prototype, "nodeTabList", void 0);
      Tabbar = __decorate([ ccclass ], Tabbar);
      return Tabbar;
    }(BaseComponent_1.default);
    exports.default = Tabbar;
    var ITabbarItem = function(_super) {
      __extends(ITabbarItem, _super);
      function ITabbarItem() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      return ITabbarItem;
    }(cc.Component);
    exports.ITabbarItem = ITabbarItem;
    var TabbarItem = function(_super) {
      __extends(TabbarItem, _super);
      function TabbarItem() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      Object.defineProperty(TabbarItem.prototype, "index", {
        get: function() {
          return this._index;
        },
        set: function(value) {
          this._index = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TabbarItem.prototype, "data", {
        get: function() {
          return this._data;
        },
        set: function(value) {
          this._data = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TabbarItem.prototype, "selected", {
        get: function() {
          return this._selected;
        },
        set: function(value) {
          this._selected = value;
        },
        enumerable: false,
        configurable: true
      });
      return TabbarItem;
    }(cc.Component);
    exports.TabbarItem = TabbarItem;
    cc._RF.pop();
  }, {
    "../../util/ObjectUtil": "ObjectUtil",
    "../base/BaseComponent": "BaseComponent"
  } ],
  TaskItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f35c6cgNOpMKIi6Vrq6+bWm", "TaskItem");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimalModel_1 = require("../../model/AnimalModel");
    var proto_1 = require("../../proto/proto");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TaskItem = function(_super) {
      __extends(TaskItem, _super);
      function TaskItem() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.spriteLight = null;
        _this.nodeRect = null;
        _this.spriteIcon = null;
        _this.TASK_COLOR = new cc.Color(16370476);
        return _this;
      }
      TaskItem.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      TaskItem.prototype.onDisable = function() {
        this.setComplete();
      };
      TaskItem.prototype.setIcon = function(type) {
        var animalModel = AnimalModel_1.AnimalModel.Instance;
        var iconIndex = type === proto_1.e_win_type.balance ? 0 : 3;
        var icons = animalModel.res.taskItemIcons;
        iconIndex >= 0 && iconIndex < icons.length && this.spriteIcon ? this.spriteIcon.spriteFrame = icons[iconIndex] : console.warn("TaskItem: Invalid icon index " + iconIndex + " or missing sprite");
      };
      TaskItem.prototype.showLight = function() {
        if (!this.spriteLight) return;
        this.spriteLight.node.active = true;
        this.spriteLight.node.angle = 0;
        cc.tween(this.spriteLight.node).by(2, {
          angle: 360
        }).repeatForever().start();
      };
      TaskItem.prototype.hideLight = function() {
        if (!this.spriteLight) return;
        cc.Tween.stopAllByTarget(this.spriteLight.node);
        this.spriteLight.node.active = false;
      };
      TaskItem.prototype.setComplete = function() {
        var _a;
        this.nodeRect.color = this.TASK_COLOR;
        var animalModel = AnimalModel_1.AnimalModel.Instance;
        var icons = null === (_a = null === animalModel || void 0 === animalModel ? void 0 : animalModel.res) || void 0 === _a ? void 0 : _a.taskItemIcons;
        icons && icons.length > 4 && this.spriteIcon && (this.spriteIcon.spriteFrame = icons[4]);
        this.hideLight();
      };
      TaskItem.prototype.setDoing = function() {
        this.nodeRect.color = this.TASK_COLOR;
        this.showLight();
      };
      TaskItem.prototype.setNormal = function() {
        this.nodeRect.color = this.TASK_COLOR;
        this.hideLight();
      };
      __decorate([ property(cc.Sprite) ], TaskItem.prototype, "spriteLight", void 0);
      __decorate([ property(cc.Node) ], TaskItem.prototype, "nodeRect", void 0);
      __decorate([ property(cc.Sprite) ], TaskItem.prototype, "spriteIcon", void 0);
      TaskItem = __decorate([ ccclass ], TaskItem);
      return TaskItem;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = TaskItem;
    cc._RF.pop();
  }, {
    "../../model/AnimalModel": "AnimalModel",
    "../../proto/proto": "proto",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  TimerManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fc896k86jBBvKTtUBUs/QYI", "TimerManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CommonCallback = exports.TimerManager = void 0;
    var TimerManager = function() {
      function TimerManager() {
        this.countdownList = new Array();
        this.waitingRemoveList = new Array();
        this.waitingAddList = new Array();
        this.delayCallList = new Array();
        this.updateWaiting = false;
      }
      Object.defineProperty(TimerManager, "Instance", {
        get: function() {
          null == TimerManager.instance && (TimerManager.instance = new TimerManager());
          return TimerManager.instance;
        },
        enumerable: false,
        configurable: true
      });
      TimerManager.prototype.addCountdown = function(millseconds, thisObj, overHandler, updateHandler, updateInterval) {
        void 0 === updateInterval && (updateInterval = 1e3);
        var option = new CountdownOption();
        option.init(millseconds, thisObj, overHandler, updateHandler, updateInterval);
        this.updateWaiting ? this.waitingAddList.push(option) : this.countdownList.push(option);
        return option.id;
      };
      TimerManager.prototype.removeTimer = function(id) {
        if (!id) return;
        if (this.updateWaiting) {
          var option = this.getCountdownOption(id);
          if (null != option) {
            option.destroy();
            this.waitingRemoveList.push(id);
          } else for (var i = 0; i < this.waitingAddList.length; i++) if (this.waitingAddList[i].id == id) {
            this.waitingAddList.splice(i, 1);
            return;
          }
          return;
        }
        for (var i = 0; i < this.countdownList.length; i++) if (this.countdownList[i].id == id) {
          this.countdownList.splice(i, 1);
          return;
        }
      };
      TimerManager.prototype.updateTimerInterval = function(id, updateInterval) {
        if (this.updateWaiting) {
          var option = this.getCountdownOption(id);
          if (null != option) option.updateInterval = updateInterval; else for (var i = 0; i < this.waitingAddList.length; i++) if (this.waitingAddList[i].id == id) {
            this.waitingAddList[i].updateInterval = updateInterval;
            return;
          }
          return;
        }
        for (var i = 0; i < this.countdownList.length; i++) if (this.countdownList[i].id == id) {
          this.countdownList[i].updateInterval = updateInterval;
          return;
        }
      };
      TimerManager.prototype.getCountdownOption = function(id) {
        for (var i = 0; i < this.countdownList.length; i++) if (this.countdownList[i].id == id) return this.countdownList[i];
        return null;
      };
      TimerManager.prototype.getCountdownOptionIndex = function(id) {
        for (var i = 0; i < this.countdownList.length; i++) if (this.countdownList[i].id == id) return i;
        return -1;
      };
      TimerManager.prototype.addDelayCall = function(func, thisObj, unique) {
        void 0 === unique && (unique = true);
        if (unique) for (var i = 0; i < this.delayCallList.length; i++) {
          var callback = this.delayCallList[i];
          if (callback.callback == func && callback.thisObj == thisObj) return;
        }
        this.delayCallList.push(new CommonCallback(func, thisObj));
      };
      TimerManager.prototype.update = function(dt) {
        if (this.delayCallList.length > 0) {
          var count_1 = this.delayCallList.length;
          for (var i = 0; i < count_1; i++) this.delayCallList[i].call();
          this.delayCallList.length <= count_1 ? this.delayCallList.length = 0 : this.delayCallList.splice(0, count_1);
        }
        var deltaTime = dt;
        var count = this.countdownList.length;
        this.updateWaiting = true;
        for (var i = 0; i < count; i++) {
          var option = this.countdownList[i];
          option.time += deltaTime;
          if (option.isNeedUpdateCall) {
            option.updateTime += deltaTime;
            if (option.updateTime >= option.updateInterval) {
              option.updateInterval > 0 ? option.updateTime %= option.updateInterval : option.updateTime = 0;
              option.updateCallback.call(option.thisObj);
            }
          }
          if (option.time >= option.countdown) {
            this.waitingRemoveList.push(option.id);
            if (option.isNeedOverCall) {
              var func = option.overCallback;
              var thisObj = option.thisObj;
              option.destroy();
              func.call(thisObj);
            } else option.destroy();
          }
        }
        this.updateWaiting = false;
        if (this.waitingRemoveList.length > 0) {
          for (var i = 0; i < this.waitingRemoveList.length; i++) {
            var optionIndex = this.getCountdownOptionIndex(this.waitingRemoveList[i]);
            optionIndex >= 0 && this.countdownList.splice(optionIndex, 1);
          }
          this.waitingRemoveList.length = 0;
        }
        if (this.waitingAddList.length > 0) {
          for (var i = 0; i < this.waitingAddList.length; i++) this.countdownList.push(this.waitingAddList[i]);
          this.waitingAddList.length = 0;
        }
      };
      TimerManager.prototype.toString = function() {
        return "timer count\uff1a" + this.countdownList.length;
      };
      return TimerManager;
    }();
    exports.TimerManager = TimerManager;
    var CountdownOption = function() {
      function CountdownOption() {
        this.time = 0;
        this.updateTime = 0;
      }
      Object.defineProperty(CountdownOption.prototype, "getFlag", {
        get: function() {
          return CountdownOption.flag++;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(CountdownOption.prototype, "id", {
        get: function() {
          return this._id;
        },
        enumerable: false,
        configurable: true
      });
      CountdownOption.prototype.init = function(countdown, thisObj, overHandler, updateHandler, updateInterval) {
        this._id = this.getFlag;
        this.countdown = countdown > 0 ? countdown : Number.MAX_VALUE;
        this.thisObj = thisObj;
        this.updateTime = 0;
        this.time = 0;
        if (null != overHandler) {
          this.overCallback = overHandler;
          this.isNeedOverCall = true;
        } else {
          this.overCallback = null;
          this.isNeedOverCall = false;
        }
        if (null != updateHandler) {
          this.updateCallback = updateHandler;
          this.updateInterval = updateInterval;
          this.isNeedUpdateCall = true;
        } else {
          this.updateCallback = null;
          this.updateInterval = 0;
          this.isNeedUpdateCall = false;
        }
      };
      CountdownOption.prototype.destroy = function() {
        this.isNeedOverCall = false;
        this.isNeedUpdateCall = false;
        this.thisObj = null;
        null != this.overCallback && (this.overCallback = null);
        null != this.updateCallback && (this.updateCallback = null);
      };
      CountdownOption.flag = 1;
      return CountdownOption;
    }();
    var CommonCallback = function() {
      function CommonCallback(callback, thisObj) {
        this.callback = callback;
        this.thisObj = thisObj;
      }
      CommonCallback.prototype.call = function() {
        if (null != this.callback) {
          this.callback.call(this.thisObj);
          this.callback = null;
          this.thisObj = null;
        }
      };
      return CommonCallback;
    }();
    exports.CommonCallback = CommonCallback;
    cc._RF.pop();
  }, {} ],
  TipView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7e0a8X+OiRMW5EmqOTy0zBe", "TipView");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var UIName_1 = require("../../common/init/UIName");
    var ResLoadManager_1 = require("../../manager/ResLoadManager");
    var UIDefine_1 = require("../../common/init/UIDefine");
    var LayerManager_1 = require("../../manager/LayerManager");
    var BaseComponent_1 = require("../base/BaseComponent");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var State;
    (function(State) {
      State[State["showing"] = 0] = "showing";
      State[State["normal"] = 1] = "normal";
      State[State["hiding"] = 2] = "hiding";
      State[State["none"] = 3] = "none";
    })(State || (State = {}));
    var TipView = function(_super) {
      __extends(TipView, _super);
      function TipView() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.textTip = null;
        _this.FADE_DURATION = .3;
        _this.delay = 0;
        _this.currentState = State.none;
        return _this;
      }
      TipView_1 = TipView;
      TipView.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.textTip.node.on(cc.Node.EventType.SIZE_CHANGED, this.textResizeHanlder, this);
      };
      TipView.prototype.onEnable = function() {};
      TipView.prototype.textResizeHanlder = function() {
        this.node.width = this.textTip.node.width + 100;
        this.node.height = Math.max(60, this.textTip.node.height + 30);
      };
      TipView.prototype.show = function(tip, duration) {
        this.textTip.string = tip;
        duration < .5 && (duration = .5);
        this.delay = duration;
        if (this.currentState == State.hiding) {
          this.currentState = State.showing;
          this.fadeTween(this.node.opacity, 255, (255 - this.node.opacity) / 255 * this.FADE_DURATION);
        } else this.currentState == State.none && this.nextState();
      };
      TipView.prototype.update = function(dt) {
        if (this.currentState == State.none) return;
        if (this.currentState == State.normal) {
          this.delay > 0 && (this.delay -= dt);
          this.delay <= 0 && this.nextState();
        }
      };
      TipView.prototype.nextState = function() {
        if (this.currentState == State.none) {
          this.currentState = State.showing;
          this.fadeTween(0, 255);
        } else if (this.currentState == State.showing) this.currentState = State.normal; else if (this.currentState == State.normal) {
          this.currentState = State.hiding;
          this.fadeTween(255, 0);
        } else if (this.currentState == State.hiding) {
          this.currentState = State.none;
          TipView_1.close();
        }
      };
      TipView.prototype.fadeTween = function(from, to, duration) {
        var time = void 0 === duration ? this.FADE_DURATION : duration;
        this.node.opacity != from && (this.node.opacity = from);
        cc.Tween.stopAllByTarget(this.node);
        cc.tween(this.node).to(time, {
          opacity: to
        }, {
          easing: cc.easing.smooth
        }).call(this.nextState, this).start();
      };
      TipView.open = function(msg, duration) {
        void 0 === duration && (duration = 2);
        var view = TipView_1.instance;
        if (null == view) {
          var prefab = LayerManager_1.LayerManager.Instance.getUIPrefab(UIDefine_1.UIDefine.TipView);
          if (null == prefab) {
            var resGroup = LayerManager_1.LayerManager.Instance.wrapUIPrefabResGroup(UIDefine_1.UIDefine.TipView);
            ResLoadManager_1.ResLoadManager.Instance.loadGroup(UIName_1.UIName.TipView, [ resGroup ]);
            console.log("load tipview prefab");
            return;
          }
          var node = cc.instantiate(prefab);
          TipView_1.instance = view = node.getComponent(TipView_1);
          LayerManager_1.LayerManager.Instance.addChild(node, LayerManager_1.LayerType.layer_tip);
        }
        if (view) {
          view.node.active || (view.node.active = true);
          view.show(msg, duration);
        }
      };
      TipView.close = function() {
        TipView_1.instance && TipView_1.instance.node.active && (TipView_1.instance.node.active = false);
      };
      var TipView_1;
      __decorate([ property(cc.Label) ], TipView.prototype, "textTip", void 0);
      TipView = TipView_1 = __decorate([ ccclass ], TipView);
      return TipView;
    }(BaseComponent_1.default);
    exports.default = TipView;
    cc._RF.pop();
  }, {
    "../../common/init/UIDefine": "UIDefine",
    "../../common/init/UIName": "UIName",
    "../../manager/LayerManager": "LayerManager",
    "../../manager/ResLoadManager": "ResLoadManager",
    "../base/BaseComponent": "BaseComponent"
  } ],
  ToggleSwitch: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b158dwHVxpAoZyNsU5yNxEg", "ToggleSwitch");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ToggleSwitch = function(_super) {
      __extends(ToggleSwitch, _super);
      function ToggleSwitch() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nodeSelected = null;
        _this.nodeDot = null;
        _this._selected = true;
        return _this;
      }
      ToggleSwitch_1 = ToggleSwitch;
      ToggleSwitch.prototype.onLoad = function() {
        this.node.on(cc.Node.EventType.TOUCH_END, this.onClickHandler, this);
      };
      ToggleSwitch.prototype.start = function() {};
      ToggleSwitch.prototype.onClickHandler = function() {
        this.selected = !this.selected;
        this.node.emit(ToggleSwitch_1.CHANGED, this);
      };
      Object.defineProperty(ToggleSwitch.prototype, "selected", {
        get: function() {
          return this._selected;
        },
        set: function(value) {
          if (this._selected == value) return;
          this._selected = value;
          this.nodeSelected.active = value;
          this.nodeDot.x = value ? Math.abs(this.nodeDot.x) : -Math.abs(this.nodeDot.x);
        },
        enumerable: false,
        configurable: true
      });
      var ToggleSwitch_1;
      ToggleSwitch.CHANGED = "changed";
      __decorate([ property(cc.Node) ], ToggleSwitch.prototype, "nodeSelected", void 0);
      __decorate([ property(cc.Node) ], ToggleSwitch.prototype, "nodeDot", void 0);
      ToggleSwitch = ToggleSwitch_1 = __decorate([ ccclass ], ToggleSwitch);
      return ToggleSwitch;
    }(cc.Component);
    exports.default = ToggleSwitch;
    cc._RF.pop();
  }, {} ],
  UICaptureRecord: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a6228FNtXRLhbsEkiFXX/CM", "UICaptureRecord");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LayerManager_1 = require("./../../manager/LayerManager");
    var UIDefine_1 = require("./../../common/init/UIDefine");
    var ModelMessageType_1 = require("./../../common/init/ModelMessageType");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var AnimalModel_1 = require("../../model/AnimalModel");
    var CaptureRecordItem_1 = require("../item/CaptureRecordItem");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UICaptureRecord = function(_super) {
      __extends(UICaptureRecord, _super);
      function UICaptureRecord() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.labelTitle = null;
        _this.spriteStar1 = null;
        _this.spriteStar2 = null;
        _this.buttonReturn = null;
        _this.scrollView = null;
        _this.prefabCaptureRecordItem = null;
        _this.nodeContent = null;
        return _this;
      }
      UICaptureRecord_1 = UICaptureRecord;
      UICaptureRecord.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.labelTitle.string = "\u6293\u6355\u8bb0\u5f55";
        this.spriteStar1.node.x = -(this.labelTitle.node.width / 2 + 28);
        this.spriteStar2.node.x = this.labelTitle.node.width / 2 + 28;
      };
      UICaptureRecord.prototype.start = function() {
        this.nodeContent.removeAllChildren();
        this.updateView();
      };
      UICaptureRecord.prototype.updateView = function() {
        var _this = this;
        var selfRecord = AnimalModel_1.AnimalModel.Instance.selfRecord;
        null == selfRecord || 0 == selfRecord.length ? this.nodeContent.removeAllChildren() : selfRecord.forEach(function(record) {
          var item = cc.instantiate(_this.prefabCaptureRecordItem);
          _this.nodeContent.addChild(item);
          item.getComponent(CaptureRecordItem_1.default).updateView(record);
        });
      };
      UICaptureRecord.open = function() {
        var option = new LayerManager_1.UIOption(UIDefine_1.UIDefine.UICaptureRecord, null, LayerManager_1.UICacheType.never, LayerManager_1.PanelEffectType.blackFadeInOut, LayerManager_1.PanelEffectType.none);
        LayerManager_1.LayerManager.Instance.addChildWithPrefab(option, null, LayerManager_1.LayerType.layer_modal);
      };
      UICaptureRecord.close = function() {
        LayerManager_1.LayerManager.Instance.removeChildWithPrefab(UIDefine_1.UIDefine.UICaptureRecord);
      };
      UICaptureRecord.prototype.addUIListener = function() {
        this.buttonReturn.node.on("click", this.onClickButtonReturn, this);
      };
      UICaptureRecord.prototype.removeUIListener = function() {
        var _a, _b;
        null === (_b = null === (_a = null === this || void 0 === this ? void 0 : this.buttonReturn) || void 0 === _a ? void 0 : _a.node) || void 0 === _b ? void 0 : _b.off("click", this.onClickButtonReturn, this);
      };
      UICaptureRecord.prototype.onClickButtonReturn = function() {
        UICaptureRecord_1.close();
      };
      var UICaptureRecord_1;
      __decorate([ property(cc.Label) ], UICaptureRecord.prototype, "labelTitle", void 0);
      __decorate([ property(cc.Sprite) ], UICaptureRecord.prototype, "spriteStar1", void 0);
      __decorate([ property(cc.Sprite) ], UICaptureRecord.prototype, "spriteStar2", void 0);
      __decorate([ property(cc.Button) ], UICaptureRecord.prototype, "buttonReturn", void 0);
      __decorate([ property(cc.ScrollView) ], UICaptureRecord.prototype, "scrollView", void 0);
      __decorate([ property(cc.Prefab) ], UICaptureRecord.prototype, "prefabCaptureRecordItem", void 0);
      __decorate([ property(cc.Node) ], UICaptureRecord.prototype, "nodeContent", void 0);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_SELF_RECORD) ], UICaptureRecord.prototype, "updateView", null);
      UICaptureRecord = UICaptureRecord_1 = __decorate([ ccclass ], UICaptureRecord);
      return UICaptureRecord;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = UICaptureRecord;
    cc._RF.pop();
  }, {
    "../../model/AnimalModel": "AnimalModel",
    "../item/CaptureRecordItem": "CaptureRecordItem",
    "./../../common/init/ModelMessageType": "ModelMessageType",
    "./../../common/init/UIDefine": "UIDefine",
    "./../../manager/LayerManager": "LayerManager",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  UICjRecord: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9000bkUQSRCc74M7MMTCPgg", "UICjRecord");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LayerManager_1 = require("./../../manager/LayerManager");
    var UIDefine_1 = require("./../../common/init/UIDefine");
    var ModelMessageType_1 = require("./../../common/init/ModelMessageType");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var AnimalModel_1 = require("../../model/AnimalModel");
    var CjRecordItem_1 = require("../item/CjRecordItem");
    var AnimalModuleController_1 = require("../../modulecontroller/AnimalModuleController");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UICjRecord = function(_super) {
      __extends(UICjRecord, _super);
      function UICjRecord() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.labelTitle = null;
        _this.spriteStar1 = null;
        _this.spriteStar2 = null;
        _this.buttonReturn = null;
        _this.scrollView = null;
        _this.prefabCaptureRecordItem = null;
        _this.nodeContent = null;
        return _this;
      }
      UICjRecord_1 = UICjRecord;
      UICjRecord.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.labelTitle.string = "\u5f69\u91d1\u8bb0\u5f55";
        this.spriteStar1.node.x = -(this.labelTitle.node.width / 2 + 28);
        this.spriteStar2.node.x = this.labelTitle.node.width / 2 + 28;
      };
      UICjRecord.prototype.start = function() {
        this.nodeContent.removeAllChildren();
        AnimalModuleController_1.AnimalModuleController.Instance.requestGetCjLog();
      };
      UICjRecord.prototype.updateView = function() {
        var _this = this;
        var selfRecord = AnimalModel_1.AnimalModel.Instance.cj_records;
        null == selfRecord || 0 == selfRecord.length ? this.nodeContent.removeAllChildren() : selfRecord.forEach(function(record) {
          var item = cc.instantiate(_this.prefabCaptureRecordItem);
          _this.nodeContent.addChild(item);
          item.getComponent(CjRecordItem_1.default).updateView(record);
        });
      };
      UICjRecord.prototype.addUIListener = function() {
        this.buttonReturn.node.on("click", this.onClickButtonReturn, this);
      };
      UICjRecord.prototype.removeUIListener = function() {
        var _a, _b;
        null === (_b = null === (_a = this.buttonReturn) || void 0 === _a ? void 0 : _a.node) || void 0 === _b ? void 0 : _b.off("click", this.onClickButtonReturn, this);
      };
      UICjRecord.prototype.onClickButtonReturn = function() {
        UICjRecord_1.close();
      };
      UICjRecord.open = function() {
        var option = new LayerManager_1.UIOption(UIDefine_1.UIDefine.UICjRecord, null, LayerManager_1.UICacheType.never, LayerManager_1.PanelEffectType.blackFadeInOut, LayerManager_1.PanelEffectType.none);
        LayerManager_1.LayerManager.Instance.addChildWithPrefab(option, null, LayerManager_1.LayerType.layer_modal);
      };
      UICjRecord.close = function() {
        LayerManager_1.LayerManager.Instance.removeChildWithPrefab(UIDefine_1.UIDefine.UICjRecord);
      };
      var UICjRecord_1;
      __decorate([ property(cc.Label) ], UICjRecord.prototype, "labelTitle", void 0);
      __decorate([ property(cc.Sprite) ], UICjRecord.prototype, "spriteStar1", void 0);
      __decorate([ property(cc.Sprite) ], UICjRecord.prototype, "spriteStar2", void 0);
      __decorate([ property(cc.Button) ], UICjRecord.prototype, "buttonReturn", void 0);
      __decorate([ property(cc.ScrollView) ], UICjRecord.prototype, "scrollView", void 0);
      __decorate([ property(cc.Prefab) ], UICjRecord.prototype, "prefabCaptureRecordItem", void 0);
      __decorate([ property(cc.Node) ], UICjRecord.prototype, "nodeContent", void 0);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_SELF_RECORD) ], UICjRecord.prototype, "updateView", null);
      UICjRecord = UICjRecord_1 = __decorate([ ccclass ], UICjRecord);
      return UICjRecord;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = UICjRecord;
    cc._RF.pop();
  }, {
    "../../model/AnimalModel": "AnimalModel",
    "../../modulecontroller/AnimalModuleController": "AnimalModuleController",
    "../item/CjRecordItem": "CjRecordItem",
    "./../../common/init/ModelMessageType": "ModelMessageType",
    "./../../common/init/UIDefine": "UIDefine",
    "./../../manager/LayerManager": "LayerManager",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  UIDefine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e7a88S/+e1IQIzHCtjMMUjk", "UIDefine");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UIDefine = void 0;
    var UIDefine;
    (function(UIDefine) {
      UIDefine[UIDefine["GameEntry"] = 0] = "GameEntry";
      UIDefine[UIDefine["UIDisconnect"] = 1] = "UIDisconnect";
      UIDefine[UIDefine["UIInvalidToken"] = 2] = "UIInvalidToken";
      UIDefine[UIDefine["UILoading"] = 3] = "UILoading";
      UIDefine[UIDefine["UIRedpointCommonHolder"] = 4] = "UIRedpointCommonHolder";
      UIDefine[UIDefine["UIRedpointMultiHolder"] = 5] = "UIRedpointMultiHolder";
      UIDefine[UIDefine["UIStartLoading"] = 6] = "UIStartLoading";
      UIDefine[UIDefine["Alert"] = 7] = "Alert";
      UIDefine[UIDefine["ImageSheet"] = 8] = "ImageSheet";
      UIDefine[UIDefine["ScreenCapture"] = 9] = "ScreenCapture";
      UIDefine[UIDefine["SocketLoadingView"] = 10] = "SocketLoadingView";
      UIDefine[UIDefine["TipView"] = 11] = "TipView";
      UIDefine[UIDefine["ToggleSwitch"] = 12] = "ToggleSwitch";
      UIDefine[UIDefine["GameCommonRes"] = 13] = "GameCommonRes";
      UIDefine[UIDefine["UIHome"] = 14] = "UIHome";
      UIDefine[UIDefine["CaptureRecordItem"] = 15] = "CaptureRecordItem";
      UIDefine[UIDefine["CjRecordItem"] = 16] = "CjRecordItem";
      UIDefine[UIDefine["HelpItem"] = 17] = "HelpItem";
      UIDefine[UIDefine["HomeHead"] = 18] = "HomeHead";
      UIDefine[UIDefine["RecentRewardItem"] = 19] = "RecentRewardItem";
      UIDefine[UIDefine["ScrollItem"] = 20] = "ScrollItem";
      UIDefine[UIDefine["TaskItem"] = 21] = "TaskItem";
      UIDefine[UIDefine["CriIcon"] = 22] = "CriIcon";
      UIDefine[UIDefine["IceIcon"] = 23] = "IceIcon";
      UIDefine[UIDefine["UIZooCriDown"] = 24] = "UIZooCriDown";
      UIDefine[UIDefine["UIZooCriStart"] = 25] = "UIZooCriStart";
      UIDefine[UIDefine["UIZooIceSkill"] = 26] = "UIZooIceSkill";
      UIDefine[UIDefine["Animal1"] = 27] = "Animal1";
      UIDefine[UIDefine["Animal10"] = 28] = "Animal10";
      UIDefine[UIDefine["Animal11"] = 29] = "Animal11";
      UIDefine[UIDefine["Animal12"] = 30] = "Animal12";
      UIDefine[UIDefine["Animal16"] = 31] = "Animal16";
      UIDefine[UIDefine["Animal17"] = 32] = "Animal17";
      UIDefine[UIDefine["Animal18"] = 33] = "Animal18";
      UIDefine[UIDefine["Animal19"] = 34] = "Animal19";
      UIDefine[UIDefine["Animal2"] = 35] = "Animal2";
      UIDefine[UIDefine["Animal20"] = 36] = "Animal20";
      UIDefine[UIDefine["Animal3"] = 37] = "Animal3";
      UIDefine[UIDefine["Animal4"] = 38] = "Animal4";
      UIDefine[UIDefine["Animal5"] = 39] = "Animal5";
      UIDefine[UIDefine["Animal6"] = 40] = "Animal6";
      UIDefine[UIDefine["Animal7"] = 41] = "Animal7";
      UIDefine[UIDefine["Animal8"] = 42] = "Animal8";
      UIDefine[UIDefine["Animal9"] = 43] = "Animal9";
      UIDefine[UIDefine["ImageSheetPur"] = 44] = "ImageSheetPur";
      UIDefine[UIDefine["ImageSheetYel"] = 45] = "ImageSheetYel";
      UIDefine[UIDefine["PlayerHead"] = 46] = "PlayerHead";
      UIDefine[UIDefine["SelfHead"] = 47] = "SelfHead";
      UIDefine[UIDefine["WinText"] = 48] = "WinText";
      UIDefine[UIDefine["ZooBombCome"] = 49] = "ZooBombCome";
      UIDefine[UIDefine["ZooBuff"] = 50] = "ZooBuff";
      UIDefine[UIDefine["ZooCjWin"] = 51] = "ZooCjWin";
      UIDefine[UIDefine["ZooDinosaurCome"] = 52] = "ZooDinosaurCome";
      UIDefine[UIDefine["ZooDinosaurWin"] = 53] = "ZooDinosaurWin";
      UIDefine[UIDefine["ZooHippoWin"] = 54] = "ZooHippoWin";
      UIDefine[UIDefine["ZooRedbag"] = 55] = "ZooRedbag";
      UIDefine[UIDefine["ZooTask"] = 56] = "ZooTask";
      UIDefine[UIDefine["UICaptureRecord"] = 57] = "UICaptureRecord";
      UIDefine[UIDefine["UICjRecord"] = 58] = "UICjRecord";
      UIDefine[UIDefine["UIHelp"] = 59] = "UIHelp";
      UIDefine[UIDefine["UIRecentReward"] = 60] = "UIRecentReward";
      UIDefine[UIDefine["UIZooMenu"] = 61] = "UIZooMenu";
      UIDefine[UIDefine["UIZooPanel"] = 62] = "UIZooPanel";
    })(UIDefine = exports.UIDefine || (exports.UIDefine = {}));
    cc._RF.pop();
  }, {} ],
  UIDisconnect: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b5d51JnbhJHHJvyUX81Xo7v", "UIDisconnect");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LayerManager_1 = require("./../../manager/LayerManager");
    var UIDefine_1 = require("./../../common/init/UIDefine");
    var ModelMessageType_1 = require("./../../common/init/ModelMessageType");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var LoginModel_1 = require("../../model/LoginModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UIDisconnect = function(_super) {
      __extends(UIDisconnect, _super);
      function UIDisconnect() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      UIDisconnect.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      UIDisconnect.prototype.start = function() {};
      UIDisconnect.prototype.onModalClick = function() {
        LoginModel_1.LoginModel.Instance.updateModel(ModelMessageType_1.ModelMessageType.USER_RECONNECTE);
      };
      UIDisconnect.open = function() {
        var option = new LayerManager_1.UIOption(UIDefine_1.UIDefine.UIDisconnect, null, LayerManager_1.UICacheType.temp, LayerManager_1.PanelEffectType.empty, LayerManager_1.PanelEffectType.none);
        LayerManager_1.LayerManager.Instance.addChildWithPrefab(option, null, LayerManager_1.LayerType.layer_modal);
      };
      UIDisconnect.close = function() {
        LayerManager_1.LayerManager.Instance.removeChildWithPrefab(UIDefine_1.UIDefine.UIDisconnect);
      };
      UIDisconnect = __decorate([ ccclass ], UIDisconnect);
      return UIDisconnect;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = UIDisconnect;
    cc._RF.pop();
  }, {
    "../../model/LoginModel": "LoginModel",
    "./../../common/init/ModelMessageType": "ModelMessageType",
    "./../../common/init/UIDefine": "UIDefine",
    "./../../manager/LayerManager": "LayerManager",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  UIHelp: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f8a62xXgH9LfrrQ+D7kVlvg", "UIHelp");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LayerManager_1 = require("../../manager/LayerManager");
    var UIDefine_1 = require("../../common/init/UIDefine");
    var ModelMessageCarer_1 = require("../base/ModelMessageCarer");
    var AnimalModel_1 = require("../../model/AnimalModel");
    var HelpItem_1 = require("../item/HelpItem");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UIHelp = function(_super) {
      __extends(UIHelp, _super);
      function UIHelp() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.labelTitle = null;
        _this.labelTitle1 = null;
        _this.labelTitle2 = null;
        _this.spriteStar1 = null;
        _this.spriteStar2 = null;
        _this.buttonReturn = null;
        _this.scrollView = null;
        _this.prefabHelpItem = null;
        _this.nodeContent = null;
        return _this;
      }
      UIHelp_1 = UIHelp;
      UIHelp.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.labelTitle.string = "\u73a9\u6cd5\u4ecb\u7ecd";
        this.spriteStar1.node.x = -(this.labelTitle.node.width / 2 + 28);
        this.spriteStar2.node.x = this.labelTitle.node.width / 2 + 28;
      };
      UIHelp.prototype.start = function() {
        this.updateView();
      };
      UIHelp.prototype.updateView = function() {
        var _this = this;
        var enterOdds = AnimalModel_1.AnimalModel.Instance.enter_toc.odds;
        null == enterOdds || 0 == enterOdds.length || enterOdds.forEach(function(record) {
          var item = cc.instantiate(_this.prefabHelpItem);
          _this.nodeContent.addChild(item);
          item.getComponent(HelpItem_1.default).updateView(record);
        });
        var newNode = cc.instantiate(this.labelTitle2.node);
        var label = newNode.getComponent(cc.Label);
        var text = "\u4e09\u3001\u6e38\u620f\u58f0\u660e\n\u4ee5\u4efb\u4f55\u673a\u5668\u4eba\u8f6f\u4ef6\u3001\u8718\u86db\u8f6f\u4ef6\u3001\u722c\u866b\u8f6f\u4ef6\u3001\u5237\u5c4f\u8f6f\u4ef6\u6216\u8005\u5176\u4ed6\u81ea\u52a8\u65b9\u5f0f\u53c2\u4e0e\u672c\u6d3b\u52a8\u7684\u7528\u6237\uff0c\u5e73\u53f0\u6709\u6743\u53d6\u6d88\u5176\u9886\u5956\u8d44\u683c\u5e76\u56de\u6536\u5956\u52b1\uff0c\u4f9d\u636e\u60c5\u8282\u5e73\u53f0\u4fdd\u7559\u5c01\u505c\u8d26\u53f7\u7684\u6743\u5229\u3002\u4e3a\u786e\u4fdd\u5956\u52b1\u7684\u6b63\u5e38\u6d3e\u53d1\uff0c\u8bf7\u4e8e\u624b\u673a\u5fae\u4fe1\u94b1\u5305\u4e2d\u6dfb\u52a0\u94f6\u884c\u5361\u5b8c\u6210\u7ed1\u5b9a\uff0c\u5982\u56e0\u4e3a\u6ce8\u518c\u5bfc\u81f4\u5956\u54c1\u65e0\u6cd5\u53d1\u653e\uff0c\u7531\u7528\u6237\u81ea\u884c\u627f\u62c5\u8d23\u4efb\u3002\n\n";
        text += "\u56db\u3001\u8054\u7cfb\u5ba2\u670d\n\u5982\u679c\u5728\u6e38\u620f\u8fc7\u7a0b\u4e2d\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u8bf7\u5173\u6ce8\u516c\u4f17\u53f7\u7ed9\u6211\u4eec\u7559\u8a00\u3002\u5ba2\u670d\u5c06\u4f1a\u53ca\u65f6\u56de\u590d\u60a8\u3002\n\n";
        label.string = text;
        this.nodeContent.addChild(newNode);
      };
      UIHelp.open = function() {
        var option = new LayerManager_1.UIOption(UIDefine_1.UIDefine.UIHelp, null, LayerManager_1.UICacheType.never, LayerManager_1.PanelEffectType.blackFadeInOut, LayerManager_1.PanelEffectType.none);
        LayerManager_1.LayerManager.Instance.addChildWithPrefab(option, null, LayerManager_1.LayerType.layer_modal);
      };
      UIHelp.close = function() {
        LayerManager_1.LayerManager.Instance.removeChildWithPrefab(UIDefine_1.UIDefine.UIHelp);
      };
      UIHelp.prototype.addUIListener = function() {
        this.buttonReturn.node.on("click", this.onClickButtonReturn, this);
      };
      UIHelp.prototype.removeUIListener = function() {
        var _a, _b;
        null === (_b = null === (_a = null === this || void 0 === this ? void 0 : this.buttonReturn) || void 0 === _a ? void 0 : _a.node) || void 0 === _b ? void 0 : _b.off("click", this.onClickButtonReturn, this);
      };
      UIHelp.prototype.onClickButtonReturn = function() {
        UIHelp_1.close();
      };
      var UIHelp_1;
      __decorate([ property(cc.Label) ], UIHelp.prototype, "labelTitle", void 0);
      __decorate([ property(cc.Label) ], UIHelp.prototype, "labelTitle1", void 0);
      __decorate([ property(cc.Label) ], UIHelp.prototype, "labelTitle2", void 0);
      __decorate([ property(cc.Sprite) ], UIHelp.prototype, "spriteStar1", void 0);
      __decorate([ property(cc.Sprite) ], UIHelp.prototype, "spriteStar2", void 0);
      __decorate([ property(cc.Button) ], UIHelp.prototype, "buttonReturn", void 0);
      __decorate([ property(cc.ScrollView) ], UIHelp.prototype, "scrollView", void 0);
      __decorate([ property(cc.Prefab) ], UIHelp.prototype, "prefabHelpItem", void 0);
      __decorate([ property(cc.Node) ], UIHelp.prototype, "nodeContent", void 0);
      UIHelp = UIHelp_1 = __decorate([ ccclass ], UIHelp);
      return UIHelp;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = UIHelp;
    cc._RF.pop();
  }, {
    "../../common/init/UIDefine": "UIDefine",
    "../../manager/LayerManager": "LayerManager",
    "../../model/AnimalModel": "AnimalModel",
    "../base/ModelMessageCarer": "ModelMessageCarer",
    "../item/HelpItem": "HelpItem"
  } ],
  UIHome: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c0079prqvtAh53+XDlrf+sG", "UIHome");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LayerManager_1 = require("./../../manager/LayerManager");
    var UIDefine_1 = require("./../../common/init/UIDefine");
    var ModelMessageType_1 = require("./../../common/init/ModelMessageType");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var LoginModel_1 = require("../../model/LoginModel");
    var AnimalModel_1 = require("../../model/AnimalModel");
    var ZooAnimal_1 = require("../zoo_animal/ZooAnimal");
    var RepeatClicker_1 = require("../component/RepeatClicker");
    var ResizeWatcher_1 = require("../component/ResizeWatcher");
    var AnimalManager_1 = require("../zoo_animal/AnimalManager");
    var EffectImage_1 = require("../component/EffectImage");
    var PoolManager_1 = require("../../manager/PoolManager");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UIHome = function(_super) {
      __extends(UIHome, _super);
      function UIHome() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.groupAnimal = null;
        _this.animalPrefabs = [];
        _this.animallock = null;
        _this.playingAnimals = [];
        _this.allAnimals = [];
        _this.allAnimalIdsInViewPort = [];
        _this.sortAnimalTimerId = 0;
        _this.shadowLayer = null;
        _this.animalTopLayer = null;
        _this.effectLayer = null;
        _this.group_scene = null;
        _this.hitEffects = [];
        _this.playingEffects = [];
        _this.animalPathScaleX = 1;
        _this.animalPathScaleY = 1;
        return _this;
      }
      UIHome.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.allAnimals = [];
        this.animalElementPosition = [];
        for (var i = 0; i < this.animalPrefabs.length; i++) {
          var animal = cc.instantiate(this.animalPrefabs[i]).getComponent(ZooAnimal_1.default);
          var animalElementPosition = animal.getAnimalElementPosition();
          var type = i < 12 ? i + 1 : i + 4;
          animalElementPosition.type = type;
          animal.animalIndex = type;
          this.animalElementPosition.push(animalElementPosition);
          this.allAnimals.push(animal);
        }
        this.groupAnimal.node.on(ResizeWatcher_1.default.RESIZE_EVENT, this.groupAnimalResizeHandler, this);
        this.groupAnimal.node.on(RepeatClicker_1.default.REPEAT_CLICK, this.groupAnimalClickHandler, this);
        this.groupAnimal.mouseDownInterval = 200;
        this.groupAnimal.getComponent(cc.BlockInputEvents) || this.groupAnimal.addComponent(cc.BlockInputEvents);
        this.touchChildrenBlocker(this.groupAnimal.node);
        this.shadowLayer = new cc.Node("shadowLayer");
        this.shadowLayer.setPosition(this.groupAnimal.node.x, this.groupAnimal.node.y);
        this.shadowLayer.width = this.groupAnimal.node.width;
        this.shadowLayer.height = this.groupAnimal.node.height;
        this.touchChildrenBlocker(this.shadowLayer);
        this.shadowLayer.parent = this.group_scene;
        this.shadowLayer.setSiblingIndex(this.groupAnimal.node.parent.getSiblingIndex());
        this.shadowLayer.active = true;
        this.animalTopLayer = new cc.Node("animalTopLayer");
        this.animalTopLayer.width = this.node.width;
        this.animalTopLayer.height = this.node.height;
        this.touchChildrenBlocker(this.animalTopLayer);
        this.animalTopLayer.parent = this.node;
        this.animalTopLayer.addComponent(cc.BlockInputEvents).enabled = false;
        this.effectLayer = new cc.Node("effectLayer");
        this.effectLayer.width = this.node.width;
        this.effectLayer.height = this.node.height;
        this.touchChildrenBlocker(this.effectLayer);
        this.effectLayer.parent = this.node;
        this.effectLayer.addComponent(cc.BlockInputEvents).enabled = false;
        var block = this.groupAnimal.getComponent(cc.BlockInputEvents);
        block && block.destroy();
      };
      UIHome.prototype.start = function() {
        this.initAnimals();
      };
      UIHome.prototype.touchChildrenBlocker = function(node) {
        node.children.forEach(function(child) {
          child.getComponent(cc.Button) && (child.getComponent(cc.Button).interactable = false);
          child.getComponent(cc.Toggle) && (child.getComponent(cc.Toggle).interactable = false);
        });
      };
      UIHome.prototype.update = function(dt) {
        AnimalManager_1.default.getInstance().update(dt);
      };
      UIHome.prototype.initAnimals = function() {
        var animals = [ {
          id: 49568,
          bet: 20,
          line_id: 43,
          point: 10,
          red_state: false,
          status: 1
        } ];
        this.animalEnter(animals, false);
      };
      UIHome.prototype.animalEnter = function(enter_animals, fadeIn) {
        var _this = this;
        void 0 === fadeIn && (fadeIn = true);
        var animalModel = AnimalModel_1.AnimalModel.Instance;
        for (var i = 0; i < enter_animals.length; i++) {
          var new_animal = enter_animals[i];
          var animal = this.getAnimalById(new_animal.id);
          if (animal) {
            console.warn("\u52a8\u7269\u91cd\u590d\u8fdb\u5165\uff1a" + new_animal.id);
            continue;
          }
          var path = animalModel.getPath(new_animal.line_id - 1);
          var pathIndex = new_animal.point > 0 ? new_animal.point - 1 : 0;
          var animalIndex = new_animal.bet > 15 ? new_animal.bet - 4 : new_animal.bet - 1;
          if (!path) {
            cc.error("\u8def\u5f84\u4e0d\u5b58\u5728\uff1a" + new_animal.line_id);
            return;
          }
          this.allAnimals.length && (animal = this.getAnimalByType(new_animal.bet));
          if (!animal) {
            var animalNode = cc.instantiate(this.animalPrefabs[animalIndex]);
            animal = animalNode.getComponent(ZooAnimal_1.default);
          }
          animal.moveComplete = function(animal) {
            _this.animalMoveCompleteHandler(animal);
          };
          animal.setAnimal(this.animalElementPosition[animalIndex], new_animal);
          animal.node.active = true;
          animal.setShadowParent(this.shadowLayer);
          animal.updatePathScale(this.animalPathScaleX, this.animalPathScaleY);
          this.playingAnimals.push(animal);
          animal.node.parent = this.groupAnimal.node;
          if (fadeIn) {
            animal.node.opacity = 0;
            cc.tween(animal.node).to(.3, {
              opacity: 255
            }).start();
          } else 255 !== animal.node.opacity && (animal.node.opacity = 255);
        }
      };
      UIHome.prototype.animalMoveCompleteHandler = function(animal) {
        animal && this.animalLeave(animal.id);
      };
      UIHome.prototype.animalLeave = function(id) {};
      UIHome.prototype.animalDead = function() {};
      UIHome.prototype.getAnimalById = function(id) {
        for (var i = 0; i < this.playingAnimals.length; i++) {
          var animal = this.playingAnimals[i];
          if (animal.id === id) return animal;
        }
        return null;
      };
      UIHome.prototype.getAnimalByType = function(type) {
        for (var i = 0; i < this.allAnimals.length; i++) {
          var animal = this.allAnimals[i];
          if (animal.animalIndex === type) return animal;
        }
        return null;
      };
      UIHome.prototype.groupAnimalClickHandler = function() {
        var target = null;
        var count = this.playingAnimals.length;
        var groupPoint = this.groupAnimal.node.convertToNodeSpaceAR(cc.v2(this.groupAnimal.clickStageX, this.groupAnimal.clickStageY));
        for (var i = count - 1; i >= 0; i--) {
          var animal = this.playingAnimals[i];
          var hit = this.hitTestAnimal(animal, groupPoint, new cc.Vec2(this.groupAnimal.clickStageX, this.groupAnimal.clickStageY));
          if (hit) {
            target = animal;
            this.animallock = animal;
            break;
          }
        }
        target && this.hitAnimalToBet(target);
      };
      UIHome.prototype.hitTestAnimal = function(animal, clickInGroup, clickGlobal) {
        if (!animal.node.active || !animal.node.parent) return false;
        var width = animal.node.width;
        var height = animal.node.height;
        var anchorOffsetX = animal.node.anchorX * width;
        var anchorOffsetY = animal.node.anchorY * height;
        var rectX;
        var rectY = animal.node.y - anchorOffsetY;
        rectX = animal.getDirection() === ZooAnimal_1.AnimalDirection.left ? animal.node.x - anchorOffsetX : animal.node.x - (width - anchorOffsetX);
        if (rectX < clickInGroup.x && rectX + width > clickInGroup.x && rectY < clickInGroup.y && rectY + height > clickInGroup.y) return animal.hitTest(clickGlobal.x, clickGlobal.y);
        return false;
      };
      UIHome.prototype.hitAnimalToBet = function(animal, auto) {
        if (!animal.node.active) {
          this.groupAnimal.stop();
          return;
        }
        var betLevelIndex = 0;
        var betValue = 0;
        var multiple = 1;
        var enter_toc = AnimalModel_1.AnimalModel.Instance.enter_toc;
        if (auto) {
          var localPos = cc.v2(animal.node.anchorX * animal.node.width, animal.node.anchorY * animal.node.height - animal.node.height / 2);
          var worldPos = animal.node.convertToWorldSpaceAR(localPos);
          this.playEffect(0, worldPos.x, worldPos.y);
        } else this.playEffect(0, this.groupAnimal.clickStageX, this.groupAnimal.clickStageY);
      };
      UIHome.prototype.playEffect = function(roleId, stageX, stageY) {
        var selfId = LoginModel_1.LoginModel.Instance.role_id;
        var effectImage;
        var chip;
        roleId !== selfId && 0 !== roleId || (chip = this.getZooEffectChip(0, selfId));
        effectImage = PoolManager_1.PoolManager.getInstance().pop(EffectImage_1.default, EffectImage_1.default.createEffectImage);
        effectImage.init();
        effectImage.node.setAnchorPoint(.5, .5);
        var globalPos = cc.v2(stageX, stageY);
        var localPos = this.effectLayer.convertToNodeSpaceAR(globalPos);
        effectImage.node.setPosition(localPos);
        effectImage.node.on(EffectImage_1.default.LOOP_COMPLETE, this.effectCompleteHandler, this);
        effectImage.play(chip);
        this.effectLayer.addChild(effectImage.node);
        this.playingEffects.push(effectImage);
      };
      UIHome.prototype.getZooEffectChip = function(index, role_id) {
        var key;
        switch (index) {
         case 0:
          key = 0;
          break;

         case 1:
          key = 3;
          break;

         case 2:
          key = 4;
          break;

         case 3:
          key = 1;
          break;

         case 4:
          key = 2;
          break;

         default:
          key = 0;
        }
        if (role_id) {
          var item = AnimalModel_1.AnimalModel.Instance.getCriItem(role_id);
          item && (key = item.Playing ? 6 : key);
        }
        return this.hitEffects[key];
      };
      UIHome.prototype.effectCompleteHandler = function(effectImage) {
        if (!effectImage) {
          cc.warn("EffectImage component is null");
          return;
        }
        var index = this.playingEffects.indexOf(effectImage);
        index > -1 && this.playingEffects.splice(index, 1);
        this.resetEffectImage(effectImage);
        PoolManager_1.PoolManager.getInstance().push(effectImage);
      };
      UIHome.prototype.resetEffectImage = function(effectImage) {
        var _a;
        effectImage.stop();
        null === (_a = null === effectImage || void 0 === effectImage ? void 0 : effectImage.node) || void 0 === _a ? void 0 : _a.off(EffectImage_1.default.LOOP_COMPLETE, this.effectCompleteHandler, this);
        effectImage.node.parent && effectImage.node.removeFromParent();
      };
      UIHome.prototype.recycleAllEffects = function() {
        if (0 == this.playingEffects.length) return;
        var count = this.playingEffects.length;
        for (var i = 0; i < count; i++) this.resetEffectImage(this.playingEffects[i]);
        PoolManager_1.PoolManager.getInstance().pushArray(this.playingEffects);
        this.playingEffects.length = 0;
      };
      UIHome.prototype.groupAnimalResizeHandler = function() {
        var top = this.groupAnimal.getComponent(cc.Widget).top;
        var bottom = this.groupAnimal.getComponent(cc.Widget).bottom;
        var currentWidth = cc.winSize.width;
        var currentHeight = cc.winSize.height - top - bottom;
        this.groupAnimal.node.width = currentWidth;
        this.groupAnimal.node.height = currentHeight;
        var initWidth = 750;
        var initHeight = 1334 - top - bottom;
        if (0 === currentWidth || 0 === currentHeight) return;
        this.animalPathScaleX = currentWidth / initWidth;
        this.animalPathScaleY = currentHeight / initHeight;
        var count = this.playingAnimals.length;
        for (var i = 0; i < count; i++) {
          var animal = this.playingAnimals[i];
          animal.updatePathScale(this.animalPathScaleX, this.animalPathScaleY);
        }
      };
      UIHome.prototype.test = function() {};
      UIHome.open = function() {
        var option = new LayerManager_1.UIOption(UIDefine_1.UIDefine.UIHome, null, LayerManager_1.UICacheType.temp, LayerManager_1.PanelEffectType.empty, LayerManager_1.PanelEffectType.none);
        LayerManager_1.LayerManager.Instance.addChildWithPrefab(option, null, LayerManager_1.LayerType.layer_modal);
      };
      UIHome.close = function() {
        LayerManager_1.LayerManager.Instance.removeChildWithPrefab(UIDefine_1.UIDefine.UIHome);
      };
      __decorate([ property(RepeatClicker_1.default) ], UIHome.prototype, "groupAnimal", void 0);
      __decorate([ property([ cc.Prefab ]) ], UIHome.prototype, "animalPrefabs", void 0);
      __decorate([ property(cc.Node) ], UIHome.prototype, "group_scene", void 0);
      __decorate([ property([ cc.AnimationClip ]) ], UIHome.prototype, "hitEffects", void 0);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_ANIMAL_DEAD) ], UIHome.prototype, "animalDead", null);
      UIHome = __decorate([ ccclass ], UIHome);
      return UIHome;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = UIHome;
    cc._RF.pop();
  }, {
    "../../manager/PoolManager": "PoolManager",
    "../../model/AnimalModel": "AnimalModel",
    "../../model/LoginModel": "LoginModel",
    "../component/EffectImage": "EffectImage",
    "../component/RepeatClicker": "RepeatClicker",
    "../component/ResizeWatcher": "ResizeWatcher",
    "../zoo_animal/AnimalManager": "AnimalManager",
    "../zoo_animal/ZooAnimal": "ZooAnimal",
    "./../../common/init/ModelMessageType": "ModelMessageType",
    "./../../common/init/UIDefine": "UIDefine",
    "./../../manager/LayerManager": "LayerManager",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  UIInvalidToken: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "836780QCSVLuoriTJ0CiQUI", "UIInvalidToken");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LayerManager_1 = require("./../../manager/LayerManager");
    var UIDefine_1 = require("./../../common/init/UIDefine");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UIInvalidToken = function(_super) {
      __extends(UIInvalidToken, _super);
      function UIInvalidToken() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      UIInvalidToken.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      UIInvalidToken.prototype.start = function() {};
      UIInvalidToken.open = function() {
        var option = new LayerManager_1.UIOption(UIDefine_1.UIDefine.UIInvalidToken, null, LayerManager_1.UICacheType.temp, LayerManager_1.PanelEffectType.empty, LayerManager_1.PanelEffectType.none);
        LayerManager_1.LayerManager.Instance.addChildWithPrefab(option, null, LayerManager_1.LayerType.layer_window);
      };
      UIInvalidToken.close = function() {
        LayerManager_1.LayerManager.Instance.removeChildWithPrefab(UIDefine_1.UIDefine.UIInvalidToken);
      };
      UIInvalidToken = __decorate([ ccclass ], UIInvalidToken);
      return UIInvalidToken;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = UIInvalidToken;
    cc._RF.pop();
  }, {
    "./../../common/init/UIDefine": "UIDefine",
    "./../../manager/LayerManager": "LayerManager",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  UILoading: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3d3d5UsQ+xIt4EgYEThHRFo", "UILoading");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LayerManager_1 = require("./../../manager/LayerManager");
    var UIDefine_1 = require("./../../common/init/UIDefine");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UILoading = function(_super) {
      __extends(UILoading, _super);
      function UILoading() {
        return null !== _super && _super.apply(this, arguments) || this;
      }
      UILoading.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      UILoading.prototype.start = function() {};
      UILoading.open = function() {
        var option = new LayerManager_1.UIOption(UIDefine_1.UIDefine.UILoading, null, LayerManager_1.UICacheType.temp, LayerManager_1.PanelEffectType.none, LayerManager_1.PanelEffectType.none);
        option.loadingProxy = null;
        LayerManager_1.LayerManager.Instance.addChildWithPrefab(option, null, LayerManager_1.LayerType.layer_modal);
      };
      UILoading.close = function() {
        LayerManager_1.LayerManager.Instance.removeChildWithPrefab(UIDefine_1.UIDefine.UILoading);
      };
      UILoading = __decorate([ ccclass ], UILoading);
      return UILoading;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = UILoading;
    cc._RF.pop();
  }, {
    "./../../common/init/UIDefine": "UIDefine",
    "./../../manager/LayerManager": "LayerManager",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  UIName: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "02836NVoY9CPbpwnKNw4tbu", "UIName");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UIName = void 0;
    var UIName = function() {
      function UIName() {}
      UIName.GameEntry = "common/prefab/GameEntry";
      UIName.UIDisconnect = "resources/prefab/common/UIDisconnect";
      UIName.UIInvalidToken = "resources/prefab/common/UIInvalidToken";
      UIName.UILoading = "resources/prefab/common/UILoading";
      UIName.UIRedpointCommonHolder = "resources/prefab/common/UIRedpointCommonHolder";
      UIName.UIRedpointMultiHolder = "resources/prefab/common/UIRedpointMultiHolder";
      UIName.UIStartLoading = "resources/prefab/common/UIStartLoading";
      UIName.Alert = "resources/prefab/component/Alert";
      UIName.ImageSheet = "resources/prefab/component/ImageSheet";
      UIName.ScreenCapture = "resources/prefab/component/ScreenCapture";
      UIName.SocketLoadingView = "resources/prefab/component/SocketLoadingView";
      UIName.TipView = "resources/prefab/component/TipView";
      UIName.ToggleSwitch = "resources/prefab/component/ToggleSwitch";
      UIName.GameCommonRes = "resources/prefab/GameCommonRes";
      UIName.UIHome = "resources/prefab/home/UIHome";
      UIName.CaptureRecordItem = "resources/prefab/item/CaptureRecordItem";
      UIName.CjRecordItem = "resources/prefab/item/CjRecordItem";
      UIName.HelpItem = "resources/prefab/item/HelpItem";
      UIName.HomeHead = "resources/prefab/item/HomeHead";
      UIName.RecentRewardItem = "resources/prefab/item/RecentRewardItem";
      UIName.ScrollItem = "resources/prefab/item/ScrollItem";
      UIName.TaskItem = "resources/prefab/item/TaskItem";
      UIName.CriIcon = "resources/prefab/skill/CriIcon";
      UIName.IceIcon = "resources/prefab/skill/IceIcon";
      UIName.UIZooCriDown = "resources/prefab/skill/UIZooCriDown";
      UIName.UIZooCriStart = "resources/prefab/skill/UIZooCriStart";
      UIName.UIZooIceSkill = "resources/prefab/skill/UIZooIceSkill";
      UIName.Animal1 = "resources/prefab/zoo_animal/Animal1";
      UIName.Animal10 = "resources/prefab/zoo_animal/Animal10";
      UIName.Animal11 = "resources/prefab/zoo_animal/Animal11";
      UIName.Animal12 = "resources/prefab/zoo_animal/Animal12";
      UIName.Animal16 = "resources/prefab/zoo_animal/Animal16";
      UIName.Animal17 = "resources/prefab/zoo_animal/Animal17";
      UIName.Animal18 = "resources/prefab/zoo_animal/Animal18";
      UIName.Animal19 = "resources/prefab/zoo_animal/Animal19";
      UIName.Animal2 = "resources/prefab/zoo_animal/Animal2";
      UIName.Animal20 = "resources/prefab/zoo_animal/Animal20";
      UIName.Animal3 = "resources/prefab/zoo_animal/Animal3";
      UIName.Animal4 = "resources/prefab/zoo_animal/Animal4";
      UIName.Animal5 = "resources/prefab/zoo_animal/Animal5";
      UIName.Animal6 = "resources/prefab/zoo_animal/Animal6";
      UIName.Animal7 = "resources/prefab/zoo_animal/Animal7";
      UIName.Animal8 = "resources/prefab/zoo_animal/Animal8";
      UIName.Animal9 = "resources/prefab/zoo_animal/Animal9";
      UIName.ImageSheetPur = "resources/prefab/zoo_prefab/ImageSheetPur";
      UIName.ImageSheetYel = "resources/prefab/zoo_prefab/ImageSheetYel";
      UIName.PlayerHead = "resources/prefab/zoo_prefab/PlayerHead";
      UIName.SelfHead = "resources/prefab/zoo_prefab/SelfHead";
      UIName.WinText = "resources/prefab/zoo_prefab/WinText";
      UIName.ZooBombCome = "resources/prefab/zoo_prefab/ZooBombCome";
      UIName.ZooBuff = "resources/prefab/zoo_prefab/ZooBuff";
      UIName.ZooCjWin = "resources/prefab/zoo_prefab/ZooCjWin";
      UIName.ZooDinosaurCome = "resources/prefab/zoo_prefab/ZooDinosaurCome";
      UIName.ZooDinosaurWin = "resources/prefab/zoo_prefab/ZooDinosaurWin";
      UIName.ZooHippoWin = "resources/prefab/zoo_prefab/ZooHippoWin";
      UIName.ZooRedbag = "resources/prefab/zoo_prefab/ZooRedbag";
      UIName.ZooTask = "resources/prefab/zoo_prefab/ZooTask";
      UIName.UICaptureRecord = "resources/prefab/zoo/UICaptureRecord";
      UIName.UICjRecord = "resources/prefab/zoo/UICjRecord";
      UIName.UIHelp = "resources/prefab/zoo/UIHelp";
      UIName.UIRecentReward = "resources/prefab/zoo/UIRecentReward";
      UIName.UIZooMenu = "resources/prefab/zoo/UIZooMenu";
      UIName.UIZooPanel = "resources/prefab/zoo/UIZooPanel";
      return UIName;
    }();
    exports.UIName = UIName;
    cc._RF.pop();
  }, {} ],
  UIRecentReward: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "18021/M+yxLq6h1flq70Lp6", "UIRecentReward");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LayerManager_1 = require("./../../manager/LayerManager");
    var UIDefine_1 = require("./../../common/init/UIDefine");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var AnimalModel_1 = require("../../model/AnimalModel");
    var RecentRewardItem_1 = require("../item/RecentRewardItem");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UIRecentReward = function(_super) {
      __extends(UIRecentReward, _super);
      function UIRecentReward() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.buttonClose = null;
        _this.labelTitle = null;
        _this.label1 = null;
        _this.label2 = null;
        _this.label3 = null;
        _this.scrollView = null;
        _this.prefabRecentRewardItem = null;
        _this.nodeContent = null;
        return _this;
      }
      UIRecentReward_1 = UIRecentReward;
      UIRecentReward.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.labelTitle.string = "\u8fd1\u671f\u5927\u5956";
      };
      UIRecentReward.prototype.start = function() {
        this.nodeContent.removeAllChildren();
        this.updateView();
      };
      UIRecentReward.prototype.updateView = function() {
        var _this = this;
        var recentRewards = AnimalModel_1.AnimalModel.Instance.recentRewards;
        null == recentRewards || 0 == recentRewards.length ? this.nodeContent.removeAllChildren() : recentRewards.forEach(function(record) {
          var item = cc.instantiate(_this.prefabRecentRewardItem);
          _this.nodeContent.addChild(item);
          item.getComponent(RecentRewardItem_1.default).updateView(record, recentRewards.indexOf(record));
        });
      };
      UIRecentReward.open = function() {
        var option = new LayerManager_1.UIOption(UIDefine_1.UIDefine.UIRecentReward, null, LayerManager_1.UICacheType.never, LayerManager_1.PanelEffectType.scaleUp, LayerManager_1.PanelEffectType.none);
        LayerManager_1.LayerManager.Instance.addChildWithPrefab(option, null, LayerManager_1.LayerType.layer_modal);
      };
      UIRecentReward.close = function() {
        LayerManager_1.LayerManager.Instance.removeChildWithPrefab(UIDefine_1.UIDefine.UIRecentReward);
      };
      UIRecentReward.prototype.addUIListener = function() {
        this.buttonClose.node.on("click", this.onClickButtonClose, this);
      };
      UIRecentReward.prototype.removeUIListener = function() {
        var _a, _b;
        null === (_b = null === (_a = this.buttonClose) || void 0 === _a ? void 0 : _a.node) || void 0 === _b ? void 0 : _b.off("click", this.onClickButtonClose, this);
      };
      UIRecentReward.prototype.onClickButtonClose = function() {
        UIRecentReward_1.close();
      };
      var UIRecentReward_1;
      __decorate([ property(cc.Button) ], UIRecentReward.prototype, "buttonClose", void 0);
      __decorate([ property(cc.Label) ], UIRecentReward.prototype, "labelTitle", void 0);
      __decorate([ property(cc.Label) ], UIRecentReward.prototype, "label1", void 0);
      __decorate([ property(cc.Label) ], UIRecentReward.prototype, "label2", void 0);
      __decorate([ property(cc.Label) ], UIRecentReward.prototype, "label3", void 0);
      __decorate([ property(cc.ScrollView) ], UIRecentReward.prototype, "scrollView", void 0);
      __decorate([ property(cc.Prefab) ], UIRecentReward.prototype, "prefabRecentRewardItem", void 0);
      __decorate([ property(cc.Node) ], UIRecentReward.prototype, "nodeContent", void 0);
      UIRecentReward = UIRecentReward_1 = __decorate([ ccclass ], UIRecentReward);
      return UIRecentReward;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = UIRecentReward;
    cc._RF.pop();
  }, {
    "../../model/AnimalModel": "AnimalModel",
    "../item/RecentRewardItem": "RecentRewardItem",
    "./../../common/init/UIDefine": "UIDefine",
    "./../../manager/LayerManager": "LayerManager",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  UIRedpointCommonHolder: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2e77ekt5EJEh5oScz6jIPcq", "UIRedpointCommonHolder");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var RedpointModel_1 = require("./../../model/RedpointModel");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UIRedpointCommonHolder = function(_super) {
      __extends(UIRedpointCommonHolder, _super);
      function UIRedpointCommonHolder() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.redpointType = RedpointModel_1.RedpointType.none;
        _this.redpoint = null;
        return _this;
      }
      UIRedpointCommonHolder.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      UIRedpointCommonHolder.prototype.start = function() {};
      UIRedpointCommonHolder.prototype.onEnable = function() {
        this.updateRedpoint();
      };
      Object.defineProperty(UIRedpointCommonHolder.prototype, "careMessages", {
        get: function() {
          var msg = RedpointModel_1.RedpointModel.Instance.getRedpointMessage(this.redpointType);
          return [ msg ];
        },
        enumerable: false,
        configurable: true
      });
      UIRedpointCommonHolder.prototype.updateData = function(type) {
        RedpointModel_1.RedpointModel.Instance.isRedpointMessage(this.redpointType, type) && this.updateRedpoint();
      };
      UIRedpointCommonHolder.prototype.updateRedpoint = function() {
        var num = RedpointModel_1.RedpointModel.Instance.getRedpointCounter(this.redpointType);
        this.onRedpointUpdated(num);
      };
      UIRedpointCommonHolder.prototype.onRedpointUpdated = function(num) {
        this.redpoint && (num > 0 ? this.redpoint.active || (this.redpoint.active = true) : this.redpoint.active && (this.redpoint.active = false));
      };
      __decorate([ property({
        type: cc.Enum(RedpointModel_1.RedpointType),
        displayName: "\u7ea2\u70b9\u7c7b\u578b"
      }) ], UIRedpointCommonHolder.prototype, "redpointType", void 0);
      __decorate([ property(cc.Node) ], UIRedpointCommonHolder.prototype, "redpoint", void 0);
      UIRedpointCommonHolder = __decorate([ ccclass ], UIRedpointCommonHolder);
      return UIRedpointCommonHolder;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = UIRedpointCommonHolder;
    cc._RF.pop();
  }, {
    "./../../model/RedpointModel": "RedpointModel",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  UIRedpointMultiHolder: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "71a999AFNJGtKOp0fQvw/mc", "UIRedpointMultiHolder");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var RedpointModel_1 = require("../../model/RedpointModel");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UIRedpointMultiHolder = function(_super) {
      __extends(UIRedpointMultiHolder, _super);
      function UIRedpointMultiHolder() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.redpointTypes = [];
        _this.redpoint = null;
        return _this;
      }
      UIRedpointMultiHolder.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      UIRedpointMultiHolder.prototype.start = function() {};
      UIRedpointMultiHolder.prototype.onEnable = function() {
        this.updateRedpoint();
      };
      Object.defineProperty(UIRedpointMultiHolder.prototype, "careMessages", {
        get: function() {
          var msgs = [];
          for (var i = 0; i < this.redpointTypes.length; i++) {
            var msg = RedpointModel_1.RedpointModel.Instance.getRedpointMessage(this.redpointTypes[i]);
            msg && msgs.push(msg);
          }
          return msgs;
        },
        enumerable: false,
        configurable: true
      });
      UIRedpointMultiHolder.prototype.updateData = function(type) {
        this.updateRedpoint();
      };
      UIRedpointMultiHolder.prototype.updateRedpoint = function() {
        var count = 0;
        for (var i = 0; i < this.redpointTypes.length; i++) {
          var num = RedpointModel_1.RedpointModel.Instance.getRedpointCounter(this.redpointTypes[i]);
          num > 0 && (count += 1);
        }
        this.onRedpointUpdated(count);
      };
      UIRedpointMultiHolder.prototype.onRedpointUpdated = function(num) {
        this.redpoint && (num > 0 ? this.redpoint.active || (this.redpoint.active = true) : this.redpoint.active && (this.redpoint.active = false));
      };
      __decorate([ property({
        type: [ cc.Enum(RedpointModel_1.RedpointType) ],
        displayName: "\u7ea2\u70b9\u7c7b\u578b\u5217\u8868"
      }) ], UIRedpointMultiHolder.prototype, "redpointTypes", void 0);
      __decorate([ property(cc.Node) ], UIRedpointMultiHolder.prototype, "redpoint", void 0);
      UIRedpointMultiHolder = __decorate([ ccclass ], UIRedpointMultiHolder);
      return UIRedpointMultiHolder;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = UIRedpointMultiHolder;
    cc._RF.pop();
  }, {
    "../../model/RedpointModel": "RedpointModel",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  UIStartLoading: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "213a74QFDRNvptVRT6mlVHb", "UIStartLoading");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LoginModel_1 = require("./../../model/LoginModel");
    var LayerManager_1 = require("./../../manager/LayerManager");
    var UIDefine_1 = require("./../../common/init/UIDefine");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var ResLoadManager_1 = require("../../manager/ResLoadManager");
    var ResourceUtil_1 = require("../../util/ResourceUtil");
    var TimerManager_1 = require("../../common/core/TimerManager");
    var LoginModuleController_1 = require("../../modulecontroller/LoginModuleController");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UIStartLoading = function(_super) {
      __extends(UIStartLoading, _super);
      function UIStartLoading() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.spritePrg1 = null;
        _this.textLoading = null;
        _this.timerId = 0;
        _this.loadingDotIndex = 0;
        _this.loadingDotStrs = [ "", ".", "..", "..." ];
        return _this;
      }
      UIStartLoading.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      UIStartLoading.prototype.start = function() {
        this.checkLoginPreload();
      };
      UIStartLoading.prototype.checkLoginPreload = function() {
        if (this.preloadFinish) {
          this.enter();
          return;
        }
        if (this.preloading) return;
        this.preload();
      };
      UIStartLoading.prototype.preload = function() {
        var _this = this;
        var resGroup = new ResLoadManager_1.ResGroup();
        resGroup.addPrefab(UIDefine_1.UIDefine.SocketLoadingView, UIDefine_1.UIDefine.Alert, UIDefine_1.UIDefine.UIDisconnect, UIDefine_1.UIDefine.TipView, UIDefine_1.UIDefine.UILoading, UIDefine_1.UIDefine.GameCommonRes, UIDefine_1.UIDefine.UIHome, UIDefine_1.UIDefine.UIZooPanel, UIDefine_1.UIDefine.UICaptureRecord, UIDefine_1.UIDefine.UIRecentReward, UIDefine_1.UIDefine.UIZooIceSkill, UIDefine_1.UIDefine.UIZooMenu, UIDefine_1.UIDefine.UIZooCriDown, UIDefine_1.UIDefine.UIZooCriStart, UIDefine_1.UIDefine.UICjRecord, UIDefine_1.UIDefine.UIHelp);
        var maxProgress = 0;
        ResLoadManager_1.ResLoadManager.Instance.loadGroup("start_loading", [ resGroup ], function(groupName, finish, total) {
          var progress = finish / total;
          maxProgress < progress && (maxProgress = progress);
          _this.updateLoadingProgress(Math.max(progress, maxProgress));
        }, function() {
          var resName = LayerManager_1.LayerManager.Instance.getUIName(UIDefine_1.UIDefine.GameCommonRes);
          var commonResPrefab = ResourceUtil_1.ResourceUtil.getAsset(resName);
          var node = cc.instantiate(commonResPrefab);
          cc.game.addPersistRootNode(node);
          _this.preloadFinish = true;
          TimerManager_1.TimerManager.Instance.addCountdown(500, _this, function() {
            _this.enter();
          });
        });
      };
      UIStartLoading.prototype.updateLoadingProgress = function(progress) {
        var percentage = (100 * progress).toFixed(0);
        this.spritePrg1.node.setScale(progress, 1);
        this.textLoading.string = "\u52a0\u8f7d\u4e2d " + percentage + "%";
      };
      UIStartLoading.prototype.enter = function() {
        if (null == this.node || !this.node.isValid) return;
        LoginModuleController_1.LoginModuleController.Instance.requestLoginByToken(LoginModel_1.LoginModel.Instance.tokenInfo.token);
      };
      UIStartLoading.prototype.onDestroy = function() {
        this.removeTimer();
      };
      UIStartLoading.prototype.addTimer = function() {
        0 == this.timerId && (this.timerId = TimerManager_1.TimerManager.Instance.addCountdown(0, this, null, this.timerUpdateHandler, 500));
      };
      UIStartLoading.prototype.removeTimer = function() {
        if (this.timerId > 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.timerId);
          this.timerId = 0;
        }
      };
      UIStartLoading.prototype.timerUpdateHandler = function() {
        this.textLoading.string = "\u52a0\u8f7d\u4e2d" + this.loadingDotStrs[this.loadingDotIndex];
        this.loadingDotIndex = (this.loadingDotIndex + 1) % this.loadingDotStrs.length;
      };
      UIStartLoading.open = function() {
        var option = new LayerManager_1.UIOption(UIDefine_1.UIDefine.UIStartLoading, null, LayerManager_1.UICacheType.destroy, LayerManager_1.PanelEffectType.empty, LayerManager_1.PanelEffectType.none);
        LayerManager_1.LayerManager.Instance.addChildWithPrefab(option, null, LayerManager_1.LayerType.layer_base);
      };
      UIStartLoading.close = function() {
        LayerManager_1.LayerManager.Instance.removeChildWithPrefab(UIDefine_1.UIDefine.UIStartLoading);
      };
      __decorate([ property(cc.Sprite) ], UIStartLoading.prototype, "spritePrg1", void 0);
      __decorate([ property(cc.Label) ], UIStartLoading.prototype, "textLoading", void 0);
      UIStartLoading = __decorate([ ccclass ], UIStartLoading);
      return UIStartLoading;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = UIStartLoading;
    cc._RF.pop();
  }, {
    "../../common/core/TimerManager": "TimerManager",
    "../../manager/ResLoadManager": "ResLoadManager",
    "../../modulecontroller/LoginModuleController": "LoginModuleController",
    "../../util/ResourceUtil": "ResourceUtil",
    "./../../common/init/UIDefine": "UIDefine",
    "./../../manager/LayerManager": "LayerManager",
    "./../../model/LoginModel": "LoginModel",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  UIZooCriDown: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "30802T+/KRJ9JAU2uuDv7Rh", "UIZooCriDown");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LayerManager_1 = require("./../../manager/LayerManager");
    var UIDefine_1 = require("./../../common/init/UIDefine");
    var ModelMessageType_1 = require("./../../common/init/ModelMessageType");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var TimerManager_1 = require("../../common/core/TimerManager");
    var AnimalModel_1 = require("../../model/AnimalModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UIZooCriDown = function(_super) {
      __extends(UIZooCriDown, _super);
      function UIZooCriDown() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.spriteCribg = null;
        _this.spriteCrinum = null;
        _this.numSpriteFrames = [];
        _this.progressTimerId = 0;
        _this.num = 3;
        return _this;
      }
      UIZooCriDown_1 = UIZooCriDown;
      UIZooCriDown.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      UIZooCriDown.prototype.start = function() {
        this.startCribgRotate();
        this.startCountdown();
      };
      UIZooCriDown.prototype.startCribgRotate = function() {
        this.spriteCribg.node.angle = 0;
        cc.tween(this.spriteCribg.node).by(.6, {
          angle: 30
        }).repeatForever().start();
      };
      UIZooCriDown.prototype.startCountdown = function() {
        this.num = 3;
        if (0 == this.progressTimerId) {
          this.progressTimerId = TimerManager_1.TimerManager.Instance.addCountdown(3e3, this, null, this.updateCountdownVisual, 1e3);
          this.updateCountdownVisual();
        }
      };
      UIZooCriDown.prototype.updateCountdownVisual = function() {
        var animalModel = AnimalModel_1.AnimalModel.Instance;
        if (null == animalModel.enter_toc) {
          this.autoClose();
          return;
        }
        if (0 == this.num) {
          this.autoClose();
          return;
        }
        this.numSpriteFrames && this.num >= 1 && this.num <= this.numSpriteFrames.length ? this.spriteCrinum.spriteFrame = this.numSpriteFrames[this.num - 1] : console.warn("UIZooCriDown: Invalid num " + this.num + " or missing sprite frames");
        this.num--;
      };
      UIZooCriDown.prototype.removeProgressTimer = function() {
        if (this.progressTimerId > 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.progressTimerId);
          this.progressTimerId = 0;
        }
      };
      UIZooCriDown.prototype.autoClose = function() {
        this.removeProgressTimer();
        cc.Tween.stopAllByTarget(this.spriteCribg.node);
        AnimalModel_1.AnimalModel.Instance.updateModel(ModelMessageType_1.ModelMessageType.ZOO_CRI_START);
        AnimalModel_1.AnimalModel.Instance.criEffectComplete();
        UIZooCriDown_1.close();
      };
      UIZooCriDown.open = function() {
        var option = new LayerManager_1.UIOption(UIDefine_1.UIDefine.UIZooCriDown, null, LayerManager_1.UICacheType.never, LayerManager_1.PanelEffectType.empty, LayerManager_1.PanelEffectType.alphaFadeOut);
        LayerManager_1.LayerManager.Instance.addChildWithPrefab(option, null, LayerManager_1.LayerType.layer_modal);
      };
      UIZooCriDown.close = function() {
        LayerManager_1.LayerManager.Instance.removeChildWithPrefab(UIDefine_1.UIDefine.UIZooCriDown);
      };
      UIZooCriDown.prototype.onDestroy = function() {
        this.removeProgressTimer();
      };
      var UIZooCriDown_1;
      __decorate([ property(cc.Sprite) ], UIZooCriDown.prototype, "spriteCribg", void 0);
      __decorate([ property(cc.Sprite) ], UIZooCriDown.prototype, "spriteCrinum", void 0);
      __decorate([ property([ cc.SpriteFrame ]) ], UIZooCriDown.prototype, "numSpriteFrames", void 0);
      UIZooCriDown = UIZooCriDown_1 = __decorate([ ccclass ], UIZooCriDown);
      return UIZooCriDown;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = UIZooCriDown;
    cc._RF.pop();
  }, {
    "../../common/core/TimerManager": "TimerManager",
    "../../model/AnimalModel": "AnimalModel",
    "./../../common/init/ModelMessageType": "ModelMessageType",
    "./../../common/init/UIDefine": "UIDefine",
    "./../../manager/LayerManager": "LayerManager",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  UIZooCriStart: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8218ae7qElNYLG7qFgFNLoK", "UIZooCriStart");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LayerManager_1 = require("./../../manager/LayerManager");
    var UIDefine_1 = require("./../../common/init/UIDefine");
    var ModelMessageType_1 = require("./../../common/init/ModelMessageType");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var AnimalModel_1 = require("../../model/AnimalModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UIZooCriStart = function(_super) {
      __extends(UIZooCriStart, _super);
      function UIZooCriStart() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.animationCri = null;
        _this.firstSpriteFrame = null;
        _this.lastSpriteFrame = null;
        return _this;
      }
      UIZooCriStart_1 = UIZooCriStart;
      UIZooCriStart.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      UIZooCriStart.prototype.start = function() {
        this.updateView();
      };
      UIZooCriStart.prototype.updateView = function() {
        this.animationCri.getComponent(cc.Sprite).spriteFrame = this.firstSpriteFrame;
        this.animationCri.node.scale = 1;
        this.animationCri.node.active = true;
        this.animationCri.play("animation_yjbs");
        this.animationCri.on("finished", this.onAnimationComplete, this);
      };
      UIZooCriStart.prototype.tweenWord = function() {
        var _this = this;
        var sprite = this.animationCri.getComponent(cc.Sprite);
        sprite.spriteFrame = this.lastSpriteFrame;
        cc.tween(this.animationCri.node).to(.3, {
          scale: 5
        }, {
          easing: cc.easing.cubicInOut
        }).call(function() {
          return _this.autoClose();
        }).start();
      };
      UIZooCriStart.prototype.onAnimationComplete = function() {
        this.scheduleOnce(this.tweenWord, 0);
      };
      UIZooCriStart.prototype.autoClose = function() {
        if (this.animationCri) {
          this.animationCri.off("finished", this.onAnimationComplete, this);
          this.animationCri.stop();
        }
        cc.Tween.stopAllByTarget(this.animationCri.node);
        AnimalModel_1.AnimalModel.Instance.updateModel(ModelMessageType_1.ModelMessageType.ZOO_CRI_DOWN);
        UIZooCriStart_1.close();
      };
      UIZooCriStart.open = function() {
        var option = new LayerManager_1.UIOption(UIDefine_1.UIDefine.UIZooCriStart, null, LayerManager_1.UICacheType.never, LayerManager_1.PanelEffectType.empty, LayerManager_1.PanelEffectType.alphaFadeOut);
        LayerManager_1.LayerManager.Instance.addChildWithPrefab(option, null, LayerManager_1.LayerType.layer_modal);
      };
      UIZooCriStart.close = function() {
        LayerManager_1.LayerManager.Instance.removeChildWithPrefab(UIDefine_1.UIDefine.UIZooCriStart);
      };
      UIZooCriStart.prototype.onDestroy = function() {
        this.unscheduleAllCallbacks();
      };
      var UIZooCriStart_1;
      __decorate([ property(cc.Animation) ], UIZooCriStart.prototype, "animationCri", void 0);
      __decorate([ property(cc.SpriteFrame) ], UIZooCriStart.prototype, "firstSpriteFrame", void 0);
      __decorate([ property(cc.SpriteFrame) ], UIZooCriStart.prototype, "lastSpriteFrame", void 0);
      UIZooCriStart = UIZooCriStart_1 = __decorate([ ccclass ], UIZooCriStart);
      return UIZooCriStart;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = UIZooCriStart;
    cc._RF.pop();
  }, {
    "../../model/AnimalModel": "AnimalModel",
    "./../../common/init/ModelMessageType": "ModelMessageType",
    "./../../common/init/UIDefine": "UIDefine",
    "./../../manager/LayerManager": "LayerManager",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  UIZooIceSkill: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "12b0aZ/Mq1Enp9MgAdZVb3C", "UIZooIceSkill");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LayerManager_1 = require("./../../manager/LayerManager");
    var UIDefine_1 = require("./../../common/init/UIDefine");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var HomeHead_1 = require("../item/HomeHead");
    var AnimalModel_1 = require("../../model/AnimalModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UIZooIceSkill = function(_super) {
      __extends(UIZooIceSkill, _super);
      function UIZooIceSkill() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.animationIce = null;
        _this.spriteWord = null;
        _this.animationLight = null;
        _this.playerHead = null;
        return _this;
      }
      UIZooIceSkill_1 = UIZooIceSkill;
      UIZooIceSkill.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      UIZooIceSkill.prototype.start = function() {
        this.updateView();
      };
      UIZooIceSkill.prototype.updateView = function() {
        var player = AnimalModel_1.AnimalModel.Instance.iceSkillPlayer;
        if (player) {
          this.playerHead.setHeadInfo(player.icon, 0, true);
          this.playerHead.node.active = true;
        } else this.playerHead.node.active = false;
        this.animationIce.node.active = false;
        this.animationLight.node.active = false;
        this.tweenWord();
      };
      UIZooIceSkill.prototype.tweenWord = function() {
        this.spriteWord.node.scale = 3;
        cc.tween(this.spriteWord.node).to(.3, {
          scale: 1
        }, {
          easing: cc.easing.backOut
        }).call(this.wordTweenComplete.bind(this)).start();
      };
      UIZooIceSkill.prototype.wordTweenComplete = function() {
        this.animationIce.node.active = true;
        this.animationIce && this.animationIce.play("animation_iceeffect");
        this.animationLight.node.active = true;
        this.animationLight && this.animationLight.play("animation_icelight");
        this.scheduleOnce(this.animator_lightLoopComplete.bind(this), 1);
      };
      UIZooIceSkill.prototype.animator_lightLoopComplete = function() {
        this.animationLight && this.animationLight.stop();
        this.animationIce && this.animationIce.stop();
        this.autoClose();
      };
      UIZooIceSkill.prototype.autoClose = function() {
        AnimalModel_1.AnimalModel.Instance.iceSkillEffectDelay();
        UIZooIceSkill_1.close();
      };
      UIZooIceSkill.open = function() {
        var option = new LayerManager_1.UIOption(UIDefine_1.UIDefine.UIZooIceSkill, null, LayerManager_1.UICacheType.never, LayerManager_1.PanelEffectType.empty, LayerManager_1.PanelEffectType.none);
        LayerManager_1.LayerManager.Instance.addChildWithPrefab(option, null, LayerManager_1.LayerType.layer_modal);
      };
      UIZooIceSkill.close = function() {
        LayerManager_1.LayerManager.Instance.removeChildWithPrefab(UIDefine_1.UIDefine.UIZooIceSkill);
      };
      UIZooIceSkill.prototype.onDestroy = function() {
        this.unscheduleAllCallbacks();
      };
      var UIZooIceSkill_1;
      __decorate([ property(cc.Animation) ], UIZooIceSkill.prototype, "animationIce", void 0);
      __decorate([ property(cc.Sprite) ], UIZooIceSkill.prototype, "spriteWord", void 0);
      __decorate([ property(cc.Animation) ], UIZooIceSkill.prototype, "animationLight", void 0);
      __decorate([ property(HomeHead_1.default) ], UIZooIceSkill.prototype, "playerHead", void 0);
      UIZooIceSkill = UIZooIceSkill_1 = __decorate([ ccclass ], UIZooIceSkill);
      return UIZooIceSkill;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = UIZooIceSkill;
    cc._RF.pop();
  }, {
    "../../model/AnimalModel": "AnimalModel",
    "../item/HomeHead": "HomeHead",
    "./../../common/init/UIDefine": "UIDefine",
    "./../../manager/LayerManager": "LayerManager",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  UIZooMenu: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dfff1DYJM5IV7TU3OTyhLI/", "UIZooMenu");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LayerManager_1 = require("./../../manager/LayerManager");
    var UIDefine_1 = require("./../../common/init/UIDefine");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var AnimalModel_1 = require("../../model/AnimalModel");
    var AnimalModuleController_1 = require("../../modulecontroller/AnimalModuleController");
    var UIHelp_1 = require("./UIHelp");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UIZooMenu = function(_super) {
      __extends(UIZooMenu, _super);
      function UIZooMenu() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.buttonRecord = null;
        _this.buttonRule = null;
        return _this;
      }
      UIZooMenu_1 = UIZooMenu;
      UIZooMenu.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      UIZooMenu.prototype.start = function() {};
      UIZooMenu.prototype.onModalClick = function() {
        UIZooMenu_1.close();
      };
      UIZooMenu.prototype.addUIListener = function() {
        this.buttonRule.node.on("click", this.onClickButtonRule, this);
        this.buttonRecord.node.on("click", this.onClickButtonRecord, this);
      };
      UIZooMenu.prototype.removeUIListener = function() {
        this.buttonRule.node.off("click", this.onClickButtonRule, this);
        this.buttonRecord.node.off("click", this.onClickButtonRecord, this);
      };
      UIZooMenu.prototype.onClickButtonRule = function() {
        UIZooMenu_1.close();
        UIHelp_1.default.open();
      };
      UIZooMenu.prototype.onClickButtonRecord = function() {
        var amount = AnimalModel_1.AnimalModel.Instance.selfRecordGetAmount;
        AnimalModuleController_1.AnimalModuleController.Instance.requestGetAnimalRecord(0, amount);
        UIZooMenu_1.close();
      };
      UIZooMenu.open = function() {
        var option = new LayerManager_1.UIOption(UIDefine_1.UIDefine.UIZooMenu, null, LayerManager_1.UICacheType.temp, LayerManager_1.PanelEffectType.empty, LayerManager_1.PanelEffectType.none);
        LayerManager_1.LayerManager.Instance.addChildWithPrefab(option, null, LayerManager_1.LayerType.layer_modal);
      };
      UIZooMenu.close = function() {
        LayerManager_1.LayerManager.Instance.removeChildWithPrefab(UIDefine_1.UIDefine.UIZooMenu);
      };
      var UIZooMenu_1;
      __decorate([ property(cc.Button) ], UIZooMenu.prototype, "buttonRecord", void 0);
      __decorate([ property(cc.Button) ], UIZooMenu.prototype, "buttonRule", void 0);
      UIZooMenu = UIZooMenu_1 = __decorate([ ccclass ], UIZooMenu);
      return UIZooMenu;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = UIZooMenu;
    cc._RF.pop();
  }, {
    "../../model/AnimalModel": "AnimalModel",
    "../../modulecontroller/AnimalModuleController": "AnimalModuleController",
    "./../../common/init/UIDefine": "UIDefine",
    "./../../manager/LayerManager": "LayerManager",
    "./../base/ModelMessageCarer": "ModelMessageCarer",
    "./UIHelp": "UIHelp"
  } ],
  UIZooPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cc852feoR9OdYs3UWQBfq9c", "UIZooPanel");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LayerManager_1 = require("./../../manager/LayerManager");
    var UIDefine_1 = require("./../../common/init/UIDefine");
    var ModelMessageType_1 = require("./../../common/init/ModelMessageType");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var proto_1 = require("../../proto/proto");
    var AnimalModel_1 = require("../../model/AnimalModel");
    var LoginModel_1 = require("../../model/LoginModel");
    var StringUtil_1 = require("../../util/StringUtil");
    var UIZooMenu_1 = require("./UIZooMenu");
    var AnimalModuleController_1 = require("../../modulecontroller/AnimalModuleController");
    var ScrollView_1 = require("../component/ScrollView");
    var ChatModel_1 = require("../../model/ChatModel");
    var SelfHead_1 = require("../zoo_component/SelfHead");
    var PlayerHead_1 = require("../zoo_component/PlayerHead");
    var IceIcon_1 = require("../skill/IceIcon");
    var ImageSheet_1 = require("../component/ImageSheet");
    var TimerManager_1 = require("../../common/core/TimerManager");
    var TipView_1 = require("../component/TipView");
    var CriIcon_1 = require("../skill/CriIcon");
    var AnimalManager_1 = require("../zoo_animal/AnimalManager");
    var UIZooCriDown_1 = require("../skill/UIZooCriDown");
    var ZooBombCome_1 = require("../zoo_component/ZooBombCome");
    var ZooBuff_1 = require("../zoo_component/ZooBuff");
    var ZooDinosaurCome_1 = require("../zoo_component/ZooDinosaurCome");
    var ZooAnimal_1 = require("../zoo_animal/ZooAnimal");
    var RankModuleController_1 = require("../../modulecontroller/RankModuleController");
    var AudioManager_1 = require("../../manager/AudioManager");
    var AudioName_1 = require("../../common/init/AudioName");
    var RepeatClicker_1 = require("../component/RepeatClicker");
    var ResizeWatcher_1 = require("../component/ResizeWatcher");
    var UICjRecord_1 = require("./UICjRecord");
    var PoolManager_1 = require("../../manager/PoolManager");
    var EffectImage_1 = require("../component/EffectImage");
    var ResourceUtil_1 = require("../../util/ResourceUtil");
    var ZooRedbag_1 = require("../zoo_component/ZooRedbag");
    var ZooAnimalWin_1 = require("../zoo_component/ZooAnimalWin");
    var VibratorManager_1 = require("../component/VibratorManager");
    var PikaqiuSkillHandler_1 = require("../zoo_animal/PikaqiuSkillHandler");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var UIZooPanel = function(_super) {
      __extends(UIZooPanel, _super);
      function UIZooPanel() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nodeBroadcast = null;
        _this.scrollviewBroadcast = null;
        _this.labelBalance = null;
        _this.buttonReturn = null;
        _this.buttonMenu = null;
        _this.buttonReward = null;
        _this.labelBet = null;
        _this.buttonBet1 = null;
        _this.buttonBet2 = null;
        _this.buttonBet3 = null;
        _this.buttonBet4 = null;
        _this.buttonBet5 = null;
        _this.buttonSwicth = null;
        _this.swicthFrames = [];
        _this.betFrames = [];
        _this.betMultis = [];
        _this.curBetIndex = 0;
        _this.playerSelf = null;
        _this.player1 = null;
        _this.player2 = null;
        _this.player3 = null;
        _this.player4 = null;
        _this.players = [];
        _this.selfHitarea = null;
        _this.icon1 = null;
        _this.icon2 = null;
        _this.icon3 = null;
        _this.icons = [];
        _this.iceFrozenLightSpriteFrame = null;
        _this.iceFrozenLightNode = null;
        _this.nodeLock = null;
        _this.autoHitAnimalTimerId = 0;
        _this.animationCrileft = null;
        _this.animationCriright = null;
        _this.criIcon1 = null;
        _this.criIcon2 = null;
        _this.criIcon3 = null;
        _this.criIcon4 = null;
        _this.criIcon5 = null;
        _this.criIcons = [];
        _this.countDownTimerId = 0;
        _this.nodeCj = null;
        _this.sheetCj = null;
        _this.cjTimerId = 0;
        _this.cjRollTimerId = 0;
        _this.groupAnimal = null;
        _this.animalPrefabs = [];
        _this.animallock = null;
        _this.playingAnimals = [];
        _this.allAnimals = [];
        _this.allAnimalIdsInViewPort = [];
        _this.sortAnimalTimerId = 0;
        _this.shadowLayer = null;
        _this.animalTopLayer = null;
        _this.effectLayer = null;
        _this.group_scene = null;
        _this.hitEffects = [];
        _this.playingEffects = [];
        _this.animalPathScaleX = 1;
        _this.animalPathScaleY = 1;
        _this.pikaqiuSkills = [];
        _this.bombPlayerId = 0;
        _this.bombDelayTimerId = 0;
        _this.bombComePrefab = null;
        _this.elephantComePrefab = null;
        _this.buffPrefab = null;
        _this.buffView = null;
        _this.elephantWinPrefab = null;
        _this.hippoWinPrefab = null;
        _this.redbagPrefab = null;
        _this.sheetYelPrefab = null;
        _this.sheetPurPrefab = null;
        _this.playerWinIcons = [];
        _this.playerWinNumbers = [];
        _this.playerWinNumberYelPool = [];
        _this.playerWinNumberPurPool = [];
        _this.playerWinRedbags = [];
        _this.playerWinRedbagPool = [];
        _this.playerHippoRewards = [];
        _this.playerHippoRewardPool = [];
        _this.playerElephantRewards = [];
        _this.playerElephantRewardPool = [];
        _this.staticsAnimalCount = 0;
        _this.staticsImageSheetCount = 0;
        _this.staticsRewardCount = 0;
        _this.staticsRedbagCount = 0;
        _this.eventCallbacks = new Map();
        _this.timerIds = new Set();
        return _this;
      }
      UIZooPanel_1 = UIZooPanel;
      UIZooPanel.prototype.onLoad = function() {
        var _this = this;
        _super.prototype.onLoad.call(this);
        this.players = [ this.player1, this.player2, this.player3, this.player4 ];
        this.betMultis = [ this.buttonBet1, this.buttonBet2, this.buttonBet3, this.buttonBet4, this.buttonBet5 ];
        this.allAnimals = [];
        this.animalElementPosition = [];
        this.icons = [ this.icon1, this.icon2, this.icon3 ];
        this.criIcons = [ this.criIcon2, this.criIcon3, this.criIcon4, this.criIcon5 ];
        for (var i = 0; i < this.animalPrefabs.length; i++) {
          var animal = cc.instantiate(this.animalPrefabs[i]).getComponent(ZooAnimal_1.default);
          var animalElementPosition = animal.getAnimalElementPosition();
          var type = i < 12 ? i + 1 : i + 4;
          animalElementPosition.type = type;
          animal.animalIndex = type;
          this.animalElementPosition.push(animalElementPosition);
          this.allAnimals.push(animal);
        }
        var playerHeadColors = [ 16646144, 112126, 9043784, 12976638 ];
        var _loop_1 = function(i) {
          this_1.scheduleOnce(function() {
            _this.players[i].setColor(playerHeadColors[i], i);
          }, 0);
        };
        var this_1 = this;
        for (var i = 0; i < playerHeadColors.length; i++) _loop_1(i);
        this.selfHitarea.opacity = 0;
        this.groupAnimal.node.on(ResizeWatcher_1.default.RESIZE_EVENT, this.groupAnimalResizeHandler, this);
        this.groupAnimal.node.on(RepeatClicker_1.default.REPEAT_CLICK, this.groupAnimalClickHandler, this);
        this.groupAnimal.mouseDownInterval = 200;
        this.groupAnimal.getComponent(cc.BlockInputEvents) || this.groupAnimal.addComponent(cc.BlockInputEvents);
        this.touchChildrenBlocker(this.groupAnimal.node);
        this.shadowLayer = new cc.Node("shadowLayer");
        this.shadowLayer.setPosition(this.groupAnimal.node.x, this.groupAnimal.node.y);
        this.shadowLayer.width = this.groupAnimal.node.width;
        this.shadowLayer.height = this.groupAnimal.node.height;
        this.touchChildrenBlocker(this.shadowLayer);
        this.shadowLayer.parent = this.group_scene;
        this.shadowLayer.setSiblingIndex(this.groupAnimal.node.getSiblingIndex());
        this.shadowLayer.active = true;
        this.animalTopLayer = new cc.Node("animalTopLayer");
        this.animalTopLayer.width = this.node.width;
        this.animalTopLayer.height = this.node.height;
        this.touchChildrenBlocker(this.animalTopLayer);
        this.animalTopLayer.parent = this.node;
        this.animalTopLayer.addComponent(cc.BlockInputEvents).enabled = false;
        this.effectLayer = new cc.Node("effectLayer");
        this.effectLayer.width = this.node.width;
        this.effectLayer.height = this.node.height;
        this.touchChildrenBlocker(this.effectLayer);
        this.effectLayer.parent = this.node;
        this.effectLayer.addComponent(cc.BlockInputEvents).enabled = false;
        var block = this.groupAnimal.getComponent(cc.BlockInputEvents);
        block && block.destroy();
      };
      UIZooPanel.prototype.start = function() {
        var _this = this;
        AnimalModel_1.AnimalModel.Instance.lock = 0;
        this.animallock = void 0;
        this.buttonSwicth.node.getComponent(cc.Sprite).spriteFrame = this.swicthFrames[0];
        this.curBetIndex = 0;
        this.updateBets(AnimalModel_1.AnimalModel.Instance.enter_toc.bet_val.slice(0, 5));
        this.preWarmObjectPools();
        AnimalModuleController_1.AnimalModuleController.Instance.requestGetToolsPrice();
        this.addSortAnimalTimer();
        this.updateAutoHitType(AnimalModel_1.AutoHitType.none);
        this.addZooIcon();
        this.nodeCj.active = void 0 != AnimalModel_1.AnimalModel.Instance.zoo_cj;
        this.nodeCj.active && this.addCjTimer();
        this.nodeLock.active = false;
        this.animationCrileft.node.active = false;
        this.animationCriright.node.active = false;
        this.criIcon1.node.active = false;
        this.criIcons.forEach(function(icon) {
          icon.node.active = false;
        });
        RankModuleController_1.RankModuleController.Instance.requestGetGameProfitRank(proto_1.e_game_type.zoo, 3);
        this.scheduleOnce(function() {
          _this.updateView();
        }, 0);
        AudioManager_1.AudioManager.Instance.playBackground(AudioName_1.AudioName.RESOURCES_AUDIO_ZOO_BG);
        this.scrollviewBroadcast.pushItem("\u6b22\u8fce\u6765\u5230\u52a8\u7269\u56ed");
      };
      UIZooPanel.prototype.onDestroy = function() {
        var _a, _b, _c, _d;
        this.cleanupAllTimers();
        this.removeBombDelayTimer();
        this.recycleAllWinIcons();
        this.recycleAllEffects();
        this.recycleAllAnimals();
        this.recycleAllWinNumber();
        this.recycleAllWinRedbag();
        this.recycleAllHippoRewards();
        this.recycleAllElephantRewards();
        this.recycleAllPikaqiuSkill();
        this.recycleIceFrozenLight();
        for (var _i = 0, _e = this.allAnimals; _i < _e.length; _i++) {
          var animal = _e[_i];
          animal && animal.node && animal.node.destroy();
        }
        this.allAnimals.length = 0;
        this.updateAutoHitType(AnimalModel_1.AutoHitType.none);
        AudioManager_1.AudioManager.Instance.stopBackground();
        null === (_b = null === (_a = this.groupAnimal) || void 0 === _a ? void 0 : _a.node) || void 0 === _b ? void 0 : _b.off(ResizeWatcher_1.default.RESIZE_EVENT, this.groupAnimalResizeHandler, this);
        null === (_d = null === (_c = this.groupAnimal) || void 0 === _c ? void 0 : _c.node) || void 0 === _d ? void 0 : _d.off(RepeatClicker_1.default.REPEAT_CLICK, this.groupAnimalClickHandler, this);
        this.unscheduleAllCallbacks();
        while (UIZooPanel_1.tempLabelPool.length > 0) {
          var tempNode = UIZooPanel_1.tempLabelPool.pop();
          tempNode && cc.isValid(tempNode) && tempNode.destroy();
        }
        console.log("ZooPanel onDestroy");
        true;
        console.log(StringUtil_1.default.replaceString("\u5bf9\u8c61\u521b\u5efa\u6570\u91cf\uff0cZooAnimal:{0},Redbag:{1},Reward:{2},ImageSheet:{3}", this.staticsAnimalCount, this.staticsRedbagCount, this.staticsRewardCount, this.staticsImageSheetCount));
      };
      UIZooPanel.prototype.touchChildrenBlocker = function(node) {
        node.children.forEach(function(child) {
          child.getComponent(cc.Button) && (child.getComponent(cc.Button).interactable = false);
          child.getComponent(cc.Toggle) && (child.getComponent(cc.Toggle).interactable = false);
        });
      };
      UIZooPanel.prototype.update = function(dt) {
        AnimalManager_1.default.getInstance().update(dt);
      };
      UIZooPanel.prototype.onClickButtonReward = function() {
        AnimalModuleController_1.AnimalModuleController.Instance.requestGetAnimalReward();
      };
      UIZooPanel.prototype.onClickButtonMenu = function() {
        UIZooMenu_1.default.open();
      };
      UIZooPanel.prototype.onClickButtonReturn = function() {
        this.lockTimerComplete();
        window.parent.postMessage({
          type: "back"
        }, "*");
      };
      UIZooPanel.prototype.onClickCjButton = function() {
        UICjRecord_1.default.open();
      };
      UIZooPanel.prototype.updateView = function() {
        var enter_toc = AnimalModel_1.AnimalModel.Instance.enter_toc;
        if (null == enter_toc) return;
        this.updateBalance();
        this.updateZooType();
        this.updateLevelText();
        this.updateMultiSelectedBet();
        this.updatePlayerHead();
        this.initAnimals();
        this.updateTaskStatus();
      };
      UIZooPanel.prototype.onUserReconnecte = function() {
        AnimalModuleController_1.AnimalModuleController.Instance.requestEnterRoom();
      };
      UIZooPanel.prototype.onNotifyLockEnd = function() {
        AnimalModel_1.AnimalModel.Instance.updateModel(ModelMessageType_1.ModelMessageType.ZOO_LOCK_END);
      };
      UIZooPanel.prototype.updateZooType = function() {
        var currentZooType = AnimalModel_1.AnimalModel.Instance.zooType;
        var zooTypeChanged = currentZooType != this.latestZooType;
        var multiroom = currentZooType != proto_1.e_zoo_type.single;
        this.latestZooType = currentZooType;
        multiroom ? zooTypeChanged ? this.updateMultiSelectedBet() : this.updateSelectedBetValueText() : this.updateMultiSelectedBet();
        for (var i = 0; i < this.players.length; i++) this.players[i].node.active = multiroom;
      };
      UIZooPanel.prototype.initAnimals = function() {
        var animals = AnimalModel_1.AnimalModel.Instance.enter_toc.animals;
        this.recycleAllAnimals();
        this.animalEnter(animals, false);
      };
      UIZooPanel.prototype.updateBets = function(nums) {
        this.bets = nums.map(function(number) {
          return AnimalModel_1.AnimalModel.Instance.dividedMultiple(number);
        });
      };
      UIZooPanel.prototype.onClickBetButton = function(index) {
        this.curBetIndex = index;
        this.updateSelectedBetValueText();
      };
      UIZooPanel.prototype.onClickButtonSwicth = function() {
        var enter_toc = AnimalModel_1.AnimalModel.Instance.enter_toc;
        var item = AnimalModel_1.AnimalModel.Instance.getCriItem(LoginModel_1.LoginModel.Instance.userInfo.role_id);
        if (item) return;
        if (null == enter_toc) return;
        var betLevelIndex = 0;
        if (this.buttonSwicth.node.getComponent(cc.Sprite).spriteFrame == this.swicthFrames[0]) {
          this.buttonSwicth.node.getComponent(cc.Sprite).spriteFrame = this.swicthFrames[1];
          betLevelIndex = 2;
        } else {
          this.buttonSwicth.node.getComponent(cc.Sprite).spriteFrame = this.swicthFrames[0];
          betLevelIndex = 1;
        }
        this.updateBets(1 == betLevelIndex ? enter_toc.bet_val.slice(0, 5) : enter_toc.bet_val.slice(5));
        this.updateLevelText();
        this.updateMultiSelectedBet();
      };
      UIZooPanel.prototype.updateSelectedBetValueText = function() {
        var enter_toc = AnimalModel_1.AnimalModel.Instance.enter_toc;
        var item = AnimalModel_1.AnimalModel.Instance.getCriItem(LoginModel_1.LoginModel.Instance.userInfo.role_id);
        if (item) {
          if (-1 == this.bets.indexOf(AnimalModel_1.AnimalModel.Instance.criBetVal)) {
            var betLevelIndex = 0;
            if (this.buttonSwicth.node.getComponent(cc.Sprite).spriteFrame == this.swicthFrames[0]) {
              this.buttonSwicth.node.getComponent(cc.Sprite).spriteFrame = this.swicthFrames[1];
              betLevelIndex = 2;
            } else {
              this.buttonSwicth.node.getComponent(cc.Sprite).spriteFrame = this.swicthFrames[0];
              betLevelIndex = 1;
            }
            this.updateBets(1 == betLevelIndex ? enter_toc.bet_val.slice(0, 5) : enter_toc.bet_val.slice(5));
            this.updateLevelText();
          }
          this.curBetIndex = this.bets.indexOf(AnimalModel_1.AnimalModel.Instance.criBetVal);
          this.updateBetButtons();
          return;
        }
        if (null == enter_toc) return;
        var betLevelIndex = 0;
        var betValue = 0;
        var multiple = 1;
        betLevelIndex = Math.max(0, this.curBetIndex);
        betValue = this.bets[betLevelIndex];
        this.labelBet.string = StringUtil_1.default.replaceString("{0} {1}", "\u6bcf\u6b21\u6d88\u8017\u91d1\u8c46", betValue * multiple);
        this.updateBetButtons();
      };
      UIZooPanel.prototype.updateMultiSelectedBet = function() {
        this.curBetIndex = 0;
        this.updateSelectedBetValueText();
      };
      UIZooPanel.prototype.updateLevelText = function() {
        var betValue;
        var betValueIndex = 0;
        var btns = this.betMultis;
        for (var i = 0; i < btns.length; i++) {
          betValue = this.bets[betValueIndex++];
          var labelNode = btns[i].node.getChildByName("Background").getChildByName("Label");
          labelNode && (labelNode.getComponent(cc.Label).string = betValue >= 1e3 ? StringUtil_1.default.numberToString(betValue) : betValue.toString());
        }
      };
      UIZooPanel.prototype.updateBetButtons = function() {
        for (var i = 0; i < this.betMultis.length; i++) {
          var backgroundNode = this.betMultis[i].node.getChildByName("Background");
          backgroundNode && (i === this.curBetIndex ? backgroundNode.getComponent(cc.Sprite).spriteFrame = this.betFrames[1] : backgroundNode.getComponent(cc.Sprite).spriteFrame = this.betFrames[0]);
        }
      };
      UIZooPanel.prototype.updateBalance = function() {
        this.labelBalance.string = AnimalModel_1.AnimalModel.Instance.dividedMultiple(LoginModel_1.LoginModel.Instance.gold).toString();
      };
      UIZooPanel.prototype.updateBroadcast = function() {
        var broadcast = ChatModel_1.ChatModel.Instance.getBrocadcast();
        if (broadcast.type == proto_1.e_game_type.zoo || broadcast.type == proto_1.e_game_type.null) {
          var textWidth = this.calculateTextWidth(broadcast.content, 28);
          var dynamicDistance = Math.max(textWidth + 50, 150);
          this.scrollviewBroadcast.pushItem(broadcast.content, broadcast.type == proto_1.e_game_type.null ? 1 : 0, dynamicDistance);
        }
      };
      UIZooPanel.prototype.calculateTextWidth = function(text, fontSize) {
        var tempNode = UIZooPanel_1.tempLabelPool.pop();
        var tempLabel;
        if (tempNode) tempLabel = tempNode.getComponent(cc.Label); else {
          tempNode = new cc.Node();
          tempLabel = tempNode.addComponent(cc.Label);
        }
        tempLabel.string = text;
        tempLabel.fontSize = fontSize;
        tempLabel.lineHeight = fontSize;
        tempLabel.horizontalAlign = cc.Label.HorizontalAlign.LEFT;
        tempNode.active = true;
        this.node.addChild(tempNode);
        var width = tempNode.width;
        if (!width || 0 === width) {
          var contentSize = tempNode.getContentSize();
          width = contentSize.width;
        }
        tempNode.removeFromParent();
        tempNode.active = false;
        tempLabel.string = "";
        tempLabel.fontSize = 12;
        UIZooPanel_1.tempLabelPool.length < 5 ? UIZooPanel_1.tempLabelPool.push(tempNode) : tempNode.destroy();
        return width;
      };
      UIZooPanel.prototype.updatePlayerHead = function() {
        var allplayers = AnimalModel_1.AnimalModel.Instance.enter_toc.players;
        var self_id = LoginModel_1.LoginModel.Instance.role_id;
        if (1 == allplayers.length && allplayers[0].role_id == self_id) {
          this.player1.updateView(null);
          this.player2.updateView(null);
          this.player3.updateView(null);
          this.player4.updateView(null);
        } else {
          var players = [ this.player1, this.player2, this.player3, this.player4 ];
          var tempplayers = allplayers.concat();
          for (var i = 0; i < allplayers.length; i++) {
            var role_id = allplayers[i].role_id;
            var player = this.getPlayerHeadById(role_id);
            if (role_id == self_id) continue;
            if (null == player) {
              player = this.getPlayerHeadById(0);
              null == player && (player = players.pop());
              if (null == player) break;
              player.updateView(allplayers[i]);
            }
            var index = players.indexOf(player);
            index > -1 && players.splice(index, 1);
          }
          if (players.length > 0) for (var i = 0; i < players.length; i++) players[i].updateData(null);
        }
      };
      UIZooPanel.prototype.getPlayerHeadById = function(role_id) {
        for (var i = 0; i < this.players.length; i++) if (this.players[i].role_id == role_id) return this.players[i];
        return null;
      };
      UIZooPanel.prototype.addZooIcon = function() {
        var list = AnimalModel_1.AnimalModel.Instance.Skill_list;
        for (var i = 0; i < list.length; i++) this.icons[i].initIcon(list[i]);
      };
      UIZooPanel.prototype.autoLockStart = function() {
        this.updateAutoHitType(AnimalModel_1.AutoHitType.lock);
      };
      UIZooPanel.prototype.updateAutoHitType = function(type) {
        if (type == AnimalModel_1.AutoHitType.none) this.removeAutoHitAnimalTimer(); else {
          this.nodeLock.active = true;
          this.addAutoHitAnimalTimer();
        }
      };
      UIZooPanel.prototype.addAutoHitAnimalTimer = function() {
        var time = 1e3 * AnimalModel_1.AnimalModel.Instance.getSkillInfo(proto_1.e_animal_skill_type.locking).time;
        if (0 == this.autoHitAnimalTimerId) {
          this.autoHitAnimalTimerId = TimerManager_1.TimerManager.Instance.addCountdown(time, this, this.lockTimerComplete, this.autoHitAnimalTimerUpdateHandler, 190);
          this.addTimer(this.autoHitAnimalTimerId);
        }
      };
      UIZooPanel.prototype.lockTimerComplete = function() {
        var _a, _b;
        this.removeAutoHitAnimalTimer();
        this.nodeLock.active = false;
        null === (_b = null === (_a = this.playerSelf) || void 0 === _a ? void 0 : _a.clearQueue) || void 0 === _b ? void 0 : _b.call(_a);
        AnimalModel_1.AnimalModel.Instance.lockTimerComplete();
      };
      UIZooPanel.prototype.autoHitAnimalTimerUpdateHandler = function() {
        if (LoginModel_1.LoginModel.Instance.gold < 100) {
          TipView_1.default.open("\u4f59\u989d\u4e0d\u8db3");
          this.lockTimerComplete();
          return;
        }
        var animalId;
        var sourceAnimals = this.searchAnimalsInViewPort();
        animalId = AnimalModel_1.AnimalModel.Instance.getAutoLockAnimalId(sourceAnimals);
        if (animalId > 0) {
          var animal = this.getAnimalById(animalId);
          if (void 0 != this.animallock) if (this.animallock && sourceAnimals.includes(this.animallock.id)) this.hitAnimalToBet(this.animallock, true); else {
            this.animallock = void 0;
            animal && this.hitAnimalToBet(animal, true);
          } else animal && this.hitAnimalToBet(animal, true);
        }
      };
      UIZooPanel.prototype.removeAutoHitAnimalTimer = function() {
        if (this.autoHitAnimalTimerId > 0) {
          this.removeTimer(this.autoHitAnimalTimerId);
          this.autoHitAnimalTimerId = 0;
        }
      };
      UIZooPanel.prototype.updateRollCJ = function() {
        this.cjTimerId > 0 && this.removeCjTimer();
        if (this.cjRollTimerId > 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.cjRollTimerId);
          this.cjRollTimerId = 0;
        }
        this.targetCj = parseInt(AnimalModel_1.AnimalModel.Instance.cur_roll_cj);
        this.cjRollT = 0;
        this.cjRollTimerId = TimerManager_1.TimerManager.Instance.addCountdown(1e3, this, this.cjRollComplete, this.RollUpdate, 50);
        this.addTimer(this.cjRollTimerId);
      };
      UIZooPanel.prototype.RollUpdate = function() {
        this.cjRollT += .06;
        this.cjRollT > 1 && (this.cjRollT = 1);
        var value = Math.floor(AnimalModel_1.AnimalModel.Instance.dividedMultiple(this.currentCj + (this.targetCj - this.currentCj) * this.cjRollT));
        this.sheetCj.updateNumberImage(value);
        if (this.cjRollT >= 1) {
          this.removeTimer(this.cjRollTimerId);
          this.cjRollComplete();
        }
      };
      UIZooPanel.prototype.cjRollComplete = function() {
        this.cjRollTimerId = 0;
        AnimalModel_1.AnimalModel.Instance.enter_toc && (AnimalModel_1.AnimalModel.Instance.enter_toc.cj = this.targetCj.toString());
        this.addCjTimer();
      };
      UIZooPanel.prototype.addCjTimer = function() {
        if (this.nodeCj.active && 0 == this.cjTimerId) {
          this.cjTimerId = TimerManager_1.TimerManager.Instance.addCountdown(Number.MAX_VALUE, this, null, this.cjTimerUpdateHandler, 250);
          this.addTimer(this.cjTimerId);
          this.cjTimerUpdateHandler();
        }
      };
      UIZooPanel.prototype.cjTimerUpdateHandler = function() {
        this.updateCJ();
        if (AnimalModel_1.AnimalModel.Instance.enter_toc) {
          var num = Number(AnimalModel_1.AnimalModel.Instance.enter_toc.cj);
          num += AnimalModel_1.AnimalModel.Instance.byMultiple(1);
          AnimalModel_1.AnimalModel.Instance.enter_toc.cj = num.toString();
        }
      };
      UIZooPanel.prototype.removeCjTimer = function() {
        if (this.cjTimerId > 0) {
          this.removeTimer(this.cjTimerId);
          this.cjTimerId = 0;
        }
      };
      UIZooPanel.prototype.updateCJ = function() {
        var zoo_cj = AnimalModel_1.AnimalModel.Instance.zoo_cj;
        if (this.nodeCj.active && zoo_cj) {
          var cj = Math.floor(AnimalModel_1.AnimalModel.Instance.dividedMultiple(parseInt(zoo_cj)));
          this.sheetCj.updateNumberImage(cj);
          this.currentCj = parseInt(zoo_cj);
        }
      };
      UIZooPanel.prototype.countDownCri = function() {
        var strat_ids = AnimalModel_1.AnimalModel.Instance.criList;
        var role_id = LoginModel_1.LoginModel.Instance.userInfo.role_id;
        for (var i = 0; i < strat_ids.length; i++) if (strat_ids[i].RoleId == role_id) {
          if (this.animationCrileft) {
            this.animationCrileft.node.active = true;
            this.animationCrileft.play("animation_criside");
          }
          if (this.animationCriright) {
            this.animationCriright.node.active = true;
            this.animationCriright.play("animation_criside");
          }
          UIZooCriDown_1.default.open();
        } else this.addcountDownTimer();
      };
      UIZooPanel.prototype.addcountDownTimer = function() {
        if (0 == this.countDownTimerId) {
          this.countDownTimerId = TimerManager_1.TimerManager.Instance.addCountdown(3e3, this, this.startCri, null, null);
          this.addTimer(this.countDownTimerId);
        }
      };
      UIZooPanel.prototype.removeCountDownTimer = function() {
        if (this.countDownTimerId > 0) {
          this.removeTimer(this.countDownTimerId);
          this.countDownTimerId = 0;
        }
      };
      UIZooPanel.prototype.startCri = function() {
        var strat_ids = AnimalModel_1.AnimalModel.Instance.criList;
        var role_id = LoginModel_1.LoginModel.Instance.userInfo.role_id;
        var allplayers = AnimalModel_1.AnimalModel.Instance.enter_toc.players;
        for (var i = 0; i < strat_ids.length; i++) if (strat_ids[i].RoleId == role_id) {
          this.criIcon1.node.active = true;
          this.criIcon1.play();
        } else {
          var item = AnimalModel_1.AnimalModel.Instance.getPlayerById(strat_ids[i].RoleId);
          if (null == item) return;
          var index = allplayers.indexOf(item);
          if (index < 1 || index >= this.criIcons.length) {
            console.warn("\u73a9\u5bb6\u7d22\u5f15\u8d85\u51fa\u8303\u56f4, index:", index, "criIcons.length:", this.criIcons.length);
            return;
          }
          this.removeCountDownTimer();
          this.criIcons[index - 1].node.active = true;
          this.criIcons[index - 1].play();
        }
      };
      UIZooPanel.prototype.stopCri = function() {
        var stop_ids = AnimalModel_1.AnimalModel.Instance.criStopList;
        var role_id = LoginModel_1.LoginModel.Instance.userInfo.role_id;
        var allplayers = AnimalModel_1.AnimalModel.Instance.enter_toc.players;
        for (var i = 0; i < stop_ids.length; i++) if (stop_ids[i].RoleId == role_id) {
          this.stopCriAnimation();
          this.criIcon1.stop(stop_ids[i]);
          this.criIcon1.node.active = false;
        } else {
          var item = AnimalModel_1.AnimalModel.Instance.getPlayerById(stop_ids[i].RoleId);
          if (null == item || null == allplayers) return;
          var index = allplayers.indexOf(item);
          if (index < 1 || index >= this.criIcons.length) {
            console.warn("\u505c\u6b62\u4e00\u51fb\u5fc5\u6740\u65f6\u73a9\u5bb6\u7d22\u5f15\u8d85\u51fa\u8303\u56f4, index:", index, "criIcons.length:", this.criIcons.length);
            return;
          }
          this.criIcons[index - 1].stop(stop_ids[i]);
          this.criIcons[index - 1].node.active = false;
        }
      };
      UIZooPanel.prototype.stopCriAnimation = function() {
        if (this.animationCrileft) {
          this.animationCrileft.node.active = false;
          this.animationCrileft.stop();
        }
        if (this.animationCriright) {
          this.animationCriright.node.active = false;
          this.animationCriright.stop();
        }
      };
      UIZooPanel.prototype.updateIceSkillEffect = function() {
        var count = this.playingAnimals.length;
        for (var i = 0; i < count; i++) this.playingAnimals[i].updateState();
      };
      UIZooPanel.prototype.playIceFrozenLight = function() {
        var _this = this;
        var node = PoolManager_1.PoolManager.getInstance().pop(cc.Node, function() {
          return new cc.Node("IceFrozenLight");
        });
        node.setParent(this.node);
        node.setPosition(0, 0);
        node.setScale(1, 1);
        node.angle = 0;
        var sprite = node.getComponent(cc.Sprite);
        sprite || (sprite = node.addComponent(cc.Sprite));
        sprite.spriteFrame = this.iceFrozenLightSpriteFrame;
        this.iceFrozenLightNode = node;
        cc.tween(node).to(.3, {
          scaleX: 6,
          scaleY: 6
        }).call(function() {
          return _this.recycleIceFrozenLight();
        }).start();
      };
      UIZooPanel.prototype.recycleIceFrozenLight = function() {
        if (this.iceFrozenLightNode) {
          cc.Tween.stopAllByTarget(this.iceFrozenLightNode);
          PoolManager_1.PoolManager.getInstance().push(this.iceFrozenLightNode);
          this.iceFrozenLightNode.parent && this.iceFrozenLightNode.removeFromParent();
          this.iceFrozenLightNode = null;
        }
      };
      UIZooPanel.prototype.bombCome = function() {
        var _this = this;
        var bombComeNode = cc.instantiate(this.bombComePrefab);
        this.node.addChild(bombComeNode);
        var bombComeScript = bombComeNode.getComponent(ZooBombCome_1.default);
        bombComeScript && (bombComeScript.closeCallback = function() {
          _this.node.removeChild(bombComeNode);
        });
      };
      UIZooPanel.prototype.elephantCome = function() {
        var _this = this;
        var elephantComeNode = cc.instantiate(this.elephantComePrefab);
        this.node.addChild(elephantComeNode);
        var elephantComeScript = elephantComeNode.getComponent(ZooDinosaurCome_1.default);
        elephantComeScript && (elephantComeScript.closeCallback = function() {
          _this.node.removeChild(elephantComeNode);
        });
      };
      UIZooPanel.prototype.updateBuffVisible = function() {
        var visible = true;
        if (visible) {
          var buffNode = cc.instantiate(this.buffPrefab);
          this.node.addChild(buffNode);
          this.buffView = buffNode.getComponent(ZooBuff_1.default);
        } else if (this.buffView && this.buffView.node.parent) {
          this.node.removeChild(this.buffView.node);
          this.buffView = null;
        }
      };
      UIZooPanel.prototype.groupAnimalResizeHandler = function() {
        var top = this.groupAnimal.getComponent(cc.Widget).top;
        var bottom = this.groupAnimal.getComponent(cc.Widget).bottom;
        var currentWidth = cc.winSize.width;
        var currentHeight = cc.winSize.height - top - bottom;
        this.groupAnimal.node.width = currentWidth;
        this.groupAnimal.node.height = currentHeight;
        var initWidth = 750;
        var initHeight = 1334 - top - bottom;
        if (0 === currentWidth || 0 === currentHeight) return;
        this.animalPathScaleX = currentWidth / initWidth;
        this.animalPathScaleY = currentHeight / initHeight;
        var count = this.playingAnimals.length;
        for (var i = 0; i < count; i++) {
          var animal = this.playingAnimals[i];
          animal.updatePathScale(this.animalPathScaleX, this.animalPathScaleY);
        }
      };
      UIZooPanel.prototype.searchAnimalsInViewPort = function() {
        var animals = this.allAnimalIdsInViewPort;
        var count = this.playingAnimals.length;
        var throughSizeX = 50;
        animals.length = 0;
        for (var i = 0; i < count; i++) {
          var animal = this.playingAnimals[i];
          if (!animal.node.active) continue;
          var anchorOffsetX = animal.node.anchorX * animal.node.width;
          var rectX = void 0;
          rectX = (animal.getDirection() === ZooAnimal_1.AnimalDirection.left, animal.node.x - anchorOffsetX);
          var width = animal.node.width;
          var inViewX = rectX + width >= throughSizeX && rectX <= this.node.width - throughSizeX;
          inViewX && animals.push(animal.id);
        }
        return animals;
      };
      UIZooPanel.prototype.groupAnimalClickHandler = function() {
        var target = null;
        var count = this.playingAnimals.length;
        var groupPoint = this.groupAnimal.node.convertToNodeSpaceAR(cc.v2(this.groupAnimal.clickStageX, this.groupAnimal.clickStageY));
        for (var i = count - 1; i >= 0; i--) {
          var animal = this.playingAnimals[i];
          var hit = this.hitTestAnimal(animal, groupPoint, new cc.Vec2(this.groupAnimal.clickStageX, this.groupAnimal.clickStageY));
          if (hit) {
            target = animal;
            this.animallock = animal;
            break;
          }
        }
        target && this.hitAnimalToBet(target);
      };
      UIZooPanel.prototype.hitTestAnimal = function(animal, clickInGroup, clickGlobal) {
        if (!animal.node.active || !animal.node.parent) return false;
        var width = animal.node.width;
        var height = animal.node.height;
        var anchorOffsetX = animal.node.anchorX * width;
        var anchorOffsetY = animal.node.anchorY * height;
        var rectX;
        var rectY = animal.node.y - anchorOffsetY;
        rectX = animal.getDirection() === ZooAnimal_1.AnimalDirection.left ? animal.node.x - anchorOffsetX : animal.node.x - (width - anchorOffsetX);
        if (rectX < clickInGroup.x && rectX + width > clickInGroup.x && rectY < clickInGroup.y && rectY + height > clickInGroup.y) return animal.hitTest(clickGlobal.x, clickGlobal.y);
        return false;
      };
      UIZooPanel.prototype.hitAnimalToBet = function(animal, auto) {
        if (!animal.node.active) {
          this.groupAnimal.stop();
          return;
        }
        var betLevelIndex = 0;
        var betValue = 0;
        var multiple = 1;
        var enter_toc = AnimalModel_1.AnimalModel.Instance.enter_toc;
        if (!enter_toc) return;
        betLevelIndex = Math.max(0, this.curBetIndex);
        betValue = this.bets[betLevelIndex];
        this.playerSelf.hit();
        if (auto) {
          var spriteAnimal = animal.animationAnimal ? animal.animationAnimal.getComponent(cc.Sprite) : null;
          if (spriteAnimal && spriteAnimal.node) {
            var worldPos = spriteAnimal.node.convertToWorldSpaceAR(cc.v2(0, 0));
            this.playEffect(0, worldPos.x, worldPos.y);
          } else {
            var worldPos = animal.node.convertToWorldSpaceAR(cc.v2(0, 0));
            this.playEffect(0, worldPos.x, worldPos.y);
          }
        } else this.playEffect(0, this.groupAnimal.clickStageX, this.groupAnimal.clickStageY);
        AnimalModuleController_1.AnimalModuleController.Instance.requestGoBet(animal.id, betValue, multiple, animal.animalType);
        AudioManager_1.AudioManager.Instance.playEffect(AudioName_1.AudioName.RESOURCES_AUDIO_ZOO_HIT);
      };
      UIZooPanel.prototype.addSortAnimalTimer = function() {
        if (0 == this.sortAnimalTimerId) {
          this.sortAnimalTimerId = TimerManager_1.TimerManager.Instance.addCountdown(Number.MAX_VALUE, this, null, this.animalSortTimerUpdateHandler, 300);
          this.addTimer(this.sortAnimalTimerId);
          this.animalSortTimerUpdateHandler();
        }
      };
      UIZooPanel.prototype.animalSortTimerUpdateHandler = function() {
        this.sortAnimalByY();
      };
      UIZooPanel.prototype.removeSortAnimalTimer = function() {
        if (this.sortAnimalTimerId > 0) {
          this.removeTimer(this.sortAnimalTimerId);
          this.sortAnimalTimerId = 0;
        }
      };
      UIZooPanel.prototype.sortAnimalByY = function() {
        var animals = this.playingAnimals.sort(this.sortAnimalFunc);
        var count = animals.length;
        for (var i = 0; i < count; i++) {
          var animal = animals[i];
          var childIndex = this.groupAnimal.node.children.indexOf(animal.node);
          childIndex > -1 && childIndex != i && animal.node.setSiblingIndex(i);
        }
      };
      UIZooPanel.prototype.sortAnimalFunc = function(a, b) {
        if (a.node.y > b.node.y) return -1;
        if (a.node.y < b.node.y) return 1;
        return 0;
      };
      UIZooPanel.prototype.playerBetUpdate = function() {
        var hitAnimal = AnimalModel_1.AnimalModel.Instance.getLatestHitAnimal();
        var animal = this.getAnimalById(hitAnimal.id);
        this.playerHitAnimal(hitAnimal.role_id, animal);
      };
      UIZooPanel.prototype.playerHitAnimal = function(roleId, animal) {
        if (!animal) return;
        var worldPos = animal.node.convertToWorldSpaceAR(cc.v2(0, 0));
        this.playEffect(roleId, worldPos.x, worldPos.y);
      };
      UIZooPanel.prototype.playEffect = function(roleId, stageX, stageY) {
        var selfId = LoginModel_1.LoginModel.Instance.role_id;
        var effectImage;
        var chip;
        if (roleId === selfId || 0 === roleId) chip = this.getZooEffectChip(0, selfId); else {
          var colorIndex = this.getPlayerColorIndex(roleId);
          var player = this.getPlayerHeadById(roleId);
          chip = this.getZooEffectChip(colorIndex, roleId);
          player && player.fade();
        }
        effectImage = PoolManager_1.PoolManager.getInstance().pop(EffectImage_1.default, EffectImage_1.default.createEffectImage);
        effectImage.init(0);
        effectImage.node.setAnchorPoint(.5, .5);
        var globalPos = cc.v2(stageX, stageY);
        var localPos = this.effectLayer.convertToNodeSpaceAR(globalPos);
        effectImage.node.setPosition(localPos);
        effectImage.node.on(EffectImage_1.default.LOOP_COMPLETE, this.effectCompleteHandler, this);
        effectImage.play(chip);
        this.effectLayer.addChild(effectImage.node);
        this.playingEffects.push(effectImage);
      };
      UIZooPanel.prototype.getZooEffectChip = function(index, role_id) {
        var key;
        switch (index) {
         case 0:
          key = 0;
          break;

         case 1:
          key = 3;
          break;

         case 2:
          key = 4;
          break;

         case 3:
          key = 1;
          break;

         case 4:
          key = 2;
          break;

         default:
          key = 0;
        }
        if (role_id) {
          var item = AnimalModel_1.AnimalModel.Instance.getCriItem(role_id);
          item && (key = item.Playing ? 6 : key);
        }
        return this.hitEffects[key];
      };
      UIZooPanel.prototype.getPlayerColorIndex = function(role_id) {
        for (var i = 0; i < this.players.length; i++) if (this.players[i].role_id == role_id) return i + 1;
        return 0;
      };
      UIZooPanel.prototype.effectCompleteHandler = function(effectImage) {
        if (!effectImage) {
          cc.warn("EffectImage component is null");
          return;
        }
        var index = this.playingEffects.indexOf(effectImage);
        index > -1 && this.playingEffects.splice(index, 1);
        this.resetEffectImage(effectImage);
        PoolManager_1.PoolManager.getInstance().push(effectImage);
      };
      UIZooPanel.prototype.resetEffectImage = function(effectImage) {
        var _a;
        if (!effectImage) return;
        effectImage.stop();
        null === (_a = null === effectImage || void 0 === effectImage ? void 0 : effectImage.node) || void 0 === _a ? void 0 : _a.off(EffectImage_1.default.LOOP_COMPLETE, this.effectCompleteHandler, this);
        effectImage.node.parent && effectImage.node.removeFromParent();
      };
      UIZooPanel.prototype.recycleAllEffects = function() {
        if (0 == this.playingEffects.length) return;
        var count = this.playingEffects.length;
        for (var i = 0; i < count; i++) this.resetEffectImage(this.playingEffects[i]);
        PoolManager_1.PoolManager.getInstance().pushArray(this.playingEffects);
        this.playingEffects.length = 0;
      };
      UIZooPanel.prototype.animalEnterUpdate = function() {
        var latestEnterAnimals = AnimalModel_1.AnimalModel.Instance.latestEnterAnimals;
        this.animalEnter(latestEnterAnimals);
      };
      UIZooPanel.prototype.animalLeaveUpdate = function() {
        var latestLeaveAnimal = AnimalModel_1.AnimalModel.Instance.latestLeaveAnimal;
        this.animalLeave(latestLeaveAnimal);
      };
      UIZooPanel.prototype.animalEnter = function(enter_animals, fadeIn) {
        void 0 === fadeIn && (fadeIn = true);
        var animalModel = AnimalModel_1.AnimalModel.Instance;
        for (var i = 0; i < enter_animals.length; i++) {
          var new_animal = enter_animals[i];
          var animal = this.getAnimalById(new_animal.id);
          if (animal) {
            console.warn("\u52a8\u7269\u91cd\u590d\u8fdb\u5165\uff1a" + new_animal.id);
            continue;
          }
          var path = animalModel.getPath(new_animal.line_id - 1);
          var pathIndex = new_animal.point > 0 ? new_animal.point - 1 : 0;
          var animalIndex = new_animal.bet > 15 ? new_animal.bet - 4 : new_animal.bet - 1;
          if (!path) {
            cc.error("\u8def\u5f84\u4e0d\u5b58\u5728\uff1a" + new_animal.line_id);
            return;
          }
          this.allAnimals.length && (animal = this.getAnimalByType(new_animal.bet));
          if (!animal) {
            var animalNode = cc.instantiate(this.animalPrefabs[animalIndex]);
            animal = animalNode.getComponent(ZooAnimal_1.default);
            this.staticsAnimalCount++;
          }
          animal.moveComplete = this.animalMoveCompleteHandler.bind(this);
          animal.setAnimal(this.animalElementPosition[animalIndex], new_animal);
          animal.node.active = true;
          animal.setShadowParent(this.shadowLayer);
          animal.updatePathScale(this.animalPathScaleX, this.animalPathScaleY);
          animal.setPath(path.concat(), pathIndex);
          this.playingAnimals.push(animal);
          animal.node.parent = this.groupAnimal.node;
          if (fadeIn) {
            animal.node.opacity = 0;
            cc.tween(animal.node).to(.3, {
              opacity: 255
            }).start();
          } else 255 !== animal.node.opacity && (animal.node.opacity = 255);
        }
      };
      UIZooPanel.prototype.animalMoveCompleteHandler = function(animal) {
        animal && this.animalLeave(animal.id);
      };
      UIZooPanel.prototype.animalLeave = function(id) {
        var _this = this;
        var animal = this.removePlayingAnimalById(id);
        if (animal) {
          animal.dead();
          cc.Tween.stopAllByTarget(animal.node);
          cc.tween(animal.node).to(.3, {
            opacity: 0
          }).call(function() {
            return _this.animalDeadComplete(animal);
          }).start();
        }
      };
      UIZooPanel.prototype.animalDead = function() {
        this.animallock = void 0;
        var dead_animals = AnimalModel_1.AnimalModel.Instance.getLatestDeadAnimal();
        if (dead_animals.type === proto_1.e_animal_type.lightning) {
          this.playPiKaQiuSkill(dead_animals);
          return;
        }
        if (dead_animals.type === proto_1.e_animal_type.boom) {
          this.playBombEffect(dead_animals);
          return;
        }
        var count = dead_animals.ids.length;
        var self_id = LoginModel_1.LoginModel.Instance.role_id;
        for (var i = 0; i < count; i++) {
          var animal_value = dead_animals.ids[i];
          var animal = this.removePlayingAnimalById(animal_value.id);
          if (!animal) {
            cc.warn("\u6b7b\u4ea1\u52a8\u7269\u4e0d\u5b58\u5728\uff1a" + animal_value.id);
            continue;
          }
          animal.dead();
          cc.Tween.stopAllByTarget(animal.node);
          AudioManager_1.AudioManager.Instance.playEffect(ResourceUtil_1.ResourceUtil.getZooAnimalDieEffect(animal.animalType));
          dead_animals.role_id !== self_id && this.playerHitAnimal(dead_animals.role_id, animal);
          this.playAnimalDeadEffect(animal, dead_animals.role_id, animal_value, this.isUseAdvanceWinEffect(animal.animalType));
        }
      };
      UIZooPanel.prototype.playAnimalDeadEffect = function(animal, role_id, win_value, useHippoElephantEffect) {
        var _this = this;
        void 0 === useHippoElephantEffect && (useHippoElephantEffect = false);
        var self_id = LoginModel_1.LoginModel.Instance.role_id;
        var headWorldPos = null;
        var player = null;
        if (role_id === self_id) headWorldPos = this.playerSelf.node.convertToWorldSpaceAR(cc.v2(-30, 0)); else {
          player = this.getPlayerHeadById(role_id);
          player && (headWorldPos = player.node.convertToWorldSpaceAR(cc.v2(0, 0)));
        }
        this.playWinIcons(animal, role_id, win_value, headWorldPos, useHippoElephantEffect);
        if (useHippoElephantEffect) {
          this.animalDeadComplete(animal);
          return;
        }
        if (!headWorldPos) {
          cc.tween(animal.node).to(.5, {
            scale: 0
          }, {
            easing: cc.easing.backIn
          }).call(function() {
            return _this.animalDeadComplete(animal);
          }).start();
          return;
        }
        var animalWorldPos = animal.node.convertToWorldSpaceAR(cc.v2(0, 0));
        var localPos = this.animalTopLayer.convertToNodeSpaceAR(animalWorldPos);
        animal.node.setPosition(localPos);
        animal.node.parent && animal.node.removeFromParent();
        this.animalTopLayer.addChild(animal.node);
        var headLocalPos = this.animalTopLayer.convertToNodeSpaceAR(headWorldPos);
        var distance = headLocalPos.sub(localPos).mag();
        var duration = Math.max(.5, .0018 * distance);
        cc.tween(animal.node).to(.3, {
          scaleX: 1.4 * animal.node.scaleX,
          scaleY: 1.4
        }).to(duration, {
          position: headLocalPos,
          scaleX: .1,
          scaleY: .1
        }, {
          easing: cc.easing.cubicInOut
        }).call(function() {
          return _this.animalDeadComplete(animal);
        }).start();
      };
      UIZooPanel.prototype.animalDeadComplete = function(animal) {
        var index = this.playingAnimals.indexOf(animal);
        index > -1 && this.playingAnimals.splice(index, 1);
        this.recycleAnimal(animal);
      };
      UIZooPanel.prototype.recycleAnimal = function(animal) {
        if (!animal || !cc.isValid(animal.node)) return;
        animal.node.parent && animal.node.removeFromParent();
        animal.node.opacity = 255;
        animal.node.scale = 1;
        animal.stopMove();
        animal.clear();
        cc.Tween.stopAllByTarget(animal.node);
        this.allAnimals.push(animal);
      };
      UIZooPanel.prototype.recycleAllAnimals = function() {
        if (0 === this.playingAnimals.length) return;
        while (this.playingAnimals.length > 0) {
          var animal = this.playingAnimals.pop();
          animal && this.recycleAnimal(animal);
        }
      };
      UIZooPanel.prototype.getAnimalById = function(id) {
        for (var i = 0; i < this.playingAnimals.length; i++) {
          var animal = this.playingAnimals[i];
          if (animal.id === id) return animal;
        }
        return null;
      };
      UIZooPanel.prototype.getAnimalByType = function(type) {
        for (var i = 0; i < this.allAnimals.length; i++) {
          var animal = this.allAnimals[i];
          if (animal.animalIndex === type) {
            this.allAnimals.splice(i, 1);
            return animal;
          }
        }
        return null;
      };
      UIZooPanel.prototype.removePlayingAnimalById = function(id) {
        for (var i = 0; i < this.playingAnimals.length; i++) {
          var animal = this.playingAnimals[i];
          if (animal.id === id) {
            this.playingAnimals.splice(i, 1);
            return animal;
          }
        }
        return null;
      };
      UIZooPanel.prototype.createAnimalRewardView = function(animal) {
        var view = null;
        if (animal === proto_1.e_animal.elephant || animal === proto_1.e_animal.bomber) {
          if (this.playerElephantRewardPool.length > 0) view = this.playerElephantRewardPool.pop(); else {
            var node = cc.instantiate(this.elephantWinPrefab);
            view = node.getComponent(ZooAnimalWin_1.default);
            view.node.setAnchorPoint(.5, .5);
            this.staticsRewardCount++;
          }
          this.playerElephantRewards.push(view);
        } else {
          if (this.playerHippoRewardPool.length > 0) view = this.playerHippoRewardPool.pop(); else {
            var node = cc.instantiate(this.hippoWinPrefab);
            view = node.getComponent(ZooAnimalWin_1.default);
            view.node.setAnchorPoint(.5, .5);
            this.staticsRewardCount++;
          }
          this.playerHippoRewards.push(view);
        }
        return view;
      };
      UIZooPanel.prototype.createWinNumber = function(self) {
        var sheet = null;
        var pool = self ? this.playerWinNumberYelPool : this.playerWinNumberPurPool;
        if (pool.length > 0) {
          sheet = pool.pop();
          sheet.reset();
        } else {
          var node = cc.instantiate(self ? this.sheetYelPrefab : this.sheetPurPrefab);
          sheet = node.getComponent(ImageSheet_1.default);
          sheet.node.setAnchorPoint(.5, .5);
          this.staticsImageSheetCount++;
        }
        this.playerWinNumbers.push(sheet);
        return sheet;
      };
      UIZooPanel.prototype.createWinRedbag = function() {
        var zooRedbag = null;
        if (this.playerWinRedbagPool.length) zooRedbag = this.playerWinRedbagPool.pop(); else {
          var node = cc.instantiate(this.redbagPrefab);
          zooRedbag = node.getComponent(ZooRedbag_1.default);
          zooRedbag.node.setAnchorPoint(.5, .5);
          this.staticsRedbagCount++;
        }
        this.playerWinRedbags.push(zooRedbag);
        return zooRedbag;
      };
      UIZooPanel.prototype.playWinIcons = function(animal, role_id, win_value, headPoint, useHippoElephantEffect) {
        var _this = this;
        var enter_toc = AnimalModel_1.AnimalModel.Instance.enter_toc;
        if (!win_value) {
          cc.warn("\u663e\u793a\u5956\u52b1\u5931\u8d25\uff0c\u52a8\u7269\u4e0d\u5b58\u5728:" + animal.id);
          return;
        }
        if (!enter_toc) return;
        var self_id = LoginModel_1.LoginModel.Instance.role_id;
        var animalWorldPos = animal.node.convertToWorldSpaceAR(cc.v2(0, 0));
        var betValue = enter_toc.bet_val[0] || 100;
        var win = AnimalModel_1.AnimalModel.Instance.dividedMultiple(win_value.win);
        var iconCount = Math.min(10, Math.ceil(win / betValue));
        var offsetX = 150;
        var offsetY = 50;
        var rewardView = null;
        if (useHippoElephantEffect) {
          offsetY = 0;
          rewardView = this.flyRewardView(animal.animalType, win, animalWorldPos, headPoint, self_id === role_id);
        } else this.flyNumberImage(win.toString(), self_id === role_id, animalWorldPos.x, animalWorldPos.y + animal.node.height / 2);
        if (animal.animalType !== proto_1.e_animal.bomber) {
          var degree = 2 * Math.PI / iconCount;
          var r = 45 / Math.sin(degree / 2);
          var lastCallback_1 = true;
          var _loop_2 = function() {
            iconCount--;
            var icon = ResourceUtil_1.ResourceUtil.createZooGoldIcon();
            var ry = Math.floor(Math.sin(degree * iconCount) * r * Math.random());
            var localPos = this_2.effectLayer.convertToNodeSpaceAR(cc.v2(animalWorldPos.x, animalWorldPos.y - offsetY - ry));
            icon.node.setPosition(localPos);
            icon.node.active = false;
            icon.node.parent && icon.node.removeFromParent();
            this_2.effectLayer.addChild(icon.node);
            this_2.playerWinIcons.push(icon);
            var paralleX = icon.node.x + offsetX / 2 - Math.floor(Math.random() * offsetX);
            cc.tween(icon.node).delay(.05 * (iconCount + 1)).call(function() {
              return _this.winIconFlyStart(icon);
            }).to(.5, {
              position: cc.v2(paralleX, icon.node.y + 100)
            }, {
              easing: cc.easing.backOut
            }).delay(.05 * iconCount + .3).call(function() {
              0 === iconCount && self_id === role_id && _this.playCoinSound();
            }).to(headPoint ? .8 : .3, headPoint ? {
              position: this_2.effectLayer.convertToNodeSpaceAR(headPoint)
            } : {
              opacity: 0
            }, {
              easing: headPoint ? cc.easing.cubicInOut : null
            }).call(function() {
              return _this.winIconFlyEnd(icon);
            }).call(function() {
              if (lastCallback_1) {
                lastCallback_1 = false;
                _this.singleWinPlayComplete(role_id, win);
              }
            }).start();
          };
          var this_2 = this;
          while (iconCount > 0) _loop_2();
        }
        if (win_value.red_bag > 0) {
          var redbag_1 = this.createWinRedbag();
          redbag_1.setValue(win_value.red_bag);
          redbag_1.node.setScale(0);
          if (rewardView) redbag_1.node.setPosition(rewardView.node.x, rewardView.node.y + rewardView.node.height / 2 + redbag_1.node.height / 2); else {
            var animalHeight = animal.node.height * (1 - animal.node.anchorY);
            var redbagWorldY = animalWorldPos.y + animalHeight + redbag_1.node.height / 2;
            var screenBounds = cc.view.getVisibleSize();
            var redbagWorldX = animalWorldPos.x;
            var halfWidth = redbag_1.node.width / 2;
            redbagWorldX - halfWidth < 0 ? redbagWorldX = halfWidth : redbagWorldX + halfWidth > screenBounds.width && (redbagWorldX = screenBounds.width - halfWidth);
            var localPos = this.effectLayer.convertToNodeSpaceAR(cc.v2(redbagWorldX, redbagWorldY));
            redbag_1.node.setPosition(localPos);
          }
          redbag_1.node.parent && redbag_1.node.removeFromParent();
          this.effectLayer.addChild(redbag_1.node);
          cc.tween(redbag_1.node).to(.3, {
            scale: 1
          }).delay(2).to(headPoint ? .8 : .5, headPoint ? {
            position: this.effectLayer.convertToNodeSpaceAR(headPoint),
            scale: 0
          } : {
            scale: 0
          }, {
            easing: headPoint ? cc.easing.cubicInOut : cc.easing.backIn
          }).call(function() {
            return _this.singleWinRedbagComplete(redbag_1);
          }).start();
        }
      };
      UIZooPanel.prototype.playCoinSound = function() {
        AudioManager_1.AudioManager.Instance.playEffect(AudioName_1.AudioName.RESOURCES_AUDIO_ZOO_COIN);
      };
      UIZooPanel.prototype.flyNumberImage = function(winstr, self, xx, yy) {
        var _this = this;
        var imagesheet = this.createWinNumber(self);
        imagesheet.updateNumberImage(+winstr, true);
        imagesheet.node.setScale(0);
        var sheetWidth = imagesheet.totalWidth;
        var iconWidth = 46;
        var posX = Math.max(sheetWidth / 2 - iconWidth / 2, xx);
        sheetWidth / 2 + posX + iconWidth / 2 > this.node.width && (posX = this.node.width - sheetWidth / 2 - iconWidth / 2);
        var globalPos = cc.v2(posX, yy);
        var localPos = this.effectLayer.convertToNodeSpaceAR(globalPos);
        imagesheet.node.setPosition(localPos);
        imagesheet.node.parent && imagesheet.node.removeFromParent();
        this.effectLayer.addChild(imagesheet.node);
        cc.tween(imagesheet.node).to(.3, {
          scale: 1
        }).to(.5, {
          y: localPos.y + 50
        }, {
          easing: cc.easing.backOut
        }).to(.3, {
          opacity: 0
        }).call(function() {
          return _this.singleWinNumberComplete(imagesheet);
        }).start();
      };
      UIZooPanel.prototype.isUseElephantWinEffect = function(animal) {
        return animal == proto_1.e_animal.elephant || animal == proto_1.e_animal.bomber;
      };
      UIZooPanel.prototype.isUseAdvanceWinEffect = function(animal) {
        return animal >= proto_1.e_animal.hippo && animal <= proto_1.e_animal.bomber;
      };
      UIZooPanel.prototype.flyRewardView = function(animalType, win, from, to, self) {
        var _this = this;
        var winDuration = 2;
        var winView = this.createAnimalRewardView(animalType);
        var winNode = winView.node;
        var posX = Math.max(from.x, winNode.width / 2);
        var posY = from.y;
        posX > this.node.width - winNode.width / 2 && (posX = this.node.width - winNode.width / 2);
        var localFrom = this.effectLayer.convertToNodeSpaceAR(cc.v2(posX, posY));
        winNode.setPosition(localFrom);
        winNode.setScale(0);
        winNode.parent = this.effectLayer;
        this.scheduleOnce(function() {
          winView.setValue(animalType, win, self);
        }, 0);
        var tween = cc.tween(winNode).to(.5, {
          scale: 1
        }, {
          easing: cc.easing.backOut
        }).delay(winDuration);
        if (to) {
          var localTo = this.effectLayer.convertToNodeSpaceAR(to);
          tween.to(.8, {
            position: localTo,
            scale: 0
          }, {
            easing: cc.easing.cubicInOut
          });
        } else tween.to(.5, {
          scale: 0
        }, {
          easing: cc.easing.backIn
        });
        tween.call(function() {
          return _this.singleRewardViewComplete(winView);
        }).start();
        var duration = animalType === proto_1.e_animal.elephant ? 800 : 500;
        var vibration = VibratorManager_1.VibratorManager.getInstance().add(this.group_scene, cc.v2(0, 0), 5, duration, 50, 1, 0);
        vibration.onChange = this.shakeSceneUpdate;
        vibration.onChangeObj = this;
        return winView;
      };
      UIZooPanel.prototype.shakeSceneUpdate = function() {
        var scenePos = this.group_scene.getPosition();
        this.effectLayer.setPosition(scenePos);
        this.animalTopLayer.setPosition(scenePos);
      };
      UIZooPanel.prototype.singleWinNumberComplete = function(imagesheet) {
        var index = this.playerWinNumbers.indexOf(imagesheet);
        index > -1 && this.playerWinNumbers.splice(index, 1);
        imagesheet.node.parent && imagesheet.node.removeFromParent();
        this.recycleWinNumber(imagesheet);
      };
      UIZooPanel.prototype.singleWinRedbagComplete = function(redbag) {
        var index = this.playerWinRedbags.indexOf(redbag);
        index > -1 && this.playerWinRedbags.splice(index, 1);
        redbag.node.parent && redbag.node.removeFromParent();
        this.recycleWinRedbag(redbag);
      };
      UIZooPanel.prototype.singleRewardViewComplete = function(view) {
        view.node.parent && view.node.removeFromParent();
        if (this.isUseElephantWinEffect(view.animal_type)) {
          var index = this.playerElephantRewards.indexOf(view);
          index > -1 && this.playerElephantRewards.splice(index, 1);
          this.recycleElephantRewards(view);
        } else {
          var index = this.playerHippoRewards.indexOf(view);
          index > -1 && this.playerHippoRewards.splice(index, 1);
          this.recycleHippoRewards(view);
        }
      };
      UIZooPanel.prototype.recycleWinNumber = function(imagesheet) {
        if (!imagesheet || !imagesheet.node) return;
        imagesheet.node.setAnchorPoint(0, 0);
        1 !== imagesheet.node.scaleX && imagesheet.node.setScale(1);
        255 !== imagesheet.node.opacity && (imagesheet.node.opacity = 255);
        if (imagesheet.node.parent) {
          imagesheet.node.removeFromParent();
          cc.Tween.stopAllByTarget(imagesheet.node);
        }
        imagesheet.imageType === ImageSheet_1.NumberType.zoowinyel ? this.playerWinNumberYelPool.push(imagesheet) : imagesheet.imageType === ImageSheet_1.NumberType.zoowinpur && this.playerWinNumberPurPool.push(imagesheet);
      };
      UIZooPanel.prototype.recycleAllWinNumber = function() {
        if (this.playerWinNumbers && this.playerWinNumbers.length > 0) {
          var count = this.playerWinNumbers.length;
          for (var i = 0; i < count; i++) this.recycleWinNumber(this.playerWinNumbers[i]);
          this.playerWinNumbers.length = 0;
        }
      };
      UIZooPanel.prototype.recycleWinRedbag = function(redbag) {
        if (!redbag || !redbag.node) return;
        if (redbag.node.parent) {
          redbag.node.removeFromParent();
          cc.Tween.stopAllByTarget(redbag.node);
        }
        this.playerWinRedbagPool.push(redbag);
      };
      UIZooPanel.prototype.recycleAllWinRedbag = function() {
        var count = this.playerWinRedbags.length;
        if (count > 0) {
          for (var i = 0; i < count; i++) this.recycleWinRedbag(this.playerWinRedbags[i]);
          this.playerWinRedbags.length = 0;
        }
      };
      UIZooPanel.prototype.recycleHippoRewards = function(view) {
        if (!view || !view.node) return;
        if (view.node.parent) {
          view.node.removeFromParent();
          cc.Tween.stopAllByTarget(view.node);
        }
        this.playerHippoRewardPool.push(view);
      };
      UIZooPanel.prototype.recycleAllHippoRewards = function() {
        var count = this.playerHippoRewards.length;
        if (count > 0) {
          for (var i = 0; i < count; i++) this.recycleHippoRewards(this.playerHippoRewards[i]);
          this.playerHippoRewards.length = 0;
        }
      };
      UIZooPanel.prototype.recycleElephantRewards = function(view) {
        if (!view || !view.node) return;
        if (view.node.parent) {
          view.node.removeFromParent();
          cc.Tween.stopAllByTarget(view.node);
        }
        this.playerElephantRewardPool.push(view);
      };
      UIZooPanel.prototype.recycleAllElephantRewards = function() {
        var count = this.playerElephantRewards.length;
        if (count > 0) {
          for (var i = 0; i < count; i++) this.recycleElephantRewards(this.playerElephantRewards[i]);
          this.playerElephantRewards.length = 0;
        }
      };
      UIZooPanel.prototype.winIconFlyStart = function(icon) {
        icon.node.active = true;
      };
      UIZooPanel.prototype.winIconFlyEnd = function(icon) {
        icon.spriteFrame = null;
        icon.node.parent && icon.node.removeFromParent();
        if (this.playerWinIcons) {
          var index = this.playerWinIcons.indexOf(icon);
          index > -1 && this.playerWinIcons.splice(index, 1);
        }
        PoolManager_1.PoolManager.getInstance().push(icon);
      };
      UIZooPanel.prototype.singleWinPlayComplete = function(role_id, win_val) {
        var self_id = LoginModel_1.LoginModel.Instance.role_id;
        if (self_id === role_id) {
          this.playerSelf.showWinText("+" + win_val);
          this.updateBalance();
        } else {
          var player = this.getPlayerHeadById(role_id);
          player ? player.showWinText("+" + win_val) : console.warn("\u8d62\u53d6\u91d1\u8c46\u73a9\u5bb6\u4e0d\u5b58\u5728\uff0crole_id:", role_id);
        }
      };
      UIZooPanel.prototype.recycleAllWinIcons = function() {
        if (this.playerWinIcons && this.playerWinIcons.length > 0) {
          for (var i = 0; i < this.playerWinIcons.length; i++) {
            var icon = this.playerWinIcons[i];
            if (icon) {
              icon.spriteFrame = null;
              if (icon.node.parent) {
                icon.node.removeFromParent();
                cc.Tween.stopAllByTarget(icon.node);
              }
            }
          }
          PoolManager_1.PoolManager.getInstance().pushArray(this.playerWinIcons);
          this.playerWinIcons.length = 0;
        }
      };
      UIZooPanel.prototype.updateTaskStatus = function(isnew) {
        void 0 === isnew && (isnew = false);
      };
      UIZooPanel.prototype.playPiKaQiuSkill = function(dead_animals) {
        var _this = this;
        var count = dead_animals.ids.length;
        var pikaqiu_value = null;
        var pikaqiuAnimal = null;
        for (var i = 0; i < count; i++) {
          var animal_value = dead_animals.ids[i];
          var animal = this.getAnimalById(animal_value.id);
          if (animal && animal.animalType === proto_1.e_animal.pikachu) {
            pikaqiu_value = animal_value;
            dead_animals.ids.splice(i, 1);
            break;
          }
        }
        pikaqiu_value && (pikaqiuAnimal = this.removePlayingAnimalById(pikaqiu_value.id));
        if (!pikaqiuAnimal) {
          console.warn("\u96f7\u7cbe\u7075\u4e0d\u5b58\u5728");
          return;
        }
        var animal_values = dead_animals.ids;
        var deadAnimals = [];
        count = animal_values.length;
        for (var i = 0; i < count; i++) {
          var animal = this.removePlayingAnimalById(animal_values[i].id);
          if (animal) {
            animal.enabled = false;
            deadAnimals.push(animal);
          } else {
            true;
            console.warn("\u88ab\u7535\u52a8\u7269\u4e0d\u5b58\u5728\uff0cid:", animal_values[i].id);
          }
        }
        dead_animals.role_id !== LoginModel_1.LoginModel.Instance.role_id && this.playerHitAnimal(dead_animals.role_id, pikaqiuAnimal);
        var skill = new PikaqiuSkillHandler_1.default(pikaqiuAnimal, deadAnimals, this.animalTopLayer);
        skill.role_id = dead_animals.role_id;
        skill.pikaqiu_value = pikaqiu_value;
        skill.animal_values = animal_values;
        skill.deadFunc = function() {
          _this.pikaqiuSkillAnimalDeadHandler(skill);
        };
        skill.completeFunc = function() {
          _this.pikaqiuSkillCompleteHandler(skill);
        };
        this.pikaqiuSkills.push(skill);
      };
      UIZooPanel.prototype.pikaqiuSkillAnimalDeadHandler = function(e) {
        var skill = e;
        var animal = skill.deadAnimal;
        var win_value = null;
        if (skill.pikaqiu_value && animal.id === skill.pikaqiu_value.id) win_value = skill.pikaqiu_value; else {
          var animal_values = skill.animal_values;
          var count = animal_values.length;
          for (var i = 0; i < count; i++) if (animal.id === animal_values[i].id) {
            win_value = animal_values[i];
            break;
          }
        }
        this.playAnimalDeadEffect(animal, skill.role_id, win_value, this.isUseAdvanceWinEffect(animal.animalType));
      };
      UIZooPanel.prototype.pikaqiuSkillCompleteHandler = function(e) {
        var skill = e;
        var index = this.pikaqiuSkills.indexOf(skill);
        index > -1 && this.pikaqiuSkills.splice(index, 1);
        this.recyclePikaqiuSkill(skill);
      };
      UIZooPanel.prototype.recycleAllPikaqiuSkill = function() {
        if (0 === this.pikaqiuSkills.length) return;
        while (this.pikaqiuSkills.length > 0) {
          var skill = this.pikaqiuSkills.pop();
          if (skill) {
            skill.pikaqiu && this.recycleAnimal(skill.pikaqiu);
            while (skill.animals.length > 0) {
              var animal = skill.animals.pop();
              animal && this.recycleAnimal(animal);
            }
            this.recyclePikaqiuSkill(skill);
          }
        }
      };
      UIZooPanel.prototype.recyclePikaqiuSkill = function(skill) {
        null === skill || void 0 === skill ? void 0 : skill.recycle();
      };
      UIZooPanel.prototype.playBombEffect = function(dead_animals) {
        var count = dead_animals.ids.length;
        var bombAnimal = null;
        var bombValue = 0;
        var i = 0;
        for (;i < count; i++) {
          var animal_value = dead_animals.ids[i];
          var animal = this.getAnimalById(animal_value.id);
          if (animal && animal.animalType === proto_1.e_animal.bomber && animal.id === animal_value.id) {
            bombAnimal = animal_value;
            dead_animals.ids.splice(i, 1);
            dead_animals.ids.unshift(animal_value);
            break;
          }
          bombValue += animal_value.win;
        }
        for (;i < count; i++) bombValue += dead_animals.ids[i].win;
        if (bombAnimal) {
          bombAnimal.win = bombValue;
          if (dead_animals.role_id !== LoginModel_1.LoginModel.Instance.role_id) {
            var bombAnimalNode = this.getAnimalById(bombAnimal.id);
            bombAnimalNode && this.playerHitAnimal(dead_animals.role_id, bombAnimalNode);
          }
        }
        this.bombAnimals = dead_animals.ids;
        this.bombPlayerId = dead_animals.role_id;
        this.playNextBomb();
        AudioManager_1.AudioManager.Instance.playEffect(AudioName_1.AudioName.RESOURCES_AUDIO_ZOO_BOMB);
      };
      UIZooPanel.prototype.playNextBomb = function() {
        if (!this.bombAnimals || 0 === this.bombAnimals.length) return;
        while (this.bombAnimals.length > 0) {
          var animal_value = this.bombAnimals.shift();
          var animal = this.removePlayingAnimalById(animal_value.id);
          if (!animal) {
            console.warn("\u6b7b\u4ea1\u52a8\u7269\u4e0d\u5b58\u5728\uff1a" + animal_value.id);
            continue;
          }
          animal.dead();
          cc.Tween.stopAllByTarget(animal.node);
          this.playAnimalDeadEffect(animal, this.bombPlayerId, animal_value, true);
          break;
        }
        if (this.bombAnimals.length > 0) this.addBombDelayTimer(); else {
          this.bombAnimals = null;
          this.bombPlayerId = 0;
        }
      };
      UIZooPanel.prototype.addBombDelayTimer = function() {
        if (0 === this.bombDelayTimerId) {
          this.bombDelayTimerId = TimerManager_1.TimerManager.Instance.addCountdown(100, this, this.delayToBombNext);
          this.addTimer(this.bombDelayTimerId);
        }
      };
      UIZooPanel.prototype.delayToBombNext = function() {
        this.bombDelayTimerId = 0;
        this.playNextBomb();
      };
      UIZooPanel.prototype.removeBombDelayTimer = function() {
        if (this.bombDelayTimerId > 0) {
          this.removeTimer(this.bombDelayTimerId);
          this.bombDelayTimerId = 0;
        }
        this.bombAnimals && (this.bombAnimals = null);
      };
      UIZooPanel.open = function() {
        var option = new LayerManager_1.UIOption(UIDefine_1.UIDefine.UIZooPanel, null, LayerManager_1.UICacheType.never, LayerManager_1.PanelEffectType.empty, LayerManager_1.PanelEffectType.none);
        LayerManager_1.LayerManager.Instance.addChildWithPrefab(option, null, LayerManager_1.LayerType.layer_window);
      };
      UIZooPanel.close = function() {
        LayerManager_1.LayerManager.Instance.removeChildWithPrefab(UIDefine_1.UIDefine.UIZooPanel);
      };
      UIZooPanel.prototype.addTimer = function(id) {
        id > 0 && this.timerIds.add(id);
      };
      UIZooPanel.prototype.removeTimer = function(id) {
        if (id > 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(id);
          this.timerIds.delete(id);
        }
      };
      UIZooPanel.prototype.cleanupAllTimers = function() {
        this.timerIds.forEach(function(id) {
          TimerManager_1.TimerManager.Instance.removeTimer(id);
        });
        this.timerIds.clear();
      };
      UIZooPanel.prototype.preWarmObjectPools = function() {
        for (var i = 0; i < 2; i++) {
          var node = cc.instantiate(this.sheetYelPrefab);
          var sheet = node.getComponent(ImageSheet_1.default);
          sheet.node.setAnchorPoint(.5, .5);
          this.playerWinNumberYelPool.push(sheet);
          var node2 = cc.instantiate(this.sheetPurPrefab);
          var sheet2 = node2.getComponent(ImageSheet_1.default);
          sheet2.node.setAnchorPoint(.5, .5);
          this.playerWinNumberPurPool.push(sheet2);
        }
        if (0 === this.playerWinRedbagPool.length) {
          var node = cc.instantiate(this.redbagPrefab);
          var redbag = node.getComponent(ZooRedbag_1.default);
          redbag.node.setAnchorPoint(.5, .5);
          this.playerWinRedbagPool.push(redbag);
        }
      };
      UIZooPanel.prototype.addUIListener = function() {
        var _this = this;
        var bet5Callback = function() {
          return _this.onClickBetButton(4);
        };
        var bet4Callback = function() {
          return _this.onClickBetButton(3);
        };
        var bet3Callback = function() {
          return _this.onClickBetButton(2);
        };
        var bet2Callback = function() {
          return _this.onClickBetButton(1);
        };
        var bet1Callback = function() {
          return _this.onClickBetButton(0);
        };
        this.eventCallbacks.set("bet5", bet5Callback);
        this.eventCallbacks.set("bet4", bet4Callback);
        this.eventCallbacks.set("bet3", bet3Callback);
        this.eventCallbacks.set("bet2", bet2Callback);
        this.eventCallbacks.set("bet1", bet1Callback);
        this.buttonReward.node.on("click", this.onClickButtonReward, this);
        this.buttonMenu.node.on("click", this.onClickButtonMenu, this);
        this.buttonReturn.node.on("click", this.onClickButtonReturn, this);
        this.buttonSwicth.node.on("click", this.onClickButtonSwicth, this);
        this.buttonBet5.node.on("click", bet5Callback, this);
        this.buttonBet4.node.on("click", bet4Callback, this);
        this.buttonBet3.node.on("click", bet3Callback, this);
        this.buttonBet2.node.on("click", bet2Callback, this);
        this.buttonBet1.node.on("click", bet1Callback, this);
        this.nodeCj.on("click", this.onClickCjButton, this);
      };
      UIZooPanel.prototype.removeUIListener = function() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
        null === (_b = null === (_a = this.buttonReward) || void 0 === _a ? void 0 : _a.node) || void 0 === _b ? void 0 : _b.off("click", this.onClickButtonReward, this);
        null === (_d = null === (_c = this.buttonMenu) || void 0 === _c ? void 0 : _c.node) || void 0 === _d ? void 0 : _d.off("click", this.onClickButtonMenu, this);
        null === (_f = null === (_e = this.buttonReturn) || void 0 === _e ? void 0 : _e.node) || void 0 === _f ? void 0 : _f.off("click", this.onClickButtonReturn, this);
        null === (_h = null === (_g = this.buttonSwicth) || void 0 === _g ? void 0 : _g.node) || void 0 === _h ? void 0 : _h.off("click", this.onClickButtonSwicth, this);
        null === (_k = null === (_j = this.buttonBet5) || void 0 === _j ? void 0 : _j.node) || void 0 === _k ? void 0 : _k.off("click", this.eventCallbacks.get("bet5"), this);
        null === (_m = null === (_l = this.buttonBet4) || void 0 === _l ? void 0 : _l.node) || void 0 === _m ? void 0 : _m.off("click", this.eventCallbacks.get("bet4"), this);
        null === (_p = null === (_o = this.buttonBet3) || void 0 === _o ? void 0 : _o.node) || void 0 === _p ? void 0 : _p.off("click", this.eventCallbacks.get("bet3"), this);
        null === (_r = null === (_q = this.buttonBet2) || void 0 === _q ? void 0 : _q.node) || void 0 === _r ? void 0 : _r.off("click", this.eventCallbacks.get("bet2"), this);
        null === (_t = null === (_s = this.buttonBet1) || void 0 === _s ? void 0 : _s.node) || void 0 === _t ? void 0 : _t.off("click", this.eventCallbacks.get("bet1"), this);
        null === (_u = this.nodeCj) || void 0 === _u ? void 0 : _u.off("click", this.onClickCjButton, this);
        this.eventCallbacks.clear();
      };
      var UIZooPanel_1;
      UIZooPanel.tempLabelPool = [];
      __decorate([ property(cc.Node) ], UIZooPanel.prototype, "nodeBroadcast", void 0);
      __decorate([ property(ScrollView_1.default) ], UIZooPanel.prototype, "scrollviewBroadcast", void 0);
      __decorate([ property(cc.Label) ], UIZooPanel.prototype, "labelBalance", void 0);
      __decorate([ property(cc.Button) ], UIZooPanel.prototype, "buttonReturn", void 0);
      __decorate([ property(cc.Button) ], UIZooPanel.prototype, "buttonMenu", void 0);
      __decorate([ property(cc.Button) ], UIZooPanel.prototype, "buttonReward", void 0);
      __decorate([ property(cc.Label) ], UIZooPanel.prototype, "labelBet", void 0);
      __decorate([ property(cc.Button) ], UIZooPanel.prototype, "buttonBet1", void 0);
      __decorate([ property(cc.Button) ], UIZooPanel.prototype, "buttonBet2", void 0);
      __decorate([ property(cc.Button) ], UIZooPanel.prototype, "buttonBet3", void 0);
      __decorate([ property(cc.Button) ], UIZooPanel.prototype, "buttonBet4", void 0);
      __decorate([ property(cc.Button) ], UIZooPanel.prototype, "buttonBet5", void 0);
      __decorate([ property(cc.Button) ], UIZooPanel.prototype, "buttonSwicth", void 0);
      __decorate([ property([ cc.SpriteFrame ]) ], UIZooPanel.prototype, "swicthFrames", void 0);
      __decorate([ property([ cc.SpriteFrame ]) ], UIZooPanel.prototype, "betFrames", void 0);
      __decorate([ property(SelfHead_1.default) ], UIZooPanel.prototype, "playerSelf", void 0);
      __decorate([ property(PlayerHead_1.default) ], UIZooPanel.prototype, "player1", void 0);
      __decorate([ property(PlayerHead_1.default) ], UIZooPanel.prototype, "player2", void 0);
      __decorate([ property(PlayerHead_1.default) ], UIZooPanel.prototype, "player3", void 0);
      __decorate([ property(PlayerHead_1.default) ], UIZooPanel.prototype, "player4", void 0);
      __decorate([ property(cc.Node) ], UIZooPanel.prototype, "selfHitarea", void 0);
      __decorate([ property(IceIcon_1.default) ], UIZooPanel.prototype, "icon1", void 0);
      __decorate([ property(IceIcon_1.default) ], UIZooPanel.prototype, "icon2", void 0);
      __decorate([ property(IceIcon_1.default) ], UIZooPanel.prototype, "icon3", void 0);
      __decorate([ property(cc.SpriteFrame) ], UIZooPanel.prototype, "iceFrozenLightSpriteFrame", void 0);
      __decorate([ property(cc.Node) ], UIZooPanel.prototype, "nodeLock", void 0);
      __decorate([ property(cc.Animation) ], UIZooPanel.prototype, "animationCrileft", void 0);
      __decorate([ property(cc.Animation) ], UIZooPanel.prototype, "animationCriright", void 0);
      __decorate([ property(CriIcon_1.default) ], UIZooPanel.prototype, "criIcon1", void 0);
      __decorate([ property(CriIcon_1.default) ], UIZooPanel.prototype, "criIcon2", void 0);
      __decorate([ property(CriIcon_1.default) ], UIZooPanel.prototype, "criIcon3", void 0);
      __decorate([ property(CriIcon_1.default) ], UIZooPanel.prototype, "criIcon4", void 0);
      __decorate([ property(CriIcon_1.default) ], UIZooPanel.prototype, "criIcon5", void 0);
      __decorate([ property(cc.Node) ], UIZooPanel.prototype, "nodeCj", void 0);
      __decorate([ property(ImageSheet_1.default) ], UIZooPanel.prototype, "sheetCj", void 0);
      __decorate([ property(RepeatClicker_1.default) ], UIZooPanel.prototype, "groupAnimal", void 0);
      __decorate([ property([ cc.Prefab ]) ], UIZooPanel.prototype, "animalPrefabs", void 0);
      __decorate([ property(cc.Node) ], UIZooPanel.prototype, "group_scene", void 0);
      __decorate([ property([ cc.AnimationClip ]) ], UIZooPanel.prototype, "hitEffects", void 0);
      __decorate([ property(cc.Prefab) ], UIZooPanel.prototype, "bombComePrefab", void 0);
      __decorate([ property(cc.Prefab) ], UIZooPanel.prototype, "elephantComePrefab", void 0);
      __decorate([ property(cc.Prefab) ], UIZooPanel.prototype, "buffPrefab", void 0);
      __decorate([ property(cc.Prefab) ], UIZooPanel.prototype, "elephantWinPrefab", void 0);
      __decorate([ property(cc.Prefab) ], UIZooPanel.prototype, "hippoWinPrefab", void 0);
      __decorate([ property(cc.Prefab) ], UIZooPanel.prototype, "redbagPrefab", void 0);
      __decorate([ property(cc.Prefab) ], UIZooPanel.prototype, "sheetYelPrefab", void 0);
      __decorate([ property(cc.Prefab) ], UIZooPanel.prototype, "sheetPurPrefab", void 0);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_ENTER_ROOM) ], UIZooPanel.prototype, "updateView", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.USER_RELOGIN_SUCC) ], UIZooPanel.prototype, "onUserReconnecte", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_LEAVE_ROOM, ModelMessageType_1.ModelMessageType.ZOO_STOP_AUTO_HIT) ], UIZooPanel.prototype, "onNotifyLockEnd", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_CRI_START_1) ], UIZooPanel.prototype, "updateSelectedBetValueText", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.USER_GOLD_UPDATE) ], UIZooPanel.prototype, "updateBalance", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.CHAT_BORADCAST_UPDATE) ], UIZooPanel.prototype, "updateBroadcast", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_PLAYER_UPDATE) ], UIZooPanel.prototype, "updatePlayerHead", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_SKILL_LIST_UPDATE) ], UIZooPanel.prototype, "addZooIcon", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_LOCK_START) ], UIZooPanel.prototype, "autoLockStart", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_LOCK_END) ], UIZooPanel.prototype, "lockTimerComplete", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_CJ_UPDATE) ], UIZooPanel.prototype, "updateRollCJ", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_CRI_DOWN) ], UIZooPanel.prototype, "countDownCri", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_CRI_START) ], UIZooPanel.prototype, "startCri", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_CRI_STOP) ], UIZooPanel.prototype, "stopCri", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_ICE_SKILL_EFFECT_COMPLETE, ModelMessageType_1.ModelMessageType.ZOO_ICE_SKILL_FROZEN_UPDATE) ], UIZooPanel.prototype, "updateIceSkillEffect", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_ICE_SKILL_EFFECT_COMPLETE) ], UIZooPanel.prototype, "playIceFrozenLight", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_BOMB_COME) ], UIZooPanel.prototype, "bombCome", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_ELEPHANT_COME) ], UIZooPanel.prototype, "elephantCome", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_BUFF_START) ], UIZooPanel.prototype, "updateBuffVisible", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_PLAYER_BET_UPDATE) ], UIZooPanel.prototype, "playerBetUpdate", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_ANIMAL_ENTER) ], UIZooPanel.prototype, "animalEnterUpdate", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_ANIMAL_LEAVE) ], UIZooPanel.prototype, "animalLeaveUpdate", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_ANIMAL_DEAD) ], UIZooPanel.prototype, "animalDead", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.UPDATE_RED_POINT) ], UIZooPanel.prototype, "updateTaskStatus", null);
      UIZooPanel = UIZooPanel_1 = __decorate([ ccclass ], UIZooPanel);
      return UIZooPanel;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = UIZooPanel;
    cc._RF.pop();
  }, {
    "../../common/core/TimerManager": "TimerManager",
    "../../common/init/AudioName": "AudioName",
    "../../manager/AudioManager": "AudioManager",
    "../../manager/PoolManager": "PoolManager",
    "../../model/AnimalModel": "AnimalModel",
    "../../model/ChatModel": "ChatModel",
    "../../model/LoginModel": "LoginModel",
    "../../modulecontroller/AnimalModuleController": "AnimalModuleController",
    "../../modulecontroller/RankModuleController": "RankModuleController",
    "../../proto/proto": "proto",
    "../../util/ResourceUtil": "ResourceUtil",
    "../../util/StringUtil": "StringUtil",
    "../component/EffectImage": "EffectImage",
    "../component/ImageSheet": "ImageSheet",
    "../component/RepeatClicker": "RepeatClicker",
    "../component/ResizeWatcher": "ResizeWatcher",
    "../component/ScrollView": "ScrollView",
    "../component/TipView": "TipView",
    "../component/VibratorManager": "VibratorManager",
    "../skill/CriIcon": "CriIcon",
    "../skill/IceIcon": "IceIcon",
    "../skill/UIZooCriDown": "UIZooCriDown",
    "../zoo_animal/AnimalManager": "AnimalManager",
    "../zoo_animal/PikaqiuSkillHandler": "PikaqiuSkillHandler",
    "../zoo_animal/ZooAnimal": "ZooAnimal",
    "../zoo_component/PlayerHead": "PlayerHead",
    "../zoo_component/SelfHead": "SelfHead",
    "../zoo_component/ZooAnimalWin": "ZooAnimalWin",
    "../zoo_component/ZooBombCome": "ZooBombCome",
    "../zoo_component/ZooBuff": "ZooBuff",
    "../zoo_component/ZooDinosaurCome": "ZooDinosaurCome",
    "../zoo_component/ZooRedbag": "ZooRedbag",
    "./../../common/init/ModelMessageType": "ModelMessageType",
    "./../../common/init/UIDefine": "UIDefine",
    "./../../manager/LayerManager": "LayerManager",
    "./../base/ModelMessageCarer": "ModelMessageCarer",
    "./UICjRecord": "UICjRecord",
    "./UIZooMenu": "UIZooMenu"
  } ],
  VibratorManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aecb83SFvpK+4Hh4OiQCDEY", "VibratorManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.VibratorManager = void 0;
    var VibratorOption = function() {
      function VibratorOption() {
        this.loop = 1;
        this.delay = 3e3;
        this.distance = 10;
        this.duration = 500;
        this.interval = 50;
        this.onChange = null;
        this.onChangeObj = null;
        this.props = {};
        this.loopTimes = 0;
        this.originalPos = cc.v2();
        this.shakeTimerId = 0;
        this.delayTimerId = 0;
      }
      VibratorOption.prototype.start = function() {
        if (!this.target) return;
        this.originalPos = this.target.getPosition();
        this.loopTimes = 0;
        this.wait();
      };
      VibratorOption.prototype.stop = function(reset) {
        void 0 === reset && (reset = true);
        if (!this.target) return;
        cc.Tween.stopAllByTarget(this.target);
        reset && this.target.setPosition(this.originalPos);
        this.target = null;
        this.onChange = null;
        this.onChangeObj = null;
      };
      VibratorOption.prototype.shake = function() {
        var _this = this;
        var times = Math.floor(this.duration / this.interval);
        var index = 0;
        var shakeStep = function() {
          if (!_this.target) return;
          var offset = cc.v2(-_this.distance + Math.random() * _this.distance * 2, -_this.distance + Math.random() * _this.distance * 2);
          _this.target.setPosition(_this.originalPos.add(offset));
          _this.onChange && _this.onChange.call(_this.onChangeObj, offset);
          index++;
          if (index >= times) {
            _this.loopTimes++;
            _this.loop <= 0 || _this.loopTimes < _this.loop ? _this.wait() : VibratorManager.getInstance().remove(_this.target);
          } else _this.shakeTimerId = window.setTimeout(shakeStep, _this.interval);
        };
        shakeStep();
      };
      VibratorOption.prototype.wait = function() {
        var _this = this;
        this.delay > 0 ? this.delayTimerId = window.setTimeout(function() {
          _this.shake();
        }, this.delay) : this.shake();
      };
      return VibratorOption;
    }();
    var VibratorManager = function() {
      function VibratorManager() {
        this.list = [];
      }
      VibratorManager.getInstance = function() {
        this.instance || (this.instance = new VibratorManager());
        return this.instance;
      };
      VibratorManager.prototype.add = function(target, props, distance, duration, interval, loop, delay) {
        void 0 === props && (props = null);
        void 0 === distance && (distance = 5);
        void 0 === duration && (duration = 500);
        void 0 === interval && (interval = 50);
        void 0 === loop && (loop = 1);
        void 0 === delay && (delay = 3e3);
        this.remove(target);
        var option = new VibratorOption();
        option.target = target;
        option.props = props || {
          x: target.x,
          y: target.y
        };
        option.distance = distance;
        option.duration = duration;
        option.interval = interval;
        option.loop = loop;
        option.delay = delay;
        this.list.push(option);
        option.start();
        return option;
      };
      VibratorManager.prototype.remove = function(target) {
        var index = this.list.findIndex(function(opt) {
          return opt.target === target;
        });
        if (index >= 0) {
          var option = this.list[index];
          option.stop();
          this.list.splice(index, 1);
        }
      };
      return VibratorManager;
    }();
    exports.VibratorManager = VibratorManager;
    cc._RF.pop();
  }, {} ],
  WinText: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2d2c88/f3tHkK3eil7Owyjz", "WinText");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TimerManager_1 = require("../../common/core/TimerManager");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var WinText = function(_super) {
      __extends(WinText, _super);
      function WinText() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.labelValue = null;
        _this.timerId = 0;
        _this.duration = 0;
        return _this;
      }
      WinText.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      WinText.prototype.start = function() {};
      WinText.prototype.onDestroy = function() {
        this.duration = 0;
        this.removeTimer();
      };
      WinText.prototype.addTimer = function() {
        this.removeTimer();
        this.timerId = TimerManager_1.TimerManager.Instance.addCountdown(this.duration, this, this.timerOverHandler);
      };
      WinText.prototype.timerOverHandler = function() {
        this.timerId = 0;
        this.node.active && (this.node.active = false);
      };
      WinText.prototype.removeTimer = function() {
        if (this.timerId > 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.timerId);
          this.timerId = 0;
        }
      };
      WinText.prototype.updateText = function(text, duration) {
        void 0 === duration && (duration = 3e3);
        this.duration = duration;
        this.labelValue.string = text;
        this.node.width != this.labelValue.node.width + 30 && (this.node.width = this.labelValue.node.width + 30);
        this.node.active && duration > 0 && this.addTimer();
      };
      __decorate([ property(cc.Label) ], WinText.prototype, "labelValue", void 0);
      WinText = __decorate([ ccclass ], WinText);
      return WinText;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = WinText;
    cc._RF.pop();
  }, {
    "../../common/core/TimerManager": "TimerManager",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  ZooAnimalWin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a6a8fe82VVNMrCyWRzsrmeW", "ZooAnimalWin");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TimerManager_1 = require("../../common/core/TimerManager");
    var AudioName_1 = require("../../common/init/AudioName");
    var AudioManager_1 = require("../../manager/AudioManager");
    var AnimalModel_1 = require("../../model/AnimalModel");
    var proto_1 = require("../../proto/proto");
    var ImageSheet_1 = require("../component/ImageSheet");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ZooAnimalWin = function(_super) {
      __extends(ZooAnimalWin, _super);
      function ZooAnimalWin() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.spriteBg = null;
        _this.spriteIcon = null;
        _this.spriteLight = null;
        _this.sheetYel = null;
        _this.sheetPur = null;
        _this.animationEffect = null;
        _this.nodeTitle = null;
        _this.titleOriginalY = 0;
        _this.timerId = 0;
        return _this;
      }
      ZooAnimalWin.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.titleOriginalY = this.nodeTitle.y;
        this.animationEffect.on("finished", this.onAnimationFinished, this);
      };
      ZooAnimalWin.prototype.start = function() {
        this.resetState();
        this.playInitialAnimation();
      };
      ZooAnimalWin.prototype.resetState = function() {
        cc.Tween.stopAllByTarget(this.nodeTitle);
        cc.Tween.stopAllByTarget(this.spriteIcon.node);
        cc.Tween.stopAllByTarget(this.spriteLight.node);
        if (this.animationEffect) {
          this.animationEffect.stop();
          this.animationEffect.node.active = true;
        }
        this.sheetYel.node.active = false;
        this.sheetPur.node.active = false;
        this.spriteLight.node.active = false;
        this.spriteLight.node.scaleX = this.spriteLight.node.scaleY = 1;
        this.nodeTitle.scaleX = this.nodeTitle.scaleY = 0;
        this.nodeTitle.y = this.titleOriginalY + 60;
        this.nodeTitle.angle = 0;
        this.spriteIcon.node.angle = 0;
        this.addTimer();
      };
      ZooAnimalWin.prototype.playInitialAnimation = function() {
        var _this = this;
        cc.tween(this.nodeTitle).delay(.1).to(.6, {
          scaleX: 1,
          scaleY: 1,
          y: this.titleOriginalY
        }, {
          easing: cc.easing.backOut
        }).call(function() {
          _this.shakeTitle();
        }).start();
        this.shakeIcon();
      };
      ZooAnimalWin.prototype.shakeTitle = function() {
        var degree = 5;
        var duration = .3;
        cc.tween(this.nodeTitle).repeatForever(cc.tween().to(duration, {
          angle: degree
        }).to(duration, {
          angle: 0
        }).to(duration, {
          angle: -degree
        }).to(duration, {
          angle: 0
        })).start();
      };
      ZooAnimalWin.prototype.shakeIcon = function() {
        var degree = 5;
        var duration = .3;
        cc.tween(this.spriteIcon.node).repeatForever(cc.tween().to(duration, {
          angle: -degree
        }).to(duration, {
          angle: 0
        }).to(duration, {
          angle: degree
        }).to(duration, {
          angle: 0
        })).start();
      };
      ZooAnimalWin.prototype.addTimer = function() {
        0 == this.timerId && (this.timerId = TimerManager_1.TimerManager.Instance.addCountdown(6e5, this, this.onTimerComplete.bind(this), this.timerUpdateHandler, 30));
      };
      ZooAnimalWin.prototype.onTimerComplete = function() {
        this.removeTimer();
      };
      ZooAnimalWin.prototype.timerUpdateHandler = function() {
        this.spriteBg.node.angle += 3;
      };
      ZooAnimalWin.prototype.removeTimer = function() {
        if (this.timerId > 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.timerId);
          this.timerId = 0;
        }
      };
      ZooAnimalWin.prototype.setValue = function(animal, value, self) {
        var _this = this;
        var _a, _b;
        this.resetState();
        this.animal_type = animal;
        this.sheetYel.node.active = self;
        this.sheetPur.node.active = !self;
        self ? this.sheetYel.updateNumberImage(value) : this.sheetPur.updateNumberImage(value);
        var animalFrames = null === (_b = null === (_a = AnimalModel_1.AnimalModel.Instance) || void 0 === _a ? void 0 : _a.res) || void 0 === _b ? void 0 : _b.animalFirstSpriteFrames;
        animalFrames && animal >= 1 && animal <= animalFrames.length ? this.spriteIcon.spriteFrame = animalFrames[animal - 1] : console.warn("ZooAnimalWin: Invalid animal type " + animal + " or missing sprite frames");
        this.spriteLight.node.active = animal >= proto_1.e_animal.hippo && animal <= proto_1.e_animal.elephant || animal == proto_1.e_animal.bomber;
        var chipName = "";
        chipName = animal == proto_1.e_animal.elephant || animal == proto_1.e_animal.bomber ? "animation_elepeffect" : "animation_hipeffect";
        this.animationEffect && this.animationEffect.play(chipName);
        if (this.spriteLight.node.active) {
          this.spriteLight.node.scaleX = this.spriteLight.node.scaleY = 1;
          cc.tween(this.spriteLight.node).to(.3, {
            scaleX: 6,
            scaleY: 6
          }).call(function() {
            _this.hideLightImage();
          }).start();
        }
        animal == proto_1.e_animal.elephant ? AudioManager_1.AudioManager.Instance.playEffect(AudioName_1.AudioName.RESOURCES_AUDIO_ZOO_EL_WIN) : animal == proto_1.e_animal.bomber && AudioManager_1.AudioManager.Instance.playEffect(AudioName_1.AudioName.RESOURCES_AUDIO_ZOO_BOMB_WIN);
        this.playInitialAnimation();
      };
      ZooAnimalWin.prototype.hideLightImage = function() {
        this.spriteLight.node.active = false;
      };
      ZooAnimalWin.prototype.onAnimationFinished = function() {
        this.animationEffect.node.active = false;
        this.animationEffect.stop();
      };
      ZooAnimalWin.prototype.onDisable = function() {
        this.removeTimer();
        cc.Tween.stopAllByTarget(this.nodeTitle);
        cc.Tween.stopAllByTarget(this.spriteIcon.node);
        cc.Tween.stopAllByTarget(this.spriteLight.node);
        this.animationEffect && this.animationEffect.node.active && this.onAnimationFinished();
      };
      ZooAnimalWin.prototype.onDestroy = function() {
        this.removeTimer();
      };
      __decorate([ property(cc.Sprite) ], ZooAnimalWin.prototype, "spriteBg", void 0);
      __decorate([ property(cc.Sprite) ], ZooAnimalWin.prototype, "spriteIcon", void 0);
      __decorate([ property(cc.Sprite) ], ZooAnimalWin.prototype, "spriteLight", void 0);
      __decorate([ property(ImageSheet_1.default) ], ZooAnimalWin.prototype, "sheetYel", void 0);
      __decorate([ property(ImageSheet_1.default) ], ZooAnimalWin.prototype, "sheetPur", void 0);
      __decorate([ property(cc.Animation) ], ZooAnimalWin.prototype, "animationEffect", void 0);
      __decorate([ property(cc.Node) ], ZooAnimalWin.prototype, "nodeTitle", void 0);
      ZooAnimalWin = __decorate([ ccclass ], ZooAnimalWin);
      return ZooAnimalWin;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = ZooAnimalWin;
    cc._RF.pop();
  }, {
    "../../common/core/TimerManager": "TimerManager",
    "../../common/init/AudioName": "AudioName",
    "../../manager/AudioManager": "AudioManager",
    "../../model/AnimalModel": "AnimalModel",
    "../../proto/proto": "proto",
    "../component/ImageSheet": "ImageSheet",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  ZooAnimal: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6ae31N42+9CY53O86+XIxWi", "ZooAnimal");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AnimalElementsPosition = exports.AnimalDirection = void 0;
    var AnimalModel_1 = require("../../model/AnimalModel");
    var proto_1 = require("../../proto/proto");
    var StringUtil_1 = require("../../util/StringUtil");
    var ModelMessageCarer_1 = require("../base/ModelMessageCarer");
    var AnimalManager_1 = require("./AnimalManager");
    var AnimalHitPolygonConfig_1 = require("./AnimalHitPolygonConfig");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var AnimalDirection;
    (function(AnimalDirection) {
      AnimalDirection[AnimalDirection["left"] = 0] = "left";
      AnimalDirection[AnimalDirection["right"] = 1] = "right";
    })(AnimalDirection = exports.AnimalDirection || (exports.AnimalDirection = {}));
    var ZooAnimal = function(_super) {
      __extends(ZooAnimal, _super);
      function ZooAnimal() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.spriteShadow = null;
        _this.animationAnimal = null;
        _this.nodeLineh = null;
        _this.nodeLinev = null;
        _this.spriteRedbag = null;
        _this.nodeIce = null;
        _this.animalName = "";
        _this.moveComplete = null;
        _this._direction = AnimalDirection.left;
        _this.animalPathScaleX = 1;
        _this.animalPathScaleY = 1;
        _this.currentPathIndex = 0;
        _this.moveT = 0;
        _this.isMoving = false;
        _this.animalIndex = 0;
        _this._hitPolygon = null;
        return _this;
      }
      Object.defineProperty(ZooAnimal.prototype, "animalType", {
        get: function() {
          return this._animalType;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(ZooAnimal.prototype, "id", {
        get: function() {
          return this._id;
        },
        enumerable: false,
        configurable: true
      });
      ZooAnimal.prototype.getDirection = function() {
        return this._direction;
      };
      ZooAnimal.prototype.setHitPolygon = function(vertices) {
        this._hitPolygon = vertices;
      };
      ZooAnimal.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.nodeLineh.active = false;
        this.nodeLinev.active = false;
        this.nodeIce.active = false;
      };
      ZooAnimal.prototype.start = function() {
        AnimalManager_1.default.getInstance().register(this);
        this.animal_data && this.animal_data.status != proto_1.e_animal_state.normal && this.updateState();
      };
      ZooAnimal.prototype.onDestroy = function() {
        this.moveComplete = null;
        AnimalManager_1.default.getInstance().unregister(this);
      };
      ZooAnimal.prototype.setShadowParent = function(parent) {
        this.spriteShadow.node.active || (this.spriteShadow.node.active = true);
        this.spriteShadow.node.parent = parent;
        return this.spriteShadow.node;
      };
      ZooAnimal.prototype.removeShadow = function() {
        this.spriteShadow.node.parent && this.spriteShadow.node.removeFromParent();
      };
      ZooAnimal.prototype.removeRedbag = function() {
        this.spriteRedbag.node.parent && this.node.removeChild(this.spriteRedbag.node);
      };
      ZooAnimal.prototype.setAnimal = function(animalPosition, animal) {
        if (this._animalType == animalPosition.type) return;
        this._id = animal.id;
        this._animalType = animal.bet;
        this.animalIndex = animal.bet;
        this.animal_data = animal;
        this.animal_position = animalPosition;
        animal.red_state ? null == this.spriteRedbag.node.parent && this.node.addChild(this.spriteRedbag.node) : this.spriteRedbag.node.parent && this.node.removeChild(this.spriteRedbag.node);
        if (this.spriteRedbag.node.parent) {
          this.spriteRedbag.node.x = animalPosition.spriteRedbag_x;
          this.spriteRedbag.node.y = animalPosition.spriteRedbag_y;
        }
        this.node.width = animalPosition.width;
        this.node.height = animalPosition.height;
        this.spriteShadow.node.x = animalPosition.shadow_x;
        this.spriteShadow.node.y = animalPosition.shadow_y;
        this.spriteShadow.node.width = animalPosition.shadow_width;
        this.spriteShadow.node.height = animalPosition.shadow_height;
        if (this.animationAnimal) {
          this.animationAnimal.play(this.animalName);
          this.animationAnimal.getComponent(cc.Widget).horizontalCenter = animalPosition.img_animal_horizontal_center;
          this.animationAnimal.getComponent(cc.Widget).bottom = animalPosition.img_animal_bottom;
        }
        var polygon = AnimalHitPolygonConfig_1.AnimalHitPolygonConfig.getPolygon(this._animalType);
        polygon && this.setHitPolygon(polygon);
      };
      ZooAnimal.prototype.setDirection = function(value) {
        this._direction = value;
        value == AnimalDirection.left ? this.node.scaleX = 1 : this.node.scaleX = -1;
      };
      ZooAnimal.prototype.updatePathScale = function(scaleX, scaleY) {
        this.animalPathScaleX = scaleX;
        this.animalPathScaleY = scaleY;
      };
      ZooAnimal.prototype.setPath = function(value, index) {
        void 0 === index && (index = 0);
        var first = value[0];
        var last = value[value.length - 1];
        first.x < last.x ? this.setDirection(AnimalDirection.right) : this.setDirection(AnimalDirection.left);
        if (index < 0) {
          this.currentPathIndex = 0;
          console.warn("\u8def\u5f84\u5c0f\u4e8e0:" + index);
        } else if (index > value.length - 2) {
          this.currentPathIndex = value.length - 2;
          console.warn("\u8def\u5f84\u8d85\u51fa:" + index);
        } else this.currentPathIndex = index;
        this._path = value;
        this.totalPath = value.length;
        this.moveNext();
      };
      ZooAnimal.prototype.moveNext = function() {
        var offsetX = 0;
        var offsetY = this.node.height / 2;
        this.startPoint = new AnimalModel_1.PathPoint(this._path[this.currentPathIndex].x + offsetX, this._path[this.currentPathIndex].y + offsetY);
        this.endPoint = new AnimalModel_1.PathPoint(this._path[this.currentPathIndex + 1].x + offsetX, this._path[this.currentPathIndex + 1].y + offsetY);
        if (null == this.startPoint || null == this.endPoint) {
          true;
          console.error("\u8def\u5f84\u70b9\u9519\u8bef\uff1a" + this.currentPathIndex);
          this.scheduleOnce(this.moveStepComplete, 0);
          return;
        }
        this.moveT = 0;
        this.isMoving = true;
      };
      ZooAnimal.prototype.updateMove = function(dt) {
        if (!this.isMoving) return;
        if (null == this.startPoint || null == this.endPoint) return;
        var duration = AnimalModel_1.AnimalModel.Instance.animal_move_duration;
        this.moveT += dt / duration;
        var t = this.moveT;
        var initX = this.startPoint.x + (this.endPoint.x - this.startPoint.x) * t;
        var initY = this.startPoint.y + (this.endPoint.y - this.startPoint.y) * t;
        this.node.x = Math.floor(initX * this.animalPathScaleX);
        this.node.y = Math.floor(initY * this.animalPathScaleY);
        if (this.spriteShadow.node.parent) {
          var shadowOffsetX = this.animal_position.shadow_x;
          var shadowOffsetY = this.animal_position.shadow_y;
          this._direction == AnimalDirection.right && (shadowOffsetX = -shadowOffsetX);
          this.spriteShadow.node.x = this.node.x + shadowOffsetX;
          this.spriteShadow.node.y = this.node.y + shadowOffsetY;
        }
        if (this.moveT >= duration) {
          this.moveT = duration;
          this.isMoving = false;
          this.moveStepComplete();
        }
      };
      ZooAnimal.prototype.moveStepComplete = function() {
        this.currentPathIndex++;
        this.animal_data && (this.animal_data.point = this.currentPathIndex + 1);
        if (this.currentPathIndex >= this.totalPath - 1) {
          this.stopMove();
          this.moveComplete && this.moveComplete(this);
          return;
        }
        this.moveNext();
      };
      ZooAnimal.prototype.updateState = function() {
        var frozen = this.animal_data.status == proto_1.e_animal_state.ice;
        this.isMoving = !frozen;
        this.setIceVisible(frozen);
      };
      ZooAnimal.prototype.setAnimalStaticImage = function(source) {
        this.animationAnimal.getComponent(cc.Sprite).spriteFrame = source;
      };
      ZooAnimal.prototype.setIceVisible = function(value) {
        value ? this.iceShow() : this.iceHide();
      };
      ZooAnimal.prototype.iceShow = function() {
        this.nodeIce.active = true;
        this.nodeIce.scaleX = 0;
        this.nodeIce.scaleY = 0;
        cc.tween(this.nodeIce).to(.3, {
          scaleX: 1,
          scaleY: 1
        }, {
          easing: cc.easing.cubicInOut
        }).start();
      };
      ZooAnimal.prototype.iceHide = function() {
        var _this = this;
        cc.tween(this.nodeIce).to(.3, {
          scaleX: 0,
          scaleY: 0
        }, {
          easing: cc.easing.cubicInOut
        }).call(function() {
          _this.nodeIce.active = false;
        }).start();
      };
      ZooAnimal.prototype.stopMove = function() {
        this.animationAnimal && this.animationAnimal.stop();
        this.isMoving = false;
      };
      ZooAnimal.prototype.dead = function() {
        this.animal_data && this.animal_data.status != proto_1.e_animal_state.normal && (this.animal_data.status = proto_1.e_animal_state.normal);
        this.enabled = false;
        this.stopMove();
        this.removeShadow();
        this.removeRedbag();
        this.setIceVisible(false);
      };
      ZooAnimal.prototype.consolePosition = function() {
        this.animal_data && this.currentPathIndex < this.totalPath - 3 && console.warn(StringUtil_1.default.replaceString("\u52a8\u7269\u79bb\u5f00,\u8def\u7ebf={2}\uff1a{0}/{1}", this.currentPathIndex + 1, this.totalPath, this.animal_data.line_id));
      };
      ZooAnimal.prototype.clear = function() {
        this._animalType = null;
        this._path = null;
        this._direction = 0;
        this.animal_data = null;
        this.animal_position = null;
        this.startPoint = null;
        this.endPoint = null;
        this.setIceVisible(false);
        if (this.nodeIce) {
          cc.Tween.stopAllByTarget(this.nodeIce);
          this.nodeIce.active = false;
        }
        this.isMoving = false;
        this.moveT = 0;
        this.currentPathIndex = 0;
        this.totalPath = 0;
        this.moveComplete = null;
      };
      ZooAnimal.prototype.hitTest = function(globalX, globalY) {
        var spriteAnimal = this.animationAnimal ? this.animationAnimal.getComponent(cc.Sprite) : null;
        if (!spriteAnimal || !spriteAnimal.node) return false;
        var spriteLocalPoint = spriteAnimal.node.convertToNodeSpaceAR(cc.v2(globalX, globalY));
        if (this._hitPolygon && this._hitPolygon.length >= 3) return this.pointInPolygon(spriteLocalPoint, this._hitPolygon);
        var nodeSize = spriteAnimal.node.getContentSize();
        var rect = cc.rect(-nodeSize.width / 2, -nodeSize.height / 2, nodeSize.width, nodeSize.height);
        return rect.contains(spriteLocalPoint);
      };
      ZooAnimal.prototype.pointInPolygon = function(point, polygon) {
        var x = point.x;
        var y = point.y;
        var inside = false;
        for (var i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
          var xi = polygon[i].x;
          var yi = polygon[i].y;
          var xj = polygon[j].x;
          var yj = polygon[j].y;
          var intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
          intersect && (inside = !inside);
        }
        return inside;
      };
      ZooAnimal.prototype.getAnimalElementPosition = function() {
        var _a, _b;
        var position = new AnimalElementsPosition();
        position.img_animal_horizontal_center = null !== (_a = this.animationAnimal.getComponent(cc.Widget).horizontalCenter) && void 0 !== _a ? _a : 0;
        position.img_animal_bottom = null !== (_b = this.animationAnimal.getComponent(cc.Widget).bottom) && void 0 !== _b ? _b : 0;
        position.anchor_offset_x = this.nodeLinev.x;
        position.anchor_offset_y = this.nodeLineh.y;
        position.width = this.node.width;
        position.height = this.node.height;
        position.shadow_width = this.spriteShadow.node.width;
        position.shadow_height = this.spriteShadow.node.height;
        position.shadow_x = this.spriteShadow.node.x;
        position.shadow_y = this.spriteShadow.node.y;
        position.spriteRedbag_x = this.spriteRedbag.node.x;
        position.spriteRedbag_y = this.spriteRedbag.node.y;
        return position;
      };
      __decorate([ property({
        type: cc.Sprite
      }) ], ZooAnimal.prototype, "spriteShadow", void 0);
      __decorate([ property({
        type: cc.Animation
      }) ], ZooAnimal.prototype, "animationAnimal", void 0);
      __decorate([ property({
        type: cc.Node
      }) ], ZooAnimal.prototype, "nodeLineh", void 0);
      __decorate([ property({
        type: cc.Node
      }) ], ZooAnimal.prototype, "nodeLinev", void 0);
      __decorate([ property({
        type: cc.Sprite
      }) ], ZooAnimal.prototype, "spriteRedbag", void 0);
      __decorate([ property({
        type: cc.Node
      }) ], ZooAnimal.prototype, "nodeIce", void 0);
      __decorate([ property() ], ZooAnimal.prototype, "animalName", void 0);
      ZooAnimal = __decorate([ ccclass ], ZooAnimal);
      return ZooAnimal;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = ZooAnimal;
    var AnimalElementsPosition = function() {
      function AnimalElementsPosition() {}
      return AnimalElementsPosition;
    }();
    exports.AnimalElementsPosition = AnimalElementsPosition;
    cc._RF.pop();
  }, {
    "../../model/AnimalModel": "AnimalModel",
    "../../proto/proto": "proto",
    "../../util/StringUtil": "StringUtil",
    "../base/ModelMessageCarer": "ModelMessageCarer",
    "./AnimalHitPolygonConfig": "AnimalHitPolygonConfig",
    "./AnimalManager": "AnimalManager"
  } ],
  ZooBombCome: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3d5b4voVaZMZKio1/fcSr4O", "ZooBombCome");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ZooBombCome = function(_super) {
      __extends(ZooBombCome, _super);
      function ZooBombCome() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.spriteBomb = null;
        _this.spriteName = null;
        _this.spriteCome = null;
        _this.closeCallback = null;
        _this.bombOriginalX = 0;
        return _this;
      }
      ZooBombCome.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.bombOriginalX = this.spriteBomb.node.x;
      };
      ZooBombCome.prototype.start = function() {
        var _this = this;
        this.node.opacity = 255;
        this.spriteBomb.node.active = false;
        this.spriteName.node.active = false;
        this.spriteCome.node.active = false;
        this.scheduleOnce(function() {
          _this.tweenView();
        }, .2);
      };
      ZooBombCome.prototype.tweenView = function() {
        var _this = this;
        var bombNode = this.spriteBomb.node;
        bombNode.active = true;
        bombNode.scale = 0;
        bombNode.x = -this.node.width / 2 - bombNode.width / 2;
        cc.tween(bombNode).to(.5, {
          x: this.bombOriginalX,
          scale: 1
        }, {
          easing: cc.easing.cubicInOut
        }).call(function() {
          return _this.tweenBombComplete();
        }).start();
      };
      ZooBombCome.prototype.tweenBombComplete = function() {
        var _this = this;
        this.tweenTarget(this.spriteName.node, 0);
        this.tweenTarget(this.spriteCome.node, .2);
        this.scheduleOnce(function() {
          _this.autoClose();
        }, 2.4);
      };
      ZooBombCome.prototype.tweenTarget = function(targetNode, delaySec) {
        targetNode.active = true;
        targetNode.scale = 0;
        cc.tween(targetNode).delay(delaySec).to(.5, {
          scale: 1
        }, {
          easing: cc.easing.backOut
        }).start();
      };
      ZooBombCome.prototype.autoClose = function() {
        var _this = this;
        cc.tween(this.node).to(.5, {
          opacity: 0
        }, {
          easing: cc.easing.cubicInOut
        }).call(function() {
          _this.closeCallback && _this.closeCallback();
        }).start();
      };
      ZooBombCome.prototype.onDisable = function() {
        cc.Tween.stopAllByTarget(this.spriteBomb.node);
        cc.Tween.stopAllByTarget(this.spriteName.node);
        cc.Tween.stopAllByTarget(this.spriteCome.node);
      };
      ZooBombCome.prototype.onDestroy = function() {
        this.unscheduleAllCallbacks();
        this.closeCallback = null;
      };
      __decorate([ property(cc.Sprite) ], ZooBombCome.prototype, "spriteBomb", void 0);
      __decorate([ property(cc.Sprite) ], ZooBombCome.prototype, "spriteName", void 0);
      __decorate([ property(cc.Sprite) ], ZooBombCome.prototype, "spriteCome", void 0);
      ZooBombCome = __decorate([ ccclass ], ZooBombCome);
      return ZooBombCome;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = ZooBombCome;
    cc._RF.pop();
  }, {
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  ZooBuff: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a958aQqBp1LaaJ0YUR474uS", "ZooBuff");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimalModel_1 = require("../../model/AnimalModel");
    var ModelMessageType_1 = require("./../../common/init/ModelMessageType");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ZooBuff = function(_super) {
      __extends(ZooBuff, _super);
      function ZooBuff() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nodeHit = null;
        _this.nodeBuff = null;
        _this.animationLight = null;
        _this.nodeMask = null;
        _this.spriteLight = null;
        _this.spriteGray = null;
        _this.currentHitCount = 0;
        _this.fadeTween = null;
        return _this;
      }
      ZooBuff.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      ZooBuff.prototype.start = function() {
        this.animationLight.node.active = false;
        this.nodeMask.width = 0;
        this.updateView();
      };
      ZooBuff.prototype.updateView = function() {
        var zooModel = AnimalModel_1.AnimalModel.Instance;
        var hitCount = zooModel.hitCount;
        var buffVisible = true;
        this.nodeBuff.active = buffVisible;
        this.nodeHit.active = !buffVisible;
        if (this.animationLight && !this.animationLight.node.active) {
          this.animationLight.node.active = true;
          this.animationLight.play("animation_buffeffect");
        }
        this.updateBuffProgress(zooModel.getBuffProgress());
      };
      ZooBuff.prototype.hitCountTweenComplete = function() {
        var zooModel = AnimalModel_1.AnimalModel.Instance;
        var hitCount = zooModel.hitCount;
        (hitCount != this.currentHitCount || hitCount >= zooModel.hitProgressMax) && this.updateView();
      };
      ZooBuff.prototype.updateBuffProgress = function(progress) {
        progress < 0 && (progress = 0);
        progress > 1 && (progress = 1);
        this.nodeMask.width = this.spriteLight.node.width * (1 - progress);
      };
      ZooBuff.prototype.updateHitProgress = function(progress) {
        this.nodeMask.width = this.spriteLight.node.width * (1 - progress);
      };
      ZooBuff.prototype.fadeout = function() {
        var _this = this;
        if (this.fadeTween) return;
        this.fadeTween = cc.tween(this.node).delay(.2).to(.3, {
          opacity: 0
        }).call(function() {
          return _this.fadeoutComplete();
        }).start();
      };
      ZooBuff.prototype.fadeoutComplete = function() {
        this.fadeTween = null;
        cc.Tween.stopAllByTarget(this.node);
        this.node.opacity = 255;
        if (this.animationLight) {
          this.animationLight.stop();
          this.animationLight.node.active = false;
        }
        if (this.node && this.node.parent && this.node.isValid) try {
          this.node.removeFromParent();
        } catch (error) {
          console.warn("ZooBuff: Error removing node from parent", error);
        }
      };
      ZooBuff.prototype.onDestroy = function() {
        this.fadeTween = null;
      };
      __decorate([ property(cc.Node) ], ZooBuff.prototype, "nodeHit", void 0);
      __decorate([ property(cc.Node) ], ZooBuff.prototype, "nodeBuff", void 0);
      __decorate([ property(cc.Animation) ], ZooBuff.prototype, "animationLight", void 0);
      __decorate([ property(cc.Node) ], ZooBuff.prototype, "nodeMask", void 0);
      __decorate([ property(cc.Sprite) ], ZooBuff.prototype, "spriteLight", void 0);
      __decorate([ property(cc.Sprite) ], ZooBuff.prototype, "spriteGray", void 0);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_BUFF_PROGRESS_UPDATE, ModelMessageType_1.ModelMessageType.ZOO_BUFF_PROGRESS_START) ], ZooBuff.prototype, "updateView", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_BUFF_HIT_PROGRESS_CANCEL) ], ZooBuff.prototype, "fadeout", null);
      ZooBuff = __decorate([ ccclass ], ZooBuff);
      return ZooBuff;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = ZooBuff;
    cc._RF.pop();
  }, {
    "../../model/AnimalModel": "AnimalModel",
    "./../../common/init/ModelMessageType": "ModelMessageType",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  ZooCjWin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cf1e0KXJ0RAIKwMVnxbaGXh", "ZooCjWin");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var LayerManager_1 = require("./../../manager/LayerManager");
    var UIDefine_1 = require("./../../common/init/UIDefine");
    var ModelMessageType_1 = require("./../../common/init/ModelMessageType");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var ImageSheet_1 = require("../component/ImageSheet");
    var MissionModel_1 = require("../../model/MissionModel");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ZooCjWin = function(_super) {
      __extends(ZooCjWin, _super);
      function ZooCjWin() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.spriteLight = null;
        _this.val = null;
        return _this;
      }
      ZooCjWin_1 = ZooCjWin;
      ZooCjWin.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.node.on(cc.Node.EventType.TOUCH_END, this.onCloseHandler, this);
      };
      ZooCjWin.prototype.start = function() {
        this.startTween();
        this.updateView();
      };
      ZooCjWin.prototype.clear = function() {
        cc.Tween.stopAllByTarget(this.spriteLight.node);
        this.val.clearOldSprites();
        MissionModel_1.MissionModel.Instance.updateModel(ModelMessageType_1.ModelMessageType.USER_GOLD_UPDATE);
      };
      ZooCjWin.prototype.onModalClick = function() {
        this.clear();
        ZooCjWin_1.close();
      };
      ZooCjWin.prototype.onCloseHandler = function() {
        this.clear();
        ZooCjWin_1.close();
      };
      ZooCjWin.prototype.startTween = function() {
        this.spriteLight.node.stopAllActions();
        this.spriteLight.node.angle = 0;
        cc.tween(this.spriteLight.node).by(.2, {
          angle: -30
        }).repeatForever().start();
      };
      ZooCjWin.prototype.updateView = function() {
        var cjWinVal = MissionModel_1.MissionModel.Instance.cjWinVal;
        this.val.updateNumberImage(cjWinVal);
      };
      ZooCjWin.open = function() {
        var option = new LayerManager_1.UIOption(UIDefine_1.UIDefine.ZooCjWin, null, LayerManager_1.UICacheType.never, LayerManager_1.PanelEffectType.scaleUp, LayerManager_1.PanelEffectType.scaleDown);
        LayerManager_1.LayerManager.Instance.addChildWithPrefab(option, null, LayerManager_1.LayerType.layer_modal);
      };
      ZooCjWin.close = function() {
        LayerManager_1.LayerManager.Instance.removeChildWithPrefab(UIDefine_1.UIDefine.ZooCjWin);
      };
      var ZooCjWin_1;
      __decorate([ property(cc.Sprite) ], ZooCjWin.prototype, "spriteLight", void 0);
      __decorate([ property(ImageSheet_1.default) ], ZooCjWin.prototype, "val", void 0);
      ZooCjWin = ZooCjWin_1 = __decorate([ ccclass ], ZooCjWin);
      return ZooCjWin;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = ZooCjWin;
    cc._RF.pop();
  }, {
    "../../model/MissionModel": "MissionModel",
    "../component/ImageSheet": "ImageSheet",
    "./../../common/init/ModelMessageType": "ModelMessageType",
    "./../../common/init/UIDefine": "UIDefine",
    "./../../manager/LayerManager": "LayerManager",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  ZooDinosaurCome: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8bfd3OwzlJP9LgEL96wTWRN", "ZooDinosaurCome");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ZooDinosaurCome = function(_super) {
      __extends(ZooDinosaurCome, _super);
      function ZooDinosaurCome() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.spriteDinosaur = null;
        _this.spriteName = null;
        _this.spriteOdds = null;
        _this.spriteCome = null;
        _this.dinosaurOriginalX = 0;
        _this.closeCallback = null;
        return _this;
      }
      ZooDinosaurCome.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.dinosaurOriginalX = this.spriteDinosaur.node.x;
      };
      ZooDinosaurCome.prototype.start = function() {
        var _this = this;
        this.node.opacity = 255;
        this.spriteDinosaur.node.active = false;
        this.spriteOdds.node.active = false;
        this.spriteName.node.active = false;
        this.spriteCome.node.active = false;
        this.scheduleOnce(function() {
          _this.tweenView();
        }, .2);
      };
      ZooDinosaurCome.prototype.tweenView = function() {
        var _this = this;
        var dinosaurNode = this.spriteDinosaur.node;
        dinosaurNode.active = true;
        dinosaurNode.scale = 0;
        dinosaurNode.x = -this.node.width / 2 - dinosaurNode.width / 2;
        cc.tween(dinosaurNode).to(.5, {
          x: this.dinosaurOriginalX,
          scale: 1
        }, {
          easing: cc.easing.cubicInOut
        }).call(function() {
          return _this.tweenDinosaurComplete();
        }).start();
      };
      ZooDinosaurCome.prototype.tweenDinosaurComplete = function() {
        var _this = this;
        this.tweenTarget(this.spriteName.node, 0);
        this.tweenTarget(this.spriteOdds.node, .2);
        this.tweenTarget(this.spriteCome.node, .2);
        this.scheduleOnce(function() {
          _this.autoClose();
        }, 2.9);
      };
      ZooDinosaurCome.prototype.tweenTarget = function(targetNode, delaySec) {
        targetNode.active = true;
        targetNode.scale = 0;
        cc.tween(targetNode).delay(delaySec).to(.5, {
          scale: 1
        }, {
          easing: cc.easing.backOut
        }).start();
      };
      ZooDinosaurCome.prototype.autoClose = function() {
        var _this = this;
        cc.tween(this.node).to(.5, {
          opacity: 0
        }, {
          easing: cc.easing.cubicInOut
        }).call(function() {
          _this.closeCallback && _this.closeCallback();
        }).start();
      };
      ZooDinosaurCome.prototype.onDisable = function() {
        cc.Tween.stopAllByTarget(this.spriteDinosaur.node);
        cc.Tween.stopAllByTarget(this.spriteOdds.node);
        cc.Tween.stopAllByTarget(this.spriteName.node);
        cc.Tween.stopAllByTarget(this.spriteCome.node);
      };
      ZooDinosaurCome.prototype.onDestroy = function() {
        this.unscheduleAllCallbacks();
        this.closeCallback = null;
      };
      __decorate([ property(cc.Sprite) ], ZooDinosaurCome.prototype, "spriteDinosaur", void 0);
      __decorate([ property(cc.Sprite) ], ZooDinosaurCome.prototype, "spriteName", void 0);
      __decorate([ property(cc.Sprite) ], ZooDinosaurCome.prototype, "spriteOdds", void 0);
      __decorate([ property(cc.Sprite) ], ZooDinosaurCome.prototype, "spriteCome", void 0);
      ZooDinosaurCome = __decorate([ ccclass ], ZooDinosaurCome);
      return ZooDinosaurCome;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = ZooDinosaurCome;
    cc._RF.pop();
  }, {
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  ZooRedbag: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "21ca4tb63VG2IyW7yw8tas8", "ZooRedbag");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TimerManager_1 = require("../../common/core/TimerManager");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var ZooRedbag = function(_super) {
      __extends(ZooRedbag, _super);
      function ZooRedbag() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.spriteLight = null;
        _this.labelValue = null;
        _this.timerId = 0;
        return _this;
      }
      ZooRedbag.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
      };
      ZooRedbag.prototype.start = function() {
        this.addTimer();
      };
      ZooRedbag.prototype.onDestroy = function() {
        this.removeTimer();
      };
      ZooRedbag.prototype.setValue = function(value) {
        this.labelValue.string = value.toString();
      };
      ZooRedbag.prototype.addTimer = function() {
        0 == this.timerId && (this.timerId = TimerManager_1.TimerManager.Instance.addCountdown(6e5, this, null, this.timerUpdateHandler, 16));
      };
      ZooRedbag.prototype.timerUpdateHandler = function() {
        this.spriteLight.node.angle += 3;
      };
      ZooRedbag.prototype.removeTimer = function() {
        if (this.timerId > 0) {
          TimerManager_1.TimerManager.Instance.removeTimer(this.timerId);
          this.timerId = 0;
        }
      };
      __decorate([ property(cc.Sprite) ], ZooRedbag.prototype, "spriteLight", void 0);
      __decorate([ property(cc.Label) ], ZooRedbag.prototype, "labelValue", void 0);
      ZooRedbag = __decorate([ ccclass ], ZooRedbag);
      return ZooRedbag;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = ZooRedbag;
    cc._RF.pop();
  }, {
    "../../common/core/TimerManager": "TimerManager",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  ZooTask: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "67bbfqOnYFAwpXeL98ia0zB", "ZooTask");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimalModel_1 = require("../../model/AnimalModel");
    var MissionModel_1 = require("../../model/MissionModel");
    var MissionModuleController_1 = require("../../modulecontroller/MissionModuleController");
    var StringUtil_1 = require("../../util/StringUtil");
    var Alert_1 = require("../component/Alert");
    var TaskItem_1 = require("../item/TaskItem");
    var ModelMessageType_1 = require("./../../common/init/ModelMessageType");
    var ModelMessageCarer_1 = require("./../base/ModelMessageCarer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TASK_LAYOUT = {
      SINGLE_TASK_X: 0,
      DUAL_TASK_LEFT_X: -80,
      DUAL_TASK_RIGHT_X: 80,
      TRIPLE_TASK_LEFT_X: -80,
      TRIPLE_TASK_CENTER_X: 0,
      TRIPLE_TASK_RIGHT_X: 80,
      PROGRESS_DEFAULT_X: -39,
      PROGRESS_RIGHT_X: 41,
      PROGRESS_NARROW_WIDTH: 58,
      PROGRESS_WIDE_WIDTH: 136,
      SLIDE_OFFSET: 229,
      FADE_DURATION: .3,
      SLIDE_DURATION: .2,
      COMPLETE_DISPLAY_DURATION: 5,
      MAX_ICON_WIDTH: 70,
      MAX_ICON_HEIGHT: 70
    };
    var ZooTask = function(_super) {
      __extends(ZooTask, _super);
      function ZooTask() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.nodeTask = null;
        _this.labelTasknumber = null;
        _this.labelTaskexplain = null;
        _this.spriteIconbg = null;
        _this.spriteTaskicon = null;
        _this.nodeBar = null;
        _this.spriteDoing1 = null;
        _this.spriteDoing2 = null;
        _this.nodeBarcomplete = null;
        _this.taskItem1 = null;
        _this.taskItem2 = null;
        _this.taskItem3 = null;
        _this.nodeComplete = null;
        _this.labelLbl1 = null;
        _this.labelLbl2 = null;
        _this.labelTaskwin = null;
        _this.iconbgSpriteFrames = [];
        return _this;
      }
      ZooTask.prototype.onLoad = function() {
        _super.prototype.onLoad.call(this);
        this.node.on(cc.Node.EventType.TOUCH_END, this.btnHandler, this);
      };
      ZooTask.prototype.start = function() {
        this.resetTaskPanel();
        this.getTaskList();
      };
      ZooTask.prototype.onDestroy = function() {
        MissionModel_1.MissionModel.Instance.clearTaskData();
      };
      ZooTask.prototype.resetTaskPanel = function() {
        cc.Tween.stopAllByTarget(this.node);
        this.nodeTask.active = true;
        this.nodeComplete.opacity = 0;
        this.nodeComplete.active = true;
        this.node.active = false;
      };
      ZooTask.prototype.initTaskPanel = function() {
        var curTask = MissionModel_1.MissionModel.Instance.cur_task_info;
        var taskList = MissionModel_1.MissionModel.Instance.zoo_task_list;
        if (!taskList || !taskList.length || !curTask) return;
        this.spriteIconbg.spriteFrame = this.iconbgSpriteFrames[0];
        this.taskItem1.setNormal();
        this.taskItem2.setNormal();
        this.taskItem3.setNormal();
        var taskCount = taskList.length;
        taskCount >= 1 && this.taskItem1.setIcon(taskList[0].rewared_type);
        taskCount >= 2 && this.taskItem2.setIcon(taskList[1].rewared_type);
        taskCount >= 3 && this.taskItem3.setIcon(taskList[2].rewared_type);
        this.taskItem1.node.active = true;
        this.taskItem2.node.active = true;
        this.taskItem3.node.active = true;
        this.spriteDoing1.node.active = true;
        this.spriteDoing2.node.active = true;
        this.nodeBarcomplete.active = false;
        this.spriteDoing1.node.x = TASK_LAYOUT.PROGRESS_DEFAULT_X;
        this.spriteDoing1.node.width = TASK_LAYOUT.PROGRESS_NARROW_WIDTH;
        this.spriteDoing2.node.x = TASK_LAYOUT.PROGRESS_RIGHT_X;
        this.nodeBarcomplete.x = TASK_LAYOUT.PROGRESS_DEFAULT_X;
        this.nodeBarcomplete.width = TASK_LAYOUT.PROGRESS_NARROW_WIDTH;
        this.taskItem1.spriteIcon.spriteFrame = AnimalModel_1.AnimalModel.Instance.res.taskItemIcons[taskList[0].rewared_type - 1];
        if (1 === taskCount) {
          this.taskItem1.node.x = TASK_LAYOUT.SINGLE_TASK_X;
          this.taskItem2.node.active = false;
          this.taskItem3.node.active = false;
          this.spriteDoing1.node.active = false;
          this.spriteDoing2.node.active = false;
        } else if (2 === taskCount) {
          this.taskItem1.node.x = TASK_LAYOUT.DUAL_TASK_LEFT_X;
          this.taskItem2.node.x = TASK_LAYOUT.DUAL_TASK_RIGHT_X;
          this.taskItem3.node.active = false;
          this.spriteDoing1.node.width = TASK_LAYOUT.PROGRESS_WIDE_WIDTH;
          this.spriteDoing2.node.active = false;
          this.nodeBarcomplete.width = TASK_LAYOUT.PROGRESS_WIDE_WIDTH;
          this.taskItem2.spriteIcon.spriteFrame = AnimalModel_1.AnimalModel.Instance.res.taskItemIcons[taskList[1].rewared_type - 1];
        } else {
          this.taskItem1.node.x = TASK_LAYOUT.TRIPLE_TASK_LEFT_X;
          this.taskItem2.node.x = TASK_LAYOUT.TRIPLE_TASK_CENTER_X;
          this.taskItem3.node.x = TASK_LAYOUT.TRIPLE_TASK_RIGHT_X;
          this.taskItem2.spriteIcon.spriteFrame = AnimalModel_1.AnimalModel.Instance.res.taskItemIcons[taskList[1].rewared_type - 1];
          this.taskItem3.spriteIcon.spriteFrame = AnimalModel_1.AnimalModel.Instance.res.taskItemIcons[taskList[2].rewared_type - 1];
        }
      };
      ZooTask.prototype.updateTaskDetail = function() {
        var curTask = MissionModel_1.MissionModel.Instance.cur_task_info;
        var taskList = MissionModel_1.MissionModel.Instance.zoo_task_list;
        if (curTask.id == taskList.length && 2 == curTask.state) return;
        var id = curTask.id;
        var state = curTask.state;
        if (1 === id) this.taskItem1.setDoing(); else if (2 === id) {
          this.nodeBarcomplete.active = true;
          taskList.length > 2 ? this.nodeBarcomplete.width = TASK_LAYOUT.PROGRESS_NARROW_WIDTH : this.nodeBarcomplete.width = TASK_LAYOUT.PROGRESS_WIDE_WIDTH;
          this.taskItem1.setComplete();
          this.taskItem2.setDoing();
        } else if (3 === id) {
          this.nodeBarcomplete.active = true;
          this.nodeBarcomplete.width = TASK_LAYOUT.PROGRESS_WIDE_WIDTH;
          this.taskItem1.setComplete();
          this.taskItem2.setComplete();
          this.taskItem3.setDoing();
        }
        var description = "";
        if (0 === curTask.animal) {
          this.spriteTaskicon.spriteFrame = AnimalModel_1.AnimalModel.Instance.res.taskItemIcons[5];
          description = StringUtil_1.default.replaceString("\u83b7\u5f97{0}\u91d1\u8c46", curTask.condition);
        } else {
          var name = AnimalModel_1.AnimalModel.Instance.getAnimalName(curTask.animal);
          this.spriteTaskicon.spriteFrame = AnimalModel_1.AnimalModel.Instance.res.animalFirstSpriteFrames[curTask.animal - 1];
          description = StringUtil_1.default.replaceString("\u6355\u83b7{0}{1}\u53ea", name, curTask.condition);
        }
        this.adjustTaskIconSize(this.spriteTaskicon);
        var cur_val = curTask.val;
        var progress = cur_val + "/" + curTask.condition;
        if (cur_val >= curTask.condition) {
          description = "\u70b9\u51fb\u9886\u53d6\u5956\u52b1";
          progress = "\u4efb\u52a1\u5b8c\u6210\uff01";
        }
        this.labelTaskexplain.string = description;
        this.labelTasknumber.string = progress;
      };
      ZooTask.prototype.showTaskPanel = function() {
        this.getReward();
        var curTask = MissionModel_1.MissionModel.Instance.cur_task_info;
        var taskList = MissionModel_1.MissionModel.Instance.zoo_task_list;
        if (!curTask || !taskList || !taskList.length) {
          this.node.active = false;
          return;
        }
        if (!this.node.active || 0 === this.node.opacity) {
          this.node.active = true;
          this.node.opacity = 255;
          this.node.setPosition(-this.node.width - TASK_LAYOUT.SLIDE_OFFSET, this.node.y);
          cc.tween(this.node).delay(.5).to(TASK_LAYOUT.SLIDE_DURATION, {
            x: -TASK_LAYOUT.SLIDE_OFFSET
          }).start();
          this.initTaskPanel();
        }
        this.updateTask();
      };
      ZooTask.prototype.getReward = function() {
        var cur_task = MissionModel_1.MissionModel.Instance.cur_task_info;
        if (this.nodeComplete.opacity > 0 || null == cur_task || cur_task.val < cur_task.condition) return;
        MissionModuleController_1.MissionModuleController.Instance.requestGetZooTaskReward(cur_task.id);
      };
      ZooTask.prototype.btnHandler = function() {
        this.promptInformation();
      };
      ZooTask.prototype.promptInformation = function() {
        var taskList = MissionModel_1.MissionModel.Instance.zoo_task_list;
        var curTask = MissionModel_1.MissionModel.Instance.cur_task_info;
        if (!curTask || !taskList || !taskList.length) return;
        var text = "\u4efb\u52a1\u8be6\u60c5\n\n";
        for (var _i = 0, taskList_1 = taskList; _i < taskList_1.length; _i++) {
          var task = taskList_1[_i];
          var reward = task.rewared;
          var condition = task.condition;
          var winType = task.rewared_type;
          var winText = [ "\u91d1\u8c46", "\u7ea2\u5305", "\u5956\u5238" ][winType - 1];
          if (0 === task.animal) text += StringUtil_1.default.replaceString("\u83b7\u5f97{0}\u91d1\u8c46\uff1a\u5956\u52b1{1}{2}", condition, reward, winText); else {
            var name = AnimalModel_1.AnimalModel.Instance.getAnimalName(task.animal);
            text += StringUtil_1.default.replaceString("\u6355\u83b7{0}{1}\u53ea\uff1a\u5956\u52b1{2}{3}", name, condition, reward, winText);
          }
          text += "\n";
        }
        Alert_1.default.open(text);
      };
      ZooTask.prototype.getRewardSuccess = function() {
        var curTask = MissionModel_1.MissionModel.Instance.cur_task_info;
        var winType = curTask.rewared_type;
        var winText = [ "\u91d1\u8c46", "\u7ea2\u5305", "\u5956\u5238" ][winType - 1];
        this.labelTaskwin.string = StringUtil_1.default.replaceString("\u9886\u53d6\u5956\u52b1\uff1a{0}{1}", curTask.rewared, winText);
        this.nodeTask.active = false;
        this.nodeComplete.opacity = 0;
        this.nodeComplete.active = true;
        cc.tween(this.nodeComplete).to(TASK_LAYOUT.FADE_DURATION, {
          opacity: 255
        }).delay(TASK_LAYOUT.COMPLETE_DISPLAY_DURATION).to(TASK_LAYOUT.FADE_DURATION, {
          opacity: 0
        }).call(this.checkTaskComplete, this).start();
      };
      ZooTask.prototype.checkTaskComplete = function() {
        var _this = this;
        var curTask = MissionModel_1.MissionModel.Instance.cur_task_info;
        var taskList = MissionModel_1.MissionModel.Instance.zoo_task_list;
        if (curTask && taskList && curTask.id === taskList.length && curTask.val >= curTask.condition) {
          MissionModel_1.MissionModel.Instance.clearTaskData();
          this.allTaskComplete();
          cc.tween(this.node).delay(2).to(TASK_LAYOUT.SLIDE_DURATION, {
            opacity: 0
          }).call(function() {
            return _this.node.active = false;
          }).start();
        } else this.getTaskList();
      };
      ZooTask.prototype.allTaskComplete = function() {
        this.nodeTask.active = true;
        this.spriteTaskicon.spriteFrame = null;
        this.spriteIconbg.spriteFrame = this.iconbgSpriteFrames[1];
        this.labelTasknumber.string = "\u6bcf\u65e5\u4efb\u52a1";
        this.labelTaskexplain.string = "\u5df2\u7ecf\u5168\u90e8\u5b8c\u6210\u5566\uff01";
        this.taskItem1.setComplete();
        this.taskItem2.setComplete();
        this.taskItem3.setComplete();
        var task_count = MissionModel_1.MissionModel.Instance.zoo_task_list.length;
        this.nodeBarcomplete.width = 1 == task_count ? 58 : 136;
      };
      ZooTask.prototype.getTaskList = function() {
        MissionModuleController_1.MissionModuleController.Instance.requestGetZooTask();
      };
      ZooTask.prototype.updateTask = function() {
        var curTask = MissionModel_1.MissionModel.Instance.cur_task_info;
        1 === curTask.id && this.initTaskPanel();
        this.nodeTask.active || (this.nodeTask.active = true);
        this.updateTaskDetail();
      };
      ZooTask.prototype.adjustTaskIconSize = function(sprite) {
        if (!sprite || !sprite.spriteFrame || !sprite.spriteFrame.getTexture()) return;
        var texture = sprite.spriteFrame.getTexture();
        var contentWidth = texture.width;
        var contentHeight = texture.height;
        var maxWidth = TASK_LAYOUT.MAX_ICON_WIDTH;
        var maxHeight = TASK_LAYOUT.MAX_ICON_HEIGHT;
        var node = sprite.node;
        if (contentWidth > maxWidth || contentHeight > maxHeight) {
          var scaleW = maxWidth / contentWidth;
          var scaleH = maxHeight / contentHeight;
          var scale = Math.min(scaleW, scaleH);
          node.width = contentWidth * scale;
          node.height = contentHeight * scale;
        }
      };
      __decorate([ property(cc.Node) ], ZooTask.prototype, "nodeTask", void 0);
      __decorate([ property(cc.Label) ], ZooTask.prototype, "labelTasknumber", void 0);
      __decorate([ property(cc.Label) ], ZooTask.prototype, "labelTaskexplain", void 0);
      __decorate([ property(cc.Sprite) ], ZooTask.prototype, "spriteIconbg", void 0);
      __decorate([ property(cc.Sprite) ], ZooTask.prototype, "spriteTaskicon", void 0);
      __decorate([ property(cc.Node) ], ZooTask.prototype, "nodeBar", void 0);
      __decorate([ property(cc.Sprite) ], ZooTask.prototype, "spriteDoing1", void 0);
      __decorate([ property(cc.Sprite) ], ZooTask.prototype, "spriteDoing2", void 0);
      __decorate([ property(cc.Node) ], ZooTask.prototype, "nodeBarcomplete", void 0);
      __decorate([ property(TaskItem_1.default) ], ZooTask.prototype, "taskItem1", void 0);
      __decorate([ property(TaskItem_1.default) ], ZooTask.prototype, "taskItem2", void 0);
      __decorate([ property(TaskItem_1.default) ], ZooTask.prototype, "taskItem3", void 0);
      __decorate([ property(cc.Node) ], ZooTask.prototype, "nodeComplete", void 0);
      __decorate([ property(cc.Label) ], ZooTask.prototype, "labelLbl1", void 0);
      __decorate([ property(cc.Label) ], ZooTask.prototype, "labelLbl2", void 0);
      __decorate([ property(cc.Label) ], ZooTask.prototype, "labelTaskwin", void 0);
      __decorate([ property([ cc.SpriteFrame ]) ], ZooTask.prototype, "iconbgSpriteFrames", void 0);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.UPDATE_ZOO_TASK) ], ZooTask.prototype, "showTaskPanel", null);
      __decorate([ ModelMessageCarer_1.careMessages(ModelMessageType_1.ModelMessageType.ZOO_TASK_GET_REWARD) ], ZooTask.prototype, "getRewardSuccess", null);
      ZooTask = __decorate([ ccclass ], ZooTask);
      return ZooTask;
    }(ModelMessageCarer_1.ModelMessageCarer);
    exports.default = ZooTask;
    cc._RF.pop();
  }, {
    "../../model/AnimalModel": "AnimalModel",
    "../../model/MissionModel": "MissionModel",
    "../../modulecontroller/MissionModuleController": "MissionModuleController",
    "../../util/StringUtil": "StringUtil",
    "../component/Alert": "Alert",
    "../item/TaskItem": "TaskItem",
    "./../../common/init/ModelMessageType": "ModelMessageType",
    "./../base/ModelMessageCarer": "ModelMessageCarer"
  } ],
  proto: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2bf13saaxpA+I4AFX/+QeQh", "proto");
    "use strict";
    var $protobuf = protobuf;
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
    $root.m_1801_tos = function() {
      function m_1801_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1801_tos.prototype.type = 1;
      m_1801_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.type && message.hasOwnProperty("type") && writer.uint32(8).int32(message.type);
        return writer;
      };
      m_1801_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1801_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1801_tos;
    }();
    $root.m_1801_toc = function() {
      function m_1801_toc(properties) {
        this.bet_val = [];
        this.odds = [];
        this.animals = [];
        this.players = [];
        this.skill = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1801_toc.prototype.bet_val = $util.emptyArray;
      m_1801_toc.prototype.odds = $util.emptyArray;
      m_1801_toc.prototype.animals = $util.emptyArray;
      m_1801_toc.prototype.players = $util.emptyArray;
      m_1801_toc.prototype.red_state = false;
      m_1801_toc.prototype.skill = $util.emptyArray;
      m_1801_toc.prototype.time = 0;
      m_1801_toc.prototype.free_gold = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1801_toc.prototype.cj = "";
      m_1801_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.bet_val && message.bet_val.length) for (var i = 0; i < message.bet_val.length; ++i) writer.uint32(8).uint32(message.bet_val[i]);
        if (null != message.odds && message.odds.length) for (var i = 0; i < message.odds.length; ++i) $root.p_animal_odds.encode(message.odds[i], writer.uint32(18).fork()).ldelim();
        if (null != message.animals && message.animals.length) for (var i = 0; i < message.animals.length; ++i) $root.p_route.encode(message.animals[i], writer.uint32(26).fork()).ldelim();
        if (null != message.players && message.players.length) for (var i = 0; i < message.players.length; ++i) $root.p_animal_player.encode(message.players[i], writer.uint32(34).fork()).ldelim();
        writer.uint32(48).bool(message.red_state);
        if (null != message.skill && message.skill.length) for (var i = 0; i < message.skill.length; ++i) $root.p_animal_skill.encode(message.skill[i], writer.uint32(58).fork()).ldelim();
        writer.uint32(64).uint32(message.time);
        null != message.free_gold && message.hasOwnProperty("free_gold") && writer.uint32(72).uint64(message.free_gold);
        null != message.cj && message.hasOwnProperty("cj") && writer.uint32(82).string(message.cj);
        return writer;
      };
      m_1801_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1801_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet_val && message.bet_val.length || (message.bet_val = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.bet_val.push(reader.uint32());
            } else message.bet_val.push(reader.uint32());
            break;

           case 2:
            message.odds && message.odds.length || (message.odds = []);
            message.odds.push($root.p_animal_odds.decode(reader, reader.uint32()));
            break;

           case 3:
            message.animals && message.animals.length || (message.animals = []);
            message.animals.push($root.p_route.decode(reader, reader.uint32()));
            break;

           case 4:
            message.players && message.players.length || (message.players = []);
            message.players.push($root.p_animal_player.decode(reader, reader.uint32()));
            break;

           case 6:
            message.red_state = reader.bool();
            break;

           case 7:
            message.skill && message.skill.length || (message.skill = []);
            message.skill.push($root.p_animal_skill.decode(reader, reader.uint32()));
            break;

           case 8:
            message.time = reader.uint32();
            break;

           case 9:
            message.free_gold = reader.uint64();
            break;

           case 10:
            message.cj = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("red_state")) throw $util.ProtocolError("missing required 'red_state'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return m_1801_toc;
    }();
    $root.p_animal_skill = function() {
      function p_animal_skill(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_animal_skill.prototype.type = 1;
      p_animal_skill.prototype.val = 0;
      p_animal_skill.prototype.time = 0;
      p_animal_skill.prototype.count = 0;
      p_animal_skill.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.type);
        writer.uint32(16).uint32(message.val);
        writer.uint32(24).uint32(message.time);
        null != message.count && message.hasOwnProperty("count") && writer.uint32(32).uint32(message.count);
        return writer;
      };
      p_animal_skill.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_animal_skill();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           case 3:
            message.time = reader.uint32();
            break;

           case 4:
            message.count = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return p_animal_skill;
    }();
    $root.e_animal_skill_type = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "ice"] = 1;
      values[valuesById[2] = "locking"] = 2;
      values[valuesById[3] = "improve_odds"] = 3;
      return values;
    }();
    $root.p_animal_odds = function() {
      function p_animal_odds(properties) {
        this.odds = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_animal_odds.prototype.bet = 0;
      p_animal_odds.prototype.odds = $util.emptyArray;
      p_animal_odds.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.bet);
        if (null != message.odds && message.odds.length) for (var i = 0; i < message.odds.length; ++i) writer.uint32(16).uint32(message.odds[i]);
        return writer;
      };
      p_animal_odds.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_animal_odds();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet = reader.int32();
            break;

           case 2:
            message.odds && message.odds.length || (message.odds = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.odds.push(reader.uint32());
            } else message.odds.push(reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        return message;
      };
      return p_animal_odds;
    }();
    $root.p_route = function() {
      function p_route(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_route.prototype.id = 0;
      p_route.prototype.bet = 0;
      p_route.prototype.line_id = 0;
      p_route.prototype.point = 0;
      p_route.prototype.red_state = false;
      p_route.prototype.status = 1;
      p_route.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).int32(message.bet);
        writer.uint32(24).uint32(message.line_id);
        writer.uint32(32).uint32(message.point);
        writer.uint32(40).bool(message.red_state);
        writer.uint32(48).int32(message.status);
        return writer;
      };
      p_route.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_route();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.bet = reader.int32();
            break;

           case 3:
            message.line_id = reader.uint32();
            break;

           case 4:
            message.point = reader.uint32();
            break;

           case 5:
            message.red_state = reader.bool();
            break;

           case 6:
            message.status = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        if (!message.hasOwnProperty("line_id")) throw $util.ProtocolError("missing required 'line_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("point")) throw $util.ProtocolError("missing required 'point'", {
          instance: message
        });
        if (!message.hasOwnProperty("red_state")) throw $util.ProtocolError("missing required 'red_state'", {
          instance: message
        });
        if (!message.hasOwnProperty("status")) throw $util.ProtocolError("missing required 'status'", {
          instance: message
        });
        return message;
      };
      return p_route;
    }();
    $root.e_animal_state = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "normal"] = 1;
      values[valuesById[2] = "ice"] = 2;
      return values;
    }();
    $root.p_animal_player = function() {
      function p_animal_player(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_animal_player.prototype.role_id = 0;
      p_animal_player.prototype.icon = "";
      p_animal_player.prototype.name = "";
      p_animal_player.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        writer.uint32(18).string(message.icon);
        writer.uint32(26).string(message.name);
        return writer;
      };
      p_animal_player.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_animal_player();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.icon = reader.string();
            break;

           case 3:
            message.name = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("icon")) throw $util.ProtocolError("missing required 'icon'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        return message;
      };
      return p_animal_player;
    }();
    $root.e_animal = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[0] = "balance"] = 0;
      values[valuesById[1] = "turtle"] = 1;
      values[valuesById[2] = "cock"] = 2;
      values[valuesById[3] = "dog"] = 3;
      values[valuesById[4] = "monkey"] = 4;
      values[valuesById[5] = "horse"] = 5;
      values[valuesById[6] = "ox"] = 6;
      values[valuesById[7] = "panda"] = 7;
      values[valuesById[8] = "hippo"] = 8;
      values[valuesById[9] = "lion"] = 9;
      values[valuesById[10] = "elephant"] = 10;
      values[valuesById[11] = "pikachu"] = 11;
      values[valuesById[12] = "bomber"] = 12;
      values[valuesById[13] = "tiger"] = 13;
      values[valuesById[14] = "sheep"] = 14;
      values[valuesById[15] = "bear"] = 15;
      values[valuesById[16] = "tuzi"] = 16;
      values[valuesById[17] = "lv"] = 17;
      values[valuesById[18] = "baozi"] = 18;
      values[valuesById[19] = "zhu"] = 19;
      values[valuesById[20] = "hema"] = 20;
      return values;
    }();
    $root.m_1803_tos = function() {
      function m_1803_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1803_tos.prototype.id = 0;
      m_1803_tos.prototype.bet_val = 0;
      m_1803_tos.prototype.multiple = 0;
      m_1803_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.bet_val);
        writer.uint32(24).uint32(message.multiple);
        return writer;
      };
      m_1803_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1803_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.bet_val = reader.uint32();
            break;

           case 3:
            message.multiple = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_val")) throw $util.ProtocolError("missing required 'bet_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("multiple")) throw $util.ProtocolError("missing required 'multiple'", {
          instance: message
        });
        return message;
      };
      return m_1803_tos;
    }();
    $root.m_1803_toc = function() {
      function m_1803_toc(properties) {
        this.skill = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1803_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1803_toc.prototype.win = 0;
      m_1803_toc.prototype.red_bag = 0;
      m_1803_toc.prototype.skill = $util.emptyArray;
      m_1803_toc.prototype.free_gold = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1803_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        writer.uint32(16).uint32(message.win);
        writer.uint32(24).uint32(message.red_bag);
        if (null != message.skill && message.skill.length) for (var i = 0; i < message.skill.length; ++i) $root.p_animal_skill.encode(message.skill[i], writer.uint32(34).fork()).ldelim();
        null != message.free_gold && message.hasOwnProperty("free_gold") && writer.uint32(40).uint64(message.free_gold);
        return writer;
      };
      m_1803_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1803_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           case 2:
            message.win = reader.uint32();
            break;

           case 3:
            message.red_bag = reader.uint32();
            break;

           case 4:
            message.skill && message.skill.length || (message.skill = []);
            message.skill.push($root.p_animal_skill.decode(reader, reader.uint32()));
            break;

           case 5:
            message.free_gold = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        if (!message.hasOwnProperty("red_bag")) throw $util.ProtocolError("missing required 'red_bag'", {
          instance: message
        });
        return message;
      };
      return m_1803_toc;
    }();
    $root.m_1804_tos = function() {
      function m_1804_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1804_tos.prototype.id = 0;
      m_1804_tos.prototype.amount = 0;
      m_1804_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.amount);
        return writer;
      };
      m_1804_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1804_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.amount = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("amount")) throw $util.ProtocolError("missing required 'amount'", {
          instance: message
        });
        return message;
      };
      return m_1804_tos;
    }();
    $root.m_1804_toc = function() {
      function m_1804_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1804_toc.prototype.info = $util.emptyArray;
      m_1804_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_player_animal.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1804_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1804_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_player_animal.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1804_toc;
    }();
    $root.p_player_animal = function() {
      function p_player_animal(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_player_animal.prototype.id = 0;
      p_player_animal.prototype.time = 0;
      p_player_animal.prototype.bet_val = 0;
      p_player_animal.prototype.win = 0;
      p_player_animal.prototype.animal = 0;
      p_player_animal.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(24).uint32(message.time);
        writer.uint32(32).uint32(message.bet_val);
        writer.uint32(40).uint32(message.win);
        writer.uint32(48).int32(message.animal);
        return writer;
      };
      p_player_animal.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_player_animal();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 3:
            message.time = reader.uint32();
            break;

           case 4:
            message.bet_val = reader.uint32();
            break;

           case 5:
            message.win = reader.uint32();
            break;

           case 6:
            message.animal = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_val")) throw $util.ProtocolError("missing required 'bet_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        if (!message.hasOwnProperty("animal")) throw $util.ProtocolError("missing required 'animal'", {
          instance: message
        });
        return message;
      };
      return p_player_animal;
    }();
    $root.m_1805_toc = function() {
      function m_1805_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1805_toc.prototype.info = $util.emptyArray;
      m_1805_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_animal_reward.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1805_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1805_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_animal_reward.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1805_toc;
    }();
    $root.p_animal_reward = function() {
      function p_animal_reward(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_animal_reward.prototype.id = 0;
      p_animal_reward.prototype.animal = 0;
      p_animal_reward.prototype.bet_val = 0;
      p_animal_reward.prototype.win = 0;
      p_animal_reward.prototype.time = 0;
      p_animal_reward.prototype.name = "";
      p_animal_reward.prototype.icon = "";
      p_animal_reward.prototype.vip = 0;
      p_animal_reward.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).int32(message.animal);
        writer.uint32(24).uint32(message.bet_val);
        writer.uint32(32).uint32(message.win);
        writer.uint32(40).uint32(message.time);
        writer.uint32(50).string(message.name);
        writer.uint32(58).string(message.icon);
        writer.uint32(64).uint32(message.vip);
        return writer;
      };
      p_animal_reward.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_animal_reward();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.animal = reader.int32();
            break;

           case 3:
            message.bet_val = reader.uint32();
            break;

           case 4:
            message.win = reader.uint32();
            break;

           case 5:
            message.time = reader.uint32();
            break;

           case 6:
            message.name = reader.string();
            break;

           case 7:
            message.icon = reader.string();
            break;

           case 8:
            message.vip = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("animal")) throw $util.ProtocolError("missing required 'animal'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_val")) throw $util.ProtocolError("missing required 'bet_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("icon")) throw $util.ProtocolError("missing required 'icon'", {
          instance: message
        });
        if (!message.hasOwnProperty("vip")) throw $util.ProtocolError("missing required 'vip'", {
          instance: message
        });
        return message;
      };
      return p_animal_reward;
    }();
    $root.m_1806_tos = function() {
      function m_1806_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1806_tos.prototype.type = 1;
      m_1806_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.type);
        return writer;
      };
      m_1806_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1806_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_1806_tos;
    }();
    $root.m_1806_toc = function() {
      function m_1806_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1806_toc.prototype.skill = null;
      m_1806_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_animal_skill.encode(message.skill, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1806_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1806_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.skill = $root.p_animal_skill.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("skill")) throw $util.ProtocolError("missing required 'skill'", {
          instance: message
        });
        return message;
      };
      return m_1806_toc;
    }();
    $root.m_1807_toc = function() {
      function m_1807_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1807_toc.prototype.info = $util.emptyArray;
      m_1807_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_zoo_type_info.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1807_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1807_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_zoo_type_info.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1807_toc;
    }();
    $root.p_zoo_type_info = function() {
      function p_zoo_type_info(properties) {
        this.bet_val = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_zoo_type_info.prototype.type = 1;
      p_zoo_type_info.prototype.bet_val = $util.emptyArray;
      p_zoo_type_info.prototype.max_num = 0;
      p_zoo_type_info.prototype.vip = 0;
      p_zoo_type_info.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.type);
        if (null != message.bet_val && message.bet_val.length) for (var i = 0; i < message.bet_val.length; ++i) writer.uint32(16).uint32(message.bet_val[i]);
        writer.uint32(24).uint32(message.max_num);
        writer.uint32(32).uint32(message.vip);
        return writer;
      };
      p_zoo_type_info.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_zoo_type_info();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           case 2:
            message.bet_val && message.bet_val.length || (message.bet_val = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.bet_val.push(reader.uint32());
            } else message.bet_val.push(reader.uint32());
            break;

           case 3:
            message.max_num = reader.uint32();
            break;

           case 4:
            message.vip = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("max_num")) throw $util.ProtocolError("missing required 'max_num'", {
          instance: message
        });
        if (!message.hasOwnProperty("vip")) throw $util.ProtocolError("missing required 'vip'", {
          instance: message
        });
        return message;
      };
      return p_zoo_type_info;
    }();
    $root.m_1808_tos = function() {
      function m_1808_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1808_tos.prototype.type = 1;
      m_1808_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.type);
        return writer;
      };
      m_1808_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1808_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_1808_tos;
    }();
    $root.m_1809_toc = function() {
      function m_1809_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1809_toc.prototype.val = 0;
      m_1809_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.val);
        return writer;
      };
      m_1809_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1809_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return m_1809_toc;
    }();
    $root.m_1810_toc = function() {
      function m_1810_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1810_toc.prototype.bonus = "";
      m_1810_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.bonus);
        return writer;
      };
      m_1810_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1810_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bonus = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bonus")) throw $util.ProtocolError("missing required 'bonus'", {
          instance: message
        });
        return message;
      };
      return m_1810_toc;
    }();
    $root.m_1811_toc = function() {
      function m_1811_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1811_toc.prototype.bonus = "";
      m_1811_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.bonus);
        return writer;
      };
      m_1811_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1811_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bonus = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bonus")) throw $util.ProtocolError("missing required 'bonus'", {
          instance: message
        });
        return message;
      };
      return m_1811_toc;
    }();
    $root.m_1812_toc = function() {
      function m_1812_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1812_toc.prototype.list = $util.emptyArray;
      m_1812_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_cj_log.encode(message.list[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1812_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1812_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_cj_log.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1812_toc;
    }();
    $root.p_cj_log = function() {
      function p_cj_log(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_cj_log.prototype.id = 0;
      p_cj_log.prototype.icon = "";
      p_cj_log.prototype.name = "";
      p_cj_log.prototype.time = 0;
      p_cj_log.prototype.bonus = "";
      p_cj_log.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(18).string(message.icon);
        writer.uint32(26).string(message.name);
        writer.uint32(32).uint32(message.time);
        writer.uint32(42).string(message.bonus);
        return writer;
      };
      p_cj_log.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_cj_log();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.icon = reader.string();
            break;

           case 3:
            message.name = reader.string();
            break;

           case 4:
            message.time = reader.uint32();
            break;

           case 5:
            message.bonus = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("icon")) throw $util.ProtocolError("missing required 'icon'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("bonus")) throw $util.ProtocolError("missing required 'bonus'", {
          instance: message
        });
        return message;
      };
      return p_cj_log;
    }();
    $root.m_1813_toc = function() {
      function m_1813_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1813_toc.prototype.role_id = 0;
      m_1813_toc.prototype.time = 0;
      m_1813_toc.prototype.bet_val = 0;
      m_1813_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        writer.uint32(16).uint32(message.time);
        writer.uint32(24).uint32(message.bet_val);
        return writer;
      };
      m_1813_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1813_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.time = reader.uint32();
            break;

           case 3:
            message.bet_val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_val")) throw $util.ProtocolError("missing required 'bet_val'", {
          instance: message
        });
        return message;
      };
      return m_1813_toc;
    }();
    $root.m_1814_toc = function() {
      function m_1814_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1814_toc.prototype.role_id = 0;
      m_1814_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        return writer;
      };
      m_1814_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1814_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        return message;
      };
      return m_1814_toc;
    }();
    $root.m_1899_toc = function() {
      function m_1899_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1899_toc.prototype.role_id = 0;
      m_1899_toc.prototype.id = 0;
      m_1899_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        writer.uint32(16).uint32(message.id);
        return writer;
      };
      m_1899_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1899_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_1899_toc;
    }();
    $root.m_1888_toc = function() {
      function m_1888_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1888_toc.prototype.id = 0;
      m_1888_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        return writer;
      };
      m_1888_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1888_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_1888_toc;
    }();
    $root.m_1887_toc = function() {
      function m_1887_toc(properties) {
        this.animal = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1887_toc.prototype.animal = $util.emptyArray;
      m_1887_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.animal && message.animal.length) for (var i = 0; i < message.animal.length; ++i) $root.p_route.encode(message.animal[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1887_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1887_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.animal && message.animal.length || (message.animal = []);
            message.animal.push($root.p_route.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1887_toc;
    }();
    $root.m_1886_toc = function() {
      function m_1886_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1886_toc.prototype.player = null;
      m_1886_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_animal_player.encode(message.player, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1886_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1886_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.player = $root.p_animal_player.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("player")) throw $util.ProtocolError("missing required 'player'", {
          instance: message
        });
        return message;
      };
      return m_1886_toc;
    }();
    $root.m_1885_toc = function() {
      function m_1885_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1885_toc.prototype.role_id = 0;
      m_1885_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        return writer;
      };
      m_1885_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1885_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        return message;
      };
      return m_1885_toc;
    }();
    $root.m_1884_toc = function() {
      function m_1884_toc(properties) {
        this.ids = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1884_toc.prototype.role_id = 0;
      m_1884_toc.prototype.type = 1;
      m_1884_toc.prototype.ids = $util.emptyArray;
      m_1884_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        writer.uint32(16).int32(message.type);
        if (null != message.ids && message.ids.length) for (var i = 0; i < message.ids.length; ++i) $root.p_animal_one.encode(message.ids[i], writer.uint32(26).fork()).ldelim();
        return writer;
      };
      m_1884_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1884_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.type = reader.int32();
            break;

           case 3:
            message.ids && message.ids.length || (message.ids = []);
            message.ids.push($root.p_animal_one.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_1884_toc;
    }();
    $root.p_animal_one = function() {
      function p_animal_one(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_animal_one.prototype.id = 0;
      p_animal_one.prototype.win = 0;
      p_animal_one.prototype.red_bag = 0;
      p_animal_one.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.win);
        writer.uint32(24).uint32(message.red_bag);
        return writer;
      };
      p_animal_one.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_animal_one();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.win = reader.uint32();
            break;

           case 3:
            message.red_bag = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        if (!message.hasOwnProperty("red_bag")) throw $util.ProtocolError("missing required 'red_bag'", {
          instance: message
        });
        return message;
      };
      return p_animal_one;
    }();
    $root.e_animal_type = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "lightning"] = 1;
      values[valuesById[2] = "normal"] = 2;
      values[valuesById[3] = "boom"] = 3;
      return values;
    }();
    $root.m_1883_toc = function() {
      function m_1883_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1883_toc.prototype.animal = 0;
      m_1883_toc.prototype.time = 0;
      m_1883_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.animal);
        writer.uint32(16).uint32(message.time);
        return writer;
      };
      m_1883_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1883_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.animal = reader.int32();
            break;

           case 2:
            message.time = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("animal")) throw $util.ProtocolError("missing required 'animal'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return m_1883_toc;
    }();
    $root.m_1882_toc = function() {
      function m_1882_toc(properties) {
        this.ids = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1882_toc.prototype.role_id = 0;
      m_1882_toc.prototype.type = 1;
      m_1882_toc.prototype.time = 0;
      m_1882_toc.prototype.ids = $util.emptyArray;
      m_1882_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        writer.uint32(16).int32(message.type);
        writer.uint32(24).uint32(message.time);
        if (null != message.ids && message.ids.length) for (var i = 0; i < message.ids.length; ++i) writer.uint32(32).uint32(message.ids[i]);
        return writer;
      };
      m_1882_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1882_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.type = reader.int32();
            break;

           case 3:
            message.time = reader.uint32();
            break;

           case 4:
            message.ids && message.ids.length || (message.ids = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.ids.push(reader.uint32());
            } else message.ids.push(reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return m_1882_toc;
    }();
    $root.m_1871_tos = function() {
      function m_1871_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1871_tos.prototype.agent_id = 0;
      m_1871_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.agent_id);
        return writer;
      };
      m_1871_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1871_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.agent_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("agent_id")) throw $util.ProtocolError("missing required 'agent_id'", {
          instance: message
        });
        return message;
      };
      return m_1871_tos;
    }();
    $root.m_1871_toc = function() {
      function m_1871_toc(properties) {
        this.bet_val = [];
        this.odds = [];
        this.animals = [];
        this.rank = [];
        this.reward = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1871_toc.prototype.bet_val = $util.emptyArray;
      m_1871_toc.prototype.odds = $util.emptyArray;
      m_1871_toc.prototype.animals = $util.emptyArray;
      m_1871_toc.prototype.time = 0;
      m_1871_toc.prototype.state = 0;
      m_1871_toc.prototype.gold = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1871_toc.prototype.rank = $util.emptyArray;
      m_1871_toc.prototype.score = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1871_toc.prototype.reward = $util.emptyArray;
      m_1871_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.bet_val && message.bet_val.length) for (var i = 0; i < message.bet_val.length; ++i) writer.uint32(8).uint32(message.bet_val[i]);
        if (null != message.odds && message.odds.length) for (var i = 0; i < message.odds.length; ++i) $root.p_animal_odds.encode(message.odds[i], writer.uint32(18).fork()).ldelim();
        if (null != message.animals && message.animals.length) for (var i = 0; i < message.animals.length; ++i) $root.p_route.encode(message.animals[i], writer.uint32(26).fork()).ldelim();
        writer.uint32(32).uint32(message.time);
        writer.uint32(40).uint32(message.state);
        writer.uint32(48).uint64(message.gold);
        if (null != message.rank && message.rank.length) for (var i = 0; i < message.rank.length; ++i) $root.p_rank.encode(message.rank[i], writer.uint32(58).fork()).ldelim();
        writer.uint32(64).uint64(message.score);
        if (null != message.reward && message.reward.length) for (var i = 0; i < message.reward.length; ++i) $root.p_activity_reward.encode(message.reward[i], writer.uint32(74).fork()).ldelim();
        return writer;
      };
      m_1871_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1871_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet_val && message.bet_val.length || (message.bet_val = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.bet_val.push(reader.uint32());
            } else message.bet_val.push(reader.uint32());
            break;

           case 2:
            message.odds && message.odds.length || (message.odds = []);
            message.odds.push($root.p_animal_odds.decode(reader, reader.uint32()));
            break;

           case 3:
            message.animals && message.animals.length || (message.animals = []);
            message.animals.push($root.p_route.decode(reader, reader.uint32()));
            break;

           case 4:
            message.time = reader.uint32();
            break;

           case 5:
            message.state = reader.uint32();
            break;

           case 6:
            message.gold = reader.uint64();
            break;

           case 7:
            message.rank && message.rank.length || (message.rank = []);
            message.rank.push($root.p_rank.decode(reader, reader.uint32()));
            break;

           case 8:
            message.score = reader.uint64();
            break;

           case 9:
            message.reward && message.reward.length || (message.reward = []);
            message.reward.push($root.p_activity_reward.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        if (!message.hasOwnProperty("gold")) throw $util.ProtocolError("missing required 'gold'", {
          instance: message
        });
        if (!message.hasOwnProperty("score")) throw $util.ProtocolError("missing required 'score'", {
          instance: message
        });
        return message;
      };
      return m_1871_toc;
    }();
    $root.p_activity_reward = function() {
      function p_activity_reward(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_activity_reward.prototype.min = 0;
      p_activity_reward.prototype.max = 0;
      p_activity_reward.prototype.desc = "";
      p_activity_reward.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.min);
        writer.uint32(16).uint32(message.max);
        writer.uint32(26).string(message.desc);
        return writer;
      };
      p_activity_reward.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_activity_reward();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.min = reader.uint32();
            break;

           case 2:
            message.max = reader.uint32();
            break;

           case 3:
            message.desc = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("min")) throw $util.ProtocolError("missing required 'min'", {
          instance: message
        });
        if (!message.hasOwnProperty("max")) throw $util.ProtocolError("missing required 'max'", {
          instance: message
        });
        if (!message.hasOwnProperty("desc")) throw $util.ProtocolError("missing required 'desc'", {
          instance: message
        });
        return message;
      };
      return p_activity_reward;
    }();
    $root.p_rank = function() {
      function p_rank(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_rank.prototype.id = 0;
      p_rank.prototype.role_id = 0;
      p_rank.prototype.name = "";
      p_rank.prototype.icon = "";
      p_rank.prototype.val = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      p_rank.prototype.vip = 0;
      p_rank.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.role_id);
        writer.uint32(26).string(message.name);
        writer.uint32(34).string(message.icon);
        writer.uint32(40).uint64(message.val);
        writer.uint32(48).uint32(message.vip);
        return writer;
      };
      p_rank.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_rank();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.role_id = reader.uint32();
            break;

           case 3:
            message.name = reader.string();
            break;

           case 4:
            message.icon = reader.string();
            break;

           case 5:
            message.val = reader.uint64();
            break;

           case 6:
            message.vip = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("icon")) throw $util.ProtocolError("missing required 'icon'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        if (!message.hasOwnProperty("vip")) throw $util.ProtocolError("missing required 'vip'", {
          instance: message
        });
        return message;
      };
      return p_rank;
    }();
    $root.m_1872_tos = function() {
      function m_1872_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1872_tos.prototype.id = 0;
      m_1872_tos.prototype.bet_val = 0;
      m_1872_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.bet_val);
        return writer;
      };
      m_1872_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1872_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.bet_val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_val")) throw $util.ProtocolError("missing required 'bet_val'", {
          instance: message
        });
        return message;
      };
      return m_1872_tos;
    }();
    $root.m_1872_toc = function() {
      function m_1872_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1872_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1872_toc.prototype.score = 0;
      m_1872_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        writer.uint32(16).uint32(message.score);
        return writer;
      };
      m_1872_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1872_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           case 2:
            message.score = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        if (!message.hasOwnProperty("score")) throw $util.ProtocolError("missing required 'score'", {
          instance: message
        });
        return message;
      };
      return m_1872_toc;
    }();
    $root.m_1873_tos = function() {
      function m_1873_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1873_tos.prototype.id = 0;
      m_1873_tos.prototype.num = 0;
      m_1873_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.num);
        return writer;
      };
      m_1873_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1873_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.num = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        return message;
      };
      return m_1873_tos;
    }();
    $root.m_1873_toc = function() {
      function m_1873_toc(properties) {
        this.rank = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1873_toc.prototype.rank = $util.emptyArray;
      m_1873_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.rank && message.rank.length) for (var i = 0; i < message.rank.length; ++i) $root.p_rank.encode(message.rank[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1873_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1873_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.rank && message.rank.length || (message.rank = []);
            message.rank.push($root.p_rank.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1873_toc;
    }();
    $root.m_1874_toc = function() {
      function m_1874_toc(properties) {
        this.id = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1874_toc.prototype.id = $util.emptyArray;
      m_1874_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.id && message.id.length) for (var i = 0; i < message.id.length; ++i) writer.uint32(8).uint32(message.id[i]);
        return writer;
      };
      m_1874_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1874_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id && message.id.length || (message.id = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.id.push(reader.uint32());
            } else message.id.push(reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1874_toc;
    }();
    $root.m_1875_toc = function() {
      function m_1875_toc(properties) {
        this.rank = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1875_toc.prototype.gold = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1875_toc.prototype.rank = $util.emptyArray;
      m_1875_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.gold);
        if (null != message.rank && message.rank.length) for (var i = 0; i < message.rank.length; ++i) $root.p_rank.encode(message.rank[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      m_1875_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1875_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.gold = reader.uint64();
            break;

           case 2:
            message.rank && message.rank.length || (message.rank = []);
            message.rank.push($root.p_rank.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("gold")) throw $util.ProtocolError("missing required 'gold'", {
          instance: message
        });
        return message;
      };
      return m_1875_toc;
    }();
    $root.m_1876_toc = function() {
      function m_1876_toc(properties) {
        this.animal = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1876_toc.prototype.animal = $util.emptyArray;
      m_1876_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.animal && message.animal.length) for (var i = 0; i < message.animal.length; ++i) $root.p_route.encode(message.animal[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1876_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1876_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.animal && message.animal.length || (message.animal = []);
            message.animal.push($root.p_route.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1876_toc;
    }();
    $root.m_1877_toc = function() {
      function m_1877_toc(properties) {
        this.ids = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1877_toc.prototype.role_id = 0;
      m_1877_toc.prototype.type = 1;
      m_1877_toc.prototype.ids = $util.emptyArray;
      m_1877_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        writer.uint32(16).int32(message.type);
        if (null != message.ids && message.ids.length) for (var i = 0; i < message.ids.length; ++i) $root.p_animal_one.encode(message.ids[i], writer.uint32(26).fork()).ldelim();
        return writer;
      };
      m_1877_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1877_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.type = reader.int32();
            break;

           case 3:
            message.ids && message.ids.length || (message.ids = []);
            message.ids.push($root.p_animal_one.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_1877_toc;
    }();
    $root.m_1878_toc = function() {
      function m_1878_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1878_toc.prototype.time = 0;
      m_1878_toc.prototype.state = 0;
      m_1878_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.time);
        writer.uint32(16).uint32(message.state);
        return writer;
      };
      m_1878_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1878_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.time = reader.uint32();
            break;

           case 2:
            message.state = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        return message;
      };
      return m_1878_toc;
    }();
    $root.m_1879_tos = function() {
      function m_1879_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1879_tos.prototype.agent_id = 0;
      m_1879_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.agent_id);
        return writer;
      };
      m_1879_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1879_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.agent_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("agent_id")) throw $util.ProtocolError("missing required 'agent_id'", {
          instance: message
        });
        return message;
      };
      return m_1879_tos;
    }();
    $root.m_1879_toc = function() {
      function m_1879_toc(properties) {
        this.animals = [];
        this.rank = [];
        this.reward = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1879_toc.prototype.animals = $util.emptyArray;
      m_1879_toc.prototype.time = 0;
      m_1879_toc.prototype.state = 0;
      m_1879_toc.prototype.rank = $util.emptyArray;
      m_1879_toc.prototype.reward = $util.emptyArray;
      m_1879_toc.prototype.agent_id = 0;
      m_1879_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.animals && message.animals.length) for (var i = 0; i < message.animals.length; ++i) $root.p_route.encode(message.animals[i], writer.uint32(10).fork()).ldelim();
        writer.uint32(16).uint32(message.time);
        writer.uint32(24).uint32(message.state);
        if (null != message.rank && message.rank.length) for (var i = 0; i < message.rank.length; ++i) $root.p_rank.encode(message.rank[i], writer.uint32(34).fork()).ldelim();
        if (null != message.reward && message.reward.length) for (var i = 0; i < message.reward.length; ++i) $root.p_activity_reward.encode(message.reward[i], writer.uint32(42).fork()).ldelim();
        writer.uint32(48).uint32(message.agent_id);
        return writer;
      };
      m_1879_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1879_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.animals && message.animals.length || (message.animals = []);
            message.animals.push($root.p_route.decode(reader, reader.uint32()));
            break;

           case 2:
            message.time = reader.uint32();
            break;

           case 3:
            message.state = reader.uint32();
            break;

           case 4:
            message.rank && message.rank.length || (message.rank = []);
            message.rank.push($root.p_rank.decode(reader, reader.uint32()));
            break;

           case 5:
            message.reward && message.reward.length || (message.reward = []);
            message.reward.push($root.p_activity_reward.decode(reader, reader.uint32()));
            break;

           case 6:
            message.agent_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        if (!message.hasOwnProperty("agent_id")) throw $util.ProtocolError("missing required 'agent_id'", {
          instance: message
        });
        return message;
      };
      return m_1879_toc;
    }();
    $root.m_1880_toc = function() {
      function m_1880_toc(properties) {
        this.rank = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1880_toc.prototype.rank = $util.emptyArray;
      m_1880_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.rank && message.rank.length) for (var i = 0; i < message.rank.length; ++i) $root.p_rank.encode(message.rank[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1880_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1880_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.rank && message.rank.length || (message.rank = []);
            message.rank.push($root.p_rank.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1880_toc;
    }();
    $root.m_1881_toc = function() {
      function m_1881_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1881_toc.prototype.id = 0;
      m_1881_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        return writer;
      };
      m_1881_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1881_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_1881_toc;
    }();
    $root.m_1889_toc = function() {
      function m_1889_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1889_toc.prototype.name = "";
      m_1889_toc.prototype.icon = "";
      m_1889_toc.prototype.animal_name = 0;
      m_1889_toc.prototype.score = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1889_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.name);
        writer.uint32(18).string(message.icon);
        writer.uint32(24).int32(message.animal_name);
        writer.uint32(32).uint64(message.score);
        return writer;
      };
      m_1889_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1889_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.name = reader.string();
            break;

           case 2:
            message.icon = reader.string();
            break;

           case 3:
            message.animal_name = reader.int32();
            break;

           case 4:
            message.score = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("icon")) throw $util.ProtocolError("missing required 'icon'", {
          instance: message
        });
        if (!message.hasOwnProperty("animal_name")) throw $util.ProtocolError("missing required 'animal_name'", {
          instance: message
        });
        if (!message.hasOwnProperty("score")) throw $util.ProtocolError("missing required 'score'", {
          instance: message
        });
        return message;
      };
      return m_1889_toc;
    }();
    $root.e_zoo_type = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "civilian"] = 1;
      values[valuesById[2] = "petty"] = 2;
      values[valuesById[3] = "rich"] = 3;
      values[valuesById[4] = "gold"] = 4;
      values[valuesById[5] = "diamond"] = 5;
      values[valuesById[6] = "single"] = 6;
      values[valuesById[7] = "free"] = 7;
      return values;
    }();
    $root.m_3401_tos = function() {
      function m_3401_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3401_tos.prototype.room_id = 0;
      m_3401_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.room_id);
        return writer;
      };
      m_3401_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3401_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.room_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("room_id")) throw $util.ProtocolError("missing required 'room_id'", {
          instance: message
        });
        return message;
      };
      return m_3401_tos;
    }();
    $root.m_3401_toc = function() {
      function m_3401_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3401_toc.prototype.info = null;
      m_3401_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_enter_baccarat_info.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3401_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3401_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_enter_baccarat_info.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_3401_toc;
    }();
    $root.p_enter_baccarat_info = function() {
      function p_enter_baccarat_info(properties) {
        this.history = [];
        this.bets = [];
        this.self_bets = [];
        this.odds = [];
        this.chips = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_enter_baccarat_info.prototype.room_status = 1;
      p_enter_baccarat_info.prototype.rest_time = 0;
      p_enter_baccarat_info.prototype.history = $util.emptyArray;
      p_enter_baccarat_info.prototype.bets = $util.emptyArray;
      p_enter_baccarat_info.prototype.self_bets = $util.emptyArray;
      p_enter_baccarat_info.prototype.lim = 0;
      p_enter_baccarat_info.prototype.min_bet = 0;
      p_enter_baccarat_info.prototype.odds = $util.emptyArray;
      p_enter_baccarat_info.prototype.round = 0;
      p_enter_baccarat_info.prototype.chips = $util.emptyArray;
      p_enter_baccarat_info.prototype.hands = 0;
      p_enter_baccarat_info.prototype.last_hand = null;
      p_enter_baccarat_info.prototype.addr = null;
      p_enter_baccarat_info.prototype.is_live = false;
      p_enter_baccarat_info.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.room_status);
        writer.uint32(16).uint32(message.rest_time);
        if (null != message.history && message.history.length) for (var i = 0; i < message.history.length; ++i) $root.p_history.encode(message.history[i], writer.uint32(26).fork()).ldelim();
        if (null != message.bets && message.bets.length) for (var i = 0; i < message.bets.length; ++i) $root.p_bet.encode(message.bets[i], writer.uint32(34).fork()).ldelim();
        if (null != message.self_bets && message.self_bets.length) for (var i = 0; i < message.self_bets.length; ++i) $root.p_bet.encode(message.self_bets[i], writer.uint32(42).fork()).ldelim();
        writer.uint32(48).uint32(message.lim);
        writer.uint32(56).uint32(message.min_bet);
        if (null != message.odds && message.odds.length) for (var i = 0; i < message.odds.length; ++i) $root.p_odds.encode(message.odds[i], writer.uint32(66).fork()).ldelim();
        null != message.round && message.hasOwnProperty("round") && writer.uint32(72).uint32(message.round);
        if (null != message.chips && message.chips.length) for (var i = 0; i < message.chips.length; ++i) writer.uint32(80).uint32(message.chips[i]);
        null != message.hands && message.hasOwnProperty("hands") && writer.uint32(88).uint32(message.hands);
        null != message.last_hand && message.hasOwnProperty("last_hand") && $root.p_last_hand.encode(message.last_hand, writer.uint32(98).fork()).ldelim();
        null != message.addr && message.hasOwnProperty("addr") && $root.p_live_addr.encode(message.addr, writer.uint32(106).fork()).ldelim();
        null != message.is_live && message.hasOwnProperty("is_live") && writer.uint32(112).bool(message.is_live);
        return writer;
      };
      p_enter_baccarat_info.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_enter_baccarat_info();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.room_status = reader.int32();
            break;

           case 2:
            message.rest_time = reader.uint32();
            break;

           case 3:
            message.history && message.history.length || (message.history = []);
            message.history.push($root.p_history.decode(reader, reader.uint32()));
            break;

           case 4:
            message.bets && message.bets.length || (message.bets = []);
            message.bets.push($root.p_bet.decode(reader, reader.uint32()));
            break;

           case 5:
            message.self_bets && message.self_bets.length || (message.self_bets = []);
            message.self_bets.push($root.p_bet.decode(reader, reader.uint32()));
            break;

           case 6:
            message.lim = reader.uint32();
            break;

           case 7:
            message.min_bet = reader.uint32();
            break;

           case 8:
            message.odds && message.odds.length || (message.odds = []);
            message.odds.push($root.p_odds.decode(reader, reader.uint32()));
            break;

           case 9:
            message.round = reader.uint32();
            break;

           case 10:
            message.chips && message.chips.length || (message.chips = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.chips.push(reader.uint32());
            } else message.chips.push(reader.uint32());
            break;

           case 11:
            message.hands = reader.uint32();
            break;

           case 12:
            message.last_hand = $root.p_last_hand.decode(reader, reader.uint32());
            break;

           case 13:
            message.addr = $root.p_live_addr.decode(reader, reader.uint32());
            break;

           case 14:
            message.is_live = reader.bool();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("room_status")) throw $util.ProtocolError("missing required 'room_status'", {
          instance: message
        });
        if (!message.hasOwnProperty("rest_time")) throw $util.ProtocolError("missing required 'rest_time'", {
          instance: message
        });
        if (!message.hasOwnProperty("lim")) throw $util.ProtocolError("missing required 'lim'", {
          instance: message
        });
        if (!message.hasOwnProperty("min_bet")) throw $util.ProtocolError("missing required 'min_bet'", {
          instance: message
        });
        return message;
      };
      return p_enter_baccarat_info;
    }();
    $root.m_3411_toc = function() {
      function m_3411_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3411_toc.prototype.draw = null;
      m_3411_toc.prototype.rest_time = 0;
      m_3411_toc.prototype.balance = 0;
      m_3411_toc.prototype.win_val = 0;
      m_3411_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_baccarat_draw.encode(message.draw, writer.uint32(10).fork()).ldelim();
        writer.uint32(16).uint32(message.rest_time);
        null != message.balance && message.hasOwnProperty("balance") && writer.uint32(24).uint32(message.balance);
        null != message.win_val && message.hasOwnProperty("win_val") && writer.uint32(32).uint32(message.win_val);
        return writer;
      };
      m_3411_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3411_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.draw = $root.p_baccarat_draw.decode(reader, reader.uint32());
            break;

           case 2:
            message.rest_time = reader.uint32();
            break;

           case 3:
            message.balance = reader.uint32();
            break;

           case 4:
            message.win_val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("draw")) throw $util.ProtocolError("missing required 'draw'", {
          instance: message
        });
        if (!message.hasOwnProperty("rest_time")) throw $util.ProtocolError("missing required 'rest_time'", {
          instance: message
        });
        return message;
      };
      return m_3411_toc;
    }();
    $root.p_baccarat_draw = function() {
      function p_baccarat_draw(properties) {
        this.banker = [];
        this.player = [];
        this.result = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_baccarat_draw.prototype.banker = $util.emptyArray;
      p_baccarat_draw.prototype.player = $util.emptyArray;
      p_baccarat_draw.prototype.result = $util.emptyArray;
      p_baccarat_draw.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.banker && message.banker.length) for (var i = 0; i < message.banker.length; ++i) writer.uint32(8).int32(message.banker[i]);
        if (null != message.player && message.player.length) for (var i = 0; i < message.player.length; ++i) writer.uint32(16).int32(message.player[i]);
        if (null != message.result && message.result.length) for (var i = 0; i < message.result.length; ++i) writer.uint32(24).int32(message.result[i]);
        return writer;
      };
      p_baccarat_draw.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_baccarat_draw();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.banker && message.banker.length || (message.banker = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.banker.push(reader.int32());
            } else message.banker.push(reader.int32());
            break;

           case 2:
            message.player && message.player.length || (message.player = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.player.push(reader.int32());
            } else message.player.push(reader.int32());
            break;

           case 3:
            message.result && message.result.length || (message.result = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.result.push(reader.int32());
            } else message.result.push(reader.int32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return p_baccarat_draw;
    }();
    $root.p_last_hand = function() {
      function p_last_hand(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_last_hand.prototype.draw = null;
      p_last_hand.prototype.win = 0;
      p_last_hand.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_baccarat_draw.encode(message.draw, writer.uint32(10).fork()).ldelim();
        null != message.win && message.hasOwnProperty("win") && writer.uint32(16).uint32(message.win);
        return writer;
      };
      p_last_hand.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_last_hand();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.draw = $root.p_baccarat_draw.decode(reader, reader.uint32());
            break;

           case 2:
            message.win = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("draw")) throw $util.ProtocolError("missing required 'draw'", {
          instance: message
        });
        return message;
      };
      return p_last_hand;
    }();
    $root.e_card = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "sa"] = 1;
      values[valuesById[2] = "s2"] = 2;
      values[valuesById[3] = "s3"] = 3;
      values[valuesById[4] = "s4"] = 4;
      values[valuesById[5] = "s5"] = 5;
      values[valuesById[6] = "s6"] = 6;
      values[valuesById[7] = "s7"] = 7;
      values[valuesById[8] = "s8"] = 8;
      values[valuesById[9] = "s9"] = 9;
      values[valuesById[10] = "st"] = 10;
      values[valuesById[11] = "sj"] = 11;
      values[valuesById[12] = "sq"] = 12;
      values[valuesById[13] = "sk"] = 13;
      values[valuesById[14] = "ha"] = 14;
      values[valuesById[15] = "h2"] = 15;
      values[valuesById[16] = "h3"] = 16;
      values[valuesById[17] = "h4"] = 17;
      values[valuesById[18] = "h5"] = 18;
      values[valuesById[19] = "h6"] = 19;
      values[valuesById[20] = "h7"] = 20;
      values[valuesById[21] = "h8"] = 21;
      values[valuesById[22] = "h9"] = 22;
      values[valuesById[23] = "ht"] = 23;
      values[valuesById[24] = "hj"] = 24;
      values[valuesById[25] = "hq"] = 25;
      values[valuesById[26] = "hk"] = 26;
      values[valuesById[27] = "da"] = 27;
      values[valuesById[28] = "d2"] = 28;
      values[valuesById[29] = "d3"] = 29;
      values[valuesById[30] = "d4"] = 30;
      values[valuesById[31] = "d5"] = 31;
      values[valuesById[32] = "d6"] = 32;
      values[valuesById[33] = "d7"] = 33;
      values[valuesById[34] = "d8"] = 34;
      values[valuesById[35] = "d9"] = 35;
      values[valuesById[36] = "dt"] = 36;
      values[valuesById[37] = "dj"] = 37;
      values[valuesById[38] = "dq"] = 38;
      values[valuesById[39] = "dk"] = 39;
      values[valuesById[40] = "ca"] = 40;
      values[valuesById[41] = "c2"] = 41;
      values[valuesById[42] = "c3"] = 42;
      values[valuesById[43] = "c4"] = 43;
      values[valuesById[44] = "c5"] = 44;
      values[valuesById[45] = "c6"] = 45;
      values[valuesById[46] = "c7"] = 46;
      values[valuesById[47] = "c8"] = 47;
      values[valuesById[48] = "c9"] = 48;
      values[valuesById[49] = "ct"] = 49;
      values[valuesById[50] = "cj"] = 50;
      values[valuesById[51] = "cq"] = 51;
      values[valuesById[52] = "ck"] = 52;
      return values;
    }();
    $root.e_odds_type = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "banker"] = 1;
      values[valuesById[2] = "player"] = 2;
      values[valuesById[3] = "tie"] = 3;
      values[valuesById[4] = "pair_banker"] = 4;
      values[valuesById[5] = "pair_player"] = 5;
      values[valuesById[6] = "ssc_long"] = 6;
      values[valuesById[7] = "ssc_hu"] = 7;
      values[valuesById[8] = "ssc_tie"] = 8;
      values[valuesById[9] = "spade"] = 9;
      values[valuesById[10] = "heart"] = 10;
      values[valuesById[11] = "diamond"] = 11;
      values[valuesById[12] = "club"] = 12;
      values[valuesById[13] = "joker"] = 13;
      values[valuesById[14] = "kuai3_sum_4"] = 14;
      values[valuesById[15] = "kuai3_sum_5"] = 15;
      values[valuesById[16] = "kuai3_sum_6"] = 16;
      values[valuesById[17] = "kuai3_sum_7"] = 17;
      values[valuesById[18] = "kuai3_sum_8"] = 18;
      values[valuesById[19] = "kuai3_sum_9"] = 19;
      values[valuesById[20] = "kuai3_sum_10"] = 20;
      values[valuesById[21] = "kuai3_sum_11"] = 21;
      values[valuesById[22] = "kuai3_sum_12"] = 22;
      values[valuesById[23] = "kuai3_sum_13"] = 23;
      values[valuesById[24] = "kuai3_sum_14"] = 24;
      values[valuesById[25] = "kuai3_sum_15"] = 25;
      values[valuesById[26] = "kuai3_sum_16"] = 26;
      values[valuesById[27] = "kuai3_sum_17"] = 27;
      values[valuesById[28] = "kuai3_all_triple"] = 28;
      values[valuesById[30] = "kuai3_triple1"] = 30;
      values[valuesById[31] = "kuai3_triple2"] = 31;
      values[valuesById[32] = "kuai3_triple3"] = 32;
      values[valuesById[33] = "kuai3_triple4"] = 33;
      values[valuesById[34] = "kuai3_triple5"] = 34;
      values[valuesById[35] = "kuai3_triple6"] = 35;
      values[valuesById[36] = "kuai3_double1"] = 36;
      values[valuesById[37] = "kuai3_double2"] = 37;
      values[valuesById[38] = "kuai3_double3"] = 38;
      values[valuesById[39] = "kuai3_double4"] = 39;
      values[valuesById[40] = "kuai3_double5"] = 40;
      values[valuesById[41] = "kuai3_double6"] = 41;
      values[valuesById[42] = "kuai3_double_112"] = 42;
      values[valuesById[43] = "kuai3_double_113"] = 43;
      values[valuesById[44] = "kuai3_double_114"] = 44;
      values[valuesById[45] = "kuai3_double_115"] = 45;
      values[valuesById[46] = "kuai3_double_116"] = 46;
      values[valuesById[47] = "kuai3_double_221"] = 47;
      values[valuesById[48] = "kuai3_double_223"] = 48;
      values[valuesById[49] = "kuai3_double_224"] = 49;
      values[valuesById[50] = "kuai3_double_225"] = 50;
      values[valuesById[51] = "kuai3_double_226"] = 51;
      values[valuesById[52] = "kuai3_double_331"] = 52;
      values[valuesById[53] = "kuai3_double_332"] = 53;
      values[valuesById[54] = "kuai3_double_334"] = 54;
      values[valuesById[55] = "kuai3_double_335"] = 55;
      values[valuesById[56] = "kuai3_double_336"] = 56;
      values[valuesById[57] = "kuai3_double_441"] = 57;
      values[valuesById[58] = "kuai3_double_442"] = 58;
      values[valuesById[59] = "kuai3_double_443"] = 59;
      values[valuesById[60] = "kuai3_double_445"] = 60;
      values[valuesById[61] = "kuai3_double_446"] = 61;
      values[valuesById[62] = "kuai3_double_551"] = 62;
      values[valuesById[63] = "kuai3_double_552"] = 63;
      values[valuesById[64] = "kuai3_double_553"] = 64;
      values[valuesById[65] = "kuai3_double_554"] = 65;
      values[valuesById[66] = "kuai3_double_556"] = 66;
      values[valuesById[67] = "kuai3_double_661"] = 67;
      values[valuesById[68] = "kuai3_double_662"] = 68;
      values[valuesById[69] = "kuai3_double_663"] = 69;
      values[valuesById[70] = "kuai3_double_664"] = 70;
      values[valuesById[71] = "kuai3_double_665"] = 71;
      values[valuesById[72] = "kuai3_diff_123"] = 72;
      values[valuesById[73] = "kuai3_diff_124"] = 73;
      values[valuesById[74] = "kuai3_diff_125"] = 74;
      values[valuesById[75] = "kuai3_diff_126"] = 75;
      values[valuesById[76] = "kuai3_diff_134"] = 76;
      values[valuesById[77] = "kuai3_diff_135"] = 77;
      values[valuesById[78] = "kuai3_diff_136"] = 78;
      values[valuesById[79] = "kuai3_diff_145"] = 79;
      values[valuesById[80] = "kuai3_diff_146"] = 80;
      values[valuesById[81] = "kuai3_diff_156"] = 81;
      values[valuesById[82] = "kuai3_diff_234"] = 82;
      values[valuesById[83] = "kuai3_diff_235"] = 83;
      values[valuesById[84] = "kuai3_diff_236"] = 84;
      values[valuesById[85] = "kuai3_diff_245"] = 85;
      values[valuesById[86] = "kuai3_diff_246"] = 86;
      values[valuesById[87] = "kuai3_diff_256"] = 87;
      values[valuesById[88] = "kuai3_diff_345"] = 88;
      values[valuesById[89] = "kuai3_diff_346"] = 89;
      values[valuesById[90] = "kuai3_diff_356"] = 90;
      values[valuesById[91] = "kuai3_diff_456"] = 91;
      values[valuesById[92] = "kuai3_diff_12"] = 92;
      values[valuesById[93] = "kuai3_diff_13"] = 93;
      values[valuesById[94] = "kuai3_diff_14"] = 94;
      values[valuesById[95] = "kuai3_diff_15"] = 95;
      values[valuesById[96] = "kuai3_diff_16"] = 96;
      values[valuesById[97] = "kuai3_diff_23"] = 97;
      values[valuesById[98] = "kuai3_diff_24"] = 98;
      values[valuesById[99] = "kuai3_diff_25"] = 99;
      values[valuesById[100] = "kuai3_diff_26"] = 100;
      values[valuesById[101] = "kuai3_diff_34"] = 101;
      values[valuesById[102] = "kuai3_diff_35"] = 102;
      values[valuesById[103] = "kuai3_diff_36"] = 103;
      values[valuesById[104] = "kuai3_diff_45"] = 104;
      values[valuesById[105] = "kuai3_diff_46"] = 105;
      values[valuesById[106] = "kuai3_diff_56"] = 106;
      values[valuesById[107] = "kuai3_series_3"] = 107;
      return values;
    }();
    $root.p_history = function() {
      function p_history(properties) {
        this.history = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_history.prototype.history = $util.emptyArray;
      p_history.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.history && message.history.length) for (var i = 0; i < message.history.length; ++i) writer.uint32(8).int32(message.history[i]);
        return writer;
      };
      p_history.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_history();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.history && message.history.length || (message.history = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.history.push(reader.int32());
            } else message.history.push(reader.int32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return p_history;
    }();
    $root.p_bet = function() {
      function p_bet(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_bet.prototype.key = 1;
      p_bet.prototype.val = 0;
      p_bet.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.key);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      p_bet.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_bet();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.key = reader.int32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("key")) throw $util.ProtocolError("missing required 'key'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return p_bet;
    }();
    $root.p_odds = function() {
      function p_odds(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_odds.prototype.key = 1;
      p_odds.prototype.val = 0;
      p_odds.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.key);
        writer.uint32(21)["float"](message.val);
        return writer;
      };
      p_odds.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_odds();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.key = reader.int32();
            break;

           case 2:
            message.val = reader["float"]();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("key")) throw $util.ProtocolError("missing required 'key'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return p_odds;
    }();
    $root.p_live_addr = function() {
      function p_live_addr(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_live_addr.prototype.pull1 = "";
      p_live_addr.prototype.pull2 = "";
      p_live_addr.prototype.pull3 = "";
      p_live_addr.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.pull1 && message.hasOwnProperty("pull1") && writer.uint32(10).string(message.pull1);
        null != message.pull2 && message.hasOwnProperty("pull2") && writer.uint32(18).string(message.pull2);
        null != message.pull3 && message.hasOwnProperty("pull3") && writer.uint32(26).string(message.pull3);
        return writer;
      };
      p_live_addr.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_live_addr();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.pull1 = reader.string();
            break;

           case 2:
            message.pull2 = reader.string();
            break;

           case 3:
            message.pull3 = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return p_live_addr;
    }();
    $root.m_3601_tos = function() {
      function m_3601_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3601_tos.prototype.bet = null;
      m_3601_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_bet.encode(message.bet, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3601_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3601_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet = $root.p_bet.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        return message;
      };
      return m_3601_tos;
    }();
    $root.m_3601_toc = function() {
      function m_3601_toc(properties) {
        this.self_bet = [];
        this.global_bet = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3601_toc.prototype.balance = 0;
      m_3601_toc.prototype.self_bet = $util.emptyArray;
      m_3601_toc.prototype.global_bet = $util.emptyArray;
      m_3601_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.balance);
        if (null != message.self_bet && message.self_bet.length) for (var i = 0; i < message.self_bet.length; ++i) $root.p_bet.encode(message.self_bet[i], writer.uint32(18).fork()).ldelim();
        if (null != message.global_bet && message.global_bet.length) for (var i = 0; i < message.global_bet.length; ++i) $root.p_bet.encode(message.global_bet[i], writer.uint32(26).fork()).ldelim();
        return writer;
      };
      m_3601_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3601_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint32();
            break;

           case 2:
            message.self_bet && message.self_bet.length || (message.self_bet = []);
            message.self_bet.push($root.p_bet.decode(reader, reader.uint32()));
            break;

           case 3:
            message.global_bet && message.global_bet.length || (message.global_bet = []);
            message.global_bet.push($root.p_bet.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_3601_toc;
    }();
    $root.m_3602_toc = function() {
      function m_3602_toc(properties) {
        this.global_bet = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3602_toc.prototype.balance = 0;
      m_3602_toc.prototype.global_bet = $util.emptyArray;
      m_3602_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.balance);
        if (null != message.global_bet && message.global_bet.length) for (var i = 0; i < message.global_bet.length; ++i) $root.p_bet.encode(message.global_bet[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      m_3602_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3602_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint32();
            break;

           case 2:
            message.global_bet && message.global_bet.length || (message.global_bet = []);
            message.global_bet.push($root.p_bet.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_3602_toc;
    }();
    $root.m_3603_tos = function() {
      function m_3603_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3603_tos.prototype.key = 1;
      m_3603_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.key);
        return writer;
      };
      m_3603_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3603_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.key = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("key")) throw $util.ProtocolError("missing required 'key'", {
          instance: message
        });
        return message;
      };
      return m_3603_tos;
    }();
    $root.m_3603_toc = function() {
      function m_3603_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3603_toc.prototype.val = 0;
      m_3603_toc.prototype.balance = 0;
      m_3603_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.val);
        writer.uint32(16).uint32(message.balance);
        return writer;
      };
      m_3603_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3603_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.val = reader.uint32();
            break;

           case 2:
            message.balance = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_3603_toc;
    }();
    $root.m_3612_toc = function() {
      function m_3612_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3612_toc.prototype.info = null;
      m_3612_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_open_info.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3612_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3612_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_open_info.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_3612_toc;
    }();
    $root.m_3613_toc = function() {
      function m_3613_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3613_toc.prototype.rest_time = 0;
      m_3613_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.rest_time);
        return writer;
      };
      m_3613_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3613_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.rest_time = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("rest_time")) throw $util.ProtocolError("missing required 'rest_time'", {
          instance: message
        });
        return message;
      };
      return m_3613_toc;
    }();
    $root.m_3614_toc = function() {
      function m_3614_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3614_toc.prototype.rest_time = 0;
      m_3614_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.rest_time);
        return writer;
      };
      m_3614_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3614_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.rest_time = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("rest_time")) throw $util.ProtocolError("missing required 'rest_time'", {
          instance: message
        });
        return message;
      };
      return m_3614_toc;
    }();
    $root.m_3615_toc = function() {
      function m_3615_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3615_toc.prototype.rest_time = 0;
      m_3615_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.rest_time);
        return writer;
      };
      m_3615_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3615_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.rest_time = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("rest_time")) throw $util.ProtocolError("missing required 'rest_time'", {
          instance: message
        });
        return message;
      };
      return m_3615_toc;
    }();
    $root.m_3616_toc = function() {
      function m_3616_toc(properties) {
        this.bets = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3616_toc.prototype.bets = $util.emptyArray;
      m_3616_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.bets && message.bets.length) for (var i = 0; i < message.bets.length; ++i) $root.p_bet.encode(message.bets[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3616_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3616_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bets && message.bets.length || (message.bets = []);
            message.bets.push($root.p_bet.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3616_toc;
    }();
    $root.p_open_info = function() {
      function p_open_info(properties) {
        this.chips = [];
        this.odds = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_open_info.prototype.rest_time = 0;
      p_open_info.prototype.chips = $util.emptyArray;
      p_open_info.prototype.lim = 0;
      p_open_info.prototype.odds = $util.emptyArray;
      p_open_info.prototype.round = 0;
      p_open_info.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.rest_time);
        if (null != message.chips && message.chips.length) for (var i = 0; i < message.chips.length; ++i) writer.uint32(16).uint32(message.chips[i]);
        writer.uint32(24).uint32(message.lim);
        if (null != message.odds && message.odds.length) for (var i = 0; i < message.odds.length; ++i) $root.p_odds.encode(message.odds[i], writer.uint32(34).fork()).ldelim();
        null != message.round && message.hasOwnProperty("round") && writer.uint32(40).uint32(message.round);
        return writer;
      };
      p_open_info.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_open_info();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.rest_time = reader.uint32();
            break;

           case 2:
            message.chips && message.chips.length || (message.chips = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.chips.push(reader.uint32());
            } else message.chips.push(reader.uint32());
            break;

           case 3:
            message.lim = reader.uint32();
            break;

           case 4:
            message.odds && message.odds.length || (message.odds = []);
            message.odds.push($root.p_odds.decode(reader, reader.uint32()));
            break;

           case 5:
            message.round = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("rest_time")) throw $util.ProtocolError("missing required 'rest_time'", {
          instance: message
        });
        if (!message.hasOwnProperty("lim")) throw $util.ProtocolError("missing required 'lim'", {
          instance: message
        });
        return message;
      };
      return p_open_info;
    }();
    $root.m_3618_toc = function() {
      function m_3618_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3618_toc.prototype.msg = "";
      m_3618_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.msg);
        return writer;
      };
      m_3618_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3618_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.msg = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("msg")) throw $util.ProtocolError("missing required 'msg'", {
          instance: message
        });
        return message;
      };
      return m_3618_toc;
    }();
    $root.m_2301_toc = function() {
      function m_2301_toc(properties) {
        this.list = [];
        this.list1 = [];
        this.open_list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2301_toc.prototype.num = 0;
      m_2301_toc.prototype.time = 0;
      m_2301_toc.prototype.list = $util.emptyArray;
      m_2301_toc.prototype.list1 = $util.emptyArray;
      m_2301_toc.prototype.open_list = $util.emptyArray;
      m_2301_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.num);
        writer.uint32(16).uint32(message.time);
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_miss_num.encode(message.list[i], writer.uint32(26).fork()).ldelim();
        if (null != message.list1 && message.list1.length) for (var i = 0; i < message.list1.length; ++i) $root.p_miss_num.encode(message.list1[i], writer.uint32(34).fork()).ldelim();
        if (null != message.open_list && message.open_list.length) for (var i = 0; i < message.open_list.length; ++i) $root.p_open.encode(message.open_list[i], writer.uint32(42).fork()).ldelim();
        return writer;
      };
      m_2301_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2301_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.num = reader.uint32();
            break;

           case 2:
            message.time = reader.uint32();
            break;

           case 3:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_miss_num.decode(reader, reader.uint32()));
            break;

           case 4:
            message.list1 && message.list1.length || (message.list1 = []);
            message.list1.push($root.p_miss_num.decode(reader, reader.uint32()));
            break;

           case 5:
            message.open_list && message.open_list.length || (message.open_list = []);
            message.open_list.push($root.p_open.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return m_2301_toc;
    }();
    $root.p_miss_num = function() {
      function p_miss_num(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_miss_num.prototype.num = 0;
      p_miss_num.prototype.miss_num = 0;
      p_miss_num.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.num);
        writer.uint32(16).uint32(message.miss_num);
        return writer;
      };
      p_miss_num.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_miss_num();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.num = reader.uint32();
            break;

           case 2:
            message.miss_num = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        if (!message.hasOwnProperty("miss_num")) throw $util.ProtocolError("missing required 'miss_num'", {
          instance: message
        });
        return message;
      };
      return p_miss_num;
    }();
    $root.m_2303_tos = function() {
      function m_2303_tos(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2303_tos.prototype.list = $util.emptyArray;
      m_2303_tos.prototype.multiple = 0;
      m_2303_tos.prototype.add = 0;
      m_2303_tos.prototype.stop = 0;
      m_2303_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_select_num.encode(message.list[i], writer.uint32(10).fork()).ldelim();
        writer.uint32(16).uint32(message.multiple);
        writer.uint32(24).uint32(message.add);
        writer.uint32(32).uint32(message.stop);
        return writer;
      };
      m_2303_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2303_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_select_num.decode(reader, reader.uint32()));
            break;

           case 2:
            message.multiple = reader.uint32();
            break;

           case 3:
            message.add = reader.uint32();
            break;

           case 4:
            message.stop = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("multiple")) throw $util.ProtocolError("missing required 'multiple'", {
          instance: message
        });
        if (!message.hasOwnProperty("add")) throw $util.ProtocolError("missing required 'add'", {
          instance: message
        });
        if (!message.hasOwnProperty("stop")) throw $util.ProtocolError("missing required 'stop'", {
          instance: message
        });
        return message;
      };
      return m_2303_tos;
    }();
    $root.m_2303_toc = function() {
      function m_2303_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2303_toc.prototype.flag = 0;
      m_2303_toc.prototype.reason = 0;
      m_2303_toc.prototype.gold = 0;
      m_2303_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.flag);
        null != message.reason && message.hasOwnProperty("reason") && writer.uint32(16).uint32(message.reason);
        null != message.gold && message.hasOwnProperty("gold") && writer.uint32(24).uint32(message.gold);
        return writer;
      };
      m_2303_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2303_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.flag = reader.uint32();
            break;

           case 2:
            message.reason = reader.uint32();
            break;

           case 3:
            message.gold = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("flag")) throw $util.ProtocolError("missing required 'flag'", {
          instance: message
        });
        return message;
      };
      return m_2303_toc;
    }();
    $root.p_select_num = function() {
      function p_select_num(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_select_num.prototype.type = 0;
      p_select_num.prototype.list = $util.emptyArray;
      p_select_num.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.type);
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) writer.uint32(16).uint32(message.list[i]);
        return writer;
      };
      p_select_num.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_select_num();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.uint32();
            break;

           case 2:
            message.list && message.list.length || (message.list = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.list.push(reader.uint32());
            } else message.list.push(reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return p_select_num;
    }();
    $root.m_2304_tos = function() {
      function m_2304_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2304_tos.prototype.id = 0;
      m_2304_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        return writer;
      };
      m_2304_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2304_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_2304_tos;
    }();
    $root.m_2304_toc = function() {
      function m_2304_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2304_toc.prototype.flag = 0;
      m_2304_toc.prototype.reason = 0;
      m_2304_toc.prototype.gold = 0;
      m_2304_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.flag);
        null != message.reason && message.hasOwnProperty("reason") && writer.uint32(16).uint32(message.reason);
        null != message.gold && message.hasOwnProperty("gold") && writer.uint32(24).uint32(message.gold);
        return writer;
      };
      m_2304_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2304_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.flag = reader.uint32();
            break;

           case 2:
            message.reason = reader.uint32();
            break;

           case 3:
            message.gold = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("flag")) throw $util.ProtocolError("missing required 'flag'", {
          instance: message
        });
        return message;
      };
      return m_2304_toc;
    }();
    $root.m_2305_toc = function() {
      function m_2305_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2305_toc.prototype.list = $util.emptyArray;
      m_2305_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_xyxw_select.encode(message.list[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_2305_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2305_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_xyxw_select.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_2305_toc;
    }();
    $root.p_xyxw_select = function() {
      function p_xyxw_select(properties) {
        this.list = [];
        this.open_list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_xyxw_select.prototype.list = $util.emptyArray;
      p_xyxw_select.prototype.multiple = 0;
      p_xyxw_select.prototype.date_num = 0;
      p_xyxw_select.prototype.num = 0;
      p_xyxw_select.prototype.add = 0;
      p_xyxw_select.prototype.time = 0;
      p_xyxw_select.prototype.gold = 0;
      p_xyxw_select.prototype.win = 0;
      p_xyxw_select.prototype.open_list = $util.emptyArray;
      p_xyxw_select.prototype.add_num = 0;
      p_xyxw_select.prototype.cancel = 0;
      p_xyxw_select.prototype.id = 0;
      p_xyxw_select.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_select_num.encode(message.list[i], writer.uint32(18).fork()).ldelim();
        writer.uint32(24).uint32(message.multiple);
        writer.uint32(32).uint32(message.date_num);
        writer.uint32(40).uint32(message.num);
        writer.uint32(48).uint32(message.add);
        writer.uint32(56).uint32(message.time);
        writer.uint32(64).uint32(message.gold);
        writer.uint32(72).uint32(message.win);
        if (null != message.open_list && message.open_list.length) for (var i = 0; i < message.open_list.length; ++i) writer.uint32(80).uint32(message.open_list[i]);
        writer.uint32(88).uint32(message.add_num);
        writer.uint32(96).uint32(message.cancel);
        writer.uint32(104).uint32(message.id);
        return writer;
      };
      p_xyxw_select.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_xyxw_select();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 2:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_select_num.decode(reader, reader.uint32()));
            break;

           case 3:
            message.multiple = reader.uint32();
            break;

           case 4:
            message.date_num = reader.uint32();
            break;

           case 5:
            message.num = reader.uint32();
            break;

           case 6:
            message.add = reader.uint32();
            break;

           case 7:
            message.time = reader.uint32();
            break;

           case 8:
            message.gold = reader.uint32();
            break;

           case 9:
            message.win = reader.uint32();
            break;

           case 10:
            message.open_list && message.open_list.length || (message.open_list = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.open_list.push(reader.uint32());
            } else message.open_list.push(reader.uint32());
            break;

           case 11:
            message.add_num = reader.uint32();
            break;

           case 12:
            message.cancel = reader.uint32();
            break;

           case 13:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("multiple")) throw $util.ProtocolError("missing required 'multiple'", {
          instance: message
        });
        if (!message.hasOwnProperty("date_num")) throw $util.ProtocolError("missing required 'date_num'", {
          instance: message
        });
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        if (!message.hasOwnProperty("add")) throw $util.ProtocolError("missing required 'add'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("gold")) throw $util.ProtocolError("missing required 'gold'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        if (!message.hasOwnProperty("add_num")) throw $util.ProtocolError("missing required 'add_num'", {
          instance: message
        });
        if (!message.hasOwnProperty("cancel")) throw $util.ProtocolError("missing required 'cancel'", {
          instance: message
        });
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return p_xyxw_select;
    }();
    $root.m_2306_toc = function() {
      function m_2306_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2306_toc.prototype.id = 0;
      m_2306_toc.prototype.list = $util.emptyArray;
      m_2306_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) writer.uint32(16).uint32(message.list[i]);
        return writer;
      };
      m_2306_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2306_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.list && message.list.length || (message.list = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.list.push(reader.uint32());
            } else message.list.push(reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_2306_toc;
    }();
    $root.p_open = function() {
      function p_open(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_open.prototype.id = 0;
      p_open.prototype.list = $util.emptyArray;
      p_open.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) writer.uint32(16).uint32(message.list[i]);
        return writer;
      };
      p_open.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_open();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.list && message.list.length || (message.list = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.list.push(reader.uint32());
            } else message.list.push(reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return p_open;
    }();
    $root.m_2307_toc = function() {
      function m_2307_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2307_toc.prototype.id = 0;
      m_2307_toc.prototype.time = 0;
      m_2307_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.time);
        return writer;
      };
      m_2307_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2307_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.time = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return m_2307_toc;
    }();
    $root.m_2308_toc = function() {
      function m_2308_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2308_toc.prototype.gold = 0;
      m_2308_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.gold);
        return writer;
      };
      m_2308_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2308_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.gold = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("gold")) throw $util.ProtocolError("missing required 'gold'", {
          instance: message
        });
        return message;
      };
      return m_2308_toc;
    }();
    $root.m_2309_toc = function() {
      function m_2309_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2309_toc.prototype.gold = 0;
      m_2309_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.gold);
        return writer;
      };
      m_2309_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2309_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.gold = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("gold")) throw $util.ProtocolError("missing required 'gold'", {
          instance: message
        });
        return message;
      };
      return m_2309_toc;
    }();
    $root.m_1601_toc = function() {
      function m_1601_toc(properties) {
        this.bet_val = [];
        this.result = [];
        this.bets = [];
        this.odds = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1601_toc.prototype.bet_val = $util.emptyArray;
      m_1601_toc.prototype.state = 1;
      m_1601_toc.prototype.result = $util.emptyArray;
      m_1601_toc.prototype.bets = $util.emptyArray;
      m_1601_toc.prototype.time = 0;
      m_1601_toc.prototype.bet_time = 0;
      m_1601_toc.prototype.odds = $util.emptyArray;
      m_1601_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.bet_val && message.bet_val.length) for (var i = 0; i < message.bet_val.length; ++i) writer.uint32(8).uint32(message.bet_val[i]);
        writer.uint32(16).int32(message.state);
        if (null != message.result && message.result.length) for (var i = 0; i < message.result.length; ++i) $root.p_cat_result.encode(message.result[i], writer.uint32(26).fork()).ldelim();
        if (null != message.bets && message.bets.length) for (var i = 0; i < message.bets.length; ++i) $root.p_cat_bet.encode(message.bets[i], writer.uint32(34).fork()).ldelim();
        writer.uint32(40).uint32(message.time);
        writer.uint32(48).uint32(message.bet_time);
        if (null != message.odds && message.odds.length) for (var i = 0; i < message.odds.length; ++i) $root.p_cat_odds.encode(message.odds[i], writer.uint32(58).fork()).ldelim();
        return writer;
      };
      m_1601_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1601_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet_val && message.bet_val.length || (message.bet_val = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.bet_val.push(reader.uint32());
            } else message.bet_val.push(reader.uint32());
            break;

           case 2:
            message.state = reader.int32();
            break;

           case 3:
            message.result && message.result.length || (message.result = []);
            message.result.push($root.p_cat_result.decode(reader, reader.uint32()));
            break;

           case 4:
            message.bets && message.bets.length || (message.bets = []);
            message.bets.push($root.p_cat_bet.decode(reader, reader.uint32()));
            break;

           case 5:
            message.time = reader.uint32();
            break;

           case 6:
            message.bet_time = reader.uint32();
            break;

           case 7:
            message.odds && message.odds.length || (message.odds = []);
            message.odds.push($root.p_cat_odds.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_time")) throw $util.ProtocolError("missing required 'bet_time'", {
          instance: message
        });
        return message;
      };
      return m_1601_toc;
    }();
    $root.p_cat_bet = function() {
      function p_cat_bet(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_cat_bet.prototype.bet = 0;
      p_cat_bet.prototype.val = 0;
      p_cat_bet.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.bet);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      p_cat_bet.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_cat_bet();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet = reader.int32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return p_cat_bet;
    }();
    $root.p_cat_odds = function() {
      function p_cat_odds(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_cat_odds.prototype.bet = 0;
      p_cat_odds.prototype.val = 0;
      p_cat_odds.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.bet);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      p_cat_odds.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_cat_odds();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet = reader.int32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return p_cat_odds;
    }();
    $root.m_1603_tos = function() {
      function m_1603_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1603_tos.prototype.bet = 0;
      m_1603_tos.prototype.val = 0;
      m_1603_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.bet);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      m_1603_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1603_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet = reader.int32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return m_1603_tos;
    }();
    $root.m_1603_toc = function() {
      function m_1603_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1603_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1603_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        return writer;
      };
      m_1603_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1603_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_1603_toc;
    }();
    $root.e_cat = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[0] = "zero"] = 0;
      values[valuesById[1] = "one"] = 1;
      values[valuesById[2] = "two"] = 2;
      values[valuesById[3] = "three"] = 3;
      values[valuesById[4] = "four"] = 4;
      values[valuesById[5] = "five"] = 5;
      values[valuesById[6] = "six"] = 6;
      values[valuesById[7] = "seven"] = 7;
      values[valuesById[8] = "eight"] = 8;
      values[valuesById[9] = "nine"] = 9;
      values[valuesById[10] = "ten"] = 10;
      values[valuesById[11] = "eleven"] = 11;
      values[valuesById[12] = "RED"] = 12;
      values[valuesById[13] = "BLUE"] = 13;
      values[valuesById[14] = "T"] = 14;
      return values;
    }();
    $root.m_1604_toc = function() {
      function m_1604_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1604_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1604_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        return writer;
      };
      m_1604_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1604_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_1604_toc;
    }();
    $root.m_1605_tos = function() {
      function m_1605_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1605_tos.prototype.id = 0;
      m_1605_tos.prototype.amount = 0;
      m_1605_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.amount);
        return writer;
      };
      m_1605_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1605_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.amount = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("amount")) throw $util.ProtocolError("missing required 'amount'", {
          instance: message
        });
        return message;
      };
      return m_1605_tos;
    }();
    $root.m_1605_toc = function() {
      function m_1605_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1605_toc.prototype.info = $util.emptyArray;
      m_1605_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_player_cat.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1605_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1605_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_player_cat.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1605_toc;
    }();
    $root.p_player_cat = function() {
      function p_player_cat(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_player_cat.prototype.id = 0;
      p_player_cat.prototype.hand = 0;
      p_player_cat.prototype.time = 0;
      p_player_cat.prototype.bet_val = 0;
      p_player_cat.prototype.win = 0;
      p_player_cat.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.hand);
        writer.uint32(24).uint32(message.time);
        writer.uint32(32).uint32(message.bet_val);
        writer.uint32(40).uint32(message.win);
        return writer;
      };
      p_player_cat.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_player_cat();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.hand = reader.uint32();
            break;

           case 3:
            message.time = reader.uint32();
            break;

           case 4:
            message.bet_val = reader.uint32();
            break;

           case 5:
            message.win = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("hand")) throw $util.ProtocolError("missing required 'hand'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_val")) throw $util.ProtocolError("missing required 'bet_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        return message;
      };
      return p_player_cat;
    }();
    $root.m_1606_tos = function() {
      function m_1606_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1606_tos.prototype.id = 0;
      m_1606_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        return writer;
      };
      m_1606_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1606_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_1606_tos;
    }();
    $root.m_1606_toc = function() {
      function m_1606_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1606_toc.prototype.info = null;
      m_1606_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_cat_log.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1606_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1606_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_cat_log.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_1606_toc;
    }();
    $root.p_cat_log = function() {
      function p_cat_log(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_cat_log.prototype.role_id = 0;
      p_cat_log.prototype.red = 0;
      p_cat_log.prototype.blue = 0;
      p_cat_log.prototype.result = 0;
      p_cat_log.prototype.info = $util.emptyArray;
      p_cat_log.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        writer.uint32(16).uint32(message.red);
        writer.uint32(24).uint32(message.blue);
        writer.uint32(32).int32(message.result);
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_cat_one.encode(message.info[i], writer.uint32(42).fork()).ldelim();
        return writer;
      };
      p_cat_log.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_cat_log();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.red = reader.uint32();
            break;

           case 3:
            message.blue = reader.uint32();
            break;

           case 4:
            message.result = reader.int32();
            break;

           case 5:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_cat_one.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("red")) throw $util.ProtocolError("missing required 'red'", {
          instance: message
        });
        if (!message.hasOwnProperty("blue")) throw $util.ProtocolError("missing required 'blue'", {
          instance: message
        });
        if (!message.hasOwnProperty("result")) throw $util.ProtocolError("missing required 'result'", {
          instance: message
        });
        return message;
      };
      return p_cat_log;
    }();
    $root.p_cat_one = function() {
      function p_cat_one(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_cat_one.prototype.bet = 0;
      p_cat_one.prototype.bet_val = 0;
      p_cat_one.prototype.win = 0;
      p_cat_one.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.bet);
        writer.uint32(16).uint32(message.bet_val);
        writer.uint32(24).uint32(message.win);
        return writer;
      };
      p_cat_one.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_cat_one();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet = reader.int32();
            break;

           case 2:
            message.bet_val = reader.uint32();
            break;

           case 3:
            message.win = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_val")) throw $util.ProtocolError("missing required 'bet_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        return message;
      };
      return p_cat_one;
    }();
    $root.m_1698_toc = function() {
      function m_1698_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1698_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1698_toc.prototype.win = 0;
      m_1698_toc.prototype.time = 0;
      m_1698_toc.prototype.state = 1;
      m_1698_toc.prototype.list = $util.emptyArray;
      m_1698_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        writer.uint32(16).uint32(message.win);
        writer.uint32(24).uint32(message.time);
        writer.uint32(32).int32(message.state);
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_cat_result.encode(message.list[i], writer.uint32(42).fork()).ldelim();
        return writer;
      };
      m_1698_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1698_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           case 2:
            message.win = reader.uint32();
            break;

           case 3:
            message.time = reader.uint32();
            break;

           case 4:
            message.state = reader.int32();
            break;

           case 5:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_cat_result.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        return message;
      };
      return m_1698_toc;
    }();
    $root.p_cat_result = function() {
      function p_cat_result(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_cat_result.prototype.id = 0;
      p_cat_result.prototype.red = 0;
      p_cat_result.prototype.blue = 0;
      p_cat_result.prototype.result = 0;
      p_cat_result.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.red);
        writer.uint32(24).uint32(message.blue);
        writer.uint32(32).int32(message.result);
        return writer;
      };
      p_cat_result.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_cat_result();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.red = reader.uint32();
            break;

           case 3:
            message.blue = reader.uint32();
            break;

           case 4:
            message.result = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("red")) throw $util.ProtocolError("missing required 'red'", {
          instance: message
        });
        if (!message.hasOwnProperty("blue")) throw $util.ProtocolError("missing required 'blue'", {
          instance: message
        });
        if (!message.hasOwnProperty("result")) throw $util.ProtocolError("missing required 'result'", {
          instance: message
        });
        return message;
      };
      return p_cat_result;
    }();
    $root.m_1699_toc = function() {
      function m_1699_toc(properties) {
        this.info = [];
        this.bets = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1699_toc.prototype.info = $util.emptyArray;
      m_1699_toc.prototype.bets = $util.emptyArray;
      m_1699_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_cat_player.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        if (null != message.bets && message.bets.length) for (var i = 0; i < message.bets.length; ++i) $root.p_cat_bet.encode(message.bets[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      m_1699_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1699_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_cat_player.decode(reader, reader.uint32()));
            break;

           case 2:
            message.bets && message.bets.length || (message.bets = []);
            message.bets.push($root.p_cat_bet.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1699_toc;
    }();
    $root.p_cat_player = function() {
      function p_cat_player(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_cat_player.prototype.icon = "";
      p_cat_player.prototype.bet = 0;
      p_cat_player.prototype.val = 0;
      p_cat_player.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.icon);
        writer.uint32(16).int32(message.bet);
        writer.uint32(24).uint32(message.val);
        return writer;
      };
      p_cat_player.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_cat_player();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.icon = reader.string();
            break;

           case 2:
            message.bet = reader.int32();
            break;

           case 3:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("icon")) throw $util.ProtocolError("missing required 'icon'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return p_cat_player;
    }();
    $root.m_6001_tos = function() {
      function m_6001_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_6001_tos.prototype.url = "";
      m_6001_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.url);
        return writer;
      };
      m_6001_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_6001_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.url = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("url")) throw $util.ProtocolError("missing required 'url'", {
          instance: message
        });
        return message;
      };
      return m_6001_tos;
    }();
    $root.m_6001_toc = function() {
      function m_6001_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_6001_toc.prototype.sign = "";
      m_6001_toc.prototype.timestamp = "";
      m_6001_toc.prototype.noncestr = "";
      m_6001_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.sign);
        writer.uint32(18).string(message.timestamp);
        writer.uint32(26).string(message.noncestr);
        return writer;
      };
      m_6001_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_6001_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.sign = reader.string();
            break;

           case 2:
            message.timestamp = reader.string();
            break;

           case 3:
            message.noncestr = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("sign")) throw $util.ProtocolError("missing required 'sign'", {
          instance: message
        });
        if (!message.hasOwnProperty("timestamp")) throw $util.ProtocolError("missing required 'timestamp'", {
          instance: message
        });
        if (!message.hasOwnProperty("noncestr")) throw $util.ProtocolError("missing required 'noncestr'", {
          instance: message
        });
        return message;
      };
      return m_6001_toc;
    }();
    $root.m_6002_tos = function() {
      function m_6002_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_6002_tos.prototype.role_id = 0;
      m_6002_tos.prototype.id = 0;
      m_6002_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        writer.uint32(16).uint32(message.id);
        return writer;
      };
      m_6002_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_6002_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_6002_tos;
    }();
    $root.m_6002_toc = function() {
      function m_6002_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_6002_toc.prototype.charm = 0;
      m_6002_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.charm);
        return writer;
      };
      m_6002_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_6002_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.charm = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("charm")) throw $util.ProtocolError("missing required 'charm'", {
          instance: message
        });
        return message;
      };
      return m_6002_toc;
    }();
    $root.m_6003_toc = function() {
      function m_6003_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_6003_toc.prototype.role_id = 0;
      m_6003_toc.prototype.id = 0;
      m_6003_toc.prototype.receive_id = 0;
      m_6003_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        writer.uint32(16).uint32(message.id);
        writer.uint32(24).uint32(message.receive_id);
        return writer;
      };
      m_6003_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_6003_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.id = reader.uint32();
            break;

           case 3:
            message.receive_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("receive_id")) throw $util.ProtocolError("missing required 'receive_id'", {
          instance: message
        });
        return message;
      };
      return m_6003_toc;
    }();
    $root.m_6080_toc = function() {
      function m_6080_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_6080_toc.prototype.content = "";
      m_6080_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.content);
        return writer;
      };
      m_6080_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_6080_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.content = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("content")) throw $util.ProtocolError("missing required 'content'", {
          instance: message
        });
        return message;
      };
      return m_6080_toc;
    }();
    $root.m_6081_toc = function() {
      function m_6081_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_6081_toc.prototype.list = $util.emptyArray;
      m_6081_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.cycle_ad.encode(message.list[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_6081_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_6081_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.cycle_ad.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_6081_toc;
    }();
    $root.cycle_ad = function() {
      function cycle_ad(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      cycle_ad.prototype.text = "";
      cycle_ad.prototype.sec = 0;
      cycle_ad.prototype.end_time = 0;
      cycle_ad.prototype.id = 0;
      cycle_ad.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.text);
        writer.uint32(16).uint32(message.sec);
        writer.uint32(24).uint32(message.end_time);
        writer.uint32(32).uint32(message.id);
        return writer;
      };
      cycle_ad.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.cycle_ad();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.text = reader.string();
            break;

           case 2:
            message.sec = reader.uint32();
            break;

           case 3:
            message.end_time = reader.uint32();
            break;

           case 4:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("text")) throw $util.ProtocolError("missing required 'text'", {
          instance: message
        });
        if (!message.hasOwnProperty("sec")) throw $util.ProtocolError("missing required 'sec'", {
          instance: message
        });
        if (!message.hasOwnProperty("end_time")) throw $util.ProtocolError("missing required 'end_time'", {
          instance: message
        });
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return cycle_ad;
    }();
    $root.m_6082_toc = function() {
      function m_6082_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_6082_toc.prototype.id = 0;
      m_6082_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        return writer;
      };
      m_6082_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_6082_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_6082_toc;
    }();
    $root.m_6098_toc = function() {
      function m_6098_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_6098_toc.prototype.type = 1;
      m_6098_toc.prototype.content = "";
      m_6098_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.type);
        writer.uint32(18).string(message.content);
        return writer;
      };
      m_6098_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_6098_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           case 2:
            message.content = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("content")) throw $util.ProtocolError("missing required 'content'", {
          instance: message
        });
        return message;
      };
      return m_6098_toc;
    }();
    $root.m_6099_toc = function() {
      function m_6099_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_6099_toc.prototype.content = "";
      m_6099_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.content);
        return writer;
      };
      m_6099_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_6099_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.content = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("content")) throw $util.ProtocolError("missing required 'content'", {
          instance: message
        });
        return message;
      };
      return m_6099_toc;
    }();
    $root.m_2101_tos = function() {
      function m_2101_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2101_tos.prototype.type = 0;
      m_2101_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.type);
        return writer;
      };
      m_2101_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2101_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_2101_tos;
    }();
    $root.m_2101_toc = function() {
      function m_2101_toc(properties) {
        this.bet_val = [];
        this.dog_list = [];
        this.dog_rank = [];
        this.dog_select = [];
        this.result_mark = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2101_toc.prototype.bet_val = $util.emptyArray;
      m_2101_toc.prototype.dog_list = $util.emptyArray;
      m_2101_toc.prototype.dog_rank = $util.emptyArray;
      m_2101_toc.prototype.state = 0;
      m_2101_toc.prototype.time = 0;
      m_2101_toc.prototype.dog_select = $util.emptyArray;
      m_2101_toc.prototype.num = 0;
      m_2101_toc.prototype.result_mark = $util.emptyArray;
      m_2101_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.bet_val && message.bet_val.length) for (var i = 0; i < message.bet_val.length; ++i) writer.uint32(8).uint32(message.bet_val[i]);
        if (null != message.dog_list && message.dog_list.length) for (var i = 0; i < message.dog_list.length; ++i) $root.p_dog_list.encode(message.dog_list[i], writer.uint32(18).fork()).ldelim();
        if (null != message.dog_rank && message.dog_rank.length) for (var i = 0; i < message.dog_rank.length; ++i) $root.p_dog_rank.encode(message.dog_rank[i], writer.uint32(26).fork()).ldelim();
        writer.uint32(32).uint32(message.state);
        writer.uint32(40).uint32(message.time);
        if (null != message.dog_select && message.dog_select.length) for (var i = 0; i < message.dog_select.length; ++i) $root.p_dog_select.encode(message.dog_select[i], writer.uint32(50).fork()).ldelim();
        writer.uint32(56).uint32(message.num);
        if (null != message.result_mark && message.result_mark.length) for (var i = 0; i < message.result_mark.length; ++i) $root.p_result_mark.encode(message.result_mark[i], writer.uint32(66).fork()).ldelim();
        return writer;
      };
      m_2101_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2101_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet_val && message.bet_val.length || (message.bet_val = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.bet_val.push(reader.uint32());
            } else message.bet_val.push(reader.uint32());
            break;

           case 2:
            message.dog_list && message.dog_list.length || (message.dog_list = []);
            message.dog_list.push($root.p_dog_list.decode(reader, reader.uint32()));
            break;

           case 3:
            message.dog_rank && message.dog_rank.length || (message.dog_rank = []);
            message.dog_rank.push($root.p_dog_rank.decode(reader, reader.uint32()));
            break;

           case 4:
            message.state = reader.uint32();
            break;

           case 5:
            message.time = reader.uint32();
            break;

           case 6:
            message.dog_select && message.dog_select.length || (message.dog_select = []);
            message.dog_select.push($root.p_dog_select.decode(reader, reader.uint32()));
            break;

           case 7:
            message.num = reader.uint32();
            break;

           case 8:
            message.result_mark && message.result_mark.length || (message.result_mark = []);
            message.result_mark.push($root.p_result_mark.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        return message;
      };
      return m_2101_toc;
    }();
    $root.p_dog_select = function() {
      function p_dog_select(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_dog_select.prototype.id = 1;
      p_dog_select.prototype.num = 0;
      p_dog_select.prototype.odds = 0;
      p_dog_select.prototype.gold = 0;
      p_dog_select.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.id);
        writer.uint32(16).uint32(message.num);
        writer.uint32(24).uint32(message.odds);
        writer.uint32(32).uint32(message.gold);
        return writer;
      };
      p_dog_select.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_dog_select();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.int32();
            break;

           case 2:
            message.num = reader.uint32();
            break;

           case 3:
            message.odds = reader.uint32();
            break;

           case 4:
            message.gold = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        if (!message.hasOwnProperty("odds")) throw $util.ProtocolError("missing required 'odds'", {
          instance: message
        });
        if (!message.hasOwnProperty("gold")) throw $util.ProtocolError("missing required 'gold'", {
          instance: message
        });
        return message;
      };
      return p_dog_select;
    }();
    $root.p_result_mark = function() {
      function p_result_mark(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_result_mark.prototype.id = 1;
      p_result_mark.prototype.num = 0;
      p_result_mark.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.id);
        writer.uint32(16).uint32(message.num);
        return writer;
      };
      p_result_mark.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_result_mark();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.int32();
            break;

           case 2:
            message.num = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        return message;
      };
      return p_result_mark;
    }();
    $root.e_dog_select = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "one"] = 1;
      values[valuesById[2] = "two"] = 2;
      values[valuesById[3] = "tree"] = 3;
      values[valuesById[4] = "four"] = 4;
      values[valuesById[5] = "five"] = 5;
      values[valuesById[6] = "one_in_two"] = 6;
      values[valuesById[7] = "two_in_two"] = 7;
      values[valuesById[8] = "tree_in_two"] = 8;
      values[valuesById[9] = "four_in_two"] = 9;
      values[valuesById[10] = "five_in_two"] = 10;
      values[valuesById[11] = "one_and_two"] = 11;
      values[valuesById[12] = "one_and_tree"] = 12;
      values[valuesById[13] = "one_and_four"] = 13;
      values[valuesById[14] = "one_and_five"] = 14;
      values[valuesById[15] = "two_and_tree"] = 15;
      values[valuesById[16] = "two_and_four"] = 16;
      values[valuesById[17] = "two_and_five"] = 17;
      values[valuesById[18] = "tree_and_four"] = 18;
      values[valuesById[19] = "tree_and_five"] = 19;
      values[valuesById[20] = "four_and_five"] = 20;
      return values;
    }();
    $root.p_dog_list = function() {
      function p_dog_list(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_dog_list.prototype.id = 0;
      p_dog_list.prototype.list = $util.emptyArray;
      p_dog_list.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_run_list.encode(message.list[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      p_dog_list.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_dog_list();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_run_list.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return p_dog_list;
    }();
    $root.p_run_list = function() {
      function p_run_list(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_run_list.prototype.id = 0;
      p_run_list.prototype.speed = 0;
      p_run_list.prototype.event = 0;
      p_run_list.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.speed);
        writer.uint32(24).uint32(message.event);
        return writer;
      };
      p_run_list.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_run_list();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.speed = reader.uint32();
            break;

           case 3:
            message.event = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("speed")) throw $util.ProtocolError("missing required 'speed'", {
          instance: message
        });
        if (!message.hasOwnProperty("event")) throw $util.ProtocolError("missing required 'event'", {
          instance: message
        });
        return message;
      };
      return p_run_list;
    }();
    $root.p_dog_rank = function() {
      function p_dog_rank(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_dog_rank.prototype.num = 0;
      p_dog_rank.prototype.id = 0;
      p_dog_rank.prototype.length = 0;
      p_dog_rank.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.num);
        writer.uint32(16).uint32(message.id);
        writer.uint32(24).uint32(message.length);
        return writer;
      };
      p_dog_rank.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_dog_rank();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.num = reader.uint32();
            break;

           case 2:
            message.id = reader.uint32();
            break;

           case 3:
            message.length = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("length")) throw $util.ProtocolError("missing required 'length'", {
          instance: message
        });
        return message;
      };
      return p_dog_rank;
    }();
    $root.m_2103_tos = function() {
      function m_2103_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2103_tos.prototype.id = 1;
      m_2103_tos.prototype.bet_val = 0;
      m_2103_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.id);
        writer.uint32(16).uint32(message.bet_val);
        return writer;
      };
      m_2103_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2103_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.int32();
            break;

           case 2:
            message.bet_val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_val")) throw $util.ProtocolError("missing required 'bet_val'", {
          instance: message
        });
        return message;
      };
      return m_2103_tos;
    }();
    $root.m_2103_toc = function() {
      function m_2103_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2103_toc.prototype.gold = 0;
      m_2103_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.gold);
        return writer;
      };
      m_2103_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2103_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.gold = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("gold")) throw $util.ProtocolError("missing required 'gold'", {
          instance: message
        });
        return message;
      };
      return m_2103_toc;
    }();
    $root.m_2104_toc = function() {
      function m_2104_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2104_toc.prototype.list = $util.emptyArray;
      m_2104_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_odds_push.encode(message.list[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_2104_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2104_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_odds_push.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_2104_toc;
    }();
    $root.p_odds_push = function() {
      function p_odds_push(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_odds_push.prototype.id = 1;
      p_odds_push.prototype.gold = 0;
      p_odds_push.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.id);
        writer.uint32(16).uint32(message.gold);
        return writer;
      };
      p_odds_push.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_odds_push();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.int32();
            break;

           case 2:
            message.gold = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("gold")) throw $util.ProtocolError("missing required 'gold'", {
          instance: message
        });
        return message;
      };
      return p_odds_push;
    }();
    $root.m_2105_toc = function() {
      function m_2105_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2105_toc.prototype.gold = 0;
      m_2105_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.gold);
        return writer;
      };
      m_2105_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2105_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.gold = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("gold")) throw $util.ProtocolError("missing required 'gold'", {
          instance: message
        });
        return message;
      };
      return m_2105_toc;
    }();
    $root.m_2106_toc = function() {
      function m_2106_toc(properties) {
        this.dog_list = [];
        this.dog_rank = [];
        this.dog_select = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2106_toc.prototype.dog_list = $util.emptyArray;
      m_2106_toc.prototype.dog_rank = $util.emptyArray;
      m_2106_toc.prototype.state = 0;
      m_2106_toc.prototype.time = 0;
      m_2106_toc.prototype.dog_select = $util.emptyArray;
      m_2106_toc.prototype.num = 0;
      m_2106_toc.prototype.gold = 0;
      m_2106_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.dog_list && message.dog_list.length) for (var i = 0; i < message.dog_list.length; ++i) $root.p_dog_list.encode(message.dog_list[i], writer.uint32(18).fork()).ldelim();
        if (null != message.dog_rank && message.dog_rank.length) for (var i = 0; i < message.dog_rank.length; ++i) $root.p_dog_rank.encode(message.dog_rank[i], writer.uint32(26).fork()).ldelim();
        writer.uint32(32).uint32(message.state);
        writer.uint32(40).uint32(message.time);
        if (null != message.dog_select && message.dog_select.length) for (var i = 0; i < message.dog_select.length; ++i) $root.p_dog_select.encode(message.dog_select[i], writer.uint32(50).fork()).ldelim();
        writer.uint32(56).uint32(message.num);
        writer.uint32(64).uint32(message.gold);
        return writer;
      };
      m_2106_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2106_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 2:
            message.dog_list && message.dog_list.length || (message.dog_list = []);
            message.dog_list.push($root.p_dog_list.decode(reader, reader.uint32()));
            break;

           case 3:
            message.dog_rank && message.dog_rank.length || (message.dog_rank = []);
            message.dog_rank.push($root.p_dog_rank.decode(reader, reader.uint32()));
            break;

           case 4:
            message.state = reader.uint32();
            break;

           case 5:
            message.time = reader.uint32();
            break;

           case 6:
            message.dog_select && message.dog_select.length || (message.dog_select = []);
            message.dog_select.push($root.p_dog_select.decode(reader, reader.uint32()));
            break;

           case 7:
            message.num = reader.uint32();
            break;

           case 8:
            message.gold = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        if (!message.hasOwnProperty("gold")) throw $util.ProtocolError("missing required 'gold'", {
          instance: message
        });
        return message;
      };
      return m_2106_toc;
    }();
    $root.m_2107_tos = function() {
      function m_2107_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2107_tos.prototype.type = 0;
      m_2107_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.type);
        return writer;
      };
      m_2107_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2107_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_2107_tos;
    }();
    $root.m_2107_toc = function() {
      function m_2107_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2107_toc.prototype.list = $util.emptyArray;
      m_2107_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_dog_result.encode(message.list[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_2107_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2107_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_dog_result.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_2107_toc;
    }();
    $root.m_2108_tos = function() {
      function m_2108_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2108_tos.prototype.type = 0;
      m_2108_tos.prototype.num = 0;
      m_2108_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.type);
        writer.uint32(16).uint32(message.num);
        return writer;
      };
      m_2108_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2108_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.uint32();
            break;

           case 2:
            message.num = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        return message;
      };
      return m_2108_tos;
    }();
    $root.m_2108_toc = function() {
      function m_2108_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2108_toc.prototype.list = $util.emptyArray;
      m_2108_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_dog_select.encode(message.list[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_2108_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2108_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_dog_select.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_2108_toc;
    }();
    $root.m_2109_tos = function() {
      function m_2109_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2109_tos.prototype.type = 0;
      m_2109_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.type);
        return writer;
      };
      m_2109_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2109_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_2109_tos;
    }();
    $root.m_2109_toc = function() {
      function m_2109_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2109_toc.prototype.list = $util.emptyArray;
      m_2109_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_role_select.encode(message.list[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_2109_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2109_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_role_select.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_2109_toc;
    }();
    $root.p_role_select = function() {
      function p_role_select(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_role_select.prototype.num = 0;
      p_role_select.prototype.time = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      p_role_select.prototype.gold = 0;
      p_role_select.prototype.win = 0;
      p_role_select.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.num);
        writer.uint32(16).uint64(message.time);
        writer.uint32(24).uint32(message.gold);
        writer.uint32(32).uint32(message.win);
        return writer;
      };
      p_role_select.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_role_select();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.num = reader.uint32();
            break;

           case 2:
            message.time = reader.uint64();
            break;

           case 3:
            message.gold = reader.uint32();
            break;

           case 4:
            message.win = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("gold")) throw $util.ProtocolError("missing required 'gold'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        return message;
      };
      return p_role_select;
    }();
    $root.m_2110_tos = function() {
      function m_2110_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2110_tos.prototype.type = 0;
      m_2110_tos.prototype.num = 0;
      m_2110_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.type);
        writer.uint32(16).uint32(message.num);
        return writer;
      };
      m_2110_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2110_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.uint32();
            break;

           case 2:
            message.num = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        return message;
      };
      return m_2110_tos;
    }();
    $root.m_2110_toc = function() {
      function m_2110_toc(properties) {
        this.list = [];
        this.select = [];
        this.rank_list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2110_toc.prototype.list = $util.emptyArray;
      m_2110_toc.prototype.select = $util.emptyArray;
      m_2110_toc.prototype.rank_list = $util.emptyArray;
      m_2110_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_dog_select.encode(message.list[i], writer.uint32(10).fork()).ldelim();
        if (null != message.select && message.select.length) for (var i = 0; i < message.select.length; ++i) $root.p_role_one_select.encode(message.select[i], writer.uint32(18).fork()).ldelim();
        if (null != message.rank_list && message.rank_list.length) for (var i = 0; i < message.rank_list.length; ++i) $root.p_dog_rank.encode(message.rank_list[i], writer.uint32(26).fork()).ldelim();
        return writer;
      };
      m_2110_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2110_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_dog_select.decode(reader, reader.uint32()));
            break;

           case 2:
            message.select && message.select.length || (message.select = []);
            message.select.push($root.p_role_one_select.decode(reader, reader.uint32()));
            break;

           case 3:
            message.rank_list && message.rank_list.length || (message.rank_list = []);
            message.rank_list.push($root.p_dog_rank.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_2110_toc;
    }();
    $root.p_role_one_select = function() {
      function p_role_one_select(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_role_one_select.prototype.id = 1;
      p_role_one_select.prototype.gold = 0;
      p_role_one_select.prototype.win = 0;
      p_role_one_select.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.id);
        writer.uint32(16).uint32(message.gold);
        writer.uint32(24).uint32(message.win);
        return writer;
      };
      p_role_one_select.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_role_one_select();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.int32();
            break;

           case 2:
            message.gold = reader.uint32();
            break;

           case 3:
            message.win = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("gold")) throw $util.ProtocolError("missing required 'gold'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        return message;
      };
      return p_role_one_select;
    }();
    $root.p_dog_result = function() {
      function p_dog_result(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_dog_result.prototype.num = 0;
      p_dog_result.prototype.list = $util.emptyArray;
      p_dog_result.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.num);
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_dog_rank.encode(message.list[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      p_dog_result.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_dog_result();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.num = reader.uint32();
            break;

           case 2:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_dog_rank.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        return message;
      };
      return p_dog_result;
    }();
    $root.m_2001_tos = function() {
      function m_2001_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2001_tos.prototype.id = 0;
      m_2001_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        return writer;
      };
      m_2001_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2001_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_2001_tos;
    }();
    $root.m_2001_toc = function() {
      function m_2001_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2001_toc.prototype.list = $util.emptyArray;
      m_2001_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_doll_info.encode(message.list[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_2001_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2001_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_doll_info.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_2001_toc;
    }();
    $root.p_doll_info = function() {
      function p_doll_info(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_doll_info.prototype.id = 0;
      p_doll_info.prototype.type = 1;
      p_doll_info.prototype.name = "";
      p_doll_info.prototype.val = 0;
      p_doll_info.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).int32(message.type);
        writer.uint32(26).string(message.name);
        writer.uint32(32).uint32(message.val);
        return writer;
      };
      p_doll_info.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_doll_info();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.type = reader.int32();
            break;

           case 3:
            message.name = reader.string();
            break;

           case 4:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return p_doll_info;
    }();
    $root.m_2002_tos = function() {
      function m_2002_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2002_tos.prototype.room_id = 0;
      m_2002_tos.prototype.doll_id = 0;
      m_2002_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.room_id);
        writer.uint32(16).uint32(message.doll_id);
        return writer;
      };
      m_2002_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2002_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.room_id = reader.uint32();
            break;

           case 2:
            message.doll_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("room_id")) throw $util.ProtocolError("missing required 'room_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("doll_id")) throw $util.ProtocolError("missing required 'doll_id'", {
          instance: message
        });
        return message;
      };
      return m_2002_tos;
    }();
    $root.m_2002_toc = function() {
      function m_2002_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2002_toc.prototype.is_hit = false;
      m_2002_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_2002_toc.prototype.id = 0;
      m_2002_toc.prototype.new_gold = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_2002_toc.prototype.free_times = 0;
      m_2002_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).bool(message.is_hit);
        null != message.balance && message.hasOwnProperty("balance") && writer.uint32(16).uint64(message.balance);
        null != message.id && message.hasOwnProperty("id") && writer.uint32(24).uint32(message.id);
        null != message.new_gold && message.hasOwnProperty("new_gold") && writer.uint32(32).uint64(message.new_gold);
        null != message.free_times && message.hasOwnProperty("free_times") && writer.uint32(40).uint32(message.free_times);
        return writer;
      };
      m_2002_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2002_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.is_hit = reader.bool();
            break;

           case 2:
            message.balance = reader.uint64();
            break;

           case 3:
            message.id = reader.uint32();
            break;

           case 4:
            message.new_gold = reader.uint64();
            break;

           case 5:
            message.free_times = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("is_hit")) throw $util.ProtocolError("missing required 'is_hit'", {
          instance: message
        });
        return message;
      };
      return m_2002_toc;
    }();
    $root.m_2003_tos = function() {
      function m_2003_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2003_tos.prototype.room_id = 0;
      m_2003_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.room_id);
        return writer;
      };
      m_2003_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2003_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.room_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("room_id")) throw $util.ProtocolError("missing required 'room_id'", {
          instance: message
        });
        return message;
      };
      return m_2003_tos;
    }();
    $root.m_2003_toc = function() {
      function m_2003_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2003_toc.prototype.balance = 0;
      m_2003_toc.prototype.free_times = 0;
      m_2003_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.balance);
        null != message.free_times && message.hasOwnProperty("free_times") && writer.uint32(16).uint32(message.free_times);
        return writer;
      };
      m_2003_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2003_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint32();
            break;

           case 2:
            message.free_times = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_2003_toc;
    }();
    $root.m_2004_toc = function() {
      function m_2004_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2004_toc.prototype.phone = "";
      m_2004_toc.prototype.name = "";
      m_2004_toc.prototype.addr = "";
      m_2004_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.phone);
        writer.uint32(18).string(message.name);
        writer.uint32(26).string(message.addr);
        return writer;
      };
      m_2004_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2004_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.phone = reader.string();
            break;

           case 2:
            message.name = reader.string();
            break;

           case 3:
            message.addr = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("phone")) throw $util.ProtocolError("missing required 'phone'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("addr")) throw $util.ProtocolError("missing required 'addr'", {
          instance: message
        });
        return message;
      };
      return m_2004_toc;
    }();
    $root.m_2010_tos = function() {
      function m_2010_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2010_tos.prototype.page = 0;
      m_2010_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.page);
        return writer;
      };
      m_2010_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2010_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.page = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("page")) throw $util.ProtocolError("missing required 'page'", {
          instance: message
        });
        return message;
      };
      return m_2010_tos;
    }();
    $root.m_2010_toc = function() {
      function m_2010_toc(properties) {
        this.rewards = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2010_toc.prototype.rewards = $util.emptyArray;
      m_2010_toc.prototype.pages = 0;
      m_2010_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.rewards && message.rewards.length) for (var i = 0; i < message.rewards.length; ++i) $root.p_reward.encode(message.rewards[i], writer.uint32(10).fork()).ldelim();
        writer.uint32(16).uint32(message.pages);
        return writer;
      };
      m_2010_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2010_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.rewards && message.rewards.length || (message.rewards = []);
            message.rewards.push($root.p_reward.decode(reader, reader.uint32()));
            break;

           case 2:
            message.pages = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("pages")) throw $util.ProtocolError("missing required 'pages'", {
          instance: message
        });
        return message;
      };
      return m_2010_toc;
    }();
    $root.m_2011_tos = function() {
      function m_2011_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2011_tos.prototype.page = 0;
      m_2011_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.page);
        return writer;
      };
      m_2011_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2011_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.page = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("page")) throw $util.ProtocolError("missing required 'page'", {
          instance: message
        });
        return message;
      };
      return m_2011_tos;
    }();
    $root.m_2011_toc = function() {
      function m_2011_toc(properties) {
        this.rewards = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2011_toc.prototype.rewards = $util.emptyArray;
      m_2011_toc.prototype.pages = 0;
      m_2011_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.rewards && message.rewards.length) for (var i = 0; i < message.rewards.length; ++i) $root.p_reward.encode(message.rewards[i], writer.uint32(10).fork()).ldelim();
        writer.uint32(16).uint32(message.pages);
        return writer;
      };
      m_2011_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2011_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.rewards && message.rewards.length || (message.rewards = []);
            message.rewards.push($root.p_reward.decode(reader, reader.uint32()));
            break;

           case 2:
            message.pages = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("pages")) throw $util.ProtocolError("missing required 'pages'", {
          instance: message
        });
        return message;
      };
      return m_2011_toc;
    }();
    $root.p_reward = function() {
      function p_reward(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_reward.prototype.id = 0;
      p_reward.prototype.item_name = "";
      p_reward.prototype.status = 1;
      p_reward.prototype.time = 0;
      p_reward.prototype.order = "";
      p_reward.prototype.expend = 0;
      p_reward.prototype.type = 1;
      p_reward.prototype.item_type = 1;
      p_reward.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(18).string(message.item_name);
        writer.uint32(24).int32(message.status);
        writer.uint32(32).uint32(message.time);
        writer.uint32(42).string(message.order);
        writer.uint32(48).uint32(message.expend);
        writer.uint32(56).int32(message.type);
        null != message.item_type && message.hasOwnProperty("item_type") && writer.uint32(64).int32(message.item_type);
        return writer;
      };
      p_reward.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_reward();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.item_name = reader.string();
            break;

           case 3:
            message.status = reader.int32();
            break;

           case 4:
            message.time = reader.uint32();
            break;

           case 5:
            message.order = reader.string();
            break;

           case 6:
            message.expend = reader.uint32();
            break;

           case 7:
            message.type = reader.int32();
            break;

           case 8:
            message.item_type = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("item_name")) throw $util.ProtocolError("missing required 'item_name'", {
          instance: message
        });
        if (!message.hasOwnProperty("status")) throw $util.ProtocolError("missing required 'status'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("order")) throw $util.ProtocolError("missing required 'order'", {
          instance: message
        });
        if (!message.hasOwnProperty("expend")) throw $util.ProtocolError("missing required 'expend'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return p_reward;
    }();
    $root.reward_type = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "is_hit"] = 1;
      values[valuesById[2] = "not_hit"] = 2;
      return values;
    }();
    $root.reward_state = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "weilingqu"] = 1;
      values[valuesById[2] = "yilingqu"] = 2;
      values[valuesById[3] = "fajiangzhong"] = 3;
      values[valuesById[4] = "yifajiang"] = 4;
      return values;
    }();
    $root.m_2012_tos = function() {
      function m_2012_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2012_tos.prototype.id = 0;
      m_2012_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        return writer;
      };
      m_2012_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2012_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_2012_tos;
    }();
    $root.m_2013_tos = function() {
      function m_2013_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2013_tos.prototype.room_id = 0;
      m_2013_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.room_id);
        return writer;
      };
      m_2013_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2013_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.room_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("room_id")) throw $util.ProtocolError("missing required 'room_id'", {
          instance: message
        });
        return message;
      };
      return m_2013_tos;
    }();
    $root.m_2013_toc = function() {
      function m_2013_toc(properties) {
        this.bet_val = [];
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2013_toc.prototype.bet_val = $util.emptyArray;
      m_2013_toc.prototype.list = $util.emptyArray;
      m_2013_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.bet_val && message.bet_val.length) for (var i = 0; i < message.bet_val.length; ++i) writer.uint32(8).uint32(message.bet_val[i]);
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_doll_info.encode(message.list[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      m_2013_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2013_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet_val && message.bet_val.length || (message.bet_val = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.bet_val.push(reader.uint32());
            } else message.bet_val.push(reader.uint32());
            break;

           case 2:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_doll_info.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_2013_toc;
    }();
    $root.m_2099_toc = function() {
      function m_2099_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2099_toc.prototype.info = null;
      m_2099_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_hit_doll.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_2099_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2099_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_hit_doll.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_2099_toc;
    }();
    $root.p_hit_doll = function() {
      function p_hit_doll(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_hit_doll.prototype.name = "";
      p_hit_doll.prototype.doll_name = "";
      p_hit_doll.prototype.icon = "";
      p_hit_doll.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.name);
        writer.uint32(18).string(message.doll_name);
        null != message.icon && message.hasOwnProperty("icon") && writer.uint32(26).string(message.icon);
        return writer;
      };
      p_hit_doll.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_hit_doll();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.name = reader.string();
            break;

           case 2:
            message.doll_name = reader.string();
            break;

           case 3:
            message.icon = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("doll_name")) throw $util.ProtocolError("missing required 'doll_name'", {
          instance: message
        });
        return message;
      };
      return p_hit_doll;
    }();
    $root.m_7008_toc = function() {
      function m_7008_toc(properties) {
        this.win_list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_7008_toc.prototype.win_list = $util.emptyArray;
      m_7008_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.win_list && message.win_list.length) for (var i = 0; i < message.win_list.length; ++i) $root.p_win.encode(message.win_list[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_7008_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_7008_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.win_list && message.win_list.length || (message.win_list = []);
            message.win_list.push($root.p_win.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_7008_toc;
    }();
    $root.m_7009_toc = function() {
      function m_7009_toc(properties) {
        this.win_list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_7009_toc.prototype.status = 0;
      m_7009_toc.prototype.time = 0;
      m_7009_toc.prototype.win_list = $util.emptyArray;
      m_7009_toc.prototype.shake_times = 0;
      m_7009_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.status);
        writer.uint32(16).uint32(message.time);
        if (null != message.win_list && message.win_list.length) for (var i = 0; i < message.win_list.length; ++i) $root.p_win.encode(message.win_list[i], writer.uint32(26).fork()).ldelim();
        writer.uint32(32).uint32(message.shake_times);
        return writer;
      };
      m_7009_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_7009_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.status = reader.uint32();
            break;

           case 2:
            message.time = reader.uint32();
            break;

           case 3:
            message.win_list && message.win_list.length || (message.win_list = []);
            message.win_list.push($root.p_win.decode(reader, reader.uint32()));
            break;

           case 4:
            message.shake_times = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("status")) throw $util.ProtocolError("missing required 'status'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("shake_times")) throw $util.ProtocolError("missing required 'shake_times'", {
          instance: message
        });
        return message;
      };
      return m_7009_toc;
    }();
    $root.m_7010_toc = function() {
      function m_7010_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_7010_toc.prototype.msg = 0;
      m_7010_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.msg);
        return writer;
      };
      m_7010_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_7010_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.msg = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("msg")) throw $util.ProtocolError("missing required 'msg'", {
          instance: message
        });
        return message;
      };
      return m_7010_toc;
    }();
    $root.m_7011_toc = function() {
      function m_7011_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_7011_toc.prototype.msg = 0;
      m_7011_toc.prototype.shake_times = 0;
      m_7011_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.msg && message.hasOwnProperty("msg") && writer.uint32(16).uint32(message.msg);
        writer.uint32(24).uint32(message.shake_times);
        return writer;
      };
      m_7011_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_7011_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 2:
            message.msg = reader.uint32();
            break;

           case 3:
            message.shake_times = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("shake_times")) throw $util.ProtocolError("missing required 'shake_times'", {
          instance: message
        });
        return message;
      };
      return m_7011_toc;
    }();
    $root.m_7013_toc = function() {
      function m_7013_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_7013_toc.prototype.inter_time = 0;
      m_7013_toc.prototype.status = 0;
      m_7013_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.inter_time);
        writer.uint32(16).uint32(message.status);
        return writer;
      };
      m_7013_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_7013_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.inter_time = reader.uint32();
            break;

           case 2:
            message.status = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("inter_time")) throw $util.ProtocolError("missing required 'inter_time'", {
          instance: message
        });
        if (!message.hasOwnProperty("status")) throw $util.ProtocolError("missing required 'status'", {
          instance: message
        });
        return message;
      };
      return m_7013_toc;
    }();
    $root.m_7014_toc = function() {
      function m_7014_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_7014_toc.prototype.inter_time = 0;
      m_7014_toc.prototype.status = 0;
      m_7014_toc.prototype.reward = 0;
      m_7014_toc.prototype.shake_times = 0;
      m_7014_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.inter_time);
        writer.uint32(16).uint32(message.status);
        writer.uint32(24).uint32(message.reward);
        writer.uint32(32).uint32(message.shake_times);
        return writer;
      };
      m_7014_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_7014_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.inter_time = reader.uint32();
            break;

           case 2:
            message.status = reader.uint32();
            break;

           case 3:
            message.reward = reader.uint32();
            break;

           case 4:
            message.shake_times = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("inter_time")) throw $util.ProtocolError("missing required 'inter_time'", {
          instance: message
        });
        if (!message.hasOwnProperty("status")) throw $util.ProtocolError("missing required 'status'", {
          instance: message
        });
        if (!message.hasOwnProperty("reward")) throw $util.ProtocolError("missing required 'reward'", {
          instance: message
        });
        if (!message.hasOwnProperty("shake_times")) throw $util.ProtocolError("missing required 'shake_times'", {
          instance: message
        });
        return message;
      };
      return m_7014_toc;
    }();
    $root.m_7015_toc = function() {
      function m_7015_toc(properties) {
        this.win_list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_7015_toc.prototype.status = 0;
      m_7015_toc.prototype.win_list = $util.emptyArray;
      m_7015_toc.prototype.time = 0;
      m_7015_toc.prototype.situation = 0;
      m_7015_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.status);
        if (null != message.win_list && message.win_list.length) for (var i = 0; i < message.win_list.length; ++i) $root.p_win.encode(message.win_list[i], writer.uint32(18).fork()).ldelim();
        writer.uint32(24).uint32(message.time);
        writer.uint32(32).uint32(message.situation);
        return writer;
      };
      m_7015_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_7015_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.status = reader.uint32();
            break;

           case 2:
            message.win_list && message.win_list.length || (message.win_list = []);
            message.win_list.push($root.p_win.decode(reader, reader.uint32()));
            break;

           case 3:
            message.time = reader.uint32();
            break;

           case 4:
            message.situation = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("status")) throw $util.ProtocolError("missing required 'status'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("situation")) throw $util.ProtocolError("missing required 'situation'", {
          instance: message
        });
        return message;
      };
      return m_7015_toc;
    }();
    $root.p_win = function() {
      function p_win(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_win.prototype.id = 0;
      p_win.prototype.phone = "";
      p_win.prototype.reward = 0;
      p_win.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(18).string(message.phone);
        writer.uint32(32).uint32(message.reward);
        return writer;
      };
      p_win.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_win();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.phone = reader.string();
            break;

           case 4:
            message.reward = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("phone")) throw $util.ProtocolError("missing required 'phone'", {
          instance: message
        });
        if (!message.hasOwnProperty("reward")) throw $util.ProtocolError("missing required 'reward'", {
          instance: message
        });
        return message;
      };
      return p_win;
    }();
    $root.m_9801_toc = function() {
      function m_9801_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_9801_toc.prototype.pay_type = 0;
      m_9801_toc.prototype.yeepay_status = 0;
      m_9801_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.pay_type);
        writer.uint32(16).uint32(message.yeepay_status);
        return writer;
      };
      m_9801_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_9801_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.pay_type = reader.uint32();
            break;

           case 2:
            message.yeepay_status = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("pay_type")) throw $util.ProtocolError("missing required 'pay_type'", {
          instance: message
        });
        if (!message.hasOwnProperty("yeepay_status")) throw $util.ProtocolError("missing required 'yeepay_status'", {
          instance: message
        });
        return message;
      };
      return m_9801_toc;
    }();
    $root.m_9802_tos = function() {
      function m_9802_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_9802_tos.prototype.id_card_front = "";
      m_9802_tos.prototype.id_card_back = "";
      m_9802_tos.prototype.real_name = "";
      m_9802_tos.prototype.id_card_no = "";
      m_9802_tos.prototype.card_no = "";
      m_9802_tos.prototype.bank_name = "";
      m_9802_tos.prototype.phone = "";
      m_9802_tos.prototype.id_card_begin_date = "";
      m_9802_tos.prototype.id_card_end_date = "";
      m_9802_tos.prototype.prov_id = "";
      m_9802_tos.prototype.area_id = "";
      m_9802_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.id_card_front && message.hasOwnProperty("id_card_front") && writer.uint32(10).string(message.id_card_front);
        null != message.id_card_back && message.hasOwnProperty("id_card_back") && writer.uint32(18).string(message.id_card_back);
        null != message.real_name && message.hasOwnProperty("real_name") && writer.uint32(26).string(message.real_name);
        null != message.id_card_no && message.hasOwnProperty("id_card_no") && writer.uint32(34).string(message.id_card_no);
        writer.uint32(42).string(message.card_no);
        null != message.bank_name && message.hasOwnProperty("bank_name") && writer.uint32(50).string(message.bank_name);
        writer.uint32(58).string(message.phone);
        null != message.id_card_begin_date && message.hasOwnProperty("id_card_begin_date") && writer.uint32(66).string(message.id_card_begin_date);
        null != message.id_card_end_date && message.hasOwnProperty("id_card_end_date") && writer.uint32(74).string(message.id_card_end_date);
        null != message.prov_id && message.hasOwnProperty("prov_id") && writer.uint32(82).string(message.prov_id);
        null != message.area_id && message.hasOwnProperty("area_id") && writer.uint32(90).string(message.area_id);
        return writer;
      };
      m_9802_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_9802_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id_card_front = reader.string();
            break;

           case 2:
            message.id_card_back = reader.string();
            break;

           case 3:
            message.real_name = reader.string();
            break;

           case 4:
            message.id_card_no = reader.string();
            break;

           case 5:
            message.card_no = reader.string();
            break;

           case 6:
            message.bank_name = reader.string();
            break;

           case 7:
            message.phone = reader.string();
            break;

           case 8:
            message.id_card_begin_date = reader.string();
            break;

           case 9:
            message.id_card_end_date = reader.string();
            break;

           case 10:
            message.prov_id = reader.string();
            break;

           case 11:
            message.area_id = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("card_no")) throw $util.ProtocolError("missing required 'card_no'", {
          instance: message
        });
        if (!message.hasOwnProperty("phone")) throw $util.ProtocolError("missing required 'phone'", {
          instance: message
        });
        return message;
      };
      return m_9802_tos;
    }();
    $root.m_9803_tos = function() {
      function m_9803_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_9803_tos.prototype.order_id = "";
      m_9803_tos.prototype.id = 0;
      m_9803_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.order_id);
        writer.uint32(16).uint32(message.id);
        return writer;
      };
      m_9803_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_9803_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.order_id = reader.string();
            break;

           case 2:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("order_id")) throw $util.ProtocolError("missing required 'order_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_9803_tos;
    }();
    $root.m_9803_toc = function() {
      function m_9803_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_9803_toc.prototype.order_id = "";
      m_9803_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.order_id);
        return writer;
      };
      m_9803_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_9803_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.order_id = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("order_id")) throw $util.ProtocolError("missing required 'order_id'", {
          instance: message
        });
        return message;
      };
      return m_9803_toc;
    }();
    $root.m_9804_tos = function() {
      function m_9804_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_9804_tos.prototype.order_id = "";
      m_9804_tos.prototype.sms_code = "";
      m_9804_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.order_id);
        writer.uint32(18).string(message.sms_code);
        return writer;
      };
      m_9804_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_9804_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.order_id = reader.string();
            break;

           case 2:
            message.sms_code = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("order_id")) throw $util.ProtocolError("missing required 'order_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("sms_code")) throw $util.ProtocolError("missing required 'sms_code'", {
          instance: message
        });
        return message;
      };
      return m_9804_tos;
    }();
    $root.m_9805_tos = function() {
      function m_9805_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_9805_tos.prototype.card_no = "";
      m_9805_tos.prototype.sms_code = "";
      m_9805_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.card_no);
        writer.uint32(18).string(message.sms_code);
        return writer;
      };
      m_9805_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_9805_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.card_no = reader.string();
            break;

           case 2:
            message.sms_code = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("card_no")) throw $util.ProtocolError("missing required 'card_no'", {
          instance: message
        });
        if (!message.hasOwnProperty("sms_code")) throw $util.ProtocolError("missing required 'sms_code'", {
          instance: message
        });
        return message;
      };
      return m_9805_tos;
    }();
    $root.m_1301_toc = function() {
      function m_1301_toc(properties) {
        this.bet_val = [];
        this.win = [];
        this.players = [];
        this.bets = [];
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1301_toc.prototype.bet_val = $util.emptyArray;
      m_1301_toc.prototype.odds = null;
      m_1301_toc.prototype.time = 0;
      m_1301_toc.prototype.state = 1;
      m_1301_toc.prototype.last_result = null;
      m_1301_toc.prototype.win = $util.emptyArray;
      m_1301_toc.prototype.result = null;
      m_1301_toc.prototype.players = $util.emptyArray;
      m_1301_toc.prototype.bet_time = 0;
      m_1301_toc.prototype.bets = $util.emptyArray;
      m_1301_toc.prototype.list = $util.emptyArray;
      m_1301_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.bet_val && message.bet_val.length) for (var i = 0; i < message.bet_val.length; ++i) writer.uint32(8).uint32(message.bet_val[i]);
        $root.p_farm_odds.encode(message.odds, writer.uint32(18).fork()).ldelim();
        writer.uint32(24).uint32(message.time);
        writer.uint32(32).int32(message.state);
        null != message.last_result && message.hasOwnProperty("last_result") && $root.p_farm_result.encode(message.last_result, writer.uint32(42).fork()).ldelim();
        if (null != message.win && message.win.length) for (var i = 0; i < message.win.length; ++i) $root.p_farm_win.encode(message.win[i], writer.uint32(50).fork()).ldelim();
        null != message.result && message.hasOwnProperty("result") && $root.p_farm_result.encode(message.result, writer.uint32(58).fork()).ldelim();
        if (null != message.players && message.players.length) for (var i = 0; i < message.players.length; ++i) $root.p_farm_player.encode(message.players[i], writer.uint32(66).fork()).ldelim();
        writer.uint32(72).uint32(message.bet_time);
        if (null != message.bets && message.bets.length) for (var i = 0; i < message.bets.length; ++i) $root.p_farm_bet.encode(message.bets[i], writer.uint32(82).fork()).ldelim();
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) writer.uint32(88).int32(message.list[i]);
        return writer;
      };
      m_1301_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1301_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet_val && message.bet_val.length || (message.bet_val = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.bet_val.push(reader.uint32());
            } else message.bet_val.push(reader.uint32());
            break;

           case 2:
            message.odds = $root.p_farm_odds.decode(reader, reader.uint32());
            break;

           case 3:
            message.time = reader.uint32();
            break;

           case 4:
            message.state = reader.int32();
            break;

           case 5:
            message.last_result = $root.p_farm_result.decode(reader, reader.uint32());
            break;

           case 6:
            message.win && message.win.length || (message.win = []);
            message.win.push($root.p_farm_win.decode(reader, reader.uint32()));
            break;

           case 7:
            message.result = $root.p_farm_result.decode(reader, reader.uint32());
            break;

           case 8:
            message.players && message.players.length || (message.players = []);
            message.players.push($root.p_farm_player.decode(reader, reader.uint32()));
            break;

           case 9:
            message.bet_time = reader.uint32();
            break;

           case 10:
            message.bets && message.bets.length || (message.bets = []);
            message.bets.push($root.p_farm_bet.decode(reader, reader.uint32()));
            break;

           case 11:
            message.list && message.list.length || (message.list = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.list.push(reader.int32());
            } else message.list.push(reader.int32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("odds")) throw $util.ProtocolError("missing required 'odds'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_time")) throw $util.ProtocolError("missing required 'bet_time'", {
          instance: message
        });
        return message;
      };
      return m_1301_toc;
    }();
    $root.p_farm_odds = function() {
      function p_farm_odds(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_farm_odds.prototype.twelve = 0;
      p_farm_odds.prototype.four = 0;
      p_farm_odds.prototype.two = 0;
      p_farm_odds.prototype.one = 0;
      p_farm_odds.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.twelve);
        writer.uint32(16).uint32(message.four);
        writer.uint32(24).uint32(message.two);
        writer.uint32(32).uint32(message.one);
        return writer;
      };
      p_farm_odds.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_farm_odds();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.twelve = reader.uint32();
            break;

           case 2:
            message.four = reader.uint32();
            break;

           case 3:
            message.two = reader.uint32();
            break;

           case 4:
            message.one = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("twelve")) throw $util.ProtocolError("missing required 'twelve'", {
          instance: message
        });
        if (!message.hasOwnProperty("four")) throw $util.ProtocolError("missing required 'four'", {
          instance: message
        });
        if (!message.hasOwnProperty("two")) throw $util.ProtocolError("missing required 'two'", {
          instance: message
        });
        if (!message.hasOwnProperty("one")) throw $util.ProtocolError("missing required 'one'", {
          instance: message
        });
        return message;
      };
      return p_farm_odds;
    }();
    $root.p_farm_result = function() {
      function p_farm_result(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_farm_result.prototype.id = 0;
      p_farm_result.prototype.result = 1;
      p_farm_result.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).int32(message.result);
        return writer;
      };
      p_farm_result.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_farm_result();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.result = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("result")) throw $util.ProtocolError("missing required 'result'", {
          instance: message
        });
        return message;
      };
      return p_farm_result;
    }();
    $root.p_farm_win = function() {
      function p_farm_win(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_farm_win.prototype.role_id = 0;
      p_farm_win.prototype.val = 0;
      p_farm_win.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      p_farm_win.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_farm_win();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return p_farm_win;
    }();
    $root.p_farm_player = function() {
      function p_farm_player(properties) {
        this.bets = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_farm_player.prototype.role_id = 0;
      p_farm_player.prototype.icon = "";
      p_farm_player.prototype.name = "";
      p_farm_player.prototype.bets = $util.emptyArray;
      p_farm_player.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        writer.uint32(18).string(message.icon);
        writer.uint32(26).string(message.name);
        if (null != message.bets && message.bets.length) for (var i = 0; i < message.bets.length; ++i) $root.p_farm_bet.encode(message.bets[i], writer.uint32(34).fork()).ldelim();
        return writer;
      };
      p_farm_player.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_farm_player();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.icon = reader.string();
            break;

           case 3:
            message.name = reader.string();
            break;

           case 4:
            message.bets && message.bets.length || (message.bets = []);
            message.bets.push($root.p_farm_bet.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("icon")) throw $util.ProtocolError("missing required 'icon'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        return message;
      };
      return p_farm_player;
    }();
    $root.e_farm = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "pig"] = 1;
      values[valuesById[2] = "cow"] = 2;
      values[valuesById[3] = "hen"] = 3;
      values[valuesById[4] = "fish"] = 4;
      values[valuesById[5] = "shrimp"] = 5;
      values[valuesById[6] = "crab"] = 6;
      values[valuesById[7] = "wheat"] = 7;
      values[valuesById[8] = "rice"] = 8;
      values[valuesById[9] = "maize"] = 9;
      values[valuesById[10] = "greens"] = 10;
      values[valuesById[11] = "pea"] = 11;
      values[valuesById[12] = "onion"] = 12;
      values[valuesById[13] = "livestock"] = 13;
      values[valuesById[14] = "aquatic"] = 14;
      values[valuesById[15] = "food"] = 15;
      values[valuesById[16] = "vegetables"] = 16;
      values[valuesById[17] = "culture"] = 17;
      values[valuesById[18] = "planting"] = 18;
      values[valuesById[19] = "disaster"] = 19;
      return values;
    }();
    $root.m_1303_tos = function() {
      function m_1303_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1303_tos.prototype.bet = 1;
      m_1303_tos.prototype.val = 0;
      m_1303_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.bet);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      m_1303_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1303_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet = reader.int32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return m_1303_tos;
    }();
    $root.m_1303_toc = function() {
      function m_1303_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1303_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1303_toc.prototype.try_gold = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1303_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        null != message.try_gold && message.hasOwnProperty("try_gold") && writer.uint32(16).uint64(message.try_gold);
        return writer;
      };
      m_1303_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1303_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           case 2:
            message.try_gold = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_1303_toc;
    }();
    $root.p_farm_bet = function() {
      function p_farm_bet(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_farm_bet.prototype.bet = 1;
      p_farm_bet.prototype.val = 0;
      p_farm_bet.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.bet);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      p_farm_bet.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_farm_bet();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet = reader.int32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return p_farm_bet;
    }();
    $root.m_1304_toc = function() {
      function m_1304_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1304_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1304_toc.prototype.try_gold = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1304_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        null != message.try_gold && message.hasOwnProperty("try_gold") && writer.uint32(16).uint64(message.try_gold);
        return writer;
      };
      m_1304_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1304_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           case 2:
            message.try_gold = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_1304_toc;
    }();
    $root.m_1306_toc = function() {
      function m_1306_toc(properties) {
        this.result = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1306_toc.prototype.result = $util.emptyArray;
      m_1306_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.result && message.result.length) for (var i = 0; i < message.result.length; ++i) $root.p_farm_result.encode(message.result[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1306_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1306_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.result && message.result.length || (message.result = []);
            message.result.push($root.p_farm_result.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1306_toc;
    }();
    $root.p_farm_log = function() {
      function p_farm_log(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_farm_log.prototype.role_id = 0;
      p_farm_log.prototype.result = null;
      p_farm_log.prototype.info = $util.emptyArray;
      p_farm_log.prototype.time = 0;
      p_farm_log.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        $root.p_farm_result.encode(message.result, writer.uint32(18).fork()).ldelim();
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_farm_one.encode(message.info[i], writer.uint32(26).fork()).ldelim();
        writer.uint32(32).uint32(message.time);
        return writer;
      };
      p_farm_log.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_farm_log();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.result = $root.p_farm_result.decode(reader, reader.uint32());
            break;

           case 3:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_farm_one.decode(reader, reader.uint32()));
            break;

           case 4:
            message.time = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("result")) throw $util.ProtocolError("missing required 'result'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return p_farm_log;
    }();
    $root.p_farm_one = function() {
      function p_farm_one(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_farm_one.prototype.bet = 1;
      p_farm_one.prototype.bet_val = 0;
      p_farm_one.prototype.win = 0;
      p_farm_one.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.bet);
        writer.uint32(16).uint32(message.bet_val);
        writer.uint32(24).uint32(message.win);
        return writer;
      };
      p_farm_one.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_farm_one();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet = reader.int32();
            break;

           case 2:
            message.bet_val = reader.uint32();
            break;

           case 3:
            message.win = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_val")) throw $util.ProtocolError("missing required 'bet_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        return message;
      };
      return p_farm_one;
    }();
    $root.m_1308_toc = function() {
      function m_1308_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1308_toc.prototype.balance = 0;
      m_1308_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.balance);
        return writer;
      };
      m_1308_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1308_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_1308_toc;
    }();
    $root.m_1309_tos = function() {
      function m_1309_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1309_tos.prototype.type = 1;
      m_1309_tos.prototype.bet = 1;
      m_1309_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.type);
        writer.uint32(16).int32(message.bet);
        return writer;
      };
      m_1309_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1309_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           case 2:
            message.bet = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        return message;
      };
      return m_1309_tos;
    }();
    $root.m_1309_toc = function() {
      function m_1309_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1309_toc.prototype.info = null;
      m_1309_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_farm_growth.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1309_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1309_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_farm_growth.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_1309_toc;
    }();
    $root.e_speed = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "speed_one"] = 1;
      values[valuesById[2] = "speed_all"] = 2;
      return values;
    }();
    $root.p_farm_growth = function() {
      function p_farm_growth(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_farm_growth.prototype.bet = 1;
      p_farm_growth.prototype.days = 0;
      p_farm_growth.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.bet);
        writer.uint32(16).uint32(message.days);
        return writer;
      };
      p_farm_growth.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_farm_growth();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet = reader.int32();
            break;

           case 2:
            message.days = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        if (!message.hasOwnProperty("days")) throw $util.ProtocolError("missing required 'days'", {
          instance: message
        });
        return message;
      };
      return p_farm_growth;
    }();
    $root.m_1310_toc = function() {
      function m_1310_toc(properties) {
        this.bets = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1310_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1310_toc.prototype.bets = $util.emptyArray;
      m_1310_toc.prototype.try_gold = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1310_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        if (null != message.bets && message.bets.length) for (var i = 0; i < message.bets.length; ++i) $root.p_farm_bet.encode(message.bets[i], writer.uint32(18).fork()).ldelim();
        null != message.try_gold && message.hasOwnProperty("try_gold") && writer.uint32(24).uint64(message.try_gold);
        return writer;
      };
      m_1310_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1310_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           case 2:
            message.bets && message.bets.length || (message.bets = []);
            message.bets.push($root.p_farm_bet.decode(reader, reader.uint32()));
            break;

           case 3:
            message.try_gold = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_1310_toc;
    }();
    $root.m_1311_tos = function() {
      function m_1311_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1311_tos.prototype.id = 0;
      m_1311_tos.prototype.amount = 0;
      m_1311_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.amount);
        return writer;
      };
      m_1311_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1311_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.amount = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("amount")) throw $util.ProtocolError("missing required 'amount'", {
          instance: message
        });
        return message;
      };
      return m_1311_tos;
    }();
    $root.m_1311_toc = function() {
      function m_1311_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1311_toc.prototype.info = $util.emptyArray;
      m_1311_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_player_farm.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1311_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1311_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_player_farm.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1311_toc;
    }();
    $root.p_player_farm = function() {
      function p_player_farm(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_player_farm.prototype.id = 0;
      p_player_farm.prototype.hand = 0;
      p_player_farm.prototype.time = 0;
      p_player_farm.prototype.bet_val = 0;
      p_player_farm.prototype.win = 0;
      p_player_farm.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.hand);
        writer.uint32(24).uint32(message.time);
        writer.uint32(32).uint32(message.bet_val);
        writer.uint32(40).uint32(message.win);
        return writer;
      };
      p_player_farm.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_player_farm();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.hand = reader.uint32();
            break;

           case 3:
            message.time = reader.uint32();
            break;

           case 4:
            message.bet_val = reader.uint32();
            break;

           case 5:
            message.win = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("hand")) throw $util.ProtocolError("missing required 'hand'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_val")) throw $util.ProtocolError("missing required 'bet_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        return message;
      };
      return p_player_farm;
    }();
    $root.m_1312_tos = function() {
      function m_1312_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1312_tos.prototype.id = 0;
      m_1312_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        return writer;
      };
      m_1312_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1312_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_1312_tos;
    }();
    $root.m_1312_toc = function() {
      function m_1312_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1312_toc.prototype.info = null;
      m_1312_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_farm_log.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1312_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1312_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_farm_log.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_1312_toc;
    }();
    $root.m_1313_toc = function() {
      function m_1313_toc(properties) {
        this.bet_val = [];
        this.win = [];
        this.players = [];
        this.bets = [];
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1313_toc.prototype.bet_val = $util.emptyArray;
      m_1313_toc.prototype.odds = null;
      m_1313_toc.prototype.time = 0;
      m_1313_toc.prototype.state = 1;
      m_1313_toc.prototype.last_result = null;
      m_1313_toc.prototype.win = $util.emptyArray;
      m_1313_toc.prototype.result = null;
      m_1313_toc.prototype.players = $util.emptyArray;
      m_1313_toc.prototype.bet_time = 0;
      m_1313_toc.prototype.bets = $util.emptyArray;
      m_1313_toc.prototype.try_gold = 0;
      m_1313_toc.prototype.list = $util.emptyArray;
      m_1313_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.bet_val && message.bet_val.length) for (var i = 0; i < message.bet_val.length; ++i) writer.uint32(8).uint32(message.bet_val[i]);
        $root.p_farm_odds.encode(message.odds, writer.uint32(18).fork()).ldelim();
        writer.uint32(24).uint32(message.time);
        writer.uint32(32).int32(message.state);
        null != message.last_result && message.hasOwnProperty("last_result") && $root.p_farm_result.encode(message.last_result, writer.uint32(42).fork()).ldelim();
        if (null != message.win && message.win.length) for (var i = 0; i < message.win.length; ++i) $root.p_farm_win.encode(message.win[i], writer.uint32(50).fork()).ldelim();
        null != message.result && message.hasOwnProperty("result") && $root.p_farm_result.encode(message.result, writer.uint32(58).fork()).ldelim();
        if (null != message.players && message.players.length) for (var i = 0; i < message.players.length; ++i) $root.p_farm_player.encode(message.players[i], writer.uint32(66).fork()).ldelim();
        writer.uint32(72).uint32(message.bet_time);
        if (null != message.bets && message.bets.length) for (var i = 0; i < message.bets.length; ++i) $root.p_farm_bet.encode(message.bets[i], writer.uint32(82).fork()).ldelim();
        writer.uint32(88).uint32(message.try_gold);
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) writer.uint32(96).int32(message.list[i]);
        return writer;
      };
      m_1313_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1313_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet_val && message.bet_val.length || (message.bet_val = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.bet_val.push(reader.uint32());
            } else message.bet_val.push(reader.uint32());
            break;

           case 2:
            message.odds = $root.p_farm_odds.decode(reader, reader.uint32());
            break;

           case 3:
            message.time = reader.uint32();
            break;

           case 4:
            message.state = reader.int32();
            break;

           case 5:
            message.last_result = $root.p_farm_result.decode(reader, reader.uint32());
            break;

           case 6:
            message.win && message.win.length || (message.win = []);
            message.win.push($root.p_farm_win.decode(reader, reader.uint32()));
            break;

           case 7:
            message.result = $root.p_farm_result.decode(reader, reader.uint32());
            break;

           case 8:
            message.players && message.players.length || (message.players = []);
            message.players.push($root.p_farm_player.decode(reader, reader.uint32()));
            break;

           case 9:
            message.bet_time = reader.uint32();
            break;

           case 10:
            message.bets && message.bets.length || (message.bets = []);
            message.bets.push($root.p_farm_bet.decode(reader, reader.uint32()));
            break;

           case 11:
            message.try_gold = reader.uint32();
            break;

           case 12:
            message.list && message.list.length || (message.list = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.list.push(reader.int32());
            } else message.list.push(reader.int32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("odds")) throw $util.ProtocolError("missing required 'odds'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_time")) throw $util.ProtocolError("missing required 'bet_time'", {
          instance: message
        });
        if (!message.hasOwnProperty("try_gold")) throw $util.ProtocolError("missing required 'try_gold'", {
          instance: message
        });
        return message;
      };
      return m_1313_toc;
    }();
    $root.m_1314_toc = function() {
      function m_1314_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1314_toc.prototype.info = null;
      m_1314_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_contact.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1314_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1314_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_contact.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_1314_toc;
    }();
    $root.m_1394_toc = function() {
      function m_1394_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1394_toc.prototype.role_id = 0;
      m_1394_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        return writer;
      };
      m_1394_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1394_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        return message;
      };
      return m_1394_toc;
    }();
    $root.m_1395_toc = function() {
      function m_1395_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1395_toc.prototype.player = null;
      m_1395_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_farm_player.encode(message.player, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1395_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1395_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.player = $root.p_farm_player.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("player")) throw $util.ProtocolError("missing required 'player'", {
          instance: message
        });
        return message;
      };
      return m_1395_toc;
    }();
    $root.m_1397_toc = function() {
      function m_1397_toc(properties) {
        this.bets = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1397_toc.prototype.time = 0;
      m_1397_toc.prototype.state = 1;
      m_1397_toc.prototype.bets = $util.emptyArray;
      m_1397_toc.prototype.missing = null;
      m_1397_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.time);
        writer.uint32(16).int32(message.state);
        if (null != message.bets && message.bets.length) for (var i = 0; i < message.bets.length; ++i) $root.p_farm_bet.encode(message.bets[i], writer.uint32(26).fork()).ldelim();
        null != message.missing && message.hasOwnProperty("missing") && $root.p_missing_farm.encode(message.missing, writer.uint32(34).fork()).ldelim();
        return writer;
      };
      m_1397_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1397_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.time = reader.uint32();
            break;

           case 2:
            message.state = reader.int32();
            break;

           case 3:
            message.bets && message.bets.length || (message.bets = []);
            message.bets.push($root.p_farm_bet.decode(reader, reader.uint32()));
            break;

           case 4:
            message.missing = $root.p_missing_farm.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        return message;
      };
      return m_1397_toc;
    }();
    $root.p_missing_farm = function() {
      function p_missing_farm(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_missing_farm.prototype.bet = 1;
      p_missing_farm.prototype.missing = 0;
      p_missing_farm.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.bet);
        writer.uint32(16).uint32(message.missing);
        return writer;
      };
      p_missing_farm.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_missing_farm();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet = reader.int32();
            break;

           case 2:
            message.missing = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        if (!message.hasOwnProperty("missing")) throw $util.ProtocolError("missing required 'missing'", {
          instance: message
        });
        return message;
      };
      return p_missing_farm;
    }();
    $root.m_1398_toc = function() {
      function m_1398_toc(properties) {
        this.win = [];
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1398_toc.prototype.result = null;
      m_1398_toc.prototype.win = $util.emptyArray;
      m_1398_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1398_toc.prototype.time = 0;
      m_1398_toc.prototype.try_gold = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1398_toc.prototype.list = $util.emptyArray;
      m_1398_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_farm_result.encode(message.result, writer.uint32(10).fork()).ldelim();
        if (null != message.win && message.win.length) for (var i = 0; i < message.win.length; ++i) $root.p_farm_win.encode(message.win[i], writer.uint32(18).fork()).ldelim();
        writer.uint32(24).uint64(message.balance);
        writer.uint32(32).uint32(message.time);
        null != message.try_gold && message.hasOwnProperty("try_gold") && writer.uint32(40).uint64(message.try_gold);
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) writer.uint32(48).int32(message.list[i]);
        return writer;
      };
      m_1398_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1398_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.result = $root.p_farm_result.decode(reader, reader.uint32());
            break;

           case 2:
            message.win && message.win.length || (message.win = []);
            message.win.push($root.p_farm_win.decode(reader, reader.uint32()));
            break;

           case 3:
            message.balance = reader.uint64();
            break;

           case 4:
            message.time = reader.uint32();
            break;

           case 5:
            message.try_gold = reader.uint64();
            break;

           case 6:
            message.list && message.list.length || (message.list = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.list.push(reader.int32());
            } else message.list.push(reader.int32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("result")) throw $util.ProtocolError("missing required 'result'", {
          instance: message
        });
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return m_1398_toc;
    }();
    $root.m_1399_toc = function() {
      function m_1399_toc(properties) {
        this.bets = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1399_toc.prototype.bets = $util.emptyArray;
      m_1399_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.bets && message.bets.length) for (var i = 0; i < message.bets.length; ++i) $root.p_farm_bets.encode(message.bets[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1399_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1399_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bets && message.bets.length || (message.bets = []);
            message.bets.push($root.p_farm_bets.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1399_toc;
    }();
    $root.p_farm_bets = function() {
      function p_farm_bets(properties) {
        this.bet = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_farm_bets.prototype.role_id = 0;
      p_farm_bets.prototype.bet = $util.emptyArray;
      p_farm_bets.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        if (null != message.bet && message.bet.length) for (var i = 0; i < message.bet.length; ++i) $root.p_farm_bet.encode(message.bet[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      p_farm_bets.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_farm_bets();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.bet && message.bet.length || (message.bet = []);
            message.bet.push($root.p_farm_bet.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        return message;
      };
      return p_farm_bets;
    }();
    $root.m_1501_toc = function() {
      function m_1501_toc(properties) {
        this.bet_val = [];
        this.lucky = [];
        this.odds = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1501_toc.prototype.bet_val = $util.emptyArray;
      m_1501_toc.prototype.lucky = $util.emptyArray;
      m_1501_toc.prototype.odds = $util.emptyArray;
      m_1501_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.bet_val && message.bet_val.length) for (var i = 0; i < message.bet_val.length; ++i) writer.uint32(8).uint32(message.bet_val[i]);
        if (null != message.lucky && message.lucky.length) for (var i = 0; i < message.lucky.length; ++i) writer.uint32(16).uint32(message.lucky[i]);
        if (null != message.odds && message.odds.length) for (var i = 0; i < message.odds.length; ++i) writer.uint32(24).uint32(message.odds[i]);
        return writer;
      };
      m_1501_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1501_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet_val && message.bet_val.length || (message.bet_val = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.bet_val.push(reader.uint32());
            } else message.bet_val.push(reader.uint32());
            break;

           case 2:
            message.lucky && message.lucky.length || (message.lucky = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.lucky.push(reader.uint32());
            } else message.lucky.push(reader.uint32());
            break;

           case 3:
            message.odds && message.odds.length || (message.odds = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.odds.push(reader.uint32());
            } else message.odds.push(reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1501_toc;
    }();
    $root.m_1502_tos = function() {
      function m_1502_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1502_tos.prototype.val = 0;
      m_1502_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.val);
        return writer;
      };
      m_1502_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1502_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return m_1502_tos;
    }();
    $root.m_1502_toc = function() {
      function m_1502_toc(properties) {
        this.fish = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1502_toc.prototype.fish = $util.emptyArray;
      m_1502_toc.prototype.win = 0;
      m_1502_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1502_toc.prototype.state = false;
      m_1502_toc.prototype.number = 0;
      m_1502_toc.prototype.double_state = false;
      m_1502_toc.prototype.luck_val = 0;
      m_1502_toc.prototype.boom_state = false;
      m_1502_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.fish && message.fish.length) for (var i = 0; i < message.fish.length; ++i) $root.p_fish_bet.encode(message.fish[i], writer.uint32(10).fork()).ldelim();
        writer.uint32(16).uint32(message.win);
        writer.uint32(24).uint64(message.balance);
        writer.uint32(32).bool(message.state);
        writer.uint32(40).uint32(message.number);
        writer.uint32(48).bool(message.double_state);
        writer.uint32(56).uint32(message.luck_val);
        writer.uint32(64).bool(message.boom_state);
        return writer;
      };
      m_1502_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1502_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.fish && message.fish.length || (message.fish = []);
            message.fish.push($root.p_fish_bet.decode(reader, reader.uint32()));
            break;

           case 2:
            message.win = reader.uint32();
            break;

           case 3:
            message.balance = reader.uint64();
            break;

           case 4:
            message.state = reader.bool();
            break;

           case 5:
            message.number = reader.uint32();
            break;

           case 6:
            message.double_state = reader.bool();
            break;

           case 7:
            message.luck_val = reader.uint32();
            break;

           case 8:
            message.boom_state = reader.bool();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        if (!message.hasOwnProperty("number")) throw $util.ProtocolError("missing required 'number'", {
          instance: message
        });
        if (!message.hasOwnProperty("double_state")) throw $util.ProtocolError("missing required 'double_state'", {
          instance: message
        });
        if (!message.hasOwnProperty("luck_val")) throw $util.ProtocolError("missing required 'luck_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("boom_state")) throw $util.ProtocolError("missing required 'boom_state'", {
          instance: message
        });
        return message;
      };
      return m_1502_toc;
    }();
    $root.p_fish_bet = function() {
      function p_fish_bet(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_fish_bet.prototype.bet = 1;
      p_fish_bet.prototype.val = 0;
      p_fish_bet.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.bet);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      p_fish_bet.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_fish_bet();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet = reader.int32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return p_fish_bet;
    }();
    $root.e_fish = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "fish1"] = 1;
      values[valuesById[2] = "fish2"] = 2;
      values[valuesById[3] = "fish3"] = 3;
      values[valuesById[4] = "fish4"] = 4;
      values[valuesById[5] = "fish5"] = 5;
      values[valuesById[6] = "fish6"] = 6;
      values[valuesById[7] = "fish12"] = 7;
      values[valuesById[8] = "fish24"] = 8;
      values[valuesById[9] = "fish36"] = 9;
      values[valuesById[10] = "fish48"] = 10;
      return values;
    }();
    $root.m_1503_tos = function() {
      function m_1503_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1503_tos.prototype.bet = 1;
      m_1503_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.bet);
        return writer;
      };
      m_1503_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1503_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        return message;
      };
      return m_1503_tos;
    }();
    $root.m_1503_toc = function() {
      function m_1503_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1503_toc.prototype.number = 0;
      m_1503_toc.prototype.win = 0;
      m_1503_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1503_toc.prototype.state = false;
      m_1503_toc.prototype.new_number = 0;
      m_1503_toc.prototype.star = 0;
      m_1503_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.number);
        writer.uint32(16).uint32(message.win);
        writer.uint32(24).uint64(message.balance);
        writer.uint32(32).bool(message.state);
        writer.uint32(40).uint32(message.new_number);
        writer.uint32(48).uint32(message.star);
        return writer;
      };
      m_1503_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1503_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.number = reader.uint32();
            break;

           case 2:
            message.win = reader.uint32();
            break;

           case 3:
            message.balance = reader.uint64();
            break;

           case 4:
            message.state = reader.bool();
            break;

           case 5:
            message.new_number = reader.uint32();
            break;

           case 6:
            message.star = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("number")) throw $util.ProtocolError("missing required 'number'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        if (!message.hasOwnProperty("new_number")) throw $util.ProtocolError("missing required 'new_number'", {
          instance: message
        });
        if (!message.hasOwnProperty("star")) throw $util.ProtocolError("missing required 'star'", {
          instance: message
        });
        return message;
      };
      return m_1503_toc;
    }();
    $root.e_bs = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "big"] = 1;
      values[valuesById[2] = "small"] = 2;
      return values;
    }();
    $root.m_1504_tos = function() {
      function m_1504_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1504_tos.prototype.id = 0;
      m_1504_tos.prototype.amount = 0;
      m_1504_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.amount);
        return writer;
      };
      m_1504_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1504_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.amount = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("amount")) throw $util.ProtocolError("missing required 'amount'", {
          instance: message
        });
        return message;
      };
      return m_1504_tos;
    }();
    $root.m_1504_toc = function() {
      function m_1504_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1504_toc.prototype.info = $util.emptyArray;
      m_1504_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_fish_log.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1504_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1504_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_fish_log.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1504_toc;
    }();
    $root.p_fish_log = function() {
      function p_fish_log(properties) {
        this.fish = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_fish_log.prototype.id = 0;
      p_fish_log.prototype.fish = $util.emptyArray;
      p_fish_log.prototype.bet_val = 0;
      p_fish_log.prototype.win = 0;
      p_fish_log.prototype.time = 0;
      p_fish_log.prototype.type = 1;
      p_fish_log.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        if (null != message.fish && message.fish.length) for (var i = 0; i < message.fish.length; ++i) $root.p_fish_bet.encode(message.fish[i], writer.uint32(18).fork()).ldelim();
        writer.uint32(24).uint32(message.bet_val);
        writer.uint32(32).uint32(message.win);
        writer.uint32(40).uint32(message.time);
        writer.uint32(48).int32(message.type);
        return writer;
      };
      p_fish_log.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_fish_log();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.fish && message.fish.length || (message.fish = []);
            message.fish.push($root.p_fish_bet.decode(reader, reader.uint32()));
            break;

           case 3:
            message.bet_val = reader.uint32();
            break;

           case 4:
            message.win = reader.uint32();
            break;

           case 5:
            message.time = reader.uint32();
            break;

           case 6:
            message.type = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_val")) throw $util.ProtocolError("missing required 'bet_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return p_fish_log;
    }();
    $root.e_fish_type = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "fish"] = 1;
      values[valuesById[2] = "bs"] = 2;
      return values;
    }();
    $root.m_1505_toc = function() {
      function m_1505_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1505_toc.prototype.bet_val = 0;
      m_1505_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1505_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.bet_val);
        writer.uint32(16).uint64(message.balance);
        return writer;
      };
      m_1505_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1505_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet_val = reader.uint32();
            break;

           case 2:
            message.balance = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet_val")) throw $util.ProtocolError("missing required 'bet_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_1505_toc;
    }();
    $root.m_1506_toc = function() {
      function m_1506_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1506_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1506_toc.prototype.win = 0;
      m_1506_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        writer.uint32(16).uint32(message.win);
        return writer;
      };
      m_1506_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1506_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           case 2:
            message.win = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        return message;
      };
      return m_1506_toc;
    }();
    $root.m_1507_toc = function() {
      function m_1507_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1507_toc.prototype.info = $util.emptyArray;
      m_1507_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_fish_reward.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1507_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1507_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_fish_reward.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1507_toc;
    }();
    $root.p_fish_reward = function() {
      function p_fish_reward(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_fish_reward.prototype.id = 0;
      p_fish_reward.prototype.type = 1;
      p_fish_reward.prototype.fish = 0;
      p_fish_reward.prototype.bs = 0;
      p_fish_reward.prototype.bet_val = 0;
      p_fish_reward.prototype.win = 0;
      p_fish_reward.prototype.time = 0;
      p_fish_reward.prototype.name = "";
      p_fish_reward.prototype.icon = "";
      p_fish_reward.prototype.vip = 0;
      p_fish_reward.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).int32(message.type);
        writer.uint32(24).uint32(message.fish);
        writer.uint32(32).uint32(message.bs);
        writer.uint32(40).uint32(message.bet_val);
        writer.uint32(48).uint32(message.win);
        writer.uint32(56).uint32(message.time);
        writer.uint32(66).string(message.name);
        writer.uint32(74).string(message.icon);
        writer.uint32(80).uint32(message.vip);
        return writer;
      };
      p_fish_reward.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_fish_reward();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.type = reader.int32();
            break;

           case 3:
            message.fish = reader.uint32();
            break;

           case 4:
            message.bs = reader.uint32();
            break;

           case 5:
            message.bet_val = reader.uint32();
            break;

           case 6:
            message.win = reader.uint32();
            break;

           case 7:
            message.time = reader.uint32();
            break;

           case 8:
            message.name = reader.string();
            break;

           case 9:
            message.icon = reader.string();
            break;

           case 10:
            message.vip = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("fish")) throw $util.ProtocolError("missing required 'fish'", {
          instance: message
        });
        if (!message.hasOwnProperty("bs")) throw $util.ProtocolError("missing required 'bs'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_val")) throw $util.ProtocolError("missing required 'bet_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("icon")) throw $util.ProtocolError("missing required 'icon'", {
          instance: message
        });
        if (!message.hasOwnProperty("vip")) throw $util.ProtocolError("missing required 'vip'", {
          instance: message
        });
        return message;
      };
      return p_fish_reward;
    }();
    $root.m_1599_toc = function() {
      function m_1599_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1599_toc.prototype.content = "";
      m_1599_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.content);
        return writer;
      };
      m_1599_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1599_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.content = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("content")) throw $util.ProtocolError("missing required 'content'", {
          instance: message
        });
        return message;
      };
      return m_1599_toc;
    }();
    $root.m_3201_toc = function() {
      function m_3201_toc(properties) {
        this.bet_val = [];
        this.bets = [];
        this.self_bet = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3201_toc.prototype.bet_val = $util.emptyArray;
      m_3201_toc.prototype.time = 0;
      m_3201_toc.prototype.status = 1;
      m_3201_toc.prototype.bets = $util.emptyArray;
      m_3201_toc.prototype.self_bet = $util.emptyArray;
      m_3201_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.bet_val && message.bet_val.length) for (var i = 0; i < message.bet_val.length; ++i) writer.uint32(8).uint32(message.bet_val[i]);
        writer.uint32(16).uint32(message.time);
        writer.uint32(24).int32(message.status);
        if (null != message.bets && message.bets.length) for (var i = 0; i < message.bets.length; ++i) $root.p_fruit_bet.encode(message.bets[i], writer.uint32(34).fork()).ldelim();
        if (null != message.self_bet && message.self_bet.length) for (var i = 0; i < message.self_bet.length; ++i) $root.p_fruit_bet.encode(message.self_bet[i], writer.uint32(42).fork()).ldelim();
        return writer;
      };
      m_3201_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3201_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet_val && message.bet_val.length || (message.bet_val = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.bet_val.push(reader.uint32());
            } else message.bet_val.push(reader.uint32());
            break;

           case 2:
            message.time = reader.uint32();
            break;

           case 3:
            message.status = reader.int32();
            break;

           case 4:
            message.bets && message.bets.length || (message.bets = []);
            message.bets.push($root.p_fruit_bet.decode(reader, reader.uint32()));
            break;

           case 5:
            message.self_bet && message.self_bet.length || (message.self_bet = []);
            message.self_bet.push($root.p_fruit_bet.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("status")) throw $util.ProtocolError("missing required 'status'", {
          instance: message
        });
        return message;
      };
      return m_3201_toc;
    }();
    $root.m_3202_tos = function() {
      function m_3202_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3202_tos.prototype.item = 1;
      m_3202_tos.prototype.val = 0;
      m_3202_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.item);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      m_3202_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3202_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.item = reader.int32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("item")) throw $util.ProtocolError("missing required 'item'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return m_3202_tos;
    }();
    $root.m_3202_toc = function() {
      function m_3202_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3202_toc.prototype.balance = 0;
      m_3202_toc.prototype.item = 1;
      m_3202_toc.prototype.val = 0;
      m_3202_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.balance);
        writer.uint32(16).int32(message.item);
        writer.uint32(24).uint32(message.val);
        return writer;
      };
      m_3202_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3202_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint32();
            break;

           case 2:
            message.item = reader.int32();
            break;

           case 3:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        if (!message.hasOwnProperty("item")) throw $util.ProtocolError("missing required 'item'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return m_3202_toc;
    }();
    $root.m_3205_toc = function() {
      function m_3205_toc(properties) {
        this.draw = [];
        this.fruits = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3205_toc.prototype.type = 1;
      m_3205_toc.prototype.draw = $util.emptyArray;
      m_3205_toc.prototype.odd_light = 0;
      m_3205_toc.prototype.win_val = 0;
      m_3205_toc.prototype.balance = 0;
      m_3205_toc.prototype.wolf_pos = 0;
      m_3205_toc.prototype.bs = null;
      m_3205_toc.prototype.fruits = $util.emptyArray;
      m_3205_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.type);
        if (null != message.draw && message.draw.length) for (var i = 0; i < message.draw.length; ++i) $root.p_fruit_draw.encode(message.draw[i], writer.uint32(18).fork()).ldelim();
        writer.uint32(24).uint32(message.odd_light);
        writer.uint32(32).uint32(message.win_val);
        writer.uint32(40).uint32(message.balance);
        null != message.wolf_pos && message.hasOwnProperty("wolf_pos") && writer.uint32(48).uint32(message.wolf_pos);
        $root.p_bs_draw.encode(message.bs, writer.uint32(58).fork()).ldelim();
        if (null != message.fruits && message.fruits.length) for (var i = 0; i < message.fruits.length; ++i) $root.p_fruit_bet.encode(message.fruits[i], writer.uint32(66).fork()).ldelim();
        return writer;
      };
      m_3205_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3205_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           case 2:
            message.draw && message.draw.length || (message.draw = []);
            message.draw.push($root.p_fruit_draw.decode(reader, reader.uint32()));
            break;

           case 3:
            message.odd_light = reader.uint32();
            break;

           case 4:
            message.win_val = reader.uint32();
            break;

           case 5:
            message.balance = reader.uint32();
            break;

           case 6:
            message.wolf_pos = reader.uint32();
            break;

           case 7:
            message.bs = $root.p_bs_draw.decode(reader, reader.uint32());
            break;

           case 8:
            message.fruits && message.fruits.length || (message.fruits = []);
            message.fruits.push($root.p_fruit_bet.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("odd_light")) throw $util.ProtocolError("missing required 'odd_light'", {
          instance: message
        });
        if (!message.hasOwnProperty("win_val")) throw $util.ProtocolError("missing required 'win_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        if (!message.hasOwnProperty("bs")) throw $util.ProtocolError("missing required 'bs'", {
          instance: message
        });
        return message;
      };
      return m_3205_toc;
    }();
    $root.e_fruit_type = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "normal"] = 1;
      values[valuesById[2] = "wolf_gift"] = 2;
      values[valuesById[3] = "screen"] = 3;
      values[valuesById[4] = "bar_gift"] = 4;
      return values;
    }();
    $root.e_fruit = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "apple"] = 1;
      values[valuesById[2] = "orange"] = 2;
      values[valuesById[3] = "papaya"] = 3;
      values[valuesById[4] = "bell"] = 4;
      values[valuesById[5] = "watermelon"] = 5;
      values[valuesById[6] = "star"] = 6;
      values[valuesById[7] = "lucky"] = 7;
      values[valuesById[8] = "bar"] = 8;
      values[valuesById[9] = "wolf"] = 9;
      values[valuesById[10] = "big"] = 10;
      values[valuesById[11] = "small"] = 11;
      return values;
    }();
    $root.p_fruit_draw = function() {
      function p_fruit_draw(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_fruit_draw.prototype.item = 1;
      p_fruit_draw.prototype.pos = 0;
      p_fruit_draw.prototype.val = 0;
      p_fruit_draw.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.item);
        null != message.pos && message.hasOwnProperty("pos") && writer.uint32(16).uint32(message.pos);
        writer.uint32(24).uint32(message.val);
        return writer;
      };
      p_fruit_draw.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_fruit_draw();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.item = reader.int32();
            break;

           case 2:
            message.pos = reader.uint32();
            break;

           case 3:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("item")) throw $util.ProtocolError("missing required 'item'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return p_fruit_draw;
    }();
    $root.p_bs_draw = function() {
      function p_bs_draw(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_bs_draw.prototype.item = 1;
      p_bs_draw.prototype.point = 0;
      p_bs_draw.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.item);
        writer.uint32(16).uint32(message.point);
        return writer;
      };
      p_bs_draw.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_bs_draw();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.item = reader.int32();
            break;

           case 2:
            message.point = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("item")) throw $util.ProtocolError("missing required 'item'", {
          instance: message
        });
        if (!message.hasOwnProperty("point")) throw $util.ProtocolError("missing required 'point'", {
          instance: message
        });
        return message;
      };
      return p_bs_draw;
    }();
    $root.m_3208_toc = function() {
      function m_3208_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3208_toc.prototype.time = 0;
      m_3208_toc.prototype.state = 1;
      m_3208_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.time);
        writer.uint32(16).int32(message.state);
        return writer;
      };
      m_3208_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3208_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.time = reader.uint32();
            break;

           case 2:
            message.state = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        return message;
      };
      return m_3208_toc;
    }();
    $root.m_3209_tos = function() {
      function m_3209_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3209_tos.prototype.id = 0;
      m_3209_tos.prototype.amount = 0;
      m_3209_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.amount);
        return writer;
      };
      m_3209_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3209_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.amount = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("amount")) throw $util.ProtocolError("missing required 'amount'", {
          instance: message
        });
        return message;
      };
      return m_3209_tos;
    }();
    $root.m_3209_toc = function() {
      function m_3209_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3209_toc.prototype.info = $util.emptyArray;
      m_3209_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_fruit_log.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3209_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3209_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_fruit_log.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3209_toc;
    }();
    $root.p_fruit_log = function() {
      function p_fruit_log(properties) {
        this.fruit_bets = [];
        this.draw = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_fruit_log.prototype.id = 0;
      p_fruit_log.prototype.fruit_bets = $util.emptyArray;
      p_fruit_log.prototype.time = 0;
      p_fruit_log.prototype.bet_val = 0;
      p_fruit_log.prototype.win_val = 0;
      p_fruit_log.prototype.type = 1;
      p_fruit_log.prototype.draw = $util.emptyArray;
      p_fruit_log.prototype.odd_light = 0;
      p_fruit_log.prototype.bs = null;
      p_fruit_log.prototype.num = 0;
      p_fruit_log.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        if (null != message.fruit_bets && message.fruit_bets.length) for (var i = 0; i < message.fruit_bets.length; ++i) $root.p_fruit_bet.encode(message.fruit_bets[i], writer.uint32(18).fork()).ldelim();
        writer.uint32(32).uint32(message.time);
        writer.uint32(40).uint32(message.bet_val);
        writer.uint32(48).uint32(message.win_val);
        writer.uint32(56).int32(message.type);
        if (null != message.draw && message.draw.length) for (var i = 0; i < message.draw.length; ++i) $root.p_fruit_draw.encode(message.draw[i], writer.uint32(66).fork()).ldelim();
        writer.uint32(72).uint32(message.odd_light);
        $root.p_bs_draw.encode(message.bs, writer.uint32(82).fork()).ldelim();
        writer.uint32(88).uint32(message.num);
        return writer;
      };
      p_fruit_log.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_fruit_log();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.fruit_bets && message.fruit_bets.length || (message.fruit_bets = []);
            message.fruit_bets.push($root.p_fruit_bet.decode(reader, reader.uint32()));
            break;

           case 4:
            message.time = reader.uint32();
            break;

           case 5:
            message.bet_val = reader.uint32();
            break;

           case 6:
            message.win_val = reader.uint32();
            break;

           case 7:
            message.type = reader.int32();
            break;

           case 8:
            message.draw && message.draw.length || (message.draw = []);
            message.draw.push($root.p_fruit_draw.decode(reader, reader.uint32()));
            break;

           case 9:
            message.odd_light = reader.uint32();
            break;

           case 10:
            message.bs = $root.p_bs_draw.decode(reader, reader.uint32());
            break;

           case 11:
            message.num = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_val")) throw $util.ProtocolError("missing required 'bet_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("win_val")) throw $util.ProtocolError("missing required 'win_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("odd_light")) throw $util.ProtocolError("missing required 'odd_light'", {
          instance: message
        });
        if (!message.hasOwnProperty("bs")) throw $util.ProtocolError("missing required 'bs'", {
          instance: message
        });
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        return message;
      };
      return p_fruit_log;
    }();
    $root.m_3210_toc = function() {
      function m_3210_toc(properties) {
        this.bets = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3210_toc.prototype.balance = 0;
      m_3210_toc.prototype.bets = $util.emptyArray;
      m_3210_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.balance);
        if (null != message.bets && message.bets.length) for (var i = 0; i < message.bets.length; ++i) $root.p_fruit_bet.encode(message.bets[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      m_3210_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3210_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint32();
            break;

           case 2:
            message.bets && message.bets.length || (message.bets = []);
            message.bets.push($root.p_fruit_bet.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_3210_toc;
    }();
    $root.m_3211_toc = function() {
      function m_3211_toc(properties) {
        this.result = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3211_toc.prototype.result = $util.emptyArray;
      m_3211_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.result && message.result.length) for (var i = 0; i < message.result.length; ++i) $root.p_fruit_open.encode(message.result[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3211_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3211_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.result && message.result.length || (message.result = []);
            message.result.push($root.p_fruit_open.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3211_toc;
    }();
    $root.p_fruit_open = function() {
      function p_fruit_open(properties) {
        this.draw = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_fruit_open.prototype.id = 0;
      p_fruit_open.prototype.type = 1;
      p_fruit_open.prototype.draw = $util.emptyArray;
      p_fruit_open.prototype.odd_light = 0;
      p_fruit_open.prototype.wolf_pos = 0;
      p_fruit_open.prototype.bs = null;
      p_fruit_open.prototype.time = 0;
      p_fruit_open.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).int32(message.type);
        if (null != message.draw && message.draw.length) for (var i = 0; i < message.draw.length; ++i) $root.p_fruit_draw.encode(message.draw[i], writer.uint32(26).fork()).ldelim();
        writer.uint32(32).uint32(message.odd_light);
        null != message.wolf_pos && message.hasOwnProperty("wolf_pos") && writer.uint32(40).uint32(message.wolf_pos);
        $root.p_bs_draw.encode(message.bs, writer.uint32(50).fork()).ldelim();
        writer.uint32(56).uint32(message.time);
        return writer;
      };
      p_fruit_open.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_fruit_open();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.type = reader.int32();
            break;

           case 3:
            message.draw && message.draw.length || (message.draw = []);
            message.draw.push($root.p_fruit_draw.decode(reader, reader.uint32()));
            break;

           case 4:
            message.odd_light = reader.uint32();
            break;

           case 5:
            message.wolf_pos = reader.uint32();
            break;

           case 6:
            message.bs = $root.p_bs_draw.decode(reader, reader.uint32());
            break;

           case 7:
            message.time = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("odd_light")) throw $util.ProtocolError("missing required 'odd_light'", {
          instance: message
        });
        if (!message.hasOwnProperty("bs")) throw $util.ProtocolError("missing required 'bs'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return p_fruit_open;
    }();
    $root.m_3212_toc = function() {
      function m_3212_toc(properties) {
        this.bets = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3212_toc.prototype.bets = $util.emptyArray;
      m_3212_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.bets && message.bets.length) for (var i = 0; i < message.bets.length; ++i) $root.p_fruit_bet.encode(message.bets[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3212_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3212_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bets && message.bets.length || (message.bets = []);
            message.bets.push($root.p_fruit_bet.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3212_toc;
    }();
    $root.p_fruit_bet = function() {
      function p_fruit_bet(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_fruit_bet.prototype.item = 1;
      p_fruit_bet.prototype.val = 0;
      p_fruit_bet.prototype.win_val = 0;
      p_fruit_bet.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.item);
        writer.uint32(16).uint32(message.val);
        null != message.win_val && message.hasOwnProperty("win_val") && writer.uint32(24).uint32(message.win_val);
        return writer;
      };
      p_fruit_bet.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_fruit_bet();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.item = reader.int32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           case 3:
            message.win_val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("item")) throw $util.ProtocolError("missing required 'item'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return p_fruit_bet;
    }();
    $root.m_3213_toc = function() {
      function m_3213_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3213_toc.prototype.balance = 0;
      m_3213_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.balance);
        return writer;
      };
      m_3213_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3213_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_3213_toc;
    }();
    $root.m_3214_toc = function() {
      function m_3214_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3214_toc.prototype.content = "";
      m_3214_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.content);
        return writer;
      };
      m_3214_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3214_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.content = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("content")) throw $util.ProtocolError("missing required 'content'", {
          instance: message
        });
        return message;
      };
      return m_3214_toc;
    }();
    $root.m_1101_toc = function() {
      function m_1101_toc(properties) {
        this.bet_val = [];
        this.bets = [];
        this.players = [];
        this.win = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1101_toc.prototype.bet_name = null;
      m_1101_toc.prototype.bet_val = $util.emptyArray;
      m_1101_toc.prototype.extra_luck = null;
      m_1101_toc.prototype.odds = null;
      m_1101_toc.prototype.bets = $util.emptyArray;
      m_1101_toc.prototype.players = $util.emptyArray;
      m_1101_toc.prototype.time = 0;
      m_1101_toc.prototype.state = 1;
      m_1101_toc.prototype.last_result = null;
      m_1101_toc.prototype.win = $util.emptyArray;
      m_1101_toc.prototype.result = null;
      m_1101_toc.prototype.bet_time = 0;
      m_1101_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_bet_name.encode(message.bet_name, writer.uint32(10).fork()).ldelim();
        if (null != message.bet_val && message.bet_val.length) for (var i = 0; i < message.bet_val.length; ++i) writer.uint32(16).uint32(message.bet_val[i]);
        null != message.extra_luck && message.hasOwnProperty("extra_luck") && $root.p_extra_luck.encode(message.extra_luck, writer.uint32(26).fork()).ldelim();
        $root.p_luck_odds.encode(message.odds, writer.uint32(34).fork()).ldelim();
        if (null != message.bets && message.bets.length) for (var i = 0; i < message.bets.length; ++i) $root.p_luck_bet.encode(message.bets[i], writer.uint32(42).fork()).ldelim();
        if (null != message.players && message.players.length) for (var i = 0; i < message.players.length; ++i) $root.p_luck_player.encode(message.players[i], writer.uint32(58).fork()).ldelim();
        writer.uint32(64).uint32(message.time);
        writer.uint32(72).int32(message.state);
        null != message.last_result && message.hasOwnProperty("last_result") && $root.p_luck_result.encode(message.last_result, writer.uint32(82).fork()).ldelim();
        if (null != message.win && message.win.length) for (var i = 0; i < message.win.length; ++i) $root.p_luck_win.encode(message.win[i], writer.uint32(90).fork()).ldelim();
        null != message.result && message.hasOwnProperty("result") && $root.p_luck_result.encode(message.result, writer.uint32(98).fork()).ldelim();
        writer.uint32(104).uint32(message.bet_time);
        return writer;
      };
      m_1101_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1101_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet_name = $root.p_bet_name.decode(reader, reader.uint32());
            break;

           case 2:
            message.bet_val && message.bet_val.length || (message.bet_val = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.bet_val.push(reader.uint32());
            } else message.bet_val.push(reader.uint32());
            break;

           case 3:
            message.extra_luck = $root.p_extra_luck.decode(reader, reader.uint32());
            break;

           case 4:
            message.odds = $root.p_luck_odds.decode(reader, reader.uint32());
            break;

           case 5:
            message.bets && message.bets.length || (message.bets = []);
            message.bets.push($root.p_luck_bet.decode(reader, reader.uint32()));
            break;

           case 7:
            message.players && message.players.length || (message.players = []);
            message.players.push($root.p_luck_player.decode(reader, reader.uint32()));
            break;

           case 8:
            message.time = reader.uint32();
            break;

           case 9:
            message.state = reader.int32();
            break;

           case 10:
            message.last_result = $root.p_luck_result.decode(reader, reader.uint32());
            break;

           case 11:
            message.win && message.win.length || (message.win = []);
            message.win.push($root.p_luck_win.decode(reader, reader.uint32()));
            break;

           case 12:
            message.result = $root.p_luck_result.decode(reader, reader.uint32());
            break;

           case 13:
            message.bet_time = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet_name")) throw $util.ProtocolError("missing required 'bet_name'", {
          instance: message
        });
        if (!message.hasOwnProperty("odds")) throw $util.ProtocolError("missing required 'odds'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_time")) throw $util.ProtocolError("missing required 'bet_time'", {
          instance: message
        });
        return message;
      };
      return m_1101_toc;
    }();
    $root.p_bet_name = function() {
      function p_bet_name(properties) {
        this.small_name = [];
        this.big_name = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_bet_name.prototype.small_name = $util.emptyArray;
      p_bet_name.prototype.big_name = $util.emptyArray;
      p_bet_name.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.small_name && message.small_name.length) for (var i = 0; i < message.small_name.length; ++i) writer.uint32(8).int32(message.small_name[i]);
        if (null != message.big_name && message.big_name.length) for (var i = 0; i < message.big_name.length; ++i) writer.uint32(16).int32(message.big_name[i]);
        return writer;
      };
      p_bet_name.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_bet_name();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.small_name && message.small_name.length || (message.small_name = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.small_name.push(reader.int32());
            } else message.small_name.push(reader.int32());
            break;

           case 2:
            message.big_name && message.big_name.length || (message.big_name = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.big_name.push(reader.int32());
            } else message.big_name.push(reader.int32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return p_bet_name;
    }();
    $root.p_extra_luck = function() {
      function p_extra_luck(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_extra_luck.prototype.name = 1;
      p_extra_luck.prototype.val = 0;
      p_extra_luck.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.name);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      p_extra_luck.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_extra_luck();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.name = reader.int32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return p_extra_luck;
    }();
    $root.p_luck_odds = function() {
      function p_luck_odds(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_luck_odds.prototype.twelve = 0;
      p_luck_odds.prototype.five = 0;
      p_luck_odds.prototype.two = 0;
      p_luck_odds.prototype.small = 0;
      p_luck_odds.prototype.big = 0;
      p_luck_odds.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.twelve);
        writer.uint32(16).uint32(message.five);
        writer.uint32(24).uint32(message.two);
        writer.uint32(32).uint32(message.small);
        writer.uint32(40).uint32(message.big);
        return writer;
      };
      p_luck_odds.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_luck_odds();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.twelve = reader.uint32();
            break;

           case 2:
            message.five = reader.uint32();
            break;

           case 3:
            message.two = reader.uint32();
            break;

           case 4:
            message.small = reader.uint32();
            break;

           case 5:
            message.big = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("twelve")) throw $util.ProtocolError("missing required 'twelve'", {
          instance: message
        });
        if (!message.hasOwnProperty("five")) throw $util.ProtocolError("missing required 'five'", {
          instance: message
        });
        if (!message.hasOwnProperty("two")) throw $util.ProtocolError("missing required 'two'", {
          instance: message
        });
        if (!message.hasOwnProperty("small")) throw $util.ProtocolError("missing required 'small'", {
          instance: message
        });
        if (!message.hasOwnProperty("big")) throw $util.ProtocolError("missing required 'big'", {
          instance: message
        });
        return message;
      };
      return p_luck_odds;
    }();
    $root.p_luck_bet = function() {
      function p_luck_bet(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_luck_bet.prototype.bet = 1;
      p_luck_bet.prototype.val = 0;
      p_luck_bet.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.bet);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      p_luck_bet.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_luck_bet();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet = reader.int32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return p_luck_bet;
    }();
    $root.p_luck_player = function() {
      function p_luck_player(properties) {
        this.bets = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_luck_player.prototype.role_id = 0;
      p_luck_player.prototype.icon = "";
      p_luck_player.prototype.name = "";
      p_luck_player.prototype.bets = $util.emptyArray;
      p_luck_player.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        null != message.icon && message.hasOwnProperty("icon") && writer.uint32(18).string(message.icon);
        writer.uint32(26).string(message.name);
        if (null != message.bets && message.bets.length) for (var i = 0; i < message.bets.length; ++i) $root.p_luck_bet.encode(message.bets[i], writer.uint32(34).fork()).ldelim();
        return writer;
      };
      p_luck_player.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_luck_player();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.icon = reader.string();
            break;

           case 3:
            message.name = reader.string();
            break;

           case 4:
            message.bets && message.bets.length || (message.bets = []);
            message.bets.push($root.p_luck_bet.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        return message;
      };
      return p_luck_player;
    }();
    $root.p_luck_result = function() {
      function p_luck_result(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_luck_result.prototype.id = 0;
      p_luck_result.prototype.twelve = 1;
      p_luck_result.prototype.five = 1;
      p_luck_result.prototype.two = 1;
      p_luck_result.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).int32(message.twelve);
        writer.uint32(24).int32(message.five);
        writer.uint32(32).int32(message.two);
        return writer;
      };
      p_luck_result.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_luck_result();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.twelve = reader.int32();
            break;

           case 3:
            message.five = reader.int32();
            break;

           case 4:
            message.two = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("twelve")) throw $util.ProtocolError("missing required 'twelve'", {
          instance: message
        });
        if (!message.hasOwnProperty("five")) throw $util.ProtocolError("missing required 'five'", {
          instance: message
        });
        if (!message.hasOwnProperty("two")) throw $util.ProtocolError("missing required 'two'", {
          instance: message
        });
        return message;
      };
      return p_luck_result;
    }();
    $root.e_luck = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "rat"] = 1;
      values[valuesById[2] = "ox"] = 2;
      values[valuesById[3] = "tiger"] = 3;
      values[valuesById[4] = "rabbit"] = 4;
      values[valuesById[5] = "dragon"] = 5;
      values[valuesById[6] = "snake"] = 6;
      values[valuesById[7] = "horse"] = 7;
      values[valuesById[8] = "sheep"] = 8;
      values[valuesById[9] = "monkey"] = 9;
      values[valuesById[10] = "rooster"] = 10;
      values[valuesById[11] = "dog"] = 11;
      values[valuesById[12] = "pig"] = 12;
      values[valuesById[13] = "fortune"] = 13;
      values[valuesById[14] = "emolument"] = 14;
      values[valuesById[15] = "longevity"] = 15;
      values[valuesById[16] = "happiness"] = 16;
      values[valuesById[17] = "property"] = 17;
      values[valuesById[18] = "boy"] = 18;
      values[valuesById[19] = "girl"] = 19;
      values[valuesById[20] = "small_luck"] = 20;
      values[valuesById[21] = "big_luck"] = 21;
      return values;
    }();
    $root.e_luck_state = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "bet_state"] = 1;
      values[valuesById[2] = "open_state"] = 2;
      return values;
    }();
    $root.m_1103_tos = function() {
      function m_1103_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1103_tos.prototype.bet = 1;
      m_1103_tos.prototype.val = 0;
      m_1103_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.bet);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      m_1103_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1103_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet = reader.int32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return m_1103_tos;
    }();
    $root.m_1103_toc = function() {
      function m_1103_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1103_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1103_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        return writer;
      };
      m_1103_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1103_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_1103_toc;
    }();
    $root.m_1104_toc = function() {
      function m_1104_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1104_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1104_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        return writer;
      };
      m_1104_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1104_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_1104_toc;
    }();
    $root.m_1105_toc = function() {
      function m_1105_toc(properties) {
        this.result = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1105_toc.prototype.result = $util.emptyArray;
      m_1105_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.result && message.result.length) for (var i = 0; i < message.result.length; ++i) $root.p_luck_result.encode(message.result[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1105_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1105_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.result && message.result.length || (message.result = []);
            message.result.push($root.p_luck_result.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1105_toc;
    }();
    $root.m_1106_toc = function() {
      function m_1106_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1106_toc.prototype.info = $util.emptyArray;
      m_1106_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_missing_luck.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1106_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1106_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_missing_luck.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1106_toc;
    }();
    $root.p_missing_luck = function() {
      function p_missing_luck(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_missing_luck.prototype.bet = 1;
      p_missing_luck.prototype.missing = 0;
      p_missing_luck.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.bet);
        writer.uint32(16).uint32(message.missing);
        return writer;
      };
      p_missing_luck.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_missing_luck();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet = reader.int32();
            break;

           case 2:
            message.missing = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        if (!message.hasOwnProperty("missing")) throw $util.ProtocolError("missing required 'missing'", {
          instance: message
        });
        return message;
      };
      return p_missing_luck;
    }();
    $root.m_1107_tos = function() {
      function m_1107_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1107_tos.prototype.id = 0;
      m_1107_tos.prototype.amount = 0;
      m_1107_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.amount);
        return writer;
      };
      m_1107_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1107_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.amount = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("amount")) throw $util.ProtocolError("missing required 'amount'", {
          instance: message
        });
        return message;
      };
      return m_1107_tos;
    }();
    $root.m_1107_toc = function() {
      function m_1107_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1107_toc.prototype.info = $util.emptyArray;
      m_1107_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_player_luck.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1107_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1107_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_player_luck.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1107_toc;
    }();
    $root.p_player_luck = function() {
      function p_player_luck(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_player_luck.prototype.id = 0;
      p_player_luck.prototype.hand = 0;
      p_player_luck.prototype.time = 0;
      p_player_luck.prototype.bet_val = 0;
      p_player_luck.prototype.win = 0;
      p_player_luck.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.hand);
        writer.uint32(24).uint32(message.time);
        writer.uint32(32).uint32(message.bet_val);
        writer.uint32(40).uint32(message.win);
        return writer;
      };
      p_player_luck.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_player_luck();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.hand = reader.uint32();
            break;

           case 3:
            message.time = reader.uint32();
            break;

           case 4:
            message.bet_val = reader.uint32();
            break;

           case 5:
            message.win = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("hand")) throw $util.ProtocolError("missing required 'hand'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_val")) throw $util.ProtocolError("missing required 'bet_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        return message;
      };
      return p_player_luck;
    }();
    $root.m_1108_tos = function() {
      function m_1108_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1108_tos.prototype.id = 0;
      m_1108_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        return writer;
      };
      m_1108_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1108_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_1108_tos;
    }();
    $root.m_1108_toc = function() {
      function m_1108_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1108_toc.prototype.info = null;
      m_1108_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_luck_log.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1108_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1108_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_luck_log.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_1108_toc;
    }();
    $root.p_luck_log = function() {
      function p_luck_log(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_luck_log.prototype.role_id = 0;
      p_luck_log.prototype.result = null;
      p_luck_log.prototype.info = $util.emptyArray;
      p_luck_log.prototype.time = 0;
      p_luck_log.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        $root.p_luck_result.encode(message.result, writer.uint32(18).fork()).ldelim();
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_luck_one.encode(message.info[i], writer.uint32(26).fork()).ldelim();
        writer.uint32(32).uint32(message.time);
        return writer;
      };
      p_luck_log.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_luck_log();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.result = $root.p_luck_result.decode(reader, reader.uint32());
            break;

           case 3:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_luck_one.decode(reader, reader.uint32()));
            break;

           case 4:
            message.time = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("result")) throw $util.ProtocolError("missing required 'result'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return p_luck_log;
    }();
    $root.p_luck_one = function() {
      function p_luck_one(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_luck_one.prototype.bet = 1;
      p_luck_one.prototype.bet_val = 0;
      p_luck_one.prototype.win = 0;
      p_luck_one.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.bet);
        writer.uint32(16).uint32(message.bet_val);
        writer.uint32(24).uint32(message.win);
        return writer;
      };
      p_luck_one.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_luck_one();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet = reader.int32();
            break;

           case 2:
            message.bet_val = reader.uint32();
            break;

           case 3:
            message.win = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_val")) throw $util.ProtocolError("missing required 'bet_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        return message;
      };
      return p_luck_one;
    }();
    $root.m_1109_toc = function() {
      function m_1109_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1109_toc.prototype.balance = 0;
      m_1109_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.balance);
        return writer;
      };
      m_1109_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1109_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_1109_toc;
    }();
    $root.m_1110_toc = function() {
      function m_1110_toc(properties) {
        this.bets = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1110_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1110_toc.prototype.bets = $util.emptyArray;
      m_1110_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        if (null != message.bets && message.bets.length) for (var i = 0; i < message.bets.length; ++i) $root.p_luck_bet.encode(message.bets[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      m_1110_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1110_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           case 2:
            message.bets && message.bets.length || (message.bets = []);
            message.bets.push($root.p_luck_bet.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_1110_toc;
    }();
    $root.m_1111_toc = function() {
      function m_1111_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1111_toc.prototype.info = null;
      m_1111_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_contact.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1111_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1111_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_contact.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_1111_toc;
    }();
    $root.p_contact = function() {
      function p_contact(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_contact.prototype.phone = "";
      p_contact.prototype.qq = "";
      p_contact.prototype.wx = "";
      p_contact.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.phone);
        writer.uint32(18).string(message.qq);
        writer.uint32(26).string(message.wx);
        return writer;
      };
      p_contact.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_contact();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.phone = reader.string();
            break;

           case 2:
            message.qq = reader.string();
            break;

           case 3:
            message.wx = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("phone")) throw $util.ProtocolError("missing required 'phone'", {
          instance: message
        });
        if (!message.hasOwnProperty("qq")) throw $util.ProtocolError("missing required 'qq'", {
          instance: message
        });
        if (!message.hasOwnProperty("wx")) throw $util.ProtocolError("missing required 'wx'", {
          instance: message
        });
        return message;
      };
      return p_contact;
    }();
    $root.m_1192_toc = function() {
      function m_1192_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1192_toc.prototype.odds = null;
      m_1192_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_luck_odds.encode(message.odds, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1192_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1192_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.odds = $root.p_luck_odds.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("odds")) throw $util.ProtocolError("missing required 'odds'", {
          instance: message
        });
        return message;
      };
      return m_1192_toc;
    }();
    $root.m_1193_toc = function() {
      function m_1193_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1193_toc.prototype.bet_name = null;
      m_1193_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_bet_name.encode(message.bet_name, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1193_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1193_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bet_name = $root.p_bet_name.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet_name")) throw $util.ProtocolError("missing required 'bet_name'", {
          instance: message
        });
        return message;
      };
      return m_1193_toc;
    }();
    $root.m_1194_toc = function() {
      function m_1194_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1194_toc.prototype.role_id = 0;
      m_1194_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        return writer;
      };
      m_1194_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1194_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        return message;
      };
      return m_1194_toc;
    }();
    $root.m_1195_toc = function() {
      function m_1195_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1195_toc.prototype.player = null;
      m_1195_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_luck_player.encode(message.player, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1195_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1195_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.player = $root.p_luck_player.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("player")) throw $util.ProtocolError("missing required 'player'", {
          instance: message
        });
        return message;
      };
      return m_1195_toc;
    }();
    $root.m_1196_toc = function() {
      function m_1196_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1196_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1196_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        return writer;
      };
      m_1196_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1196_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_1196_toc;
    }();
    $root.m_1197_toc = function() {
      function m_1197_toc(properties) {
        this.bets = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1197_toc.prototype.time = 0;
      m_1197_toc.prototype.state = 1;
      m_1197_toc.prototype.bets = $util.emptyArray;
      m_1197_toc.prototype.missing = null;
      m_1197_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.time);
        writer.uint32(16).int32(message.state);
        if (null != message.bets && message.bets.length) for (var i = 0; i < message.bets.length; ++i) $root.p_luck_bet.encode(message.bets[i], writer.uint32(26).fork()).ldelim();
        null != message.missing && message.hasOwnProperty("missing") && $root.p_missing_luck.encode(message.missing, writer.uint32(34).fork()).ldelim();
        return writer;
      };
      m_1197_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1197_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.time = reader.uint32();
            break;

           case 2:
            message.state = reader.int32();
            break;

           case 3:
            message.bets && message.bets.length || (message.bets = []);
            message.bets.push($root.p_luck_bet.decode(reader, reader.uint32()));
            break;

           case 4:
            message.missing = $root.p_missing_luck.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        return message;
      };
      return m_1197_toc;
    }();
    $root.m_1198_toc = function() {
      function m_1198_toc(properties) {
        this.win = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1198_toc.prototype.result = null;
      m_1198_toc.prototype.win = $util.emptyArray;
      m_1198_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1198_toc.prototype.time = 0;
      m_1198_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_luck_result.encode(message.result, writer.uint32(10).fork()).ldelim();
        if (null != message.win && message.win.length) for (var i = 0; i < message.win.length; ++i) $root.p_luck_win.encode(message.win[i], writer.uint32(18).fork()).ldelim();
        writer.uint32(24).uint64(message.balance);
        writer.uint32(32).uint32(message.time);
        return writer;
      };
      m_1198_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1198_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.result = $root.p_luck_result.decode(reader, reader.uint32());
            break;

           case 2:
            message.win && message.win.length || (message.win = []);
            message.win.push($root.p_luck_win.decode(reader, reader.uint32()));
            break;

           case 3:
            message.balance = reader.uint64();
            break;

           case 4:
            message.time = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("result")) throw $util.ProtocolError("missing required 'result'", {
          instance: message
        });
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return m_1198_toc;
    }();
    $root.p_luck_win = function() {
      function p_luck_win(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_luck_win.prototype.role_id = 0;
      p_luck_win.prototype.val = 0;
      p_luck_win.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      p_luck_win.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_luck_win();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return p_luck_win;
    }();
    $root.m_1199_toc = function() {
      function m_1199_toc(properties) {
        this.bets = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1199_toc.prototype.bets = $util.emptyArray;
      m_1199_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.bets && message.bets.length) for (var i = 0; i < message.bets.length; ++i) $root.p_luck_bets.encode(message.bets[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1199_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1199_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.bets && message.bets.length || (message.bets = []);
            message.bets.push($root.p_luck_bets.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1199_toc;
    }();
    $root.p_luck_bets = function() {
      function p_luck_bets(properties) {
        this.bet = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_luck_bets.prototype.role_id = 0;
      p_luck_bets.prototype.bet = $util.emptyArray;
      p_luck_bets.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        if (null != message.bet && message.bet.length) for (var i = 0; i < message.bet.length; ++i) $root.p_luck_bet.encode(message.bet[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      p_luck_bets.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_luck_bets();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.bet && message.bet.length || (message.bet = []);
            message.bet.push($root.p_luck_bet.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        return message;
      };
      return p_luck_bets;
    }();
    $root.m_1401_tos = function() {
      function m_1401_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1401_tos.prototype.type = 1;
      m_1401_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.type);
        return writer;
      };
      m_1401_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1401_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_1401_tos;
    }();
    $root.m_1401_toc = function() {
      function m_1401_toc(properties) {
        this.info = [];
        this.bet_val = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1401_toc.prototype.info = $util.emptyArray;
      m_1401_toc.prototype.bet_val = $util.emptyArray;
      m_1401_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_guess_info.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        if (null != message.bet_val && message.bet_val.length) for (var i = 0; i < message.bet_val.length; ++i) writer.uint32(16).uint32(message.bet_val[i]);
        return writer;
      };
      m_1401_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1401_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_guess_info.decode(reader, reader.uint32()));
            break;

           case 2:
            message.bet_val && message.bet_val.length || (message.bet_val = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.bet_val.push(reader.uint32());
            } else message.bet_val.push(reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1401_toc;
    }();
    $root.m_1402_tos = function() {
      function m_1402_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1402_tos.prototype.id = 0;
      m_1402_tos.prototype.select = 1;
      m_1402_tos.prototype.val = 0;
      m_1402_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).int32(message.select);
        writer.uint32(24).uint32(message.val);
        return writer;
      };
      m_1402_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1402_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.select = reader.int32();
            break;

           case 3:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("select")) throw $util.ProtocolError("missing required 'select'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return m_1402_tos;
    }();
    $root.m_1402_toc = function() {
      function m_1402_toc(properties) {
        this.select = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1402_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1402_toc.prototype.select = $util.emptyArray;
      m_1402_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        if (null != message.select && message.select.length) for (var i = 0; i < message.select.length; ++i) $root.p_select.encode(message.select[i], writer.uint32(42).fork()).ldelim();
        return writer;
      };
      m_1402_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1402_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           case 5:
            message.select && message.select.length || (message.select = []);
            message.select.push($root.p_select.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_1402_toc;
    }();
    $root.m_1403_toc = function() {
      function m_1403_toc(properties) {
        this.log = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1403_toc.prototype.log = $util.emptyArray;
      m_1403_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.log && message.log.length) for (var i = 0; i < message.log.length; ++i) $root.p_guess_log.encode(message.log[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1403_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1403_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.log && message.log.length || (message.log = []);
            message.log.push($root.p_guess_log.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1403_toc;
    }();
    $root.m_1404_tos = function() {
      function m_1404_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1404_tos.prototype.type = 1;
      m_1404_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.type);
        return writer;
      };
      m_1404_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1404_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_1404_tos;
    }();
    $root.m_1404_toc = function() {
      function m_1404_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1404_toc.prototype.info = $util.emptyArray;
      m_1404_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_guess_info.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1404_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1404_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_guess_info.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1404_toc;
    }();
    $root.m_1405_tos = function() {
      function m_1405_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1405_tos.prototype.id = 0;
      m_1405_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        return writer;
      };
      m_1405_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1405_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_1405_tos;
    }();
    $root.m_1405_toc = function() {
      function m_1405_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1405_toc.prototype.info = null;
      m_1405_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_guess_one.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1405_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1405_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_guess_one.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_1405_toc;
    }();
    $root.p_guess_one = function() {
      function p_guess_one(properties) {
        this.select = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_guess_one.prototype.id = 0;
      p_guess_one.prototype.title = "";
      p_guess_one.prototype.select = $util.emptyArray;
      p_guess_one.prototype.bet = 1;
      p_guess_one.prototype.state = 2;
      p_guess_one.prototype.result = 1;
      p_guess_one.prototype.win = 0;
      p_guess_one.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(18).string(message.title);
        if (null != message.select && message.select.length) for (var i = 0; i < message.select.length; ++i) $root.p_select.encode(message.select[i], writer.uint32(26).fork()).ldelim();
        writer.uint32(32).int32(message.bet);
        writer.uint32(40).int32(message.state);
        null != message.result && message.hasOwnProperty("result") && writer.uint32(48).int32(message.result);
        writer.uint32(56).uint32(message.win);
        return writer;
      };
      p_guess_one.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_guess_one();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.title = reader.string();
            break;

           case 3:
            message.select && message.select.length || (message.select = []);
            message.select.push($root.p_select.decode(reader, reader.uint32()));
            break;

           case 4:
            message.bet = reader.int32();
            break;

           case 5:
            message.state = reader.int32();
            break;

           case 6:
            message.result = reader.int32();
            break;

           case 7:
            message.win = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("title")) throw $util.ProtocolError("missing required 'title'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet")) throw $util.ProtocolError("missing required 'bet'", {
          instance: message
        });
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        return message;
      };
      return p_guess_one;
    }();
    $root.m_1406_tos = function() {
      function m_1406_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1406_tos.prototype.id = 0;
      m_1406_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        return writer;
      };
      m_1406_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1406_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_1406_tos;
    }();
    $root.m_1406_toc = function() {
      function m_1406_toc(properties) {
        this.select = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1406_toc.prototype.select = $util.emptyArray;
      m_1406_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.select && message.select.length) for (var i = 0; i < message.select.length; ++i) $root.p_select.encode(message.select[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1406_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1406_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.select && message.select.length || (message.select = []);
            message.select.push($root.p_select.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1406_toc;
    }();
    $root.m_1407_tos = function() {
      function m_1407_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1407_tos.prototype.id = 0;
      m_1407_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        return writer;
      };
      m_1407_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1407_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_1407_tos;
    }();
    $root.m_1407_toc = function() {
      function m_1407_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1407_toc.prototype.info = null;
      m_1407_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_guess_info.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1407_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1407_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_guess_info.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_1407_toc;
    }();
    $root.m_1408_tos = function() {
      function m_1408_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1408_tos.prototype.id = 0;
      m_1408_tos.prototype.select = 1;
      m_1408_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).int32(message.select);
        return writer;
      };
      m_1408_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1408_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.select = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("select")) throw $util.ProtocolError("missing required 'select'", {
          instance: message
        });
        return message;
      };
      return m_1408_tos;
    }();
    $root.m_1408_toc = function() {
      function m_1408_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1408_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_1408_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        return writer;
      };
      m_1408_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1408_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_1408_toc;
    }();
    $root.m_1499_toc = function() {
      function m_1499_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1499_toc.prototype.info = null;
      m_1499_toc.prototype.val = 0;
      m_1499_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_guess_info.encode(message.info, writer.uint32(10).fork()).ldelim();
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      m_1499_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1499_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_guess_info.decode(reader, reader.uint32());
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return m_1499_toc;
    }();
    $root.p_guess_info = function() {
      function p_guess_info(properties) {
        this.select = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_guess_info.prototype.id = 0;
      p_guess_info.prototype.type = 1;
      p_guess_info.prototype.title = "";
      p_guess_info.prototype.content = "";
      p_guess_info.prototype.select = $util.emptyArray;
      p_guess_info.prototype.time = 0;
      p_guess_info.prototype.picture = "";
      p_guess_info.prototype.state = false;
      p_guess_info.prototype.guess_state = 2;
      p_guess_info.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).int32(message.type);
        writer.uint32(26).string(message.title);
        writer.uint32(34).string(message.content);
        if (null != message.select && message.select.length) for (var i = 0; i < message.select.length; ++i) $root.p_select.encode(message.select[i], writer.uint32(42).fork()).ldelim();
        writer.uint32(48).uint32(message.time);
        writer.uint32(58).string(message.picture);
        writer.uint32(64).bool(message.state);
        null != message.guess_state && message.hasOwnProperty("guess_state") && writer.uint32(72).int32(message.guess_state);
        return writer;
      };
      p_guess_info.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_guess_info();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.type = reader.int32();
            break;

           case 3:
            message.title = reader.string();
            break;

           case 4:
            message.content = reader.string();
            break;

           case 5:
            message.select && message.select.length || (message.select = []);
            message.select.push($root.p_select.decode(reader, reader.uint32()));
            break;

           case 6:
            message.time = reader.uint32();
            break;

           case 7:
            message.picture = reader.string();
            break;

           case 8:
            message.state = reader.bool();
            break;

           case 9:
            message.guess_state = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("title")) throw $util.ProtocolError("missing required 'title'", {
          instance: message
        });
        if (!message.hasOwnProperty("content")) throw $util.ProtocolError("missing required 'content'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("picture")) throw $util.ProtocolError("missing required 'picture'", {
          instance: message
        });
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        return message;
      };
      return p_guess_info;
    }();
    $root.e_guess_type = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "play"] = 1;
      values[valuesById[2] = "economy"] = 2;
      values[valuesById[3] = "pe"] = 3;
      values[valuesById[4] = "four"] = 4;
      values[valuesById[5] = "five"] = 5;
      return values;
    }();
    $root.p_select = function() {
      function p_select(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_select.prototype.key = 1;
      p_select.prototype.val = "";
      p_select.prototype.odds = 0;
      p_select.prototype.people = 0;
      p_select.prototype.state = 1;
      p_select.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.key);
        writer.uint32(18).string(message.val);
        writer.uint32(24).uint32(message.odds);
        writer.uint32(32).uint32(message.people);
        writer.uint32(40).int32(message.state);
        return writer;
      };
      p_select.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_select();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.key = reader.int32();
            break;

           case 2:
            message.val = reader.string();
            break;

           case 3:
            message.odds = reader.uint32();
            break;

           case 4:
            message.people = reader.uint32();
            break;

           case 5:
            message.state = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("key")) throw $util.ProtocolError("missing required 'key'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        if (!message.hasOwnProperty("odds")) throw $util.ProtocolError("missing required 'odds'", {
          instance: message
        });
        if (!message.hasOwnProperty("people")) throw $util.ProtocolError("missing required 'people'", {
          instance: message
        });
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        return message;
      };
      return p_select;
    }();
    $root.e_select = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "A"] = 1;
      values[valuesById[2] = "B"] = 2;
      values[valuesById[3] = "C"] = 3;
      values[valuesById[4] = "D"] = 4;
      values[valuesById[5] = "E"] = 5;
      values[valuesById[6] = "F"] = 6;
      values[valuesById[7] = "G"] = 7;
      return values;
    }();
    $root.e_select_state = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "normal"] = 1;
      values[valuesById[2] = "stop"] = 2;
      return values;
    }();
    $root.p_guess_log = function() {
      function p_guess_log(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_guess_log.prototype.id = 0;
      p_guess_log.prototype.title = "";
      p_guess_log.prototype.time = 0;
      p_guess_log.prototype.bet_val = 0;
      p_guess_log.prototype.win = 0;
      p_guess_log.prototype.state = 2;
      p_guess_log.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(18).string(message.title);
        writer.uint32(24).uint32(message.time);
        writer.uint32(32).uint32(message.bet_val);
        writer.uint32(40).uint32(message.win);
        writer.uint32(48).int32(message.state);
        return writer;
      };
      p_guess_log.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_guess_log();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.title = reader.string();
            break;

           case 3:
            message.time = reader.uint32();
            break;

           case 4:
            message.bet_val = reader.uint32();
            break;

           case 5:
            message.win = reader.uint32();
            break;

           case 6:
            message.state = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("title")) throw $util.ProtocolError("missing required 'title'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_val")) throw $util.ProtocolError("missing required 'bet_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        return message;
      };
      return p_guess_log;
    }();
    $root.e_guess_state = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[2] = "guess"] = 2;
      values[valuesById[3] = "wait"] = 3;
      values[valuesById[4] = "open"] = 4;
      values[valuesById[5] = "close"] = 5;
      return values;
    }();
    $root.p_guess_bet = function() {
      function p_guess_bet(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_guess_bet.prototype.select = 1;
      p_guess_bet.prototype.val = 0;
      p_guess_bet.prototype.odds = 0;
      p_guess_bet.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.select);
        writer.uint32(16).uint32(message.val);
        writer.uint32(24).uint32(message.odds);
        return writer;
      };
      p_guess_bet.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_guess_bet();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.select = reader.int32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           case 3:
            message.odds = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("select")) throw $util.ProtocolError("missing required 'select'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        if (!message.hasOwnProperty("odds")) throw $util.ProtocolError("missing required 'odds'", {
          instance: message
        });
        return message;
      };
      return p_guess_bet;
    }();
    $root.m_1001_tos = function() {
      function m_1001_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1001_tos.prototype.code = "";
      m_1001_tos.prototype.parent_id = 0;
      m_1001_tos.prototype.agent_id = 0;
      m_1001_tos.prototype.sid = "";
      m_1001_tos.prototype.pay_code = "";
      m_1001_tos.prototype.red_code = "";
      m_1001_tos.prototype.role_id = 0;
      m_1001_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.code);
        null != message.parent_id && message.hasOwnProperty("parent_id") && writer.uint32(16).uint32(message.parent_id);
        writer.uint32(24).uint32(message.agent_id);
        null != message.sid && message.hasOwnProperty("sid") && writer.uint32(34).string(message.sid);
        null != message.pay_code && message.hasOwnProperty("pay_code") && writer.uint32(42).string(message.pay_code);
        null != message.red_code && message.hasOwnProperty("red_code") && writer.uint32(50).string(message.red_code);
        writer.uint32(56).uint32(message.role_id);
        return writer;
      };
      m_1001_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1001_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.code = reader.string();
            break;

           case 2:
            message.parent_id = reader.uint32();
            break;

           case 3:
            message.agent_id = reader.uint32();
            break;

           case 4:
            message.sid = reader.string();
            break;

           case 5:
            message.pay_code = reader.string();
            break;

           case 6:
            message.red_code = reader.string();
            break;

           case 7:
            message.role_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("code")) throw $util.ProtocolError("missing required 'code'", {
          instance: message
        });
        if (!message.hasOwnProperty("agent_id")) throw $util.ProtocolError("missing required 'agent_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        return message;
      };
      return m_1001_tos;
    }();
    $root.m_1001_toc = function() {
      function m_1001_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1001_toc.prototype.info = null;
      m_1001_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_login_info.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1001_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1001_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_login_info.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_1001_toc;
    }();
    $root.m_1002_tos = function() {
      function m_1002_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1002_tos.prototype.account = "";
      m_1002_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.account);
        return writer;
      };
      m_1002_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1002_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.account = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("account")) throw $util.ProtocolError("missing required 'account'", {
          instance: message
        });
        return message;
      };
      return m_1002_tos;
    }();
    $root.m_1002_toc = function() {
      function m_1002_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1002_toc.prototype.info = null;
      m_1002_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_login_info.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1002_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1002_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_login_info.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_1002_toc;
    }();
    $root.p_login_info = function() {
      function p_login_info(properties) {
        this.web_game_list = [];
        this.wx_game_list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_login_info.prototype.role_id = 0;
      p_login_info.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      p_login_info.prototype.nick_name = "";
      p_login_info.prototype.icon = "";
      p_login_info.prototype.parent_id = 0;
      p_login_info.prototype.game_type = 1;
      p_login_info.prototype.charm = 0;
      p_login_info.prototype.vip = 0;
      p_login_info.prototype.free_times = 0;
      p_login_info.prototype.sec = "";
      p_login_info.prototype.login_gift = null;
      p_login_info.prototype.phone = "";
      p_login_info.prototype.red_state = false;
      p_login_info.prototype.subscribe = false;
      p_login_info.prototype.free_state = false;
      p_login_info.prototype.chip = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      p_login_info.prototype.password = false;
      p_login_info.prototype.bing_wx = false;
      p_login_info.prototype.web_game_list = $util.emptyArray;
      p_login_info.prototype.agent_id = 0;
      p_login_info.prototype.wx_game_list = $util.emptyArray;
      p_login_info.prototype.turntable = 0;
      p_login_info.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        writer.uint32(16).uint64(message.balance);
        null != message.nick_name && message.hasOwnProperty("nick_name") && writer.uint32(26).string(message.nick_name);
        null != message.icon && message.hasOwnProperty("icon") && writer.uint32(34).string(message.icon);
        null != message.parent_id && message.hasOwnProperty("parent_id") && writer.uint32(48).uint32(message.parent_id);
        null != message.game_type && message.hasOwnProperty("game_type") && writer.uint32(64).int32(message.game_type);
        null != message.charm && message.hasOwnProperty("charm") && writer.uint32(72).uint32(message.charm);
        null != message.vip && message.hasOwnProperty("vip") && writer.uint32(80).uint32(message.vip);
        null != message.free_times && message.hasOwnProperty("free_times") && writer.uint32(88).uint32(message.free_times);
        null != message.sec && message.hasOwnProperty("sec") && writer.uint32(98).string(message.sec);
        $root.p_login_gift.encode(message.login_gift, writer.uint32(106).fork()).ldelim();
        null != message.phone && message.hasOwnProperty("phone") && writer.uint32(114).string(message.phone);
        writer.uint32(120).bool(message.red_state);
        writer.uint32(128).bool(message.subscribe);
        writer.uint32(136).bool(message.free_state);
        writer.uint32(144).uint64(message.chip);
        null != message.password && message.hasOwnProperty("password") && writer.uint32(152).bool(message.password);
        null != message.bing_wx && message.hasOwnProperty("bing_wx") && writer.uint32(160).bool(message.bing_wx);
        if (null != message.web_game_list && message.web_game_list.length) for (var i = 0; i < message.web_game_list.length; ++i) writer.uint32(168).int32(message.web_game_list[i]);
        writer.uint32(176).uint32(message.agent_id);
        if (null != message.wx_game_list && message.wx_game_list.length) for (var i = 0; i < message.wx_game_list.length; ++i) writer.uint32(184).int32(message.wx_game_list[i]);
        null != message.turntable && message.hasOwnProperty("turntable") && writer.uint32(192).uint32(message.turntable);
        return writer;
      };
      p_login_info.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_login_info();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.balance = reader.uint64();
            break;

           case 3:
            message.nick_name = reader.string();
            break;

           case 4:
            message.icon = reader.string();
            break;

           case 6:
            message.parent_id = reader.uint32();
            break;

           case 8:
            message.game_type = reader.int32();
            break;

           case 9:
            message.charm = reader.uint32();
            break;

           case 10:
            message.vip = reader.uint32();
            break;

           case 11:
            message.free_times = reader.uint32();
            break;

           case 12:
            message.sec = reader.string();
            break;

           case 13:
            message.login_gift = $root.p_login_gift.decode(reader, reader.uint32());
            break;

           case 14:
            message.phone = reader.string();
            break;

           case 15:
            message.red_state = reader.bool();
            break;

           case 16:
            message.subscribe = reader.bool();
            break;

           case 17:
            message.free_state = reader.bool();
            break;

           case 18:
            message.chip = reader.uint64();
            break;

           case 19:
            message.password = reader.bool();
            break;

           case 20:
            message.bing_wx = reader.bool();
            break;

           case 21:
            message.web_game_list && message.web_game_list.length || (message.web_game_list = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.web_game_list.push(reader.int32());
            } else message.web_game_list.push(reader.int32());
            break;

           case 22:
            message.agent_id = reader.uint32();
            break;

           case 23:
            message.wx_game_list && message.wx_game_list.length || (message.wx_game_list = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.wx_game_list.push(reader.int32());
            } else message.wx_game_list.push(reader.int32());
            break;

           case 24:
            message.turntable = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        if (!message.hasOwnProperty("login_gift")) throw $util.ProtocolError("missing required 'login_gift'", {
          instance: message
        });
        if (!message.hasOwnProperty("red_state")) throw $util.ProtocolError("missing required 'red_state'", {
          instance: message
        });
        if (!message.hasOwnProperty("subscribe")) throw $util.ProtocolError("missing required 'subscribe'", {
          instance: message
        });
        if (!message.hasOwnProperty("free_state")) throw $util.ProtocolError("missing required 'free_state'", {
          instance: message
        });
        if (!message.hasOwnProperty("chip")) throw $util.ProtocolError("missing required 'chip'", {
          instance: message
        });
        if (!message.hasOwnProperty("agent_id")) throw $util.ProtocolError("missing required 'agent_id'", {
          instance: message
        });
        return message;
      };
      return p_login_info;
    }();
    $root.p_login_gift = function() {
      function p_login_gift(properties) {
        this.gold = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_login_gift.prototype.gold = $util.emptyArray;
      p_login_gift.prototype.state = false;
      p_login_gift.prototype.days = 0;
      p_login_gift.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.gold && message.gold.length) for (var i = 0; i < message.gold.length; ++i) writer.uint32(8).uint32(message.gold[i]);
        writer.uint32(16).bool(message.state);
        writer.uint32(24).uint32(message.days);
        return writer;
      };
      p_login_gift.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_login_gift();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.gold && message.gold.length || (message.gold = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.gold.push(reader.uint32());
            } else message.gold.push(reader.uint32());
            break;

           case 2:
            message.state = reader.bool();
            break;

           case 3:
            message.days = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        if (!message.hasOwnProperty("days")) throw $util.ProtocolError("missing required 'days'", {
          instance: message
        });
        return message;
      };
      return p_login_gift;
    }();
    $root.m_1003_tos = function() {
      function m_1003_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1003_tos.prototype.security = "";
      m_1003_tos.prototype.role_id = 0;
      m_1003_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.security);
        writer.uint32(16).uint32(message.role_id);
        return writer;
      };
      m_1003_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1003_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.security = reader.string();
            break;

           case 2:
            message.role_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("security")) throw $util.ProtocolError("missing required 'security'", {
          instance: message
        });
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        return message;
      };
      return m_1003_tos;
    }();
    $root.m_1003_toc = function() {
      function m_1003_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1003_toc.prototype.info = null;
      m_1003_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_login_info.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1003_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1003_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_login_info.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_1003_toc;
    }();
    $root.m_1004_tos = function() {
      function m_1004_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1004_tos.prototype.phone = "";
      m_1004_tos.prototype.password = "";
      m_1004_tos.prototype.parent_id = 0;
      m_1004_tos.prototype.agent_id = 0;
      m_1004_tos.prototype.sid = "";
      m_1004_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.phone);
        writer.uint32(18).string(message.password);
        null != message.parent_id && message.hasOwnProperty("parent_id") && writer.uint32(24).uint32(message.parent_id);
        writer.uint32(32).uint32(message.agent_id);
        null != message.sid && message.hasOwnProperty("sid") && writer.uint32(42).string(message.sid);
        return writer;
      };
      m_1004_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1004_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.phone = reader.string();
            break;

           case 2:
            message.password = reader.string();
            break;

           case 3:
            message.parent_id = reader.uint32();
            break;

           case 4:
            message.agent_id = reader.uint32();
            break;

           case 5:
            message.sid = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("phone")) throw $util.ProtocolError("missing required 'phone'", {
          instance: message
        });
        if (!message.hasOwnProperty("password")) throw $util.ProtocolError("missing required 'password'", {
          instance: message
        });
        if (!message.hasOwnProperty("agent_id")) throw $util.ProtocolError("missing required 'agent_id'", {
          instance: message
        });
        return message;
      };
      return m_1004_tos;
    }();
    $root.m_1004_toc = function() {
      function m_1004_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1004_toc.prototype.info = null;
      m_1004_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_login_info.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1004_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1004_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_login_info.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_1004_toc;
    }();
    $root.m_1005_tos = function() {
      function m_1005_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1005_tos.prototype.code = "";
      m_1005_tos.prototype.parent_id = 0;
      m_1005_tos.prototype.agent_id = 0;
      m_1005_tos.prototype.sid = "";
      m_1005_tos.prototype.password = "";
      m_1005_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.code);
        writer.uint32(16).uint32(message.parent_id);
        writer.uint32(24).uint32(message.agent_id);
        null != message.sid && message.hasOwnProperty("sid") && writer.uint32(34).string(message.sid);
        writer.uint32(42).string(message.password);
        return writer;
      };
      m_1005_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1005_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.code = reader.string();
            break;

           case 2:
            message.parent_id = reader.uint32();
            break;

           case 3:
            message.agent_id = reader.uint32();
            break;

           case 4:
            message.sid = reader.string();
            break;

           case 5:
            message.password = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("code")) throw $util.ProtocolError("missing required 'code'", {
          instance: message
        });
        if (!message.hasOwnProperty("parent_id")) throw $util.ProtocolError("missing required 'parent_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("agent_id")) throw $util.ProtocolError("missing required 'agent_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("password")) throw $util.ProtocolError("missing required 'password'", {
          instance: message
        });
        return message;
      };
      return m_1005_tos;
    }();
    $root.m_1005_toc = function() {
      function m_1005_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1005_toc.prototype.info = null;
      m_1005_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_login_info.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1005_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1005_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_login_info.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_1005_toc;
    }();
    $root.m_1006_tos = function() {
      function m_1006_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1006_tos.prototype.phone = "";
      m_1006_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.phone);
        return writer;
      };
      m_1006_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1006_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.phone = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("phone")) throw $util.ProtocolError("missing required 'phone'", {
          instance: message
        });
        return message;
      };
      return m_1006_tos;
    }();
    $root.m_1011_toc = function() {
      function m_1011_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1011_toc.prototype.info = "";
      m_1011_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.info);
        return writer;
      };
      m_1011_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1011_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_1011_toc;
    }();
    $root.m_1020_toc = function() {
      function m_1020_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1020_toc.prototype.time = 0;
      m_1020_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.time);
        return writer;
      };
      m_1020_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1020_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.time = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return m_1020_toc;
    }();
    $root.m_1021_tos = function() {
      function m_1021_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1021_tos.prototype.userid = 0;
      m_1021_tos.prototype.appid = 0;
      m_1021_tos.prototype.time = 0;
      m_1021_tos.prototype.reurl = "";
      m_1021_tos.prototype.extinfo = "";
      m_1021_tos.prototype.sid = 0;
      m_1021_tos.prototype.source = "";
      m_1021_tos.prototype.openid = "";
      m_1021_tos.prototype.sign = "";
      m_1021_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.userid);
        writer.uint32(16).uint32(message.appid);
        writer.uint32(24).uint32(message.time);
        writer.uint32(34).string(message.reurl);
        writer.uint32(42).string(message.extinfo);
        writer.uint32(48).uint32(message.sid);
        writer.uint32(58).string(message.source);
        writer.uint32(66).string(message.openid);
        writer.uint32(74).string(message.sign);
        return writer;
      };
      m_1021_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1021_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.userid = reader.uint32();
            break;

           case 2:
            message.appid = reader.uint32();
            break;

           case 3:
            message.time = reader.uint32();
            break;

           case 4:
            message.reurl = reader.string();
            break;

           case 5:
            message.extinfo = reader.string();
            break;

           case 6:
            message.sid = reader.uint32();
            break;

           case 7:
            message.source = reader.string();
            break;

           case 8:
            message.openid = reader.string();
            break;

           case 9:
            message.sign = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("userid")) throw $util.ProtocolError("missing required 'userid'", {
          instance: message
        });
        if (!message.hasOwnProperty("appid")) throw $util.ProtocolError("missing required 'appid'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("reurl")) throw $util.ProtocolError("missing required 'reurl'", {
          instance: message
        });
        if (!message.hasOwnProperty("extinfo")) throw $util.ProtocolError("missing required 'extinfo'", {
          instance: message
        });
        if (!message.hasOwnProperty("sid")) throw $util.ProtocolError("missing required 'sid'", {
          instance: message
        });
        if (!message.hasOwnProperty("source")) throw $util.ProtocolError("missing required 'source'", {
          instance: message
        });
        if (!message.hasOwnProperty("openid")) throw $util.ProtocolError("missing required 'openid'", {
          instance: message
        });
        if (!message.hasOwnProperty("sign")) throw $util.ProtocolError("missing required 'sign'", {
          instance: message
        });
        return message;
      };
      return m_1021_tos;
    }();
    $root.m_1021_toc = function() {
      function m_1021_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1021_toc.prototype.info = null;
      m_1021_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_login_info.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1021_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1021_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_login_info.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_1021_toc;
    }();
    $root.m_1022_tos = function() {
      function m_1022_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1022_tos.prototype.token = "";
      m_1022_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.token);
        return writer;
      };
      m_1022_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1022_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.token = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("token")) throw $util.ProtocolError("missing required 'token'", {
          instance: message
        });
        return message;
      };
      return m_1022_tos;
    }();
    $root.m_1022_toc = function() {
      function m_1022_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1022_toc.prototype.info = null;
      m_1022_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_login_info.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1022_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1022_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_login_info.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_1022_toc;
    }();
    $root.m_1096_tos = function() {
      function m_1096_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1096_tos.prototype.id = 0;
      m_1096_tos.prototype.parent_id = 0;
      m_1096_tos.prototype.agent_id = 0;
      m_1096_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.parent_id);
        writer.uint32(24).uint32(message.agent_id);
        return writer;
      };
      m_1096_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1096_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.parent_id = reader.uint32();
            break;

           case 3:
            message.agent_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("parent_id")) throw $util.ProtocolError("missing required 'parent_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("agent_id")) throw $util.ProtocolError("missing required 'agent_id'", {
          instance: message
        });
        return message;
      };
      return m_1096_tos;
    }();
    $root.m_1096_toc = function() {
      function m_1096_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1096_toc.prototype.info = null;
      m_1096_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_login_info.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1096_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1096_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_login_info.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_1096_toc;
    }();
    $root.m_1097_toc = function() {
      function m_1097_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1097_toc.prototype.time = 0;
      m_1097_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.time);
        return writer;
      };
      m_1097_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1097_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.time = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return m_1097_toc;
    }();
    $root.e_game_type = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "null"] = 1;
      values[valuesById[2] = "good_luck"] = 2;
      values[valuesById[3] = "farm"] = 3;
      values[valuesById[4] = "try_farm"] = 4;
      values[valuesById[5] = "guess"] = 5;
      values[valuesById[6] = "doll"] = 6;
      values[valuesById[7] = "fish"] = 7;
      values[valuesById[8] = "cat"] = 8;
      values[valuesById[9] = "stock"] = 9;
      values[valuesById[10] = "zoo"] = 10;
      values[valuesById[11] = "cms"] = 11;
      values[valuesById[12] = "dog_run"] = 12;
      values[valuesById[13] = "rps"] = 13;
      values[valuesById[14] = "treasure"] = 14;
      values[valuesById[15] = "wxpublic"] = 15;
      values[valuesById[16] = "stock_real"] = 16;
      values[valuesById[17] = "fruit"] = 17;
      values[valuesById[18] = "mobile"] = 18;
      values[valuesById[19] = "recharge"] = 19;
      values[valuesById[20] = "href"] = 20;
      values[valuesById[21] = "share"] = 21;
      values[valuesById[22] = "zoo_act"] = 22;
      values[valuesById[23] = "xyxw"] = 23;
      values[valuesById[24] = "draw"] = 24;
      values[valuesById[25] = "baccarat"] = 25;
      values[valuesById[26] = "singleton"] = 26;
      values[valuesById[27] = "turntable"] = 27;
      values[valuesById[28] = "free_zoo"] = 28;
      return values;
    }();
    $root.m_3101_toc = function() {
      function m_3101_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3101_toc.prototype.info = $util.emptyArray;
      m_3101_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_prize_info.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3101_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3101_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_prize_info.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3101_toc;
    }();
    $root.p_prize_info = function() {
      function p_prize_info(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_prize_info.prototype.id = 0;
      p_prize_info.prototype.name = "";
      p_prize_info.prototype.val = 0;
      p_prize_info.prototype.num = 0;
      p_prize_info.prototype.type = 1;
      p_prize_info.prototype.picture = "";
      p_prize_info.prototype.rmb = 0;
      p_prize_info.prototype.prize_id = 0;
      p_prize_info.prototype.chip = 0;
      p_prize_info.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(18).string(message.name);
        writer.uint32(24).uint32(message.val);
        writer.uint32(32).uint32(message.num);
        writer.uint32(40).int32(message.type);
        writer.uint32(50).string(message.picture);
        writer.uint32(56).uint32(message.rmb);
        writer.uint32(64).uint32(message.prize_id);
        null != message.chip && message.hasOwnProperty("chip") && writer.uint32(72).uint32(message.chip);
        return writer;
      };
      p_prize_info.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_prize_info();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.name = reader.string();
            break;

           case 3:
            message.val = reader.uint32();
            break;

           case 4:
            message.num = reader.uint32();
            break;

           case 5:
            message.type = reader.int32();
            break;

           case 6:
            message.picture = reader.string();
            break;

           case 7:
            message.rmb = reader.uint32();
            break;

           case 8:
            message.prize_id = reader.uint32();
            break;

           case 9:
            message.chip = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("picture")) throw $util.ProtocolError("missing required 'picture'", {
          instance: message
        });
        if (!message.hasOwnProperty("rmb")) throw $util.ProtocolError("missing required 'rmb'", {
          instance: message
        });
        if (!message.hasOwnProperty("prize_id")) throw $util.ProtocolError("missing required 'prize_id'", {
          instance: message
        });
        return message;
      };
      return p_prize_info;
    }();
    $root.e_prize_type = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "coin"] = 1;
      values[valuesById[2] = "phone_card"] = 2;
      values[valuesById[3] = "JD_card"] = 3;
      values[valuesById[4] = "red_bag"] = 4;
      values[valuesById[5] = "others"] = 5;
      values[valuesById[6] = "gprs"] = 6;
      values[valuesById[7] = "mobile_card"] = 7;
      values[valuesById[8] = "chip"] = 8;
      values[valuesById[9] = "ice"] = 9;
      values[valuesById[10] = "locking"] = 10;
      values[valuesById[11] = "improve_odds"] = 11;
      return values;
    }();
    $root.m_3102_tos = function() {
      function m_3102_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3102_tos.prototype.id = 0;
      m_3102_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        return writer;
      };
      m_3102_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3102_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_3102_tos;
    }();
    $root.m_3102_toc = function() {
      function m_3102_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3102_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_3102_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(16).uint64(message.balance);
        return writer;
      };
      m_3102_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3102_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 2:
            message.balance = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_3102_toc;
    }();
    $root.m_3103_tos = function() {
      function m_3103_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3103_tos.prototype.id = 0;
      m_3103_tos.prototype.amount = 0;
      m_3103_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.amount);
        return writer;
      };
      m_3103_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3103_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.amount = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("amount")) throw $util.ProtocolError("missing required 'amount'", {
          instance: message
        });
        return message;
      };
      return m_3103_tos;
    }();
    $root.m_3103_toc = function() {
      function m_3103_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3103_toc.prototype.info = $util.emptyArray;
      m_3103_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_player_prize.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3103_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3103_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_player_prize.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3103_toc;
    }();
    $root.p_player_prize = function() {
      function p_player_prize(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_player_prize.prototype.id = 0;
      p_player_prize.prototype.role_id = 0;
      p_player_prize.prototype.name = "";
      p_player_prize.prototype.icon = "";
      p_player_prize.prototype.time = 0;
      p_player_prize.prototype.item_name = "";
      p_player_prize.prototype.picture = "";
      p_player_prize.prototype.vip = 0;
      p_player_prize.prototype.prize_id = 0;
      p_player_prize.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.role_id);
        writer.uint32(26).string(message.name);
        writer.uint32(34).string(message.icon);
        writer.uint32(40).uint32(message.time);
        writer.uint32(50).string(message.item_name);
        writer.uint32(58).string(message.picture);
        writer.uint32(64).uint32(message.vip);
        writer.uint32(72).uint32(message.prize_id);
        return writer;
      };
      p_player_prize.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_player_prize();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.role_id = reader.uint32();
            break;

           case 3:
            message.name = reader.string();
            break;

           case 4:
            message.icon = reader.string();
            break;

           case 5:
            message.time = reader.uint32();
            break;

           case 6:
            message.item_name = reader.string();
            break;

           case 7:
            message.picture = reader.string();
            break;

           case 8:
            message.vip = reader.uint32();
            break;

           case 9:
            message.prize_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("icon")) throw $util.ProtocolError("missing required 'icon'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("item_name")) throw $util.ProtocolError("missing required 'item_name'", {
          instance: message
        });
        if (!message.hasOwnProperty("picture")) throw $util.ProtocolError("missing required 'picture'", {
          instance: message
        });
        if (!message.hasOwnProperty("vip")) throw $util.ProtocolError("missing required 'vip'", {
          instance: message
        });
        if (!message.hasOwnProperty("prize_id")) throw $util.ProtocolError("missing required 'prize_id'", {
          instance: message
        });
        return message;
      };
      return p_player_prize;
    }();
    $root.m_3104_tos = function() {
      function m_3104_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3104_tos.prototype.id = 0;
      m_3104_tos.prototype.amount = 0;
      m_3104_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.amount);
        return writer;
      };
      m_3104_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3104_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.amount = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("amount")) throw $util.ProtocolError("missing required 'amount'", {
          instance: message
        });
        return message;
      };
      return m_3104_tos;
    }();
    $root.m_3104_toc = function() {
      function m_3104_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3104_toc.prototype.self_info = null;
      m_3104_toc.prototype.info = $util.emptyArray;
      m_3104_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_self_profit.encode(message.self_info, writer.uint32(10).fork()).ldelim();
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_profit_rank.encode(message.info[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      m_3104_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3104_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.self_info = $root.p_self_profit.decode(reader, reader.uint32());
            break;

           case 2:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_profit_rank.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("self_info")) throw $util.ProtocolError("missing required 'self_info'", {
          instance: message
        });
        return message;
      };
      return m_3104_toc;
    }();
    $root.p_self_profit = function() {
      function p_self_profit(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_self_profit.prototype.profit = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      p_self_profit.prototype.now_win = null;
      p_self_profit.prototype.init_state = 0;
      p_self_profit.prototype.next_win = null;
      p_self_profit.prototype.val = 0;
      p_self_profit.prototype.time = 0;
      p_self_profit.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.profit);
        $root.p_profit_win.encode(message.now_win, writer.uint32(18).fork()).ldelim();
        writer.uint32(24).uint32(message.init_state);
        $root.p_profit_win.encode(message.next_win, writer.uint32(34).fork()).ldelim();
        writer.uint32(40).uint32(message.val);
        writer.uint32(48).uint32(message.time);
        return writer;
      };
      p_self_profit.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_self_profit();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.profit = reader.int64();
            break;

           case 2:
            message.now_win = $root.p_profit_win.decode(reader, reader.uint32());
            break;

           case 3:
            message.init_state = reader.uint32();
            break;

           case 4:
            message.next_win = $root.p_profit_win.decode(reader, reader.uint32());
            break;

           case 5:
            message.val = reader.uint32();
            break;

           case 6:
            message.time = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("profit")) throw $util.ProtocolError("missing required 'profit'", {
          instance: message
        });
        if (!message.hasOwnProperty("now_win")) throw $util.ProtocolError("missing required 'now_win'", {
          instance: message
        });
        if (!message.hasOwnProperty("init_state")) throw $util.ProtocolError("missing required 'init_state'", {
          instance: message
        });
        if (!message.hasOwnProperty("next_win")) throw $util.ProtocolError("missing required 'next_win'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return p_self_profit;
    }();
    $root.p_profit_win = function() {
      function p_profit_win(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_profit_win.prototype.win = 0;
      p_profit_win.prototype.type = 1;
      p_profit_win.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.win);
        writer.uint32(16).int32(message.type);
        return writer;
      };
      p_profit_win.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_profit_win();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.win = reader.uint32();
            break;

           case 2:
            message.type = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return p_profit_win;
    }();
    $root.p_profit_rank = function() {
      function p_profit_rank(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_profit_rank.prototype.id = 0;
      p_profit_rank.prototype.role_id = 0;
      p_profit_rank.prototype.name = "";
      p_profit_rank.prototype.icon = "";
      p_profit_rank.prototype.profit = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      p_profit_rank.prototype.win = null;
      p_profit_rank.prototype.vip = 0;
      p_profit_rank.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.role_id);
        writer.uint32(26).string(message.name);
        writer.uint32(34).string(message.icon);
        writer.uint32(40).int64(message.profit);
        $root.p_profit_win.encode(message.win, writer.uint32(50).fork()).ldelim();
        writer.uint32(56).uint32(message.vip);
        return writer;
      };
      p_profit_rank.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_profit_rank();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.role_id = reader.uint32();
            break;

           case 3:
            message.name = reader.string();
            break;

           case 4:
            message.icon = reader.string();
            break;

           case 5:
            message.profit = reader.int64();
            break;

           case 6:
            message.win = $root.p_profit_win.decode(reader, reader.uint32());
            break;

           case 7:
            message.vip = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("icon")) throw $util.ProtocolError("missing required 'icon'", {
          instance: message
        });
        if (!message.hasOwnProperty("profit")) throw $util.ProtocolError("missing required 'profit'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        if (!message.hasOwnProperty("vip")) throw $util.ProtocolError("missing required 'vip'", {
          instance: message
        });
        return message;
      };
      return p_profit_rank;
    }();
    $root.m_3105_tos = function() {
      function m_3105_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3105_tos.prototype.id = 0;
      m_3105_tos.prototype.amount = 0;
      m_3105_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.amount);
        return writer;
      };
      m_3105_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3105_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.amount = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("amount")) throw $util.ProtocolError("missing required 'amount'", {
          instance: message
        });
        return message;
      };
      return m_3105_tos;
    }();
    $root.m_3105_toc = function() {
      function m_3105_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3105_toc.prototype.self_info = null;
      m_3105_toc.prototype.info = $util.emptyArray;
      m_3105_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_self_rich.encode(message.self_info, writer.uint32(10).fork()).ldelim();
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_rich_rank.encode(message.info[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      m_3105_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3105_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.self_info = $root.p_self_rich.decode(reader, reader.uint32());
            break;

           case 2:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_rich_rank.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("self_info")) throw $util.ProtocolError("missing required 'self_info'", {
          instance: message
        });
        return message;
      };
      return m_3105_toc;
    }();
    $root.p_self_rich = function() {
      function p_self_rich(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_self_rich.prototype.rich = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      p_self_rich.prototype.rank = 0;
      p_self_rich.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.rich);
        writer.uint32(16).uint32(message.rank);
        return writer;
      };
      p_self_rich.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_self_rich();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.rich = reader.uint64();
            break;

           case 2:
            message.rank = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("rich")) throw $util.ProtocolError("missing required 'rich'", {
          instance: message
        });
        if (!message.hasOwnProperty("rank")) throw $util.ProtocolError("missing required 'rank'", {
          instance: message
        });
        return message;
      };
      return p_self_rich;
    }();
    $root.p_rich_rank = function() {
      function p_rich_rank(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_rich_rank.prototype.id = 0;
      p_rich_rank.prototype.role_id = 0;
      p_rich_rank.prototype.name = "";
      p_rich_rank.prototype.icon = "";
      p_rich_rank.prototype.rich = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      p_rich_rank.prototype.vip = 0;
      p_rich_rank.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.role_id);
        writer.uint32(26).string(message.name);
        writer.uint32(34).string(message.icon);
        writer.uint32(40).uint64(message.rich);
        writer.uint32(48).uint32(message.vip);
        return writer;
      };
      p_rich_rank.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_rich_rank();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.role_id = reader.uint32();
            break;

           case 3:
            message.name = reader.string();
            break;

           case 4:
            message.icon = reader.string();
            break;

           case 5:
            message.rich = reader.uint64();
            break;

           case 6:
            message.vip = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("icon")) throw $util.ProtocolError("missing required 'icon'", {
          instance: message
        });
        if (!message.hasOwnProperty("rich")) throw $util.ProtocolError("missing required 'rich'", {
          instance: message
        });
        if (!message.hasOwnProperty("vip")) throw $util.ProtocolError("missing required 'vip'", {
          instance: message
        });
        return message;
      };
      return p_rich_rank;
    }();
    $root.m_3106_tos = function() {
      function m_3106_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3106_tos.prototype.id = 0;
      m_3106_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        return writer;
      };
      m_3106_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3106_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_3106_tos;
    }();
    $root.m_3107_toc = function() {
      function m_3107_toc(properties) {
        this.phone_card = [];
        this.gprs = [];
        this.mobile_card = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3107_toc.prototype.phone_card = $util.emptyArray;
      m_3107_toc.prototype.gprs = $util.emptyArray;
      m_3107_toc.prototype.mobile_card = $util.emptyArray;
      m_3107_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.phone_card && message.phone_card.length) for (var i = 0; i < message.phone_card.length; ++i) $root.p_prize_info.encode(message.phone_card[i], writer.uint32(10).fork()).ldelim();
        if (null != message.gprs && message.gprs.length) for (var i = 0; i < message.gprs.length; ++i) $root.p_prize_info.encode(message.gprs[i], writer.uint32(18).fork()).ldelim();
        if (null != message.mobile_card && message.mobile_card.length) for (var i = 0; i < message.mobile_card.length; ++i) $root.p_prize_info.encode(message.mobile_card[i], writer.uint32(26).fork()).ldelim();
        return writer;
      };
      m_3107_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3107_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.phone_card && message.phone_card.length || (message.phone_card = []);
            message.phone_card.push($root.p_prize_info.decode(reader, reader.uint32()));
            break;

           case 2:
            message.gprs && message.gprs.length || (message.gprs = []);
            message.gprs.push($root.p_prize_info.decode(reader, reader.uint32()));
            break;

           case 3:
            message.mobile_card && message.mobile_card.length || (message.mobile_card = []);
            message.mobile_card.push($root.p_prize_info.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3107_toc;
    }();
    $root.m_3108_tos = function() {
      function m_3108_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3108_tos.prototype.id = 0;
      m_3108_tos.prototype.phone = "";
      m_3108_tos.prototype.type = 1;
      m_3108_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(18).string(message.phone);
        writer.uint32(24).int32(message.type);
        return writer;
      };
      m_3108_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3108_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.phone = reader.string();
            break;

           case 3:
            message.type = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("phone")) throw $util.ProtocolError("missing required 'phone'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_3108_tos;
    }();
    $root.m_3108_toc = function() {
      function m_3108_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3108_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_3108_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        return writer;
      };
      m_3108_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3108_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_3108_toc;
    }();
    $root.m_3109_tos = function() {
      function m_3109_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3109_tos.prototype.id = 0;
      m_3109_tos.prototype.type = 1;
      m_3109_tos.prototype.flag = 1;
      m_3109_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).int32(message.type);
        null != message.flag && message.hasOwnProperty("flag") && writer.uint32(24).int32(message.flag);
        return writer;
      };
      m_3109_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3109_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.type = reader.int32();
            break;

           case 3:
            message.flag = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_3109_tos;
    }();
    $root.m_3109_toc = function() {
      function m_3109_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3109_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_3109_toc.prototype.password = "";
      m_3109_toc.prototype.card_no = "";
      m_3109_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        writer.uint32(18).string(message.password);
        null != message.card_no && message.hasOwnProperty("card_no") && writer.uint32(26).string(message.card_no);
        return writer;
      };
      m_3109_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3109_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           case 2:
            message.password = reader.string();
            break;

           case 3:
            message.card_no = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        if (!message.hasOwnProperty("password")) throw $util.ProtocolError("missing required 'password'", {
          instance: message
        });
        return message;
      };
      return m_3109_toc;
    }();
    $root.e_exchange_type = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "balance"] = 1;
      values[valuesById[2] = "chip"] = 2;
      return values;
    }();
    $root.e_yunyingshang = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "yidong"] = 1;
      values[valuesById[2] = "liantong"] = 2;
      values[valuesById[3] = "dianxin"] = 3;
      return values;
    }();
    $root.m_3110_tos = function() {
      function m_3110_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3110_tos.prototype.id = 0;
      m_3110_tos.prototype.phone = "";
      m_3110_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(18).string(message.phone);
        return writer;
      };
      m_3110_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3110_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.phone = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("phone")) throw $util.ProtocolError("missing required 'phone'", {
          instance: message
        });
        return message;
      };
      return m_3110_tos;
    }();
    $root.m_4006_toc = function() {
      function m_4006_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_4006_toc.prototype.val = 0;
      m_4006_toc.prototype.gold = 0;
      m_4006_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.val);
        writer.uint32(16).uint32(message.gold);
        return writer;
      };
      m_4006_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_4006_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.val = reader.uint32();
            break;

           case 2:
            message.gold = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        if (!message.hasOwnProperty("gold")) throw $util.ProtocolError("missing required 'gold'", {
          instance: message
        });
        return message;
      };
      return m_4006_toc;
    }();
    $root.m_4007_toc = function() {
      function m_4007_toc(properties) {
        this.balance_info = [];
        this.doll_info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_4007_toc.prototype.balance_info = $util.emptyArray;
      m_4007_toc.prototype.doll_info = $util.emptyArray;
      m_4007_toc.prototype.free_times = 0;
      m_4007_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.balance_info && message.balance_info.length) for (var i = 0; i < message.balance_info.length; ++i) $root.p_mission.encode(message.balance_info[i], writer.uint32(10).fork()).ldelim();
        if (null != message.doll_info && message.doll_info.length) for (var i = 0; i < message.doll_info.length; ++i) $root.p_mission.encode(message.doll_info[i], writer.uint32(18).fork()).ldelim();
        writer.uint32(24).uint32(message.free_times);
        return writer;
      };
      m_4007_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_4007_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance_info && message.balance_info.length || (message.balance_info = []);
            message.balance_info.push($root.p_mission.decode(reader, reader.uint32()));
            break;

           case 2:
            message.doll_info && message.doll_info.length || (message.doll_info = []);
            message.doll_info.push($root.p_mission.decode(reader, reader.uint32()));
            break;

           case 3:
            message.free_times = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("free_times")) throw $util.ProtocolError("missing required 'free_times'", {
          instance: message
        });
        return message;
      };
      return m_4007_toc;
    }();
    $root.p_mission = function() {
      function p_mission(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_mission.prototype.id = 0;
      p_mission.prototype.times = 0;
      p_mission.prototype.game_type = 1;
      p_mission.prototype.type = 1;
      p_mission.prototype.content = "";
      p_mission.prototype.val = 0;
      p_mission.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.times);
        writer.uint32(24).int32(message.game_type);
        writer.uint32(32).int32(message.type);
        writer.uint32(42).string(message.content);
        writer.uint32(48).uint32(message.val);
        return writer;
      };
      p_mission.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_mission();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.times = reader.uint32();
            break;

           case 3:
            message.game_type = reader.int32();
            break;

           case 4:
            message.type = reader.int32();
            break;

           case 5:
            message.content = reader.string();
            break;

           case 6:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("times")) throw $util.ProtocolError("missing required 'times'", {
          instance: message
        });
        if (!message.hasOwnProperty("game_type")) throw $util.ProtocolError("missing required 'game_type'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("content")) throw $util.ProtocolError("missing required 'content'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return p_mission;
    }();
    $root.p_condition = function() {
      function p_condition(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_condition.prototype.key = 0;
      p_condition.prototype.val = 0;
      p_condition.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.key);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      p_condition.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_condition();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.key = reader.uint32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("key")) throw $util.ProtocolError("missing required 'key'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return p_condition;
    }();
    $root.e_mission_type = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "daily"] = 1;
      values[valuesById[2] = "doll"] = 2;
      return values;
    }();
    $root.m_4008_tos = function() {
      function m_4008_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_4008_tos.prototype.type = 1;
      m_4008_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.type);
        return writer;
      };
      m_4008_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_4008_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_4008_tos;
    }();
    $root.m_4008_toc = function() {
      function m_4008_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_4008_toc.prototype.info = $util.emptyArray;
      m_4008_toc.prototype.free_times = 0;
      m_4008_toc.prototype.content = "";
      m_4008_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_mission.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        writer.uint32(16).uint32(message.free_times);
        writer.uint32(26).string(message.content);
        return writer;
      };
      m_4008_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_4008_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_mission.decode(reader, reader.uint32()));
            break;

           case 2:
            message.free_times = reader.uint32();
            break;

           case 3:
            message.content = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("free_times")) throw $util.ProtocolError("missing required 'free_times'", {
          instance: message
        });
        if (!message.hasOwnProperty("content")) throw $util.ProtocolError("missing required 'content'", {
          instance: message
        });
        return message;
      };
      return m_4008_toc;
    }();
    $root.m_4009_toc = function() {
      function m_4009_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_4009_toc.prototype.free_times = 0;
      m_4009_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.free_times);
        return writer;
      };
      m_4009_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_4009_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.free_times = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("free_times")) throw $util.ProtocolError("missing required 'free_times'", {
          instance: message
        });
        return message;
      };
      return m_4009_toc;
    }();
    $root.m_4010_toc = function() {
      function m_4010_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_4010_toc.prototype.info = $util.emptyArray;
      m_4010_toc.prototype.state = false;
      m_4010_toc.prototype.doing = null;
      m_4010_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_zoo_task.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        writer.uint32(16).bool(message.state);
        null != message.doing && message.hasOwnProperty("doing") && $root.p_zoo_task.encode(message.doing, writer.uint32(26).fork()).ldelim();
        return writer;
      };
      m_4010_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_4010_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_zoo_task.decode(reader, reader.uint32()));
            break;

           case 2:
            message.state = reader.bool();
            break;

           case 3:
            message.doing = $root.p_zoo_task.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        return message;
      };
      return m_4010_toc;
    }();
    $root.p_zoo_task = function() {
      function p_zoo_task(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_zoo_task.prototype.id = 0;
      p_zoo_task.prototype.level = 0;
      p_zoo_task.prototype.animal = 0;
      p_zoo_task.prototype.condition = 0;
      p_zoo_task.prototype.val = 0;
      p_zoo_task.prototype.rewared = 0;
      p_zoo_task.prototype.rewared_type = 1;
      p_zoo_task.prototype.state = 0;
      p_zoo_task.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.level);
        null != message.animal && message.hasOwnProperty("animal") && writer.uint32(24).int32(message.animal);
        writer.uint32(32).uint32(message.condition);
        writer.uint32(40).uint32(message.val);
        writer.uint32(48).uint32(message.rewared);
        writer.uint32(56).int32(message.rewared_type);
        writer.uint32(64).uint32(message.state);
        return writer;
      };
      p_zoo_task.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_zoo_task();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.level = reader.uint32();
            break;

           case 3:
            message.animal = reader.int32();
            break;

           case 4:
            message.condition = reader.uint32();
            break;

           case 5:
            message.val = reader.uint32();
            break;

           case 6:
            message.rewared = reader.uint32();
            break;

           case 7:
            message.rewared_type = reader.int32();
            break;

           case 8:
            message.state = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("level")) throw $util.ProtocolError("missing required 'level'", {
          instance: message
        });
        if (!message.hasOwnProperty("condition")) throw $util.ProtocolError("missing required 'condition'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        if (!message.hasOwnProperty("rewared")) throw $util.ProtocolError("missing required 'rewared'", {
          instance: message
        });
        if (!message.hasOwnProperty("rewared_type")) throw $util.ProtocolError("missing required 'rewared_type'", {
          instance: message
        });
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        return message;
      };
      return p_zoo_task;
    }();
    $root.e_game_task_type = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "animal"] = 1;
      values[valuesById[2] = "balance"] = 2;
      return values;
    }();
    $root.m_4011_toc = function() {
      function m_4011_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_4011_toc.prototype.info = null;
      m_4011_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_zoo_task.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_4011_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_4011_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_zoo_task.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_4011_toc;
    }();
    $root.m_4012_tos = function() {
      function m_4012_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_4012_tos.prototype.id = 0;
      m_4012_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        return writer;
      };
      m_4012_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_4012_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_4012_tos;
    }();
    $root.m_4012_toc = function() {
      function m_4012_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_4012_toc.prototype.balance = 0;
      m_4012_toc.prototype.chip = 0;
      m_4012_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.balance);
        writer.uint32(16).uint32(message.chip);
        return writer;
      };
      m_4012_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_4012_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint32();
            break;

           case 2:
            message.chip = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        if (!message.hasOwnProperty("chip")) throw $util.ProtocolError("missing required 'chip'", {
          instance: message
        });
        return message;
      };
      return m_4012_toc;
    }();
    $root.m_4101_tos = function() {
      function m_4101_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_4101_tos.prototype.type = 1;
      m_4101_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.type);
        return writer;
      };
      m_4101_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_4101_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_4101_tos;
    }();
    $root.m_4101_toc = function() {
      function m_4101_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_4101_toc.prototype.start_time = 0;
      m_4101_toc.prototype.end_time = 0;
      m_4101_toc.prototype.state = false;
      m_4101_toc.prototype.info = $util.emptyArray;
      m_4101_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.start_time);
        writer.uint32(16).uint32(message.end_time);
        writer.uint32(24).bool(message.state);
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_profit_setting.encode(message.info[i], writer.uint32(34).fork()).ldelim();
        return writer;
      };
      m_4101_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_4101_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.start_time = reader.uint32();
            break;

           case 2:
            message.end_time = reader.uint32();
            break;

           case 3:
            message.state = reader.bool();
            break;

           case 4:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_profit_setting.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("start_time")) throw $util.ProtocolError("missing required 'start_time'", {
          instance: message
        });
        if (!message.hasOwnProperty("end_time")) throw $util.ProtocolError("missing required 'end_time'", {
          instance: message
        });
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        return message;
      };
      return m_4101_toc;
    }();
    $root.m_4102_tos = function() {
      function m_4102_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_4102_tos.prototype.type = 1;
      m_4102_tos.prototype.amount = 0;
      m_4102_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.type);
        writer.uint32(16).uint32(message.amount);
        return writer;
      };
      m_4102_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_4102_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           case 2:
            message.amount = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("amount")) throw $util.ProtocolError("missing required 'amount'", {
          instance: message
        });
        return message;
      };
      return m_4102_tos;
    }();
    $root.m_4102_toc = function() {
      function m_4102_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_4102_toc.prototype.self = null;
      m_4102_toc.prototype.info = $util.emptyArray;
      m_4102_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_self_game_profit.encode(message.self, writer.uint32(10).fork()).ldelim();
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_profit_rank.encode(message.info[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      m_4102_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_4102_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.self = $root.p_self_game_profit.decode(reader, reader.uint32());
            break;

           case 2:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_profit_rank.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("self")) throw $util.ProtocolError("missing required 'self'", {
          instance: message
        });
        return message;
      };
      return m_4102_toc;
    }();
    $root.p_self_game_profit = function() {
      function p_self_game_profit(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_self_game_profit.prototype.profit = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      p_self_game_profit.prototype.now_win = null;
      p_self_game_profit.prototype.next_win = null;
      p_self_game_profit.prototype.val = 0;
      p_self_game_profit.prototype.time = 0;
      p_self_game_profit.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int64(message.profit);
        $root.p_profit_win.encode(message.now_win, writer.uint32(18).fork()).ldelim();
        $root.p_profit_win.encode(message.next_win, writer.uint32(26).fork()).ldelim();
        writer.uint32(32).uint32(message.val);
        writer.uint32(40).uint32(message.time);
        return writer;
      };
      p_self_game_profit.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_self_game_profit();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.profit = reader.int64();
            break;

           case 2:
            message.now_win = $root.p_profit_win.decode(reader, reader.uint32());
            break;

           case 3:
            message.next_win = $root.p_profit_win.decode(reader, reader.uint32());
            break;

           case 4:
            message.val = reader.uint32();
            break;

           case 5:
            message.time = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("profit")) throw $util.ProtocolError("missing required 'profit'", {
          instance: message
        });
        if (!message.hasOwnProperty("now_win")) throw $util.ProtocolError("missing required 'now_win'", {
          instance: message
        });
        if (!message.hasOwnProperty("next_win")) throw $util.ProtocolError("missing required 'next_win'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return p_self_game_profit;
    }();
    $root.m_4103_tos = function() {
      function m_4103_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_4103_tos.prototype.type = 1;
      m_4103_tos.prototype.amount = 0;
      m_4103_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.type);
        writer.uint32(16).uint32(message.amount);
        return writer;
      };
      m_4103_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_4103_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           case 2:
            message.amount = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("amount")) throw $util.ProtocolError("missing required 'amount'", {
          instance: message
        });
        return message;
      };
      return m_4103_tos;
    }();
    $root.m_4103_toc = function() {
      function m_4103_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_4103_toc.prototype.info = $util.emptyArray;
      m_4103_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_profit_rank.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_4103_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_4103_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_profit_rank.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_4103_toc;
    }();
    $root.m_3001_toc = function() {
      function m_3001_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3001_toc.prototype.key = 1;
      m_3001_toc.prototype.value = "";
      m_3001_toc.prototype.type = 1;
      m_3001_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.key);
        writer.uint32(18).string(message.value);
        writer.uint32(24).int32(message.type);
        return writer;
      };
      m_3001_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3001_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.key = reader.int32();
            break;

           case 2:
            message.value = reader.string();
            break;

           case 3:
            message.type = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("key")) throw $util.ProtocolError("missing required 'key'", {
          instance: message
        });
        if (!message.hasOwnProperty("value")) throw $util.ProtocolError("missing required 'value'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_3001_toc;
    }();
    $root.p_role_info = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "balance"] = 1;
      return values;
    }();
    $root.e_add_balance = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "other"] = 1;
      values[valuesById[2] = "fruit"] = 2;
      values[valuesById[3] = "xiafen"] = 3;
      values[valuesById[4] = "buy_tools"] = 4;
      return values;
    }();
    $root.m_3002_toc = function() {
      function m_3002_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3002_toc.prototype.info = $util.emptyArray;
      m_3002_toc.prototype.state = false;
      m_3002_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_deposit.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        writer.uint32(16).bool(message.state);
        return writer;
      };
      m_3002_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3002_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_deposit.decode(reader, reader.uint32()));
            break;

           case 2:
            message.state = reader.bool();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        return message;
      };
      return m_3002_toc;
    }();
    $root.p_deposit = function() {
      function p_deposit(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_deposit.prototype.id = 0;
      p_deposit.prototype.cost = 0;
      p_deposit.prototype.charm = 0;
      p_deposit.prototype.gold = 0;
      p_deposit.prototype.gift = 0;
      p_deposit.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.cost);
        writer.uint32(24).uint32(message.charm);
        writer.uint32(32).uint32(message.gold);
        writer.uint32(40).uint32(message.gift);
        return writer;
      };
      p_deposit.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_deposit();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.cost = reader.uint32();
            break;

           case 3:
            message.charm = reader.uint32();
            break;

           case 4:
            message.gold = reader.uint32();
            break;

           case 5:
            message.gift = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("cost")) throw $util.ProtocolError("missing required 'cost'", {
          instance: message
        });
        if (!message.hasOwnProperty("charm")) throw $util.ProtocolError("missing required 'charm'", {
          instance: message
        });
        if (!message.hasOwnProperty("gold")) throw $util.ProtocolError("missing required 'gold'", {
          instance: message
        });
        if (!message.hasOwnProperty("gift")) throw $util.ProtocolError("missing required 'gift'", {
          instance: message
        });
        return message;
      };
      return p_deposit;
    }();
    $root.m_3003_toc = function() {
      function m_3003_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3003_toc.prototype.chip = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_3003_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.chip);
        return writer;
      };
      m_3003_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3003_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.chip = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("chip")) throw $util.ProtocolError("missing required 'chip'", {
          instance: message
        });
        return message;
      };
      return m_3003_toc;
    }();
    $root.m_3010_tos = function() {
      function m_3010_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3010_tos.prototype.id = 0;
      m_3010_tos.prototype.url = "";
      m_3010_tos.prototype.charge_type = 0;
      m_3010_tos.prototype.type = 0;
      m_3010_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        null != message.url && message.hasOwnProperty("url") && writer.uint32(18).string(message.url);
        writer.uint32(24).uint32(message.charge_type);
        writer.uint32(32).uint32(message.type);
        return writer;
      };
      m_3010_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3010_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.url = reader.string();
            break;

           case 3:
            message.charge_type = reader.uint32();
            break;

           case 4:
            message.type = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("charge_type")) throw $util.ProtocolError("missing required 'charge_type'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_3010_tos;
    }();
    $root.m_3010_toc = function() {
      function m_3010_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3010_toc.prototype.charge = "";
      m_3010_toc.prototype.charge_type = 0;
      m_3010_toc.prototype.type = 0;
      m_3010_toc.prototype.url_type = 0;
      m_3010_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.charge);
        writer.uint32(16).uint32(message.charge_type);
        writer.uint32(24).uint32(message.type);
        writer.uint32(32).uint32(message.url_type);
        return writer;
      };
      m_3010_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3010_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.charge = reader.string();
            break;

           case 2:
            message.charge_type = reader.uint32();
            break;

           case 3:
            message.type = reader.uint32();
            break;

           case 4:
            message.url_type = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("charge")) throw $util.ProtocolError("missing required 'charge'", {
          instance: message
        });
        if (!message.hasOwnProperty("charge_type")) throw $util.ProtocolError("missing required 'charge_type'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("url_type")) throw $util.ProtocolError("missing required 'url_type'", {
          instance: message
        });
        return message;
      };
      return m_3010_toc;
    }();
    $root.e_recharge_type = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "two_code"] = 1;
      values[valuesById[2] = "ping"] = 2;
      values[valuesById[3] = "wft"] = 3;
      values[valuesById[4] = "wft_p"] = 4;
      values[valuesById[5] = "wx_QR_code"] = 5;
      return values;
    }();
    $root.m_3011_toc = function() {
      function m_3011_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3011_toc.prototype.val = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_3011_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_3011_toc.prototype.charm_val = 0;
      m_3011_toc.prototype.charm = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_3011_toc.prototype.gift_val = 0;
      m_3011_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.val);
        writer.uint32(16).uint64(message.balance);
        writer.uint32(24).uint32(message.charm_val);
        writer.uint32(32).uint64(message.charm);
        writer.uint32(40).uint32(message.gift_val);
        return writer;
      };
      m_3011_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3011_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.val = reader.uint64();
            break;

           case 2:
            message.balance = reader.uint64();
            break;

           case 3:
            message.charm_val = reader.uint32();
            break;

           case 4:
            message.charm = reader.uint64();
            break;

           case 5:
            message.gift_val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        if (!message.hasOwnProperty("charm_val")) throw $util.ProtocolError("missing required 'charm_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("charm")) throw $util.ProtocolError("missing required 'charm'", {
          instance: message
        });
        if (!message.hasOwnProperty("gift_val")) throw $util.ProtocolError("missing required 'gift_val'", {
          instance: message
        });
        return message;
      };
      return m_3011_toc;
    }();
    $root.m_3012_tos = function() {
      function m_3012_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3012_tos.prototype.id = 0;
      m_3012_tos.prototype.amount = 0;
      m_3012_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.amount);
        return writer;
      };
      m_3012_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3012_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.amount = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("amount")) throw $util.ProtocolError("missing required 'amount'", {
          instance: message
        });
        return message;
      };
      return m_3012_tos;
    }();
    $root.m_3012_toc = function() {
      function m_3012_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3012_toc.prototype.info = $util.emptyArray;
      m_3012_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_role_detail.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3012_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3012_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_role_detail.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3012_toc;
    }();
    $root.p_role_detail = function() {
      function p_role_detail(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_role_detail.prototype.id = 0;
      p_role_detail.prototype.role_id = 0;
      p_role_detail.prototype.type = 0;
      p_role_detail.prototype.val = 0;
      p_role_detail.prototype.time = 0;
      p_role_detail.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.role_id);
        writer.uint32(24).int32(message.type);
        writer.uint32(32).int32(message.val);
        writer.uint32(40).uint32(message.time);
        return writer;
      };
      p_role_detail.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_role_detail();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.role_id = reader.uint32();
            break;

           case 3:
            message.type = reader.int32();
            break;

           case 4:
            message.val = reader.int32();
            break;

           case 5:
            message.time = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return p_role_detail;
    }();
    $root.e_gold_type = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[0] = "other"] = 0;
      values[valuesById[1] = "recharge"] = 1;
      values[valuesById[2] = "good_luck"] = 2;
      values[valuesById[3] = "farm"] = 3;
      values[valuesById[4] = "doll"] = 4;
      values[valuesById[5] = "guess"] = 5;
      values[valuesById[6] = "gift"] = 6;
      values[valuesById[7] = "exchange"] = 7;
      values[valuesById[8] = "fish"] = 8;
      values[valuesById[9] = "cat"] = 9;
      values[valuesById[10] = "give_money"] = 10;
      values[valuesById[11] = "zoo"] = 11;
      values[valuesById[16] = "stock"] = 16;
      values[valuesById[17] = "daily"] = 17;
      values[valuesById[18] = "cms"] = 18;
      values[valuesById[19] = "compensate_gold"] = 19;
      values[valuesById[20] = "recharge_gift"] = 20;
      values[valuesById[21] = "dog_run"] = 21;
      values[valuesById[22] = "treasure"] = 22;
      values[valuesById[23] = "fruit"] = 23;
      values[valuesById[24] = "rps"] = 24;
      values[valuesById[25] = "zoo_task"] = 25;
      values[valuesById[26] = "xyxw_reward"] = 26;
      values[valuesById[27] = "xyxw_retrun"] = 27;
      values[valuesById[28] = "baccarat"] = 28;
      values[valuesById[29] = "singleton"] = 29;
      values[valuesById[30] = "xiafen"] = 30;
      values[valuesById[31] = "turntable"] = 31;
      values[valuesById[32] = "deposit_return"] = 32;
      values[valuesById[33] = "buy_tools"] = 33;
      return values;
    }();
    $root.m_3013_toc = function() {
      function m_3013_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3013_toc.prototype.info = $util.emptyArray;
      m_3013_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_role_address.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3013_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3013_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_role_address.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3013_toc;
    }();
    $root.p_role_address = function() {
      function p_role_address(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_role_address.prototype.id = 0;
      p_role_address.prototype.name = "";
      p_role_address.prototype.phone = "";
      p_role_address.prototype.address = "";
      p_role_address.prototype.state = false;
      p_role_address.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(18).string(message.name);
        writer.uint32(26).string(message.phone);
        writer.uint32(34).string(message.address);
        null != message.state && message.hasOwnProperty("state") && writer.uint32(40).bool(message.state);
        return writer;
      };
      p_role_address.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_role_address();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.name = reader.string();
            break;

           case 3:
            message.phone = reader.string();
            break;

           case 4:
            message.address = reader.string();
            break;

           case 5:
            message.state = reader.bool();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("phone")) throw $util.ProtocolError("missing required 'phone'", {
          instance: message
        });
        if (!message.hasOwnProperty("address")) throw $util.ProtocolError("missing required 'address'", {
          instance: message
        });
        return message;
      };
      return p_role_address;
    }();
    $root.m_3014_tos = function() {
      function m_3014_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3014_tos.prototype.name = "";
      m_3014_tos.prototype.phone = "";
      m_3014_tos.prototype.address = "";
      m_3014_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.name);
        writer.uint32(18).string(message.phone);
        writer.uint32(26).string(message.address);
        return writer;
      };
      m_3014_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3014_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.name = reader.string();
            break;

           case 2:
            message.phone = reader.string();
            break;

           case 3:
            message.address = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("phone")) throw $util.ProtocolError("missing required 'phone'", {
          instance: message
        });
        if (!message.hasOwnProperty("address")) throw $util.ProtocolError("missing required 'address'", {
          instance: message
        });
        return message;
      };
      return m_3014_tos;
    }();
    $root.m_3015_tos = function() {
      function m_3015_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3015_tos.prototype.info = null;
      m_3015_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_role_address.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3015_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3015_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_role_address.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_3015_tos;
    }();
    $root.m_3016_tos = function() {
      function m_3016_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3016_tos.prototype.id = 0;
      m_3016_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        return writer;
      };
      m_3016_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3016_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_3016_tos;
    }();
    $root.m_3017_tos = function() {
      function m_3017_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3017_tos.prototype.id = 0;
      m_3017_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        return writer;
      };
      m_3017_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3017_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_3017_tos;
    }();
    $root.m_3018_tos = function() {
      function m_3018_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3018_tos.prototype.type = 1;
      m_3018_tos.prototype.id = 0;
      m_3018_tos.prototype.amount = 0;
      m_3018_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.type);
        writer.uint32(16).uint32(message.id);
        writer.uint32(24).uint32(message.amount);
        return writer;
      };
      m_3018_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3018_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           case 2:
            message.id = reader.uint32();
            break;

           case 3:
            message.amount = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("amount")) throw $util.ProtocolError("missing required 'amount'", {
          instance: message
        });
        return message;
      };
      return m_3018_tos;
    }();
    $root.m_3018_toc = function() {
      function m_3018_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3018_toc.prototype.info = $util.emptyArray;
      m_3018_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_role_prize.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3018_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3018_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_role_prize.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3018_toc;
    }();
    $root.p_role_prize = function() {
      function p_role_prize(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_role_prize.prototype.id = 0;
      p_role_prize.prototype.prize_name = "";
      p_role_prize.prototype.prize_val = 0;
      p_role_prize.prototype.time = 0;
      p_role_prize.prototype.state = 1;
      p_role_prize.prototype.hit_val = 0;
      p_role_prize.prototype.picture = "";
      p_role_prize.prototype.prize_id = 0;
      p_role_prize.prototype.cami = "";
      p_role_prize.prototype.item_type = 1;
      p_role_prize.prototype.card_no = "";
      p_role_prize.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(18).string(message.prize_name);
        writer.uint32(24).uint32(message.prize_val);
        writer.uint32(32).uint32(message.time);
        writer.uint32(40).int32(message.state);
        writer.uint32(48).uint32(message.hit_val);
        writer.uint32(58).string(message.picture);
        writer.uint32(64).uint32(message.prize_id);
        null != message.cami && message.hasOwnProperty("cami") && writer.uint32(74).string(message.cami);
        writer.uint32(80).int32(message.item_type);
        null != message.card_no && message.hasOwnProperty("card_no") && writer.uint32(90).string(message.card_no);
        return writer;
      };
      p_role_prize.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_role_prize();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.prize_name = reader.string();
            break;

           case 3:
            message.prize_val = reader.uint32();
            break;

           case 4:
            message.time = reader.uint32();
            break;

           case 5:
            message.state = reader.int32();
            break;

           case 6:
            message.hit_val = reader.uint32();
            break;

           case 7:
            message.picture = reader.string();
            break;

           case 8:
            message.prize_id = reader.uint32();
            break;

           case 9:
            message.cami = reader.string();
            break;

           case 10:
            message.item_type = reader.int32();
            break;

           case 11:
            message.card_no = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("prize_name")) throw $util.ProtocolError("missing required 'prize_name'", {
          instance: message
        });
        if (!message.hasOwnProperty("prize_val")) throw $util.ProtocolError("missing required 'prize_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        if (!message.hasOwnProperty("hit_val")) throw $util.ProtocolError("missing required 'hit_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("picture")) throw $util.ProtocolError("missing required 'picture'", {
          instance: message
        });
        if (!message.hasOwnProperty("prize_id")) throw $util.ProtocolError("missing required 'prize_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("item_type")) throw $util.ProtocolError("missing required 'item_type'", {
          instance: message
        });
        return message;
      };
      return p_role_prize;
    }();
    $root.e_prize_state = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "not_get"] = 1;
      values[valuesById[2] = "not_send"] = 2;
      values[valuesById[3] = "send"] = 3;
      values[valuesById[4] = "phone_error"] = 4;
      return values;
    }();
    $root.e_prize_source = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "doll"] = 1;
      values[valuesById[2] = "mall"] = 2;
      values[valuesById[3] = "red_bag"] = 3;
      values[valuesById[4] = "free_red_bag"] = 4;
      return values;
    }();
    $root.m_3019_toc = function() {
      function m_3019_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3019_toc.prototype.info = null;
      m_3019_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_self_info.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3019_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3019_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_self_info.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_3019_toc;
    }();
    $root.p_self_info = function() {
      function p_self_info(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_self_info.prototype.role_id = 0;
      p_self_info.prototype.name = "";
      p_self_info.prototype.icon = "";
      p_self_info.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      p_self_info.prototype.charm = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      p_self_info.prototype.vip = 0;
      p_self_info.prototype.friends = 0;
      p_self_info.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        writer.uint32(18).string(message.name);
        writer.uint32(26).string(message.icon);
        writer.uint32(32).uint64(message.balance);
        writer.uint32(40).uint64(message.charm);
        writer.uint32(48).uint32(message.vip);
        writer.uint32(56).uint32(message.friends);
        return writer;
      };
      p_self_info.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_self_info();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.name = reader.string();
            break;

           case 3:
            message.icon = reader.string();
            break;

           case 4:
            message.balance = reader.uint64();
            break;

           case 5:
            message.charm = reader.uint64();
            break;

           case 6:
            message.vip = reader.uint32();
            break;

           case 7:
            message.friends = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("icon")) throw $util.ProtocolError("missing required 'icon'", {
          instance: message
        });
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        if (!message.hasOwnProperty("charm")) throw $util.ProtocolError("missing required 'charm'", {
          instance: message
        });
        if (!message.hasOwnProperty("vip")) throw $util.ProtocolError("missing required 'vip'", {
          instance: message
        });
        if (!message.hasOwnProperty("friends")) throw $util.ProtocolError("missing required 'friends'", {
          instance: message
        });
        return message;
      };
      return p_self_info;
    }();
    $root.m_3020_toc = function() {
      function m_3020_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3020_toc.prototype.info = $util.emptyArray;
      m_3020_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_profit_log.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3020_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3020_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_profit_log.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3020_toc;
    }();
    $root.p_profit_log = function() {
      function p_profit_log(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_profit_log.prototype.time = 0;
      p_profit_log.prototype.profit = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      p_profit_log.prototype.win_type = 1;
      p_profit_log.prototype.win = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      p_profit_log.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.time);
        writer.uint32(16).int64(message.profit);
        writer.uint32(24).int32(message.win_type);
        writer.uint32(32).uint64(message.win);
        return writer;
      };
      p_profit_log.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_profit_log();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.time = reader.uint32();
            break;

           case 2:
            message.profit = reader.int64();
            break;

           case 3:
            message.win_type = reader.int32();
            break;

           case 4:
            message.win = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("profit")) throw $util.ProtocolError("missing required 'profit'", {
          instance: message
        });
        if (!message.hasOwnProperty("win_type")) throw $util.ProtocolError("missing required 'win_type'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        return message;
      };
      return p_profit_log;
    }();
    $root.e_win_type = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "balance"] = 1;
      values[valuesById[2] = "rmb"] = 2;
      values[valuesById[3] = "chip"] = 3;
      return values;
    }();
    $root.m_3022_tos = function() {
      function m_3022_tos(properties) {
        this.picture = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3022_tos.prototype.words = "";
      m_3022_tos.prototype.picture = $util.emptyArray;
      m_3022_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.words);
        if (null != message.picture && message.picture.length) for (var i = 0; i < message.picture.length; ++i) $root.p_picture.encode(message.picture[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      m_3022_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3022_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.words = reader.string();
            break;

           case 2:
            message.picture && message.picture.length || (message.picture = []);
            message.picture.push($root.p_picture.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("words")) throw $util.ProtocolError("missing required 'words'", {
          instance: message
        });
        return message;
      };
      return m_3022_tos;
    }();
    $root.m_3022_toc = function() {
      function m_3022_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3022_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_3022_toc.prototype.val = 0;
      m_3022_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      m_3022_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3022_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return m_3022_toc;
    }();
    $root.p_picture = function() {
      function p_picture(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_picture.prototype.thumb = "";
      p_picture.prototype.picture = "";
      p_picture.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.thumb);
        writer.uint32(18).string(message.picture);
        return writer;
      };
      p_picture.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_picture();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.thumb = reader.string();
            break;

           case 2:
            message.picture = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("thumb")) throw $util.ProtocolError("missing required 'thumb'", {
          instance: message
        });
        if (!message.hasOwnProperty("picture")) throw $util.ProtocolError("missing required 'picture'", {
          instance: message
        });
        return message;
      };
      return p_picture;
    }();
    $root.m_3023_tos = function() {
      function m_3023_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3023_tos.prototype.id = 0;
      m_3023_tos.prototype.amount = 0;
      m_3023_tos.prototype.type = 1;
      m_3023_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.amount);
        writer.uint32(24).int32(message.type);
        return writer;
      };
      m_3023_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3023_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.amount = reader.uint32();
            break;

           case 3:
            message.type = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("amount")) throw $util.ProtocolError("missing required 'amount'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_3023_tos;
    }();
    $root.m_3023_toc = function() {
      function m_3023_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3023_toc.prototype.info = $util.emptyArray;
      m_3023_toc.prototype.num = 0;
      m_3023_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_share_log.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        writer.uint32(16).uint32(message.num);
        return writer;
      };
      m_3023_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3023_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_share_log.decode(reader, reader.uint32()));
            break;

           case 2:
            message.num = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        return message;
      };
      return m_3023_toc;
    }();
    $root.e_share_type = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "all"] = 1;
      values[valuesById[2] = "good"] = 2;
      return values;
    }();
    $root.p_share_log = function() {
      function p_share_log(properties) {
        this.picture = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_share_log.prototype.id = 0;
      p_share_log.prototype.role_id = 0;
      p_share_log.prototype.name = "";
      p_share_log.prototype.icon = "";
      p_share_log.prototype.words = "";
      p_share_log.prototype.time = 0;
      p_share_log.prototype.picture = $util.emptyArray;
      p_share_log.prototype.recommend = false;
      p_share_log.prototype.do_like = 0;
      p_share_log.prototype.vip = 0;
      p_share_log.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.role_id);
        writer.uint32(26).string(message.name);
        writer.uint32(34).string(message.icon);
        writer.uint32(50).string(message.words);
        writer.uint32(56).uint32(message.time);
        if (null != message.picture && message.picture.length) for (var i = 0; i < message.picture.length; ++i) $root.p_picture.encode(message.picture[i], writer.uint32(66).fork()).ldelim();
        writer.uint32(72).bool(message.recommend);
        writer.uint32(80).uint32(message.do_like);
        writer.uint32(88).uint32(message.vip);
        return writer;
      };
      p_share_log.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_share_log();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.role_id = reader.uint32();
            break;

           case 3:
            message.name = reader.string();
            break;

           case 4:
            message.icon = reader.string();
            break;

           case 6:
            message.words = reader.string();
            break;

           case 7:
            message.time = reader.uint32();
            break;

           case 8:
            message.picture && message.picture.length || (message.picture = []);
            message.picture.push($root.p_picture.decode(reader, reader.uint32()));
            break;

           case 9:
            message.recommend = reader.bool();
            break;

           case 10:
            message.do_like = reader.uint32();
            break;

           case 11:
            message.vip = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("icon")) throw $util.ProtocolError("missing required 'icon'", {
          instance: message
        });
        if (!message.hasOwnProperty("words")) throw $util.ProtocolError("missing required 'words'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("recommend")) throw $util.ProtocolError("missing required 'recommend'", {
          instance: message
        });
        if (!message.hasOwnProperty("do_like")) throw $util.ProtocolError("missing required 'do_like'", {
          instance: message
        });
        if (!message.hasOwnProperty("vip")) throw $util.ProtocolError("missing required 'vip'", {
          instance: message
        });
        return message;
      };
      return p_share_log;
    }();
    $root.m_3024_tos = function() {
      function m_3024_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3024_tos.prototype.id = 0;
      m_3024_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        return writer;
      };
      m_3024_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3024_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_3024_tos;
    }();
    $root.m_3024_toc = function() {
      function m_3024_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3024_toc.prototype.charm = 0;
      m_3024_toc.prototype.do_like = 0;
      m_3024_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.charm);
        writer.uint32(16).uint32(message.do_like);
        return writer;
      };
      m_3024_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3024_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.charm = reader.uint32();
            break;

           case 2:
            message.do_like = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("charm")) throw $util.ProtocolError("missing required 'charm'", {
          instance: message
        });
        if (!message.hasOwnProperty("do_like")) throw $util.ProtocolError("missing required 'do_like'", {
          instance: message
        });
        return message;
      };
      return m_3024_toc;
    }();
    $root.m_3025_tos = function() {
      function m_3025_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3025_tos.prototype.id = 0;
      m_3025_tos.prototype.amount = 0;
      m_3025_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.amount);
        return writer;
      };
      m_3025_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3025_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.amount = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("amount")) throw $util.ProtocolError("missing required 'amount'", {
          instance: message
        });
        return message;
      };
      return m_3025_tos;
    }();
    $root.m_3025_toc = function() {
      function m_3025_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3025_toc.prototype.info = $util.emptyArray;
      m_3025_toc.prototype.val = 0;
      m_3025_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_share_log.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      m_3025_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3025_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_share_log.decode(reader, reader.uint32()));
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return m_3025_toc;
    }();
    $root.m_3026_toc = function() {
      function m_3026_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3026_toc.prototype.profit = 0;
      m_3026_toc.prototype.erase_profit = 0;
      m_3026_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.profit);
        writer.uint32(16).uint32(message.erase_profit);
        return writer;
      };
      m_3026_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3026_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.profit = reader.uint32();
            break;

           case 2:
            message.erase_profit = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("profit")) throw $util.ProtocolError("missing required 'profit'", {
          instance: message
        });
        if (!message.hasOwnProperty("erase_profit")) throw $util.ProtocolError("missing required 'erase_profit'", {
          instance: message
        });
        return message;
      };
      return m_3026_toc;
    }();
    $root.m_3027_tos = function() {
      function m_3027_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3027_tos.prototype.level = 0;
      m_3027_tos.prototype.amount = 0;
      m_3027_tos.prototype.page = 0;
      m_3027_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.level);
        writer.uint32(16).uint32(message.amount);
        writer.uint32(24).uint32(message.page);
        return writer;
      };
      m_3027_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3027_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.level = reader.uint32();
            break;

           case 2:
            message.amount = reader.uint32();
            break;

           case 3:
            message.page = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("level")) throw $util.ProtocolError("missing required 'level'", {
          instance: message
        });
        if (!message.hasOwnProperty("amount")) throw $util.ProtocolError("missing required 'amount'", {
          instance: message
        });
        if (!message.hasOwnProperty("page")) throw $util.ProtocolError("missing required 'page'", {
          instance: message
        });
        return message;
      };
      return m_3027_tos;
    }();
    $root.m_3027_toc = function() {
      function m_3027_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3027_toc.prototype.info = $util.emptyArray;
      m_3027_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_friend_info.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3027_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3027_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_friend_info.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3027_toc;
    }();
    $root.p_friend_info = function() {
      function p_friend_info(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_friend_info.prototype.role_id = 0;
      p_friend_info.prototype.name = "";
      p_friend_info.prototype.icon = "";
      p_friend_info.prototype.balance = 0;
      p_friend_info.prototype.vip = 0;
      p_friend_info.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        writer.uint32(18).string(message.name);
        writer.uint32(26).string(message.icon);
        writer.uint32(32).uint32(message.balance);
        writer.uint32(40).uint32(message.vip);
        return writer;
      };
      p_friend_info.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_friend_info();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.name = reader.string();
            break;

           case 3:
            message.icon = reader.string();
            break;

           case 4:
            message.balance = reader.uint32();
            break;

           case 5:
            message.vip = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("icon")) throw $util.ProtocolError("missing required 'icon'", {
          instance: message
        });
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        if (!message.hasOwnProperty("vip")) throw $util.ProtocolError("missing required 'vip'", {
          instance: message
        });
        return message;
      };
      return p_friend_info;
    }();
    $root.m_3028_toc = function() {
      function m_3028_toc(properties) {
        this.doll = [];
        this.mall = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3028_toc.prototype.doll = $util.emptyArray;
      m_3028_toc.prototype.mall = $util.emptyArray;
      m_3028_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.doll && message.doll.length) for (var i = 0; i < message.doll.length; ++i) $root.p_run.encode(message.doll[i], writer.uint32(10).fork()).ldelim();
        if (null != message.mall && message.mall.length) for (var i = 0; i < message.mall.length; ++i) $root.p_run.encode(message.mall[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      m_3028_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3028_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.doll && message.doll.length || (message.doll = []);
            message.doll.push($root.p_run.decode(reader, reader.uint32()));
            break;

           case 2:
            message.mall && message.mall.length || (message.mall = []);
            message.mall.push($root.p_run.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3028_toc;
    }();
    $root.p_run = function() {
      function p_run(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_run.prototype.name = "";
      p_run.prototype.item_name = "";
      p_run.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.name);
        writer.uint32(18).string(message.item_name);
        return writer;
      };
      p_run.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_run();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.name = reader.string();
            break;

           case 2:
            message.item_name = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("item_name")) throw $util.ProtocolError("missing required 'item_name'", {
          instance: message
        });
        return message;
      };
      return p_run;
    }();
    $root.m_3029_tos = function() {
      function m_3029_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3029_tos.prototype.phone = "";
      m_3029_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.phone);
        return writer;
      };
      m_3029_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3029_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.phone = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("phone")) throw $util.ProtocolError("missing required 'phone'", {
          instance: message
        });
        return message;
      };
      return m_3029_tos;
    }();
    $root.m_3030_tos = function() {
      function m_3030_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3030_tos.prototype.code = 0;
      m_3030_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.code);
        return writer;
      };
      m_3030_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3030_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.code = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("code")) throw $util.ProtocolError("missing required 'code'", {
          instance: message
        });
        return message;
      };
      return m_3030_tos;
    }();
    $root.m_3030_toc = function() {
      function m_3030_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3030_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_3030_toc.prototype.val = 0;
      m_3030_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      m_3030_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3030_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return m_3030_toc;
    }();
    $root.m_3031_toc = function() {
      function m_3031_toc(properties) {
        this.point = [];
        this.people = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3031_toc.prototype.point = $util.emptyArray;
      m_3031_toc.prototype.people = $util.emptyArray;
      m_3031_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.point && message.point.length) for (var i = 0; i < message.point.length; ++i) writer.uint32(8).uint32(message.point[i]);
        if (null != message.people && message.people.length) for (var i = 0; i < message.people.length; ++i) writer.uint32(16).uint32(message.people[i]);
        return writer;
      };
      m_3031_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3031_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.point && message.point.length || (message.point = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.point.push(reader.uint32());
            } else message.point.push(reader.uint32());
            break;

           case 2:
            message.people && message.people.length || (message.people = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.people.push(reader.uint32());
            } else message.people.push(reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3031_toc;
    }();
    $root.m_3032_toc = function() {
      function m_3032_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3032_toc.prototype.info = $util.emptyArray;
      m_3032_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) writer.uint32(8).int32(message.info[i]);
        return writer;
      };
      m_3032_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3032_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.info.push(reader.int32());
            } else message.info.push(reader.int32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3032_toc;
    }();
    $root.e_red_point = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "reward"] = 1;
      values[valuesById[2] = "task_free"] = 2;
      values[valuesById[3] = "feedback"] = 3;
      values[valuesById[4] = "red_bag"] = 4;
      values[valuesById[5] = "not_get_reward"] = 5;
      return values;
    }();
    $root.m_3033_toc = function() {
      function m_3033_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3033_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_3033_toc.prototype.val = 0;
      m_3033_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        null != message.val && message.hasOwnProperty("val") && writer.uint32(16).uint32(message.val);
        return writer;
      };
      m_3033_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3033_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_3033_toc;
    }();
    $root.m_3034_toc = function() {
      function m_3034_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3034_toc.prototype.val = 0;
      m_3034_toc.prototype.type = 1;
      m_3034_toc.prototype.flag = 0;
      m_3034_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.val);
        writer.uint32(16).int32(message.type);
        writer.uint32(24).uint32(message.flag);
        return writer;
      };
      m_3034_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3034_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.val = reader.uint32();
            break;

           case 2:
            message.type = reader.int32();
            break;

           case 3:
            message.flag = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("flag")) throw $util.ProtocolError("missing required 'flag'", {
          instance: message
        });
        return message;
      };
      return m_3034_toc;
    }();
    $root.m_3035_tos = function() {
      function m_3035_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3035_tos.prototype.content = "";
      m_3035_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.content);
        return writer;
      };
      m_3035_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3035_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.content = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("content")) throw $util.ProtocolError("missing required 'content'", {
          instance: message
        });
        return message;
      };
      return m_3035_tos;
    }();
    $root.m_3036_toc = function() {
      function m_3036_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3036_toc.prototype.info = $util.emptyArray;
      m_3036_toc.prototype.state = false;
      m_3036_toc.prototype.time = 0;
      m_3036_toc.prototype.auto_reply = "";
      m_3036_toc.prototype.url = "";
      m_3036_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_feedback.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        writer.uint32(16).bool(message.state);
        writer.uint32(24).uint32(message.time);
        writer.uint32(34).string(message.auto_reply);
        writer.uint32(42).string(message.url);
        return writer;
      };
      m_3036_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3036_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_feedback.decode(reader, reader.uint32()));
            break;

           case 2:
            message.state = reader.bool();
            break;

           case 3:
            message.time = reader.uint32();
            break;

           case 4:
            message.auto_reply = reader.string();
            break;

           case 5:
            message.url = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("auto_reply")) throw $util.ProtocolError("missing required 'auto_reply'", {
          instance: message
        });
        if (!message.hasOwnProperty("url")) throw $util.ProtocolError("missing required 'url'", {
          instance: message
        });
        return message;
      };
      return m_3036_toc;
    }();
    $root.p_feedback = function() {
      function p_feedback(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_feedback.prototype.role_id = 0;
      p_feedback.prototype.content = "";
      p_feedback.prototype.time = 0;
      p_feedback.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        writer.uint32(18).string(message.content);
        writer.uint32(24).uint32(message.time);
        return writer;
      };
      p_feedback.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_feedback();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.content = reader.string();
            break;

           case 3:
            message.time = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("content")) throw $util.ProtocolError("missing required 'content'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return p_feedback;
    }();
    $root.m_3037_tos = function() {
      function m_3037_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3037_tos.prototype.type = 0;
      m_3037_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.type);
        return writer;
      };
      m_3037_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3037_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_3037_tos;
    }();
    $root.m_3038_toc = function() {
      function m_3038_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3038_toc.prototype.state = false;
      m_3038_toc.prototype.val = 0;
      m_3038_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).bool(message.state);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      m_3038_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3038_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.state = reader.bool();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("state")) throw $util.ProtocolError("missing required 'state'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return m_3038_toc;
    }();
    $root.m_3039_toc = function() {
      function m_3039_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3039_toc.prototype.val = 0;
      m_3039_toc.prototype.balance = 0;
      m_3039_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.val);
        writer.uint32(16).uint32(message.balance);
        return writer;
      };
      m_3039_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3039_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.val = reader.uint32();
            break;

           case 2:
            message.balance = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_3039_toc;
    }();
    $root.m_3040_tos = function() {
      function m_3040_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3040_tos.prototype.code = "";
      m_3040_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.code);
        return writer;
      };
      m_3040_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3040_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.code = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("code")) throw $util.ProtocolError("missing required 'code'", {
          instance: message
        });
        return message;
      };
      return m_3040_tos;
    }();
    $root.m_3040_toc = function() {
      function m_3040_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3040_toc.prototype.name = "";
      m_3040_toc.prototype.icon = "";
      m_3040_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.name);
        writer.uint32(18).string(message.icon);
        return writer;
      };
      m_3040_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3040_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.name = reader.string();
            break;

           case 2:
            message.icon = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("icon")) throw $util.ProtocolError("missing required 'icon'", {
          instance: message
        });
        return message;
      };
      return m_3040_toc;
    }();
    $root.m_3041_tos = function() {
      function m_3041_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3041_tos.prototype.password = "";
      m_3041_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.password);
        return writer;
      };
      m_3041_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3041_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.password = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("password")) throw $util.ProtocolError("missing required 'password'", {
          instance: message
        });
        return message;
      };
      return m_3041_tos;
    }();
    $root.m_3042_tos = function() {
      function m_3042_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3042_tos.prototype.code = "";
      m_3042_tos.prototype.password = "";
      m_3042_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.code);
        writer.uint32(18).string(message.password);
        return writer;
      };
      m_3042_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3042_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.code = reader.string();
            break;

           case 2:
            message.password = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("code")) throw $util.ProtocolError("missing required 'code'", {
          instance: message
        });
        if (!message.hasOwnProperty("password")) throw $util.ProtocolError("missing required 'password'", {
          instance: message
        });
        return message;
      };
      return m_3042_tos;
    }();
    $root.m_3043_toc = function() {
      function m_3043_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3043_toc.prototype.list = $util.emptyArray;
      m_3043_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_not_get_reward.encode(message.list[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3043_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3043_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_not_get_reward.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3043_toc;
    }();
    $root.p_not_get_reward = function() {
      function p_not_get_reward(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_not_get_reward.prototype.val = 0;
      p_not_get_reward.prototype.val_type = 1;
      p_not_get_reward.prototype.type = 1;
      p_not_get_reward.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.val);
        writer.uint32(16).int32(message.val_type);
        writer.uint32(24).int32(message.type);
        return writer;
      };
      p_not_get_reward.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_not_get_reward();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.val = reader.uint32();
            break;

           case 2:
            message.val_type = reader.int32();
            break;

           case 3:
            message.type = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        if (!message.hasOwnProperty("val_type")) throw $util.ProtocolError("missing required 'val_type'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return p_not_get_reward;
    }();
    $root.e_reward_type = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "daily_task"] = 1;
      values[valuesById[2] = "profit_rank"] = 2;
      values[valuesById[3] = "zoo_profit_rank"] = 3;
      values[valuesById[4] = "deposit_return"] = 4;
      return values;
    }();
    $root.m_3044_tos = function() {
      function m_3044_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3044_tos.prototype.type = 1;
      m_3044_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.type);
        return writer;
      };
      m_3044_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3044_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_3044_tos;
    }();
    $root.m_3044_toc = function() {
      function m_3044_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3044_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_3044_toc.prototype.val = 0;
      m_3044_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      m_3044_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3044_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return m_3044_toc;
    }();
    $root.m_3045_toc = function() {
      function m_3045_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3045_toc.prototype.list = $util.emptyArray;
      m_3045_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_game_ad.encode(message.list[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3045_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3045_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_game_ad.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3045_toc;
    }();
    $root.p_game_ad = function() {
      function p_game_ad(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_game_ad.prototype.id = 0;
      p_game_ad.prototype.url = "";
      p_game_ad.prototype.type = 1;
      p_game_ad.prototype.href = "";
      p_game_ad.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(18).string(message.url);
        writer.uint32(24).int32(message.type);
        null != message.href && message.hasOwnProperty("href") && writer.uint32(34).string(message.href);
        return writer;
      };
      p_game_ad.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_game_ad();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.url = reader.string();
            break;

           case 3:
            message.type = reader.int32();
            break;

           case 4:
            message.href = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("url")) throw $util.ProtocolError("missing required 'url'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return p_game_ad;
    }();
    $root.m_3046_toc = function() {
      function m_3046_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3046_toc.prototype.info = $util.emptyArray;
      m_3046_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_profit_setting.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3046_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3046_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_profit_setting.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3046_toc;
    }();
    $root.p_profit_setting = function() {
      function p_profit_setting(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_profit_setting.prototype.id = 0;
      p_profit_setting.prototype.val = 0;
      p_profit_setting.prototype.win = 0;
      p_profit_setting.prototype.type = 1;
      p_profit_setting.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.val);
        writer.uint32(24).uint32(message.win);
        writer.uint32(32).int32(message.type);
        return writer;
      };
      p_profit_setting.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_profit_setting();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           case 3:
            message.win = reader.uint32();
            break;

           case 4:
            message.type = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return p_profit_setting;
    }();
    $root.m_3047_toc = function() {
      function m_3047_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3047_toc.prototype.status = false;
      m_3047_toc.prototype.list = $util.emptyArray;
      m_3047_toc.prototype.remark = "";
      m_3047_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).bool(message.status);
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) writer.uint32(18).string(message.list[i]);
        writer.uint32(26).string(message.remark);
        return writer;
      };
      m_3047_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3047_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.status = reader.bool();
            break;

           case 2:
            message.list && message.list.length || (message.list = []);
            message.list.push(reader.string());
            break;

           case 3:
            message.remark = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("status")) throw $util.ProtocolError("missing required 'status'", {
          instance: message
        });
        if (!message.hasOwnProperty("remark")) throw $util.ProtocolError("missing required 'remark'", {
          instance: message
        });
        return message;
      };
      return m_3047_toc;
    }();
    $root.m_3048_tos = function() {
      function m_3048_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3048_tos.prototype.flag = 0;
      m_3048_tos.prototype.val = 0;
      m_3048_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.flag);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      m_3048_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3048_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.flag = reader.uint32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("flag")) throw $util.ProtocolError("missing required 'flag'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return m_3048_tos;
    }();
    $root.m_3048_toc = function() {
      function m_3048_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3048_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_3048_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        return writer;
      };
      m_3048_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3048_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_3048_toc;
    }();
    $root.m_3049_toc = function() {
      function m_3049_toc(properties) {
        this.cards = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3049_toc.prototype.status = false;
      m_3049_toc.prototype.cards = $util.emptyArray;
      m_3049_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).bool(message.status);
        if (null != message.cards && message.cards.length) for (var i = 0; i < message.cards.length; ++i) $root.p_card.encode(message.cards[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      m_3049_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3049_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.status = reader.bool();
            break;

           case 2:
            message.cards && message.cards.length || (message.cards = []);
            message.cards.push($root.p_card.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("status")) throw $util.ProtocolError("missing required 'status'", {
          instance: message
        });
        return message;
      };
      return m_3049_toc;
    }();
    $root.p_card = function() {
      function p_card(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_card.prototype.id = 0;
      p_card.prototype.card_no = "";
      p_card.prototype.phone = "";
      p_card.prototype.agree_no = "";
      p_card.prototype.status = 0;
      p_card.prototype.create_time = "";
      p_card.prototype.update_time = "";
      p_card.prototype.order_id = "";
      p_card.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(18).string(message.card_no);
        writer.uint32(26).string(message.phone);
        null != message.agree_no && message.hasOwnProperty("agree_no") && writer.uint32(34).string(message.agree_no);
        writer.uint32(40).uint32(message.status);
        writer.uint32(50).string(message.create_time);
        writer.uint32(58).string(message.update_time);
        writer.uint32(66).string(message.order_id);
        return writer;
      };
      p_card.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_card();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.card_no = reader.string();
            break;

           case 3:
            message.phone = reader.string();
            break;

           case 4:
            message.agree_no = reader.string();
            break;

           case 5:
            message.status = reader.uint32();
            break;

           case 6:
            message.create_time = reader.string();
            break;

           case 7:
            message.update_time = reader.string();
            break;

           case 8:
            message.order_id = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("card_no")) throw $util.ProtocolError("missing required 'card_no'", {
          instance: message
        });
        if (!message.hasOwnProperty("phone")) throw $util.ProtocolError("missing required 'phone'", {
          instance: message
        });
        if (!message.hasOwnProperty("status")) throw $util.ProtocolError("missing required 'status'", {
          instance: message
        });
        if (!message.hasOwnProperty("create_time")) throw $util.ProtocolError("missing required 'create_time'", {
          instance: message
        });
        if (!message.hasOwnProperty("update_time")) throw $util.ProtocolError("missing required 'update_time'", {
          instance: message
        });
        if (!message.hasOwnProperty("order_id")) throw $util.ProtocolError("missing required 'order_id'", {
          instance: message
        });
        return message;
      };
      return p_card;
    }();
    $root.m_3050_toc = function() {
      function m_3050_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3050_toc.prototype.gateway_url = "";
      m_3050_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(18).string(message.gateway_url);
        return writer;
      };
      m_3050_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3050_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 2:
            message.gateway_url = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("gateway_url")) throw $util.ProtocolError("missing required 'gateway_url'", {
          instance: message
        });
        return message;
      };
      return m_3050_toc;
    }();
    $root.m_3051_tos = function() {
      function m_3051_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3051_tos.prototype.phone = "";
      m_3051_tos.prototype.card_no = "";
      m_3051_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.phone && message.hasOwnProperty("phone") && writer.uint32(10).string(message.phone);
        null != message.card_no && message.hasOwnProperty("card_no") && writer.uint32(18).string(message.card_no);
        return writer;
      };
      m_3051_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3051_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.phone = reader.string();
            break;

           case 2:
            message.card_no = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3051_tos;
    }();
    $root.m_3051_toc = function() {
      function m_3051_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3051_toc.prototype.id = 0;
      m_3051_toc.prototype.gateway_url = "";
      m_3051_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        null != message.gateway_url && message.hasOwnProperty("gateway_url") && writer.uint32(18).string(message.gateway_url);
        return writer;
      };
      m_3051_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3051_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.gateway_url = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_3051_toc;
    }();
    $root.m_3052_tos = function() {
      function m_3052_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3052_tos.prototype.id = 0;
      m_3052_tos.prototype.code = "";
      m_3052_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(18).string(message.code);
        return writer;
      };
      m_3052_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3052_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.code = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("code")) throw $util.ProtocolError("missing required 'code'", {
          instance: message
        });
        return message;
      };
      return m_3052_tos;
    }();
    $root.m_3054_tos = function() {
      function m_3054_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3054_tos.prototype.code = "";
      m_3054_tos.prototype.id = 0;
      m_3054_tos.prototype.type = 0;
      m_3054_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.code);
        writer.uint32(16).uint32(message.id);
        writer.uint32(24).uint32(message.type);
        return writer;
      };
      m_3054_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3054_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.code = reader.string();
            break;

           case 2:
            message.id = reader.uint32();
            break;

           case 3:
            message.type = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("code")) throw $util.ProtocolError("missing required 'code'", {
          instance: message
        });
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_3054_tos;
    }();
    $root.m_3054_toc = function() {
      function m_3054_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3054_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_3054_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.balance);
        return writer;
      };
      m_3054_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3054_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_3054_toc;
    }();
    $root.m_3056_tos = function() {
      function m_3056_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3056_tos.prototype.id = 0;
      m_3056_tos.prototype.card_id = 0;
      m_3056_tos.prototype.type = 0;
      m_3056_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.card_id);
        writer.uint32(24).uint32(message.type);
        return writer;
      };
      m_3056_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3056_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.card_id = reader.uint32();
            break;

           case 3:
            message.type = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("card_id")) throw $util.ProtocolError("missing required 'card_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_3056_tos;
    }();
    $root.m_3056_toc = function() {
      function m_3056_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3056_toc.prototype.id = 0;
      m_3056_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_3056_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint64(message.balance);
        return writer;
      };
      m_3056_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3056_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.balance = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_3056_toc;
    }();
    $root.m_3057_tos = function() {
      function m_3057_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3057_tos.prototype.id = 0;
      m_3057_tos.prototype.type = 0;
      m_3057_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.type);
        return writer;
      };
      m_3057_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3057_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.type = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return m_3057_tos;
    }();
    $root.m_3058_toc = function() {
      function m_3058_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3058_toc.prototype.url = "";
      m_3058_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.url);
        return writer;
      };
      m_3058_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3058_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.url = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("url")) throw $util.ProtocolError("missing required 'url'", {
          instance: message
        });
        return message;
      };
      return m_3058_toc;
    }();
    $root.m_3096_toc = function() {
      function m_3096_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3096_toc.prototype.info = $util.emptyArray;
      m_3096_toc.prototype.charge_channel = 0;
      m_3096_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_charge_info.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        writer.uint32(16).uint32(message.charge_channel);
        return writer;
      };
      m_3096_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3096_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_charge_info.decode(reader, reader.uint32()));
            break;

           case 2:
            message.charge_channel = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("charge_channel")) throw $util.ProtocolError("missing required 'charge_channel'", {
          instance: message
        });
        return message;
      };
      return m_3096_toc;
    }();
    $root.p_charge_info = function() {
      function p_charge_info(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_charge_info.prototype.charge_type = 0;
      p_charge_info.prototype.type = 0;
      p_charge_info.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(16).uint32(message.charge_type);
        writer.uint32(24).uint32(message.type);
        return writer;
      };
      p_charge_info.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_charge_info();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 2:
            message.charge_type = reader.uint32();
            break;

           case 3:
            message.type = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("charge_type")) throw $util.ProtocolError("missing required 'charge_type'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return p_charge_info;
    }();
    $root.m_3097_toc = function() {
      function m_3097_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3097_toc.prototype.info = null;
      m_3097_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_feedback.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3097_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3097_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_feedback.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_3097_toc;
    }();
    $root.m_3098_toc = function() {
      function m_3098_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3098_toc.prototype.val = 0;
      m_3098_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_3098_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.val);
        writer.uint32(16).uint64(message.balance);
        return writer;
      };
      m_3098_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3098_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.val = reader.uint32();
            break;

           case 2:
            message.balance = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_3098_toc;
    }();
    $root.m_3099_tos = function() {
      function m_3099_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3099_tos.prototype.error = "";
      m_3099_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(10).string(message.error);
        return writer;
      };
      m_3099_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3099_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.error = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("error")) throw $util.ProtocolError("missing required 'error'", {
          instance: message
        });
        return message;
      };
      return m_3099_tos;
    }();
    $root.m_3301_toc = function() {
      function m_3301_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3301_toc.prototype.list = $util.emptyArray;
      m_3301_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) writer.uint32(8).uint32(message.list[i]);
        return writer;
      };
      m_3301_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3301_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.list && message.list.length || (message.list = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.list.push(reader.uint32());
            } else message.list.push(reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3301_toc;
    }();
    $root.m_3302_tos = function() {
      function m_3302_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3302_tos.prototype.val = 0;
      m_3302_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.val);
        return writer;
      };
      m_3302_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3302_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return m_3302_tos;
    }();
    $root.m_3303_tos = function() {
      function m_3303_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3303_tos.prototype.under = 0;
      m_3303_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.under);
        return writer;
      };
      m_3303_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3303_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.under = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("under")) throw $util.ProtocolError("missing required 'under'", {
          instance: message
        });
        return message;
      };
      return m_3303_tos;
    }();
    $root.m_3303_toc = function() {
      function m_3303_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3303_toc.prototype.info = null;
      m_3303_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_rps_info.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3303_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3303_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_rps_info.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_3303_toc;
    }();
    $root.m_3304_tos = function() {
      function m_3304_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3304_tos.prototype.room_id = 0;
      m_3304_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.room_id);
        return writer;
      };
      m_3304_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3304_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.room_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("room_id")) throw $util.ProtocolError("missing required 'room_id'", {
          instance: message
        });
        return message;
      };
      return m_3304_tos;
    }();
    $root.m_3304_toc = function() {
      function m_3304_toc(properties) {
        this.list = [];
        this.bet_list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3304_toc.prototype.list = $util.emptyArray;
      m_3304_toc.prototype.status = 1;
      m_3304_toc.prototype.info = null;
      m_3304_toc.prototype.time = 0;
      m_3304_toc.prototype.bet_list = $util.emptyArray;
      m_3304_toc.prototype.room_id = 0;
      m_3304_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_player.encode(message.list[i], writer.uint32(10).fork()).ldelim();
        writer.uint32(16).int32(message.status);
        null != message.info && message.hasOwnProperty("info") && $root.p_rps_info.encode(message.info, writer.uint32(26).fork()).ldelim();
        writer.uint32(32).uint32(message.time);
        if (null != message.bet_list && message.bet_list.length) for (var i = 0; i < message.bet_list.length; ++i) $root.p_rps_select.encode(message.bet_list[i], writer.uint32(42).fork()).ldelim();
        null != message.room_id && message.hasOwnProperty("room_id") && writer.uint32(48).uint32(message.room_id);
        return writer;
      };
      m_3304_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3304_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_player.decode(reader, reader.uint32()));
            break;

           case 2:
            message.status = reader.int32();
            break;

           case 3:
            message.info = $root.p_rps_info.decode(reader, reader.uint32());
            break;

           case 4:
            message.time = reader.uint32();
            break;

           case 5:
            message.bet_list && message.bet_list.length || (message.bet_list = []);
            message.bet_list.push($root.p_rps_select.decode(reader, reader.uint32()));
            break;

           case 6:
            message.room_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("status")) throw $util.ProtocolError("missing required 'status'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return m_3304_toc;
    }();
    $root.p_rps_info = function() {
      function p_rps_info(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_rps_info.prototype.owner = 0;
      p_rps_info.prototype.under = 0;
      p_rps_info.prototype.room_id = 0;
      p_rps_info.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.owner);
        writer.uint32(16).uint32(message.under);
        writer.uint32(24).uint32(message.room_id);
        return writer;
      };
      p_rps_info.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_rps_info();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.owner = reader.uint32();
            break;

           case 2:
            message.under = reader.uint32();
            break;

           case 3:
            message.room_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("owner")) throw $util.ProtocolError("missing required 'owner'", {
          instance: message
        });
        if (!message.hasOwnProperty("under")) throw $util.ProtocolError("missing required 'under'", {
          instance: message
        });
        if (!message.hasOwnProperty("room_id")) throw $util.ProtocolError("missing required 'room_id'", {
          instance: message
        });
        return message;
      };
      return p_rps_info;
    }();
    $root.m_3305_tos = function() {
      function m_3305_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3305_tos.prototype.under = 0;
      m_3305_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.under);
        return writer;
      };
      m_3305_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3305_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.under = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("under")) throw $util.ProtocolError("missing required 'under'", {
          instance: message
        });
        return message;
      };
      return m_3305_tos;
    }();
    $root.m_3307_tos = function() {
      function m_3307_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3307_tos.prototype.rps = 1;
      m_3307_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.rps);
        return writer;
      };
      m_3307_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3307_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.rps = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("rps")) throw $util.ProtocolError("missing required 'rps'", {
          instance: message
        });
        return message;
      };
      return m_3307_tos;
    }();
    $root.e_rps = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "rock"] = 1;
      values[valuesById[2] = "scissors"] = 2;
      values[valuesById[3] = "paper"] = 3;
      return values;
    }();
    $root.m_3308_tos = function() {
      function m_3308_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3308_tos.prototype.rps = 1;
      m_3308_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.rps);
        return writer;
      };
      m_3308_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3308_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.rps = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("rps")) throw $util.ProtocolError("missing required 'rps'", {
          instance: message
        });
        return message;
      };
      return m_3308_tos;
    }();
    $root.m_3309_toc = function() {
      function m_3309_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3309_toc.prototype.list = $util.emptyArray;
      m_3309_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_rps_log.encode(message.list[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3309_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3309_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_rps_log.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3309_toc;
    }();
    $root.p_rps_log = function() {
      function p_rps_log(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_rps_log.prototype.list = $util.emptyArray;
      p_rps_log.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_rps_select.encode(message.list[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      p_rps_log.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_rps_log();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_rps_select.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return p_rps_log;
    }();
    $root.m_3312_toc = function() {
      function m_3312_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3312_toc.prototype.players = null;
      m_3312_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_player.encode(message.players, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3312_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3312_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.players = $root.p_player.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("players")) throw $util.ProtocolError("missing required 'players'", {
          instance: message
        });
        return message;
      };
      return m_3312_toc;
    }();
    $root.m_3313_toc = function() {
      function m_3313_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3313_toc.prototype.players = null;
      m_3313_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_player.encode(message.players, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3313_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3313_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.players = $root.p_player.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("players")) throw $util.ProtocolError("missing required 'players'", {
          instance: message
        });
        return message;
      };
      return m_3313_toc;
    }();
    $root.m_3399_toc = function() {
      function m_3399_toc(properties) {
        this.list = [];
        this.players = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3399_toc.prototype.time = 0;
      m_3399_toc.prototype.all_time = 0;
      m_3399_toc.prototype.status = 1;
      m_3399_toc.prototype.winner = 0;
      m_3399_toc.prototype.list = $util.emptyArray;
      m_3399_toc.prototype.balance = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_3399_toc.prototype.players = $util.emptyArray;
      m_3399_toc.prototype.room_info = null;
      m_3399_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.time);
        writer.uint32(16).uint32(message.all_time);
        writer.uint32(24).int32(message.status);
        null != message.winner && message.hasOwnProperty("winner") && writer.uint32(32).uint32(message.winner);
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_rps_select.encode(message.list[i], writer.uint32(42).fork()).ldelim();
        writer.uint32(48).uint64(message.balance);
        if (null != message.players && message.players.length) for (var i = 0; i < message.players.length; ++i) $root.p_player.encode(message.players[i], writer.uint32(58).fork()).ldelim();
        $root.p_rps_info.encode(message.room_info, writer.uint32(66).fork()).ldelim();
        return writer;
      };
      m_3399_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3399_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.time = reader.uint32();
            break;

           case 2:
            message.all_time = reader.uint32();
            break;

           case 3:
            message.status = reader.int32();
            break;

           case 4:
            message.winner = reader.uint32();
            break;

           case 5:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_rps_select.decode(reader, reader.uint32()));
            break;

           case 6:
            message.balance = reader.uint64();
            break;

           case 7:
            message.players && message.players.length || (message.players = []);
            message.players.push($root.p_player.decode(reader, reader.uint32()));
            break;

           case 8:
            message.room_info = $root.p_rps_info.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("all_time")) throw $util.ProtocolError("missing required 'all_time'", {
          instance: message
        });
        if (!message.hasOwnProperty("status")) throw $util.ProtocolError("missing required 'status'", {
          instance: message
        });
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        if (!message.hasOwnProperty("room_info")) throw $util.ProtocolError("missing required 'room_info'", {
          instance: message
        });
        return message;
      };
      return m_3399_toc;
    }();
    $root.p_rps_select = function() {
      function p_rps_select(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_rps_select.prototype.role_id = 0;
      p_rps_select.prototype.rps = 1;
      p_rps_select.prototype.win_val = 0;
      p_rps_select.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        writer.uint32(16).int32(message.rps);
        null != message.win_val && message.hasOwnProperty("win_val") && writer.uint32(24).uint32(message.win_val);
        return writer;
      };
      p_rps_select.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_rps_select();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.rps = reader.int32();
            break;

           case 3:
            message.win_val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("rps")) throw $util.ProtocolError("missing required 'rps'", {
          instance: message
        });
        return message;
      };
      return p_rps_select;
    }();
    $root.m_3398_toc = function() {
      function m_3398_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3398_toc.prototype.role_id = 0;
      m_3398_toc.prototype.rps = 1;
      m_3398_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        writer.uint32(16).int32(message.rps);
        return writer;
      };
      m_3398_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3398_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.rps = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        if (!message.hasOwnProperty("rps")) throw $util.ProtocolError("missing required 'rps'", {
          instance: message
        });
        return message;
      };
      return m_3398_toc;
    }();
    $root.m_3396_toc = function() {
      function m_3396_toc(properties) {
        this.list = [];
        this.bet_list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3396_toc.prototype.list = $util.emptyArray;
      m_3396_toc.prototype.status = 1;
      m_3396_toc.prototype.info = null;
      m_3396_toc.prototype.time = 0;
      m_3396_toc.prototype.bet_list = $util.emptyArray;
      m_3396_toc.prototype.room_id = 0;
      m_3396_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_player.encode(message.list[i], writer.uint32(10).fork()).ldelim();
        writer.uint32(16).int32(message.status);
        null != message.info && message.hasOwnProperty("info") && $root.p_rps_info.encode(message.info, writer.uint32(26).fork()).ldelim();
        writer.uint32(32).uint32(message.time);
        if (null != message.bet_list && message.bet_list.length) for (var i = 0; i < message.bet_list.length; ++i) $root.p_rps_select.encode(message.bet_list[i], writer.uint32(42).fork()).ldelim();
        null != message.room_id && message.hasOwnProperty("room_id") && writer.uint32(48).uint32(message.room_id);
        return writer;
      };
      m_3396_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3396_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_player.decode(reader, reader.uint32()));
            break;

           case 2:
            message.status = reader.int32();
            break;

           case 3:
            message.info = $root.p_rps_info.decode(reader, reader.uint32());
            break;

           case 4:
            message.time = reader.uint32();
            break;

           case 5:
            message.bet_list && message.bet_list.length || (message.bet_list = []);
            message.bet_list.push($root.p_rps_select.decode(reader, reader.uint32()));
            break;

           case 6:
            message.room_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("status")) throw $util.ProtocolError("missing required 'status'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return m_3396_toc;
    }();
    $root.m_3395_toc = function() {
      function m_3395_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3395_toc.prototype.rps = 1;
      m_3395_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.rps);
        return writer;
      };
      m_3395_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3395_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.rps = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("rps")) throw $util.ProtocolError("missing required 'rps'", {
          instance: message
        });
        return message;
      };
      return m_3395_toc;
    }();
    $root.m_3393_toc = function() {
      function m_3393_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3393_toc.prototype.rps_info = null;
      m_3393_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_rps_info.encode(message.rps_info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3393_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3393_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.rps_info = $root.p_rps_info.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("rps_info")) throw $util.ProtocolError("missing required 'rps_info'", {
          instance: message
        });
        return message;
      };
      return m_3393_toc;
    }();
    $root.e_room_status = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "open"] = 1;
      values[valuesById[2] = "bet"] = 2;
      values[valuesById[3] = "test"] = 3;
      values[valuesById[4] = "draw"] = 4;
      values[valuesById[5] = "stop"] = 5;
      return values;
    }();
    $root.p_player = function() {
      function p_player(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_player.prototype.role_id = 0;
      p_player.prototype.name = "";
      p_player.prototype.icon = "";
      p_player.prototype.flag = 0;
      p_player.prototype.balance = 0;
      p_player.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.role_id);
        null != message.name && message.hasOwnProperty("name") && writer.uint32(18).string(message.name);
        null != message.icon && message.hasOwnProperty("icon") && writer.uint32(26).string(message.icon);
        null != message.flag && message.hasOwnProperty("flag") && writer.uint32(32).uint32(message.flag);
        null != message.balance && message.hasOwnProperty("balance") && writer.uint32(40).uint32(message.balance);
        return writer;
      };
      p_player.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_player();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.role_id = reader.uint32();
            break;

           case 2:
            message.name = reader.string();
            break;

           case 3:
            message.icon = reader.string();
            break;

           case 4:
            message.flag = reader.uint32();
            break;

           case 5:
            message.balance = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("role_id")) throw $util.ProtocolError("missing required 'role_id'", {
          instance: message
        });
        return message;
      };
      return p_player;
    }();
    $root.m_3501_tos = function() {
      function m_3501_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3501_tos.prototype.room_id = 0;
      m_3501_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.room_id);
        return writer;
      };
      m_3501_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3501_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.room_id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("room_id")) throw $util.ProtocolError("missing required 'room_id'", {
          instance: message
        });
        return message;
      };
      return m_3501_tos;
    }();
    $root.m_3501_toc = function() {
      function m_3501_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3501_toc.prototype.info = null;
      m_3501_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_enter_singleton_info.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_3501_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3501_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_enter_singleton_info.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_3501_toc;
    }();
    $root.p_enter_singleton_info = function() {
      function p_enter_singleton_info(properties) {
        this.history = [];
        this.bets = [];
        this.self_bets = [];
        this.odds = [];
        this.chips = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_enter_singleton_info.prototype.room_status = 1;
      p_enter_singleton_info.prototype.rest_time = 0;
      p_enter_singleton_info.prototype.history = $util.emptyArray;
      p_enter_singleton_info.prototype.bets = $util.emptyArray;
      p_enter_singleton_info.prototype.self_bets = $util.emptyArray;
      p_enter_singleton_info.prototype.lim = 0;
      p_enter_singleton_info.prototype.min_bet = 0;
      p_enter_singleton_info.prototype.odds = $util.emptyArray;
      p_enter_singleton_info.prototype.round = 0;
      p_enter_singleton_info.prototype.chips = $util.emptyArray;
      p_enter_singleton_info.prototype.hands = 0;
      p_enter_singleton_info.prototype.last_hand = null;
      p_enter_singleton_info.prototype.addr = null;
      p_enter_singleton_info.prototype.is_live = false;
      p_enter_singleton_info.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.room_status);
        writer.uint32(16).uint32(message.rest_time);
        if (null != message.history && message.history.length) for (var i = 0; i < message.history.length; ++i) $root.p_singleton_history.encode(message.history[i], writer.uint32(26).fork()).ldelim();
        if (null != message.bets && message.bets.length) for (var i = 0; i < message.bets.length; ++i) $root.p_bet.encode(message.bets[i], writer.uint32(34).fork()).ldelim();
        if (null != message.self_bets && message.self_bets.length) for (var i = 0; i < message.self_bets.length; ++i) $root.p_bet.encode(message.self_bets[i], writer.uint32(42).fork()).ldelim();
        writer.uint32(48).uint32(message.lim);
        writer.uint32(56).uint32(message.min_bet);
        if (null != message.odds && message.odds.length) for (var i = 0; i < message.odds.length; ++i) $root.p_odds.encode(message.odds[i], writer.uint32(66).fork()).ldelim();
        null != message.round && message.hasOwnProperty("round") && writer.uint32(72).uint32(message.round);
        if (null != message.chips && message.chips.length) for (var i = 0; i < message.chips.length; ++i) writer.uint32(80).uint32(message.chips[i]);
        null != message.hands && message.hasOwnProperty("hands") && writer.uint32(88).uint32(message.hands);
        $root.p_singleton_last_hand.encode(message.last_hand, writer.uint32(98).fork()).ldelim();
        null != message.addr && message.hasOwnProperty("addr") && $root.p_live_addr.encode(message.addr, writer.uint32(106).fork()).ldelim();
        null != message.is_live && message.hasOwnProperty("is_live") && writer.uint32(112).bool(message.is_live);
        return writer;
      };
      p_enter_singleton_info.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_enter_singleton_info();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.room_status = reader.int32();
            break;

           case 2:
            message.rest_time = reader.uint32();
            break;

           case 3:
            message.history && message.history.length || (message.history = []);
            message.history.push($root.p_singleton_history.decode(reader, reader.uint32()));
            break;

           case 4:
            message.bets && message.bets.length || (message.bets = []);
            message.bets.push($root.p_bet.decode(reader, reader.uint32()));
            break;

           case 5:
            message.self_bets && message.self_bets.length || (message.self_bets = []);
            message.self_bets.push($root.p_bet.decode(reader, reader.uint32()));
            break;

           case 6:
            message.lim = reader.uint32();
            break;

           case 7:
            message.min_bet = reader.uint32();
            break;

           case 8:
            message.odds && message.odds.length || (message.odds = []);
            message.odds.push($root.p_odds.decode(reader, reader.uint32()));
            break;

           case 9:
            message.round = reader.uint32();
            break;

           case 10:
            message.chips && message.chips.length || (message.chips = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.chips.push(reader.uint32());
            } else message.chips.push(reader.uint32());
            break;

           case 11:
            message.hands = reader.uint32();
            break;

           case 12:
            message.last_hand = $root.p_singleton_last_hand.decode(reader, reader.uint32());
            break;

           case 13:
            message.addr = $root.p_live_addr.decode(reader, reader.uint32());
            break;

           case 14:
            message.is_live = reader.bool();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("room_status")) throw $util.ProtocolError("missing required 'room_status'", {
          instance: message
        });
        if (!message.hasOwnProperty("rest_time")) throw $util.ProtocolError("missing required 'rest_time'", {
          instance: message
        });
        if (!message.hasOwnProperty("lim")) throw $util.ProtocolError("missing required 'lim'", {
          instance: message
        });
        if (!message.hasOwnProperty("min_bet")) throw $util.ProtocolError("missing required 'min_bet'", {
          instance: message
        });
        if (!message.hasOwnProperty("last_hand")) throw $util.ProtocolError("missing required 'last_hand'", {
          instance: message
        });
        return message;
      };
      return p_enter_singleton_info;
    }();
    $root.m_3511_toc = function() {
      function m_3511_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3511_toc.prototype.draw = null;
      m_3511_toc.prototype.rest_time = 0;
      m_3511_toc.prototype.balance = 0;
      m_3511_toc.prototype.win_val = 0;
      m_3511_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_singleton_draw.encode(message.draw, writer.uint32(10).fork()).ldelim();
        writer.uint32(16).uint32(message.rest_time);
        null != message.balance && message.hasOwnProperty("balance") && writer.uint32(24).uint32(message.balance);
        null != message.win_val && message.hasOwnProperty("win_val") && writer.uint32(32).uint32(message.win_val);
        return writer;
      };
      m_3511_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3511_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.draw = $root.p_singleton_draw.decode(reader, reader.uint32());
            break;

           case 2:
            message.rest_time = reader.uint32();
            break;

           case 3:
            message.balance = reader.uint32();
            break;

           case 4:
            message.win_val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("draw")) throw $util.ProtocolError("missing required 'draw'", {
          instance: message
        });
        if (!message.hasOwnProperty("rest_time")) throw $util.ProtocolError("missing required 'rest_time'", {
          instance: message
        });
        return message;
      };
      return m_3511_toc;
    }();
    $root.p_singleton_draw = function() {
      function p_singleton_draw(properties) {
        this.result = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_singleton_draw.prototype.result = $util.emptyArray;
      p_singleton_draw.prototype.flag = 0;
      p_singleton_draw.prototype.jp = 0;
      p_singleton_draw.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.result && message.result.length) for (var i = 0; i < message.result.length; ++i) writer.uint32(8).int32(message.result[i]);
        writer.uint32(16).int32(message.flag);
        null != message.jp && message.hasOwnProperty("jp") && writer.uint32(24).uint32(message.jp);
        return writer;
      };
      p_singleton_draw.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_singleton_draw();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.result && message.result.length || (message.result = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.result.push(reader.int32());
            } else message.result.push(reader.int32());
            break;

           case 2:
            message.flag = reader.int32();
            break;

           case 3:
            message.jp = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("flag")) throw $util.ProtocolError("missing required 'flag'", {
          instance: message
        });
        return message;
      };
      return p_singleton_draw;
    }();
    $root.m_3512_toc = function() {
      function m_3512_toc(properties) {
        this.cards = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3512_toc.prototype.rest_time = 0;
      m_3512_toc.prototype.warining = false;
      m_3512_toc.prototype.cards = $util.emptyArray;
      m_3512_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.rest_time);
        writer.uint32(16).bool(message.warining);
        if (null != message.cards && message.cards.length) for (var i = 0; i < message.cards.length; ++i) $root.p_vis_card.encode(message.cards[i], writer.uint32(26).fork()).ldelim();
        return writer;
      };
      m_3512_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3512_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.rest_time = reader.uint32();
            break;

           case 2:
            message.warining = reader.bool();
            break;

           case 3:
            message.cards && message.cards.length || (message.cards = []);
            message.cards.push($root.p_vis_card.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("rest_time")) throw $util.ProtocolError("missing required 'rest_time'", {
          instance: message
        });
        if (!message.hasOwnProperty("warining")) throw $util.ProtocolError("missing required 'warining'", {
          instance: message
        });
        return message;
      };
      return m_3512_toc;
    }();
    $root.p_singleton_last_hand = function() {
      function p_singleton_last_hand(properties) {
        this.vis_card = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_singleton_last_hand.prototype.flag = 0;
      p_singleton_last_hand.prototype.vis_card = $util.emptyArray;
      p_singleton_last_hand.prototype.jp = 0;
      p_singleton_last_hand.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.flag);
        if (null != message.vis_card && message.vis_card.length) for (var i = 0; i < message.vis_card.length; ++i) $root.p_vis_card.encode(message.vis_card[i], writer.uint32(18).fork()).ldelim();
        null != message.jp && message.hasOwnProperty("jp") && writer.uint32(24).uint32(message.jp);
        return writer;
      };
      p_singleton_last_hand.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_singleton_last_hand();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.flag = reader.int32();
            break;

           case 2:
            message.vis_card && message.vis_card.length || (message.vis_card = []);
            message.vis_card.push($root.p_vis_card.decode(reader, reader.uint32()));
            break;

           case 3:
            message.jp = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("flag")) throw $util.ProtocolError("missing required 'flag'", {
          instance: message
        });
        return message;
      };
      return p_singleton_last_hand;
    }();
    $root.p_vis_card = function() {
      function p_vis_card(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_vis_card.prototype.type = 1;
      p_vis_card.prototype.color = 1;
      p_vis_card.prototype.card = 1;
      p_vis_card.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.type);
        null != message.color && message.hasOwnProperty("color") && writer.uint32(16).int32(message.color);
        null != message.card && message.hasOwnProperty("card") && writer.uint32(24).int32(message.card);
        return writer;
      };
      p_vis_card.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_vis_card();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           case 2:
            message.color = reader.int32();
            break;

           case 3:
            message.card = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        return message;
      };
      return p_vis_card;
    }();
    $root.e_card_color = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "black_card"] = 1;
      values[valuesById[2] = "red_card"] = 2;
      return values;
    }();
    $root.e_vis_type = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "open_card"] = 1;
      values[valuesById[2] = "semi_card"] = 2;
      return values;
    }();
    $root.p_singleton_history = function() {
      function p_singleton_history(properties) {
        this.type = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_singleton_history.prototype.type = $util.emptyArray;
      p_singleton_history.prototype.flag = 0;
      p_singleton_history.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.type && message.type.length) for (var i = 0; i < message.type.length; ++i) writer.uint32(8).int32(message.type[i]);
        writer.uint32(16).int32(message.flag);
        return writer;
      };
      p_singleton_history.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_singleton_history();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type && message.type.length || (message.type = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.type.push(reader.int32());
            } else message.type.push(reader.int32());
            break;

           case 2:
            message.flag = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("flag")) throw $util.ProtocolError("missing required 'flag'", {
          instance: message
        });
        return message;
      };
      return p_singleton_history;
    }();
    $root.e_draw_flag = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[0] = "COMMON"] = 0;
      values[valuesById[1] = "VISIBLE"] = 1;
      values[valuesById[2] = "PRIZE"] = 2;
      return values;
    }();
    $root.m_1701_tos = function() {
      function m_1701_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1701_tos.prototype.type = 0;
      m_1701_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.type && message.hasOwnProperty("type") && writer.uint32(8).uint32(message.type);
        return writer;
      };
      m_1701_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1701_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1701_tos;
    }();
    $root.m_1701_toc = function() {
      function m_1701_toc(properties) {
        this.info = [];
        this.point = [];
        this.line = [];
        this.chips = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1701_toc.prototype.stage = 0;
      m_1701_toc.prototype.star_time = 0;
      m_1701_toc.prototype.end_time = 0;
      m_1701_toc.prototype.info = $util.emptyArray;
      m_1701_toc.prototype.history = null;
      m_1701_toc.prototype.tt_point = 0;
      m_1701_toc.prototype.point = $util.emptyArray;
      m_1701_toc.prototype.line = $util.emptyArray;
      m_1701_toc.prototype.rest_time_ud = 0;
      m_1701_toc.prototype.rest_time_num = 0;
      m_1701_toc.prototype.rest_time = 0;
      m_1701_toc.prototype.chips = $util.emptyArray;
      m_1701_toc.prototype.is_open = false;
      m_1701_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.stage);
        writer.uint32(16).uint32(message.star_time);
        writer.uint32(24).uint32(message.end_time);
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_stock_odds.encode(message.info[i], writer.uint32(34).fork()).ldelim();
        $root.p_stock_his.encode(message.history, writer.uint32(42).fork()).ldelim();
        writer.uint32(48).uint32(message.tt_point);
        if (null != message.point && message.point.length) for (var i = 0; i < message.point.length; ++i) writer.uint32(56).uint32(message.point[i]);
        if (null != message.line && message.line.length) for (var i = 0; i < message.line.length; ++i) writer.uint32(64).uint32(message.line[i]);
        writer.uint32(72).uint32(message.rest_time_ud);
        writer.uint32(80).uint32(message.rest_time_num);
        writer.uint32(88).uint32(message.rest_time);
        if (null != message.chips && message.chips.length) for (var i = 0; i < message.chips.length; ++i) writer.uint32(96).uint32(message.chips[i]);
        null != message.is_open && message.hasOwnProperty("is_open") && writer.uint32(104).bool(message.is_open);
        return writer;
      };
      m_1701_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1701_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.stage = reader.uint32();
            break;

           case 2:
            message.star_time = reader.uint32();
            break;

           case 3:
            message.end_time = reader.uint32();
            break;

           case 4:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_stock_odds.decode(reader, reader.uint32()));
            break;

           case 5:
            message.history = $root.p_stock_his.decode(reader, reader.uint32());
            break;

           case 6:
            message.tt_point = reader.uint32();
            break;

           case 7:
            message.point && message.point.length || (message.point = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.point.push(reader.uint32());
            } else message.point.push(reader.uint32());
            break;

           case 8:
            message.line && message.line.length || (message.line = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.line.push(reader.uint32());
            } else message.line.push(reader.uint32());
            break;

           case 9:
            message.rest_time_ud = reader.uint32();
            break;

           case 10:
            message.rest_time_num = reader.uint32();
            break;

           case 11:
            message.rest_time = reader.uint32();
            break;

           case 12:
            message.chips && message.chips.length || (message.chips = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.chips.push(reader.uint32());
            } else message.chips.push(reader.uint32());
            break;

           case 13:
            message.is_open = reader.bool();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("stage")) throw $util.ProtocolError("missing required 'stage'", {
          instance: message
        });
        if (!message.hasOwnProperty("star_time")) throw $util.ProtocolError("missing required 'star_time'", {
          instance: message
        });
        if (!message.hasOwnProperty("end_time")) throw $util.ProtocolError("missing required 'end_time'", {
          instance: message
        });
        if (!message.hasOwnProperty("history")) throw $util.ProtocolError("missing required 'history'", {
          instance: message
        });
        if (!message.hasOwnProperty("tt_point")) throw $util.ProtocolError("missing required 'tt_point'", {
          instance: message
        });
        if (!message.hasOwnProperty("rest_time_ud")) throw $util.ProtocolError("missing required 'rest_time_ud'", {
          instance: message
        });
        if (!message.hasOwnProperty("rest_time_num")) throw $util.ProtocolError("missing required 'rest_time_num'", {
          instance: message
        });
        if (!message.hasOwnProperty("rest_time")) throw $util.ProtocolError("missing required 'rest_time'", {
          instance: message
        });
        return message;
      };
      return m_1701_toc;
    }();
    $root.p_stock_his = function() {
      function p_stock_his(properties) {
        this.l1 = [];
        this.l2 = [];
        this.l3 = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_stock_his.prototype.l1 = $util.emptyArray;
      p_stock_his.prototype.l2 = $util.emptyArray;
      p_stock_his.prototype.l3 = $util.emptyArray;
      p_stock_his.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.l1 && message.l1.length) for (var i = 0; i < message.l1.length; ++i) writer.uint32(8).bool(message.l1[i]);
        if (null != message.l2 && message.l2.length) for (var i = 0; i < message.l2.length; ++i) writer.uint32(16).bool(message.l2[i]);
        if (null != message.l3 && message.l3.length) for (var i = 0; i < message.l3.length; ++i) writer.uint32(24).bool(message.l3[i]);
        return writer;
      };
      p_stock_his.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_stock_his();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.l1 && message.l1.length || (message.l1 = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.l1.push(reader.bool());
            } else message.l1.push(reader.bool());
            break;

           case 2:
            message.l2 && message.l2.length || (message.l2 = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.l2.push(reader.bool());
            } else message.l2.push(reader.bool());
            break;

           case 3:
            message.l3 && message.l3.length || (message.l3 = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.l3.push(reader.bool());
            } else message.l3.push(reader.bool());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return p_stock_his;
    }();
    $root.e_stock_odds = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "u1"] = 1;
      values[valuesById[2] = "d1"] = 2;
      values[valuesById[3] = "u2"] = 3;
      values[valuesById[4] = "d2"] = 4;
      values[valuesById[5] = "u3"] = 5;
      values[valuesById[6] = "d3"] = 6;
      values[valuesById[7] = "odd"] = 7;
      values[valuesById[8] = "even"] = 8;
      values[valuesById[9] = "s0"] = 9;
      values[valuesById[10] = "s1"] = 10;
      values[valuesById[11] = "s2"] = 11;
      values[valuesById[12] = "s3"] = 12;
      values[valuesById[13] = "s4"] = 13;
      values[valuesById[14] = "s5"] = 14;
      values[valuesById[15] = "s6"] = 15;
      values[valuesById[16] = "s7"] = 16;
      values[valuesById[17] = "s8"] = 17;
      values[valuesById[18] = "s9"] = 18;
      values[valuesById[19] = "a1"] = 19;
      values[valuesById[20] = "a2"] = 20;
      values[valuesById[21] = "a3"] = 21;
      values[valuesById[22] = "a4"] = 22;
      values[valuesById[23] = "a5"] = 23;
      values[valuesById[24] = "a6"] = 24;
      values[valuesById[25] = "a7"] = 25;
      values[valuesById[26] = "a8"] = 26;
      return values;
    }();
    $root.m_1702_tos = function() {
      function m_1702_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1702_tos.prototype.type = 1;
      m_1702_tos.prototype.val = 0;
      m_1702_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.type);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      m_1702_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1702_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return m_1702_tos;
    }();
    $root.m_1702_toc = function() {
      function m_1702_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1702_toc.prototype.balance = 0;
      m_1702_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.balance);
        return writer;
      };
      m_1702_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1702_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.balance = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_1702_toc;
    }();
    $root.m_1710_tos = function() {
      function m_1710_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1710_tos.prototype.type = 0;
      m_1710_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.type && message.hasOwnProperty("type") && writer.uint32(8).uint32(message.type);
        return writer;
      };
      m_1710_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1710_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1710_tos;
    }();
    $root.m_1710_toc = function() {
      function m_1710_toc(properties) {
        this.his = [];
        this.ms_t = [];
        this.ms_s = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1710_toc.prototype.his = $util.emptyArray;
      m_1710_toc.prototype.ms_t = $util.emptyArray;
      m_1710_toc.prototype.ms_s = $util.emptyArray;
      m_1710_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.his && message.his.length) for (var i = 0; i < message.his.length; ++i) $root.p_draw_history.encode(message.his[i], writer.uint32(10).fork()).ldelim();
        if (null != message.ms_t && message.ms_t.length) for (var i = 0; i < message.ms_t.length; ++i) $root.p_stock_miss.encode(message.ms_t[i], writer.uint32(18).fork()).ldelim();
        if (null != message.ms_s && message.ms_s.length) for (var i = 0; i < message.ms_s.length; ++i) $root.p_stock_miss.encode(message.ms_s[i], writer.uint32(26).fork()).ldelim();
        return writer;
      };
      m_1710_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1710_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.his && message.his.length || (message.his = []);
            message.his.push($root.p_draw_history.decode(reader, reader.uint32()));
            break;

           case 2:
            message.ms_t && message.ms_t.length || (message.ms_t = []);
            message.ms_t.push($root.p_stock_miss.decode(reader, reader.uint32()));
            break;

           case 3:
            message.ms_s && message.ms_s.length || (message.ms_s = []);
            message.ms_s.push($root.p_stock_miss.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1710_toc;
    }();
    $root.p_draw_history = function() {
      function p_draw_history(properties) {
        this.line = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_draw_history.prototype.stage = 0;
      p_draw_history.prototype.point = 0;
      p_draw_history.prototype.line = $util.emptyArray;
      p_draw_history.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.stage);
        writer.uint32(16).uint32(message.point);
        if (null != message.line && message.line.length) for (var i = 0; i < message.line.length; ++i) writer.uint32(24).uint32(message.line[i]);
        return writer;
      };
      p_draw_history.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_draw_history();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.stage = reader.uint32();
            break;

           case 2:
            message.point = reader.uint32();
            break;

           case 3:
            message.line && message.line.length || (message.line = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.line.push(reader.uint32());
            } else message.line.push(reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("stage")) throw $util.ProtocolError("missing required 'stage'", {
          instance: message
        });
        if (!message.hasOwnProperty("point")) throw $util.ProtocolError("missing required 'point'", {
          instance: message
        });
        return message;
      };
      return p_draw_history;
    }();
    $root.m_1711_tos = function() {
      function m_1711_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1711_tos.prototype.id = 0;
      m_1711_tos.prototype.num = 0;
      m_1711_tos.prototype.type = 0;
      m_1711_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(0).uint32(message.id);
        writer.uint32(8).uint32(message.num);
        null != message.type && message.hasOwnProperty("type") && writer.uint32(16).uint32(message.type);
        return writer;
      };
      m_1711_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1711_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 0:
            message.id = reader.uint32();
            break;

           case 1:
            message.num = reader.uint32();
            break;

           case 2:
            message.type = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        return message;
      };
      return m_1711_tos;
    }();
    $root.m_1711_toc = function() {
      function m_1711_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1711_toc.prototype.info = $util.emptyArray;
      m_1711_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_bet_history_sinple.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1711_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1711_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_bet_history_sinple.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1711_toc;
    }();
    $root.p_bet_history_sinple = function() {
      function p_bet_history_sinple(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_bet_history_sinple.prototype.id = 0;
      p_bet_history_sinple.prototype.stage = 0;
      p_bet_history_sinple.prototype.time = 0;
      p_bet_history_sinple.prototype.bet_val = 0;
      p_bet_history_sinple.prototype.win_val = 0;
      p_bet_history_sinple.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(16).uint32(message.stage);
        writer.uint32(24).uint32(message.time);
        writer.uint32(32).uint32(message.bet_val);
        writer.uint32(40).uint32(message.win_val);
        return writer;
      };
      p_bet_history_sinple.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_bet_history_sinple();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.stage = reader.uint32();
            break;

           case 3:
            message.time = reader.uint32();
            break;

           case 4:
            message.bet_val = reader.uint32();
            break;

           case 5:
            message.win_val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("stage")) throw $util.ProtocolError("missing required 'stage'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_val")) throw $util.ProtocolError("missing required 'bet_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("win_val")) throw $util.ProtocolError("missing required 'win_val'", {
          instance: message
        });
        return message;
      };
      return p_bet_history_sinple;
    }();
    $root.m_1712_tos = function() {
      function m_1712_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1712_tos.prototype.id = 0;
      m_1712_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        return writer;
      };
      m_1712_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1712_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_1712_tos;
    }();
    $root.m_1712_toc = function() {
      function m_1712_toc(properties) {
        this.lines = [];
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1712_toc.prototype.point = 0;
      m_1712_toc.prototype.lines = $util.emptyArray;
      m_1712_toc.prototype.info = $util.emptyArray;
      m_1712_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.point);
        if (null != message.lines && message.lines.length) for (var i = 0; i < message.lines.length; ++i) writer.uint32(16).uint32(message.lines[i]);
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_bet_history_detailed.encode(message.info[i], writer.uint32(26).fork()).ldelim();
        return writer;
      };
      m_1712_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1712_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.point = reader.uint32();
            break;

           case 2:
            message.lines && message.lines.length || (message.lines = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.lines.push(reader.uint32());
            } else message.lines.push(reader.uint32());
            break;

           case 3:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_bet_history_detailed.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("point")) throw $util.ProtocolError("missing required 'point'", {
          instance: message
        });
        return message;
      };
      return m_1712_toc;
    }();
    $root.p_bet_history_detailed = function() {
      function p_bet_history_detailed(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_bet_history_detailed.prototype.type = 1;
      p_bet_history_detailed.prototype.odds = 0;
      p_bet_history_detailed.prototype.bet_val = 0;
      p_bet_history_detailed.prototype.win_val = 0;
      p_bet_history_detailed.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.type);
        writer.uint32(16).uint32(message.odds);
        writer.uint32(24).uint32(message.bet_val);
        writer.uint32(32).uint32(message.win_val);
        return writer;
      };
      p_bet_history_detailed.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_bet_history_detailed();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           case 2:
            message.odds = reader.uint32();
            break;

           case 3:
            message.bet_val = reader.uint32();
            break;

           case 4:
            message.win_val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("odds")) throw $util.ProtocolError("missing required 'odds'", {
          instance: message
        });
        if (!message.hasOwnProperty("bet_val")) throw $util.ProtocolError("missing required 'bet_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("win_val")) throw $util.ProtocolError("missing required 'win_val'", {
          instance: message
        });
        return message;
      };
      return p_bet_history_detailed;
    }();
    $root.m_1720_toc = function() {
      function m_1720_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1720_toc.prototype.point = 0;
      m_1720_toc.prototype.info = $util.emptyArray;
      m_1720_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.point);
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_stock_odds_update.encode(message.info[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      m_1720_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1720_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.point = reader.uint32();
            break;

           case 2:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_stock_odds_update.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("point")) throw $util.ProtocolError("missing required 'point'", {
          instance: message
        });
        return message;
      };
      return m_1720_toc;
    }();
    $root.p_stock_odds_update = function() {
      function p_stock_odds_update(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_stock_odds_update.prototype.odds_type = 1;
      p_stock_odds_update.prototype.odds = 0;
      p_stock_odds_update.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.odds_type);
        writer.uint32(16).uint32(message.odds);
        return writer;
      };
      p_stock_odds_update.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_stock_odds_update();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.odds_type = reader.int32();
            break;

           case 2:
            message.odds = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("odds_type")) throw $util.ProtocolError("missing required 'odds_type'", {
          instance: message
        });
        if (!message.hasOwnProperty("odds")) throw $util.ProtocolError("missing required 'odds'", {
          instance: message
        });
        return message;
      };
      return p_stock_odds_update;
    }();
    $root.m_1721_toc = function() {
      function m_1721_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1721_toc.prototype.info = null;
      m_1721_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        $root.p_stock.encode(message.info, writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1721_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1721_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info = $root.p_stock.decode(reader, reader.uint32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("info")) throw $util.ProtocolError("missing required 'info'", {
          instance: message
        });
        return message;
      };
      return m_1721_toc;
    }();
    $root.p_stock = function() {
      function p_stock(properties) {
        this.odds = [];
        this.point = [];
        this.line = [];
        this.miss = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_stock.prototype.stage = 0;
      p_stock.prototype.star_time = 0;
      p_stock.prototype.end_time = 0;
      p_stock.prototype.odds = $util.emptyArray;
      p_stock.prototype.point = $util.emptyArray;
      p_stock.prototype.line = $util.emptyArray;
      p_stock.prototype.rest_time_ud = 0;
      p_stock.prototype.rest_time_num = 0;
      p_stock.prototype.rest_time = 0;
      p_stock.prototype.miss = $util.emptyArray;
      p_stock.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        null != message.stage && message.hasOwnProperty("stage") && writer.uint32(8).uint32(message.stage);
        null != message.star_time && message.hasOwnProperty("star_time") && writer.uint32(16).uint32(message.star_time);
        null != message.end_time && message.hasOwnProperty("end_time") && writer.uint32(24).uint32(message.end_time);
        if (null != message.odds && message.odds.length) for (var i = 0; i < message.odds.length; ++i) $root.p_stock_odds.encode(message.odds[i], writer.uint32(34).fork()).ldelim();
        if (null != message.point && message.point.length) for (var i = 0; i < message.point.length; ++i) writer.uint32(40).uint32(message.point[i]);
        if (null != message.line && message.line.length) for (var i = 0; i < message.line.length; ++i) writer.uint32(48).uint32(message.line[i]);
        null != message.rest_time_ud && message.hasOwnProperty("rest_time_ud") && writer.uint32(56).uint32(message.rest_time_ud);
        null != message.rest_time_num && message.hasOwnProperty("rest_time_num") && writer.uint32(64).uint32(message.rest_time_num);
        null != message.rest_time && message.hasOwnProperty("rest_time") && writer.uint32(72).uint32(message.rest_time);
        if (null != message.miss && message.miss.length) for (var i = 0; i < message.miss.length; ++i) $root.p_stock_miss.encode(message.miss[i], writer.uint32(82).fork()).ldelim();
        return writer;
      };
      p_stock.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_stock();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.stage = reader.uint32();
            break;

           case 2:
            message.star_time = reader.uint32();
            break;

           case 3:
            message.end_time = reader.uint32();
            break;

           case 4:
            message.odds && message.odds.length || (message.odds = []);
            message.odds.push($root.p_stock_odds.decode(reader, reader.uint32()));
            break;

           case 5:
            message.point && message.point.length || (message.point = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.point.push(reader.uint32());
            } else message.point.push(reader.uint32());
            break;

           case 6:
            message.line && message.line.length || (message.line = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.line.push(reader.uint32());
            } else message.line.push(reader.uint32());
            break;

           case 7:
            message.rest_time_ud = reader.uint32();
            break;

           case 8:
            message.rest_time_num = reader.uint32();
            break;

           case 9:
            message.rest_time = reader.uint32();
            break;

           case 10:
            message.miss && message.miss.length || (message.miss = []);
            message.miss.push($root.p_stock_miss.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return p_stock;
    }();
    $root.p_stock_miss = function() {
      function p_stock_miss(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_stock_miss.prototype.type = 1;
      p_stock_miss.prototype.val = 0;
      p_stock_miss.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.type);
        writer.uint32(16).uint32(message.val);
        return writer;
      };
      p_stock_miss.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_stock_miss();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.int32();
            break;

           case 2:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return p_stock_miss;
    }();
    $root.p_stock_odds = function() {
      function p_stock_odds(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_stock_odds.prototype.odds_type = 1;
      p_stock_odds.prototype.odds = 0;
      p_stock_odds.prototype.status = false;
      p_stock_odds.prototype.bet_val = 0;
      p_stock_odds.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.odds_type);
        null != message.odds && message.hasOwnProperty("odds") && writer.uint32(16).uint32(message.odds);
        null != message.status && message.hasOwnProperty("status") && writer.uint32(24).bool(message.status);
        null != message.bet_val && message.hasOwnProperty("bet_val") && writer.uint32(32).uint32(message.bet_val);
        return writer;
      };
      p_stock_odds.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_stock_odds();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.odds_type = reader.int32();
            break;

           case 2:
            message.odds = reader.uint32();
            break;

           case 3:
            message.status = reader.bool();
            break;

           case 4:
            message.bet_val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("odds_type")) throw $util.ProtocolError("missing required 'odds_type'", {
          instance: message
        });
        return message;
      };
      return p_stock_odds;
    }();
    $root.m_1722_toc = function() {
      function m_1722_toc(properties) {
        this.info = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1722_toc.prototype.info = $util.emptyArray;
      m_1722_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.info && message.info.length) for (var i = 0; i < message.info.length; ++i) $root.p_stock_key_status.encode(message.info[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_1722_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1722_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.info && message.info.length || (message.info = []);
            message.info.push($root.p_stock_key_status.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_1722_toc;
    }();
    $root.p_stock_key_status = function() {
      function p_stock_key_status(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_stock_key_status.prototype.odds_type = 1;
      p_stock_key_status.prototype.status = false;
      p_stock_key_status.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).int32(message.odds_type);
        writer.uint32(16).bool(message.status);
        return writer;
      };
      p_stock_key_status.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_stock_key_status();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.odds_type = reader.int32();
            break;

           case 2:
            message.status = reader.bool();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("odds_type")) throw $util.ProtocolError("missing required 'odds_type'", {
          instance: message
        });
        if (!message.hasOwnProperty("status")) throw $util.ProtocolError("missing required 'status'", {
          instance: message
        });
        return message;
      };
      return p_stock_key_status;
    }();
    $root.m_1723_toc = function() {
      function m_1723_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1723_toc.prototype.point = 0;
      m_1723_toc.prototype.win_val = 0;
      m_1723_toc.prototype.balance = 0;
      m_1723_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.point);
        writer.uint32(16).uint32(message.win_val);
        writer.uint32(24).uint32(message.balance);
        return writer;
      };
      m_1723_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1723_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.point = reader.uint32();
            break;

           case 2:
            message.win_val = reader.uint32();
            break;

           case 3:
            message.balance = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("point")) throw $util.ProtocolError("missing required 'point'", {
          instance: message
        });
        if (!message.hasOwnProperty("win_val")) throw $util.ProtocolError("missing required 'win_val'", {
          instance: message
        });
        if (!message.hasOwnProperty("balance")) throw $util.ProtocolError("missing required 'balance'", {
          instance: message
        });
        return message;
      };
      return m_1723_toc;
    }();
    $root.m_1725_toc = function() {
      function m_1725_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_1725_toc.prototype.is_open = false;
      m_1725_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).bool(message.is_open);
        return writer;
      };
      m_1725_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_1725_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.is_open = reader.bool();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("is_open")) throw $util.ProtocolError("missing required 'is_open'", {
          instance: message
        });
        return message;
      };
      return m_1725_toc;
    }();
    $root.m_9999_tos = function() {
      function m_9999_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_9999_tos.prototype.val = 0;
      m_9999_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.val);
        return writer;
      };
      m_9999_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_9999_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return m_9999_tos;
    }();
    $root.m_9999_toc = function() {
      function m_9999_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_9999_toc.prototype.val = 0;
      m_9999_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.val);
        return writer;
      };
      m_9999_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_9999_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return m_9999_toc;
    }();
    $root.m_2201_toc = function() {
      function m_2201_toc(properties) {
        this.result = [];
        this.mark = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2201_toc.prototype.time = 0;
      m_2201_toc.prototype.jack_prot = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_2201_toc.prototype.result = $util.emptyArray;
      m_2201_toc.prototype.num = 0;
      m_2201_toc.prototype.mark = $util.emptyArray;
      m_2201_toc.prototype.flag = 0;
      m_2201_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.time);
        writer.uint32(16).uint64(message.jack_prot);
        if (null != message.result && message.result.length) for (var i = 0; i < message.result.length; ++i) $root.p_treasure_result.encode(message.result[i], writer.uint32(26).fork()).ldelim();
        writer.uint32(32).uint32(message.num);
        if (null != message.mark && message.mark.length) for (var i = 0; i < message.mark.length; ++i) $root.p_treasure_result_mark.encode(message.mark[i], writer.uint32(42).fork()).ldelim();
        writer.uint32(48).uint32(message.flag);
        return writer;
      };
      m_2201_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2201_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.time = reader.uint32();
            break;

           case 2:
            message.jack_prot = reader.uint64();
            break;

           case 3:
            message.result && message.result.length || (message.result = []);
            message.result.push($root.p_treasure_result.decode(reader, reader.uint32()));
            break;

           case 4:
            message.num = reader.uint32();
            break;

           case 5:
            message.mark && message.mark.length || (message.mark = []);
            message.mark.push($root.p_treasure_result_mark.decode(reader, reader.uint32()));
            break;

           case 6:
            message.flag = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("jack_prot")) throw $util.ProtocolError("missing required 'jack_prot'", {
          instance: message
        });
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        if (!message.hasOwnProperty("flag")) throw $util.ProtocolError("missing required 'flag'", {
          instance: message
        });
        return message;
      };
      return m_2201_toc;
    }();
    $root.p_treasure_result = function() {
      function p_treasure_result(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_treasure_result.prototype.type = 0;
      p_treasure_result.prototype.id = 1;
      p_treasure_result.prototype.gold = 0;
      p_treasure_result.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.type);
        writer.uint32(16).int32(message.id);
        null != message.gold && message.hasOwnProperty("gold") && writer.uint32(24).uint32(message.gold);
        return writer;
      };
      p_treasure_result.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_treasure_result();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.uint32();
            break;

           case 2:
            message.id = reader.int32();
            break;

           case 3:
            message.gold = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return p_treasure_result;
    }();
    $root.p_treasure_result_mark = function() {
      function p_treasure_result_mark(properties) {
        this.id = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_treasure_result_mark.prototype.type = 0;
      p_treasure_result_mark.prototype.num = 0;
      p_treasure_result_mark.prototype.id = $util.emptyArray;
      p_treasure_result_mark.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.type);
        writer.uint32(16).uint32(message.num);
        if (null != message.id && message.id.length) for (var i = 0; i < message.id.length; ++i) writer.uint32(24).int32(message.id[i]);
        return writer;
      };
      p_treasure_result_mark.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_treasure_result_mark();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.type = reader.uint32();
            break;

           case 2:
            message.num = reader.uint32();
            break;

           case 3:
            message.id && message.id.length || (message.id = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.id.push(reader.int32());
            } else message.id.push(reader.int32());
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        return message;
      };
      return p_treasure_result_mark;
    }();
    $root.e_treasure_select = function() {
      var valuesById = {}, values = Object.create(valuesById);
      values[valuesById[1] = "jin"] = 1;
      values[valuesById[2] = "mu"] = 2;
      values[valuesById[3] = "shui"] = 3;
      values[valuesById[4] = "huo"] = 4;
      values[valuesById[5] = "tu"] = 5;
      values[valuesById[6] = "ri"] = 6;
      values[valuesById[7] = "yue"] = 7;
      values[valuesById[8] = "feng"] = 8;
      values[valuesById[9] = "yu"] = 9;
      values[valuesById[10] = "yun"] = 10;
      return values;
    }();
    $root.m_2203_tos = function() {
      function m_2203_tos(properties) {
        this.id_list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2203_tos.prototype.id_list = $util.emptyArray;
      m_2203_tos.prototype.bet_val = 0;
      m_2203_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.id_list && message.id_list.length) for (var i = 0; i < message.id_list.length; ++i) writer.uint32(8).int32(message.id_list[i]);
        writer.uint32(16).uint32(message.bet_val);
        return writer;
      };
      m_2203_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2203_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id_list && message.id_list.length || (message.id_list = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.id_list.push(reader.int32());
            } else message.id_list.push(reader.int32());
            break;

           case 2:
            message.bet_val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("bet_val")) throw $util.ProtocolError("missing required 'bet_val'", {
          instance: message
        });
        return message;
      };
      return m_2203_tos;
    }();
    $root.m_2203_toc = function() {
      function m_2203_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2203_toc.prototype.gold = 0;
      m_2203_toc.prototype.time = 0;
      m_2203_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.gold);
        writer.uint32(16).uint32(message.time);
        return writer;
      };
      m_2203_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2203_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.gold = reader.uint32();
            break;

           case 2:
            message.time = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("gold")) throw $util.ProtocolError("missing required 'gold'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return m_2203_toc;
    }();
    $root.m_2204_toc = function() {
      function m_2204_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2204_toc.prototype.jack_prot = 0;
      m_2204_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.jack_prot);
        return writer;
      };
      m_2204_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2204_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.jack_prot = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("jack_prot")) throw $util.ProtocolError("missing required 'jack_prot'", {
          instance: message
        });
        return message;
      };
      return m_2204_toc;
    }();
    $root.m_2205_toc = function() {
      function m_2205_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2205_toc.prototype.list = $util.emptyArray;
      m_2205_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_treasure_max.encode(message.list[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_2205_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2205_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_treasure_max.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_2205_toc;
    }();
    $root.p_treasure_max = function() {
      function p_treasure_max(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_treasure_max.prototype.num = 0;
      p_treasure_max.prototype.id = 1;
      p_treasure_max.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.num);
        writer.uint32(16).int32(message.id);
        return writer;
      };
      p_treasure_max.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_treasure_max();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.num = reader.uint32();
            break;

           case 2:
            message.id = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return p_treasure_max;
    }();
    $root.m_2206_toc = function() {
      function m_2206_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2206_toc.prototype.time = 0;
      m_2206_toc.prototype.list = $util.emptyArray;
      m_2206_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.time);
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_treasure_role.encode(message.list[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      m_2206_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2206_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.time = reader.uint32();
            break;

           case 2:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_treasure_role.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return m_2206_toc;
    }();
    $root.p_treasure_role = function() {
      function p_treasure_role(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_treasure_role.prototype.id = 0;
      p_treasure_role.prototype.name = "";
      p_treasure_role.prototype.icon = "";
      p_treasure_role.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(18).string(message.name);
        writer.uint32(26).string(message.icon);
        return writer;
      };
      p_treasure_role.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_treasure_role();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.name = reader.string();
            break;

           case 3:
            message.icon = reader.string();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("icon")) throw $util.ProtocolError("missing required 'icon'", {
          instance: message
        });
        return message;
      };
      return p_treasure_role;
    }();
    $root.m_2207_tos = function() {
      function m_2207_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2207_tos.prototype.flag = 0;
      m_2207_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.flag);
        return writer;
      };
      m_2207_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2207_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.flag = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("flag")) throw $util.ProtocolError("missing required 'flag'", {
          instance: message
        });
        return message;
      };
      return m_2207_tos;
    }();
    $root.m_2207_toc = function() {
      function m_2207_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2207_toc.prototype.list = $util.emptyArray;
      m_2207_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_treasure_select.encode(message.list[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_2207_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2207_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_treasure_select.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_2207_toc;
    }();
    $root.p_treasure_select = function() {
      function p_treasure_select(properties) {
        this.list = [];
        this.result = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_treasure_select.prototype.num = 0;
      p_treasure_select.prototype.time = 0;
      p_treasure_select.prototype.list = $util.emptyArray;
      p_treasure_select.prototype.all_time = 0;
      p_treasure_select.prototype.gold = 0;
      p_treasure_select.prototype.win = 0;
      p_treasure_select.prototype.result = $util.emptyArray;
      p_treasure_select.prototype.multiple = 0;
      p_treasure_select.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.num);
        writer.uint32(16).uint32(message.time);
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) writer.uint32(24).int32(message.list[i]);
        writer.uint32(32).uint32(message.all_time);
        writer.uint32(40).uint32(message.gold);
        writer.uint32(48).uint32(message.win);
        if (null != message.result && message.result.length) for (var i = 0; i < message.result.length; ++i) $root.p_treasure_result.encode(message.result[i], writer.uint32(58).fork()).ldelim();
        writer.uint32(64).uint32(message.multiple);
        return writer;
      };
      p_treasure_select.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_treasure_select();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.num = reader.uint32();
            break;

           case 2:
            message.time = reader.uint32();
            break;

           case 3:
            message.list && message.list.length || (message.list = []);
            if (2 === (7 & tag)) {
              var end2 = reader.uint32() + reader.pos;
              while (reader.pos < end2) message.list.push(reader.int32());
            } else message.list.push(reader.int32());
            break;

           case 4:
            message.all_time = reader.uint32();
            break;

           case 5:
            message.gold = reader.uint32();
            break;

           case 6:
            message.win = reader.uint32();
            break;

           case 7:
            message.result && message.result.length || (message.result = []);
            message.result.push($root.p_treasure_result.decode(reader, reader.uint32()));
            break;

           case 8:
            message.multiple = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("all_time")) throw $util.ProtocolError("missing required 'all_time'", {
          instance: message
        });
        if (!message.hasOwnProperty("gold")) throw $util.ProtocolError("missing required 'gold'", {
          instance: message
        });
        if (!message.hasOwnProperty("win")) throw $util.ProtocolError("missing required 'win'", {
          instance: message
        });
        if (!message.hasOwnProperty("multiple")) throw $util.ProtocolError("missing required 'multiple'", {
          instance: message
        });
        return message;
      };
      return p_treasure_select;
    }();
    $root.m_2208_toc = function() {
      function m_2208_toc(properties) {
        this.result = [];
        this.mark = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2208_toc.prototype.jack_prot = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_2208_toc.prototype.result = $util.emptyArray;
      m_2208_toc.prototype.num = 0;
      m_2208_toc.prototype.time = 0;
      m_2208_toc.prototype.mark = $util.emptyArray;
      m_2208_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.jack_prot);
        if (null != message.result && message.result.length) for (var i = 0; i < message.result.length; ++i) $root.p_treasure_result.encode(message.result[i], writer.uint32(18).fork()).ldelim();
        writer.uint32(24).uint32(message.num);
        writer.uint32(32).uint32(message.time);
        if (null != message.mark && message.mark.length) for (var i = 0; i < message.mark.length; ++i) $root.p_treasure_result_mark.encode(message.mark[i], writer.uint32(42).fork()).ldelim();
        return writer;
      };
      m_2208_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2208_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.jack_prot = reader.uint64();
            break;

           case 2:
            message.result && message.result.length || (message.result = []);
            message.result.push($root.p_treasure_result.decode(reader, reader.uint32()));
            break;

           case 3:
            message.num = reader.uint32();
            break;

           case 4:
            message.time = reader.uint32();
            break;

           case 5:
            message.mark && message.mark.length || (message.mark = []);
            message.mark.push($root.p_treasure_result_mark.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("jack_prot")) throw $util.ProtocolError("missing required 'jack_prot'", {
          instance: message
        });
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        return message;
      };
      return m_2208_toc;
    }();
    $root.m_2209_toc = function() {
      function m_2209_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2209_toc.prototype.gold = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_2209_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.gold);
        return writer;
      };
      m_2209_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2209_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.gold = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("gold")) throw $util.ProtocolError("missing required 'gold'", {
          instance: message
        });
        return message;
      };
      return m_2209_toc;
    }();
    $root.m_2210_toc = function() {
      function m_2210_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2210_toc.prototype.flag = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
      m_2210_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint64(message.flag);
        return writer;
      };
      m_2210_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2210_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.flag = reader.uint64();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("flag")) throw $util.ProtocolError("missing required 'flag'", {
          instance: message
        });
        return message;
      };
      return m_2210_toc;
    }();
    $root.m_2211_toc = function() {
      function m_2211_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_2211_toc.prototype.list = $util.emptyArray;
      m_2211_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_treasure_all_result.encode(message.list[i], writer.uint32(10).fork()).ldelim();
        return writer;
      };
      m_2211_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_2211_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_treasure_all_result.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_2211_toc;
    }();
    $root.p_treasure_all_result = function() {
      function p_treasure_all_result(properties) {
        this.result = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_treasure_all_result.prototype.num = 0;
      p_treasure_all_result.prototype.result = $util.emptyArray;
      p_treasure_all_result.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.num);
        if (null != message.result && message.result.length) for (var i = 0; i < message.result.length; ++i) $root.p_treasure_result.encode(message.result[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      p_treasure_all_result.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_treasure_all_result();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.num = reader.uint32();
            break;

           case 2:
            message.result && message.result.length || (message.result = []);
            message.result.push($root.p_treasure_result.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("num")) throw $util.ProtocolError("missing required 'num'", {
          instance: message
        });
        return message;
      };
      return p_treasure_all_result;
    }();
    $root.m_3701_toc = function() {
      function m_3701_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3701_toc.prototype.list = $util.emptyArray;
      m_3701_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_turntable.encode(message.list[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      m_3701_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3701_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 2:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_turntable.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        return message;
      };
      return m_3701_toc;
    }();
    $root.p_turntable = function() {
      function p_turntable(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_turntable.prototype.id = 0;
      p_turntable.prototype.name = "";
      p_turntable.prototype.val = 0;
      p_turntable.prototype.type = 1;
      p_turntable.prototype.time = 0;
      p_turntable.prototype.status = 1;
      p_turntable.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(18).string(message.name);
        writer.uint32(24).uint32(message.val);
        writer.uint32(32).int32(message.type);
        writer.uint32(40).uint32(message.time);
        writer.uint32(48).int32(message.status);
        return writer;
      };
      p_turntable.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_turntable();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.name = reader.string();
            break;

           case 3:
            message.val = reader.uint32();
            break;

           case 4:
            message.type = reader.int32();
            break;

           case 5:
            message.time = reader.uint32();
            break;

           case 6:
            message.status = reader.int32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("time")) throw $util.ProtocolError("missing required 'time'", {
          instance: message
        });
        if (!message.hasOwnProperty("status")) throw $util.ProtocolError("missing required 'status'", {
          instance: message
        });
        return message;
      };
      return p_turntable;
    }();
    $root.m_3702_toc = function() {
      function m_3702_toc(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3702_toc.prototype.flag = false;
      m_3702_toc.prototype.info = null;
      m_3702_toc.prototype.balance = 0;
      m_3702_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).bool(message.flag);
        null != message.info && message.hasOwnProperty("info") && $root.p_turntable_info.encode(message.info, writer.uint32(18).fork()).ldelim();
        null != message.balance && message.hasOwnProperty("balance") && writer.uint32(24).uint32(message.balance);
        return writer;
      };
      m_3702_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3702_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.flag = reader.bool();
            break;

           case 2:
            message.info = $root.p_turntable_info.decode(reader, reader.uint32());
            break;

           case 3:
            message.balance = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("flag")) throw $util.ProtocolError("missing required 'flag'", {
          instance: message
        });
        return message;
      };
      return m_3702_toc;
    }();
    $root.p_turntable_info = function() {
      function p_turntable_info(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      p_turntable_info.prototype.id = 0;
      p_turntable_info.prototype.name = "";
      p_turntable_info.prototype.type = 1;
      p_turntable_info.prototype.val = 0;
      p_turntable_info.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        writer.uint32(18).string(message.name);
        writer.uint32(24).int32(message.type);
        writer.uint32(32).uint32(message.val);
        return writer;
      };
      p_turntable_info.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.p_turntable_info();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           case 2:
            message.name = reader.string();
            break;

           case 3:
            message.type = reader.int32();
            break;

           case 4:
            message.val = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        if (!message.hasOwnProperty("name")) throw $util.ProtocolError("missing required 'name'", {
          instance: message
        });
        if (!message.hasOwnProperty("type")) throw $util.ProtocolError("missing required 'type'", {
          instance: message
        });
        if (!message.hasOwnProperty("val")) throw $util.ProtocolError("missing required 'val'", {
          instance: message
        });
        return message;
      };
      return p_turntable_info;
    }();
    $root.m_3703_tos = function() {
      function m_3703_tos(properties) {
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3703_tos.prototype.id = 0;
      m_3703_tos.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.id);
        return writer;
      };
      m_3703_tos.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3703_tos();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.id = reader.uint32();
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("id")) throw $util.ProtocolError("missing required 'id'", {
          instance: message
        });
        return message;
      };
      return m_3703_tos;
    }();
    $root.m_3704_toc = function() {
      function m_3704_toc(properties) {
        this.list = [];
        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) null != properties[keys[i]] && (this[keys[i]] = properties[keys[i]]);
      }
      m_3704_toc.prototype.turntable = 0;
      m_3704_toc.prototype.list = $util.emptyArray;
      m_3704_toc.encode = function encode(message, writer) {
        writer || (writer = $Writer.create());
        writer.uint32(8).uint32(message.turntable);
        if (null != message.list && message.list.length) for (var i = 0; i < message.list.length; ++i) $root.p_turntable_info.encode(message.list[i], writer.uint32(18).fork()).ldelim();
        return writer;
      };
      m_3704_toc.decode = function decode(reader, length) {
        reader instanceof $Reader || (reader = $Reader.create(reader));
        var end = void 0 === length ? reader.len : reader.pos + length, message = new $root.m_3704_toc();
        while (reader.pos < end) {
          var tag = reader.uint32();
          switch (tag >>> 3) {
           case 1:
            message.turntable = reader.uint32();
            break;

           case 2:
            message.list && message.list.length || (message.list = []);
            message.list.push($root.p_turntable_info.decode(reader, reader.uint32()));
            break;

           default:
            reader.skipType(7 & tag);
          }
        }
        if (!message.hasOwnProperty("turntable")) throw $util.ProtocolError("missing required 'turntable'", {
          instance: message
        });
        return message;
      };
      return m_3704_toc;
    }();
    module.exports = $root;
    cc._RF.pop();
  }, {} ]
}, {}, [ "GameCommonRes", "GameEntry", "GameLoadingProxy", "AnimalModuleCommand", "ChatModuleCommand", "LoginModuleCommand", "MissionModuleCommand", "RankModuleCommand", "RoleModuleCommand", "AsyncState", "Completer", "Decorator", "Delegate", "ModelBase", "ModelMessageManager", "ModelMessageObserver", "ModuleBase", "NodeStateListener", "NotificationManager", "TimerManager", "AudioName", "ErrorCodeType", "ModelMessage", "ModelMessageType", "ModuleInitor", "ModuleType", "UIDefine", "UIName", "LocalData", "LocalDataJson", "LocalDataKeyValue", "LocalDataUtil", "IProtoTransfer", "ProtoTransferBase", "SocketConnection", "SocketLoadingImpl", "Extends", "SafeAreaExtend", "AudioManager", "LayerManager", "PoolManager", "ResLoadManager", "PanelEffectAnimationHandler", "PanelEffectBlackFadeInOutHandler", "PanelEffectCustomHandler", "PanelEffectEmptyHandler", "PanelEffectFadeHandler", "PanelEffectMoveHandler", "PanelEffectScaleHandler", "PanelEffectSlideHandler", "PanelEffectUtil", "AnimalModel", "ChatModel", "LoginModel", "MissionModel", "RankModel", "RedpointModel", "RoleModel", "AnimalModuleController", "ChatModuleController", "LoginModuleController", "MissionModuleController", "RankModuleController", "RoleModuleController", "ProtoTransfer", "proto", "ErrorCodeUtil", "LocalStorageUtil", "MathUtil", "NativeUtil", "ObjectUtil", "ResourceUtil", "StringUtil", "BaseComponent", "Config", "ModelMessageCarer", "UIDisconnect", "UIInvalidToken", "UILoading", "UIRedpointCommonHolder", "UIRedpointMultiHolder", "UIStartLoading", "Alert", "ApiService", "DragTarget", "EffectImage", "ImageSheet", "LightFlow", "Md5Utils", "QRCodeGenerator", "RepeatClicker", "ResizeWatcher", "RichTextClickHandler", "RotateTarget", "ScreenCapture", "ScrollMultiView", "ScrollSlideView", "ScrollView", "ScrollVirtualGrid", "ScrollVirtualList", "SocketLoadingView", "Tabbar", "TipView", "ToggleSwitch", "VibratorManager", "UIHome", "CaptureRecordItem", "CjRecordItem", "HelpItem", "HomeHead", "RecentRewardItem", "ScrollItem", "TaskItem", "CriIcon", "IceIcon", "UIZooCriDown", "UIZooCriStart", "UIZooIceSkill", "UICaptureRecord", "UICjRecord", "UIHelp", "UIRecentReward", "UIZooMenu", "UIZooPanel", "AnimalHitPolygonConfig", "AnimalManager", "PikaqiuSkillHandler", "ZooAnimal", "PlayerHead", "SelfHead", "WinText", "ZooAnimalWin", "ZooBombCome", "ZooBuff", "ZooCjWin", "ZooDinosaurCome", "ZooRedbag", "ZooTask" ]);